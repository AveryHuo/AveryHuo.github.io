{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","path":"img/article-list-background.jpeg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.autocomplete.min.js","path":"js/jquery.autocomplete.min.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/3-hexo/.DS_Store","hash":"0770f9d42bfdd8d420de48fed463015e001cf579","modified":1574653962678},{"_id":"themes/3-hexo/.git","hash":"fe2a0a3908ae1bdd926c9b286e67f07073f5be2a","modified":1574653962571},{"_id":"themes/3-hexo/.gitignore","hash":"5e85fe97e87211619c1db29fd3f3b0dbf16be4a7","modified":1574653962678},{"_id":"themes/3-hexo/README.md","hash":"d828af269e0c287e86e7754988466e6f323e3b92","modified":1574653962679},{"_id":"themes/3-hexo/_config.yml","hash":"9c176944582a672efc968b4ec26cf1e1b6b87619","modified":1574654256636},{"_id":"themes/3-hexo/layout/index.ejs","hash":"003421f9a57927aa85aa71905313badb0b47820e","modified":1574653962691},{"_id":"themes/3-hexo/layout/indexs.md","hash":"e98b27005c0fb0d7618ae3815654ac33f8c02313","modified":1574653962691},{"_id":"themes/3-hexo/layout/post.ejs","hash":"810f046277fc49f523a72d1552eab1e39d3c299c","modified":1574653962691},{"_id":"source/_posts/.DS_Store","hash":"998d695f6df497b3659af2eb20f24dedfbcb0092","modified":1574652348215},{"_id":"source/_posts/Centos 部署 Django.md","hash":"e102fc0b1fa21f01b6712a128f6408c98eb18be9","modified":1574652348217},{"_id":"source/_posts/CAD笔记.md","hash":"79e300f6938e08547d36959e2ada167b4be13b04","modified":1574652348215},{"_id":"source/_posts/Conda 常用操作.md","hash":"da11656aac207ba8b1f963f72b0c1127a23e3228","modified":1574652348218},{"_id":"source/_posts/Django  初始测试.md","hash":"59c9a3b987b72123c35372457e9eb670c41b0fcd","modified":1574652348218},{"_id":"source/_posts/Django  初步构建.md","hash":"255091cf23ae2ab1580c1743d706ed206a00c607","modified":1574652348218},{"_id":"source/_posts/Game Engine Architecture - English.md","hash":"503272420cdd0eb3dc6c395159bbe99cb7756beb","modified":1574652348219},{"_id":"source/_posts/Game Engine Architecture - Foundations Part1.md","hash":"4d4228bf4c3cbdcbbc738af1f95d5bb1d88afa01","modified":1574652348219},{"_id":"source/_posts/Jenkins打包事项.md","hash":"5f3c3ff8b62ab7398f815ffef48a60a422eed556","modified":1574652348220},{"_id":"source/_posts/Linux与window常用指令.md","hash":"643a75530edca84c7c8b39a9f71ce909ddc17f65","modified":1574652348220},{"_id":"source/_posts/Django 实例 Web Application.md","hash":"293f2e9ddb35f233f7e82a8f227a744ca3ffa1da","modified":1574652348219},{"_id":"source/_posts/Python Core Programming Note 3.md","hash":"2672bf21f3a7c5d4d58fa6a01271fc89bc6857ee","modified":1574652348221},{"_id":"source/.DS_Store","hash":"4df03d7ea4128af9fa2a6fcf09400677314490b7","modified":1570874486487},{"_id":"source/_posts/Smargit  简单使用说明.md","hash":"f2ff1388e7d52157acf4a2ca7384e2af8e32bf2a","modified":1574652348221},{"_id":"source/_posts/Python Core Programming Note 1.md","hash":"b2f96636fbb2ab910d966e4a9355511041f949ba","modified":1570874486488},{"_id":"source/_posts/Python Core Programming Note 2.md","hash":"691d450d238b1af7684248c3577abaf40f831475","modified":1570874486488},{"_id":"source/_posts/Python 杂项.md","hash":"a95f93289dcfeef98f071d372ce5c16260a150c5","modified":1570874486489},{"_id":"source/_posts/Python_3.md","hash":"b80ddf4250a643c8e05ee2f4643ea091d05ba876","modified":1570874486493},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1570874486493},{"_id":"source/_posts/python_1.md","hash":"8d1b32c387635f3ef3464bafd159ce400f5bb327","modified":1570874486500},{"_id":"source/_posts/python_4.md","hash":"56132c2f8c8e3cc9d48d7fc3e56ddf036ad4be8e","modified":1570874486500},{"_id":"source/_posts/天天生鲜项目实例.md","hash":"5c0bf5d4bfe59dfc1d45a652d507b9c06f49ddb6","modified":1574652348245},{"_id":"source/_posts/常用单词学习.md","hash":"6e5888491336d6f589c17f42fe1963d971bcdda7","modified":1574652348246},{"_id":"source/_posts/客户端更换Git指南.md","hash":"b93a4ae70c359c56aa379af4190f6e9f37ab288d","modified":1574652348245},{"_id":"source/_posts/开言- To tip or not to tip.md","hash":"a36c89afc5a62a9cb8fc1593c44616af989249e7","modified":1574652348246},{"_id":"source/_posts/开言体验营 - Day1.md","hash":"88c2f68b7dea55a680936a80022ed85b2b84a737","modified":1574652348247},{"_id":"source/_posts/开言_Bargaining in the market.md","hash":"59c6c683efcfb779743c2a3fe61c0bfc7c2554cd","modified":1574652348246},{"_id":"source/_posts/开言_Happy Hour Drinks with Coworks.md","hash":"9ffa0dc44c43ab4647d854220d93689adc3456aa","modified":1574652348247},{"_id":"source/_posts/开言体验营 - Day2.md","hash":"869ffb6f3b04801479684d7de7f7464ec8845420","modified":1574652348248},{"_id":"source/_posts/开言体验营 - Day5.md","hash":"7e9203c3db5d3cbe7f8af572c5652ec2539a0586","modified":1574652348248},{"_id":"source/_posts/开言体验营 - Day4.md","hash":"a4710221f4830911ab1f42feaa7bd7f96d7065fe","modified":1574652348248},{"_id":"themes/3-hexo/source/.DS_Store","hash":"fdcc907c46e093a14b153c5dc8c038461997ed3c","modified":1574653962692},{"_id":"source/about/index.md","hash":"402972efd00b61d0c658039ad855b7c25344085d","modified":1570874486501},{"_id":"source/_posts/python_2.md","hash":"b377e8ec183f233acdb7d99bb40d42f5901c17f3","modified":1570874486500},{"_id":"source/_posts/Twisted  介绍.md","hash":"eee09097828576ce488a21b8af0b1989e2cd996e","modified":1570874486493},{"_id":"themes/3-hexo/layout/_partial/article_copyright.ejs","hash":"7f28d7736133cc8012fbb8a5eeeb1174b862aec6","modified":1574653962681},{"_id":"themes/3-hexo/layout/_partial/article.ejs","hash":"a0a0f191faafca2aa14abd32ec1b1a385dae1af7","modified":1574653962681},{"_id":"themes/3-hexo/layout/_partial/comment.ejs","hash":"5507b4dfab2032345e012a0c5356f63b01395157","modified":1574653962682},{"_id":"themes/3-hexo/layout/_partial/copyright.ejs","hash":"d209ddcfd0149760a30837076be345a09e1797c5","modified":1574653962684},{"_id":"themes/3-hexo/layout/_partial/dashang.ejs","hash":"1b849749e557d2af482dc49acc93407b72c717f3","modified":1574653962685},{"_id":"themes/3-hexo/layout/_partial/footer.ejs","hash":"990003870f8c4303bfe0e52d9446265a7c1af676","modified":1574653962686},{"_id":"themes/3-hexo/layout/_partial/friends.ejs","hash":"7a31274da81c076021692ff7c80a1be3bbf6fa4c","modified":1574653962686},{"_id":"themes/3-hexo/layout/_partial/full-toc.ejs","hash":"f39f2ab3a67042e55cd6a51792bfd5ad697808f0","modified":1574653962687},{"_id":"themes/3-hexo/layout/_partial/header.ejs","hash":"30c3ab5847a18db678ffbe3fc6309ec96cb010c0","modified":1574653962687},{"_id":"themes/3-hexo/layout/_partial/meta.ejs","hash":"4f7e00e37783208cb350842085f1987ee854452e","modified":1574653962688},{"_id":"themes/3-hexo/layout/_partial/mathjax.ejs","hash":"c2e5cef2377884cd79e5f686fe4f74b082744306","modified":1574653962688},{"_id":"themes/3-hexo/layout/_partial/nav-left.ejs","hash":"2d36b810293072ce9d7cea82c8a3a987e137b117","modified":1574653962688},{"_id":"themes/3-hexo/layout/_partial/tag.ejs","hash":"71340ddd60ea14061771463140e299204ecf7ed9","modified":1574653962690},{"_id":"themes/3-hexo/layout/_partial/nav-right.ejs","hash":"301837aa3787004f069206440be25db32e3fb087","modified":1574653962689},{"_id":"themes/3-hexo/layout/_partial/toc-ref.ejs","hash":"6406251dabda66ef686d4c15edbc3061b6d828b8","modified":1574653962690},{"_id":"source/_posts/images/1571216524617.png","hash":"9b519adac7868969a0f85cc0c5d9d3bb4c1a579c","modified":1574652348222},{"_id":"source/_posts/images/1571216524617_1.png","hash":"9b519adac7868969a0f85cc0c5d9d3bb4c1a579c","modified":1574652348222},{"_id":"source/_posts/images/1571216565243.png","hash":"d0d68f0a4f058aac5eb6f7a7967faaa62851202f","modified":1574652348223},{"_id":"source/_posts/images/1571217610540.png","hash":"0be73462800326944c1ac227a7bd3d81cae2e98a","modified":1574652348223},{"_id":"source/_posts/images/1573442010455.png","hash":"2849f7a718dd4c1bfd621f8954aec3246e303ca2","modified":1574652348227},{"_id":"source/_posts/images/1573883470572.png","hash":"0910dac317d43e2a3d48d0ba5d56eae695d9b5dd","modified":1574652348237},{"_id":"source/_posts/images/1574504183153.png","hash":"07e7c21ab5b5c66c148cd756aef788b63a63f0c9","modified":1574652348239},{"_id":"source/_posts/images/1574504408755.png","hash":"cbe0fa2b2d02a0ac87f48d76e411c47e4fe37f4a","modified":1574652348240},{"_id":"source/_posts/images/1574504420111.png","hash":"bf103ec2becc01d26206a77cae33e2b611a659a3","modified":1574652348240},{"_id":"source/_posts/images/1574504426236.png","hash":"b68ef683a8c3a0cedf8098d217e6c9d15b249ef2","modified":1574652348241},{"_id":"source/_posts/images/1574504495536.png","hash":"e18be35e5c430c18fea8dbdc44d2c75dfba6852c","modified":1574652348241},{"_id":"source/_posts/images/1574504516272.png","hash":"252bd12f644d82547335c25462b0afbe6025196c","modified":1574652348242},{"_id":"source/_posts/images/1574504592931.png","hash":"8fc78a7e2e80ee10b897f7771c41a10c065205ea","modified":1574652348242},{"_id":"source/_posts/images/1574504634973.png","hash":"fd240f6c82967a5e7fb3f3a92f868bd0b297d4b9","modified":1574652348243},{"_id":"source/_posts/images/1574504645523.png","hash":"909de20e344326ea11c7924ea2f3b15f1ba3b7cb","modified":1574652348243},{"_id":"source/_posts/images/1574504738524.png","hash":"4903bfd82a285d0a167e9bbea13e25297539f4b3","modified":1574652348244},{"_id":"themes/3-hexo/source/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1574653962705},{"_id":"themes/3-hexo/source/css/mobile.styl","hash":"3934bcba5095e7e6c6b3a801a6e4fa3a35096e10","modified":1574653962715},{"_id":"themes/3-hexo/source/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1574653962717},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1574653962718},{"_id":"themes/3-hexo/source/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1574653962718},{"_id":"themes/3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1574653962719},{"_id":"themes/3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1574653962720},{"_id":"themes/3-hexo/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1574653962724},{"_id":"themes/3-hexo/source/js/jquery.autocomplete.min.js","hash":"7b8ac4d06c9e763963832529f44a56ad42a81e5f","modified":1574653962725},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1574653962725},{"_id":"themes/3-hexo/source/js/script.js","hash":"7502191e29366a11323dc72ae365b1aed254e6f2","modified":1574653962726},{"_id":"themes/3-hexo/source/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1574653962726},{"_id":"themes/3-hexo/source/css/style.styl","hash":"c7285882370f522c3bb17055cdf615cf92f48cd0","modified":1574653962715},{"_id":"source/_posts/images/1573441070020.png","hash":"66cfd013b868590ed516382e1edaf4b3ca25384c","modified":1574652348227},{"_id":"source/_posts/images/1573442404015.png","hash":"aa8517f27a4f31bd23dfa27afdccde34f87c81be","modified":1574652348228},{"_id":"source/_posts/images/1573881886011.png","hash":"da6d8be633e57115d26bb55b6d850a2984933f9c","modified":1574652348235},{"_id":"source/_posts/images/1573881914065.png","hash":"d7d03ccf5160377d64e8ca2415d9adb57a6d9f1f","modified":1574652348236},{"_id":"source/_posts/images/1570783134086.png","hash":"ba31616e3183191bdc9280fd30acbaa419e69e2a","modified":1570874486499},{"_id":"source/_posts/images/1574171584470.png","hash":"200a42f2892059e28578993f92007846ef7ba75d","modified":1574652348237},{"_id":"source/_posts/images/1574504169104.png","hash":"1cab6bf6fd98ffc7c458e1bccc2bf54fb5065a09","modified":1574652348238},{"_id":"themes/3-hexo/source/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1574653962721},{"_id":"themes/3-hexo/layout/_partial/comments/click2show.ejs","hash":"fa6675230f8c313236604e26926b142f4f418bdd","modified":1574653962682},{"_id":"themes/3-hexo/layout/_partial/comments/disqus.ejs","hash":"cd0022ce7e6d6efb07a00e87477cdf791f7f6703","modified":1574653962682},{"_id":"themes/3-hexo/layout/_partial/comments/gentie.ejs","hash":"1d6eacdadeb247e3b349ca7168f797beae8ff4c5","modified":1574653962683},{"_id":"themes/3-hexo/layout/_partial/comments/gitalk.ejs","hash":"fbd3c7d72c8354d700918390c6cbfc0a11408277","modified":1574653962684},{"_id":"themes/3-hexo/layout/_partial/comments/gitment.ejs","hash":"f16442568b43d034faaa8e3507f5ae8da34c7b72","modified":1574653962684},{"_id":"source/_posts/images/1570674939333.png","hash":"a944ffb9ba0afeaad24cacc53f734a8e6c89eb01","modified":1570874486497},{"_id":"themes/3-hexo/source/css/_partial/autocomplete.styl","hash":"f6847a2c6d35dbd6d06dc591bd34ed2019784048","modified":1574653962693},{"_id":"themes/3-hexo/source/css/_partial/comment.styl","hash":"cc0a862b31359a85d12579e49d2eca58d128275c","modified":1574653962694},{"_id":"themes/3-hexo/source/css/_partial/dashang.styl","hash":"f6447a2ac407228e1d53e3455db2919ac0e9f094","modified":1574653962695},{"_id":"themes/3-hexo/source/css/_partial/fade.styl","hash":"4f687cbc74caf8a0887f5e89250284a9bce8b5c1","modified":1574653962695},{"_id":"themes/3-hexo/source/css/_partial/font.styl","hash":"4d5ac149709447c5eee45f0e23dadeea94fd98ce","modified":1574653962696},{"_id":"themes/3-hexo/source/css/_partial/full-toc.styl","hash":"0ba318911afbbbffbd2473b472aedf2d3900e978","modified":1574653962696},{"_id":"themes/3-hexo/source/css/_partial/nav-left.styl","hash":"1bd865029ba8c11750fff83d87f69e5d7c137928","modified":1574653962697},{"_id":"themes/3-hexo/source/css/_partial/nprogress.styl","hash":"65efbddd23a264e7d1e85f4073228526770e833c","modified":1574653962698},{"_id":"themes/3-hexo/source/css/_partial/nav-right.styl","hash":"3da8fa04efccfd054a6a65f7153f197d4d68281d","modified":1574653962698},{"_id":"themes/3-hexo/source/css/_partial/num-load.styl","hash":"4b996440bba8ec755aa70bc6d074d7dbba55ec0c","modified":1574653962698},{"_id":"themes/3-hexo/source/css/_partial/post.styl","hash":"36bcec9a271f969014e1ec6c12c16bf60921d732","modified":1574653962699},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1574653962700},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1574653962701},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1574653962702},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1574653962702},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","hash":"3dfe8e557d9dfaf39bca088a02b76deb82dbaa3d","modified":1574653962703},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","hash":"c61a31e5310430312677fffe4286097d29d10151","modified":1574653962703},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","hash":"aa087561480fb9c2cfd541e33d1e99d5ac1a56bb","modified":1574653962704},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","hash":"f8ed131ccf13f4bdd3ec11fc3e997339dd7b66ba","modified":1574653962704},{"_id":"themes/3-hexo/source/css/fonts/selection.json","hash":"57c7f100019d57b512aab509185cb0a6eb9aa4c8","modified":1574653962705},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1574653962707},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","hash":"69d184a682bcaeba2b180b437dc4431bc3be38aa","modified":1574653962708},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1574653962708},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1574653962709},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1574653962709},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1574653962710},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1574653962710},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1574653962710},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1574653962711},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1574653962711},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1574653962711},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1574653962712},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1574653962712},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1574653962712},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1574653962714},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1574653962714},{"_id":"source/_posts/images/1570674953248.png","hash":"bae9bd1b0dafbee6df631f87d77ad33e4c8fefba","modified":1570874486498},{"_id":"themes/3-hexo/source/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1574653962724},{"_id":"source/_posts/images/1573879504277.png","hash":"2b8d9bea3a8ad233bd90187e200d35fbbdc0160f","modified":1574652348229},{"_id":"source/_posts/images/1573880787198.png","hash":"852d7d8c483c0fa942c1afc31f5b1bdccd09d1ff","modified":1574652348234},{"_id":"themes/3-hexo/source/js/gitalk.js","hash":"d1eb82a3280981bd652d9a8e323060e4311c547b","modified":1574653962722},{"_id":"source/_posts/images/1573879565628.png","hash":"c9347d343ff700a8a438e1182aa43ffd7c3bf4f6","modified":1574652348232},{"_id":"source/_posts/images/1570613306377.png","hash":"cbd6c68dc495c55df5010e0af487eac3a7fcbb43","modified":1570874486495},{"_id":"source/_posts/images/1572531014589.png","hash":"058d5e76206a1e3d486cf3067f8433be80f72cef","modified":1574652348226},{"_id":"public/about/index.html","hash":"9bda4e11d4a7cc7e607b8a6ba6e140e93e68ff13","modified":1574654361230},{"_id":"public/archives/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361230},{"_id":"public/archives/2019/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361247},{"_id":"public/archives/2019/10/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361247},{"_id":"public/categories/Python笔记/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361247},{"_id":"public/categories/英语学习/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361247},{"_id":"public/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361247},{"_id":"public/tags/Python/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361247},{"_id":"public/tags/Note/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361247},{"_id":"public/tags/English/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361247},{"_id":"public/tags/Core-Programming/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361247},{"_id":"public/2019/11/25/开言体验营 - Day5/index.html","hash":"341f224643259c532d96aa52bdf0c8c46d032e72","modified":1574654361263},{"_id":"public/2019/11/25/开言体验营 - Day4/index.html","hash":"5cbf3945ac94f765b50d4c51241f7451c72d5af0","modified":1574654361263},{"_id":"public/2019/11/25/开言体验营 - Day2/index.html","hash":"00a981a559cae72d8086adaff782baaa0a14d640","modified":1574654361263},{"_id":"public/2019/11/25/开言_Happy Hour Drinks with Coworks/index.html","hash":"2ccc668f9e4d2a7b2c841c89894482a3d495021a","modified":1574654361263},{"_id":"public/2019/11/25/开言体验营 - Day1/index.html","hash":"eef767e20ea53448416d48cc98c99370ba27acd8","modified":1574654361263},{"_id":"public/2019/11/25/开言- To tip or not to tip/index.html","hash":"8d4380f63045587aee44d38cd4c928e01116c9b5","modified":1574654361263},{"_id":"public/2019/11/25/开言_Bargaining in the market/index.html","hash":"f6d63d907a13f96963d95e7f0442e9259c3c50cd","modified":1574654361264},{"_id":"public/2019/11/25/常用单词学习/index.html","hash":"1b443aa5cfdfaf2f9475ab5b945165ee1120a1f4","modified":1574654361264},{"_id":"public/2019/11/25/客户端更换Git指南/index.html","hash":"9b08d242ef4c773d4fdcdf5af0dae4739056660a","modified":1574654361264},{"_id":"public/2019/11/25/天天生鲜项目实例/index.html","hash":"3864ebd527d96c7cafb7a09e05fe867c0aff9706","modified":1574654361264},{"_id":"public/2019/11/25/Smargit  简单使用说明/index.html","hash":"afc02f7a32ec1c8399bcfedc9d8b49088dc0ed9c","modified":1574654361264},{"_id":"public/2019/11/25/Python Core Programming Note 3/index.html","hash":"7f8170411da02b45cffd224f1dee604fb017a381","modified":1574654361264},{"_id":"public/2019/11/25/Linux与window常用指令/index.html","hash":"c514089e522b25987edaeaad3af684ec75214db5","modified":1574654361264},{"_id":"public/2019/11/25/Jenkins打包事项/index.html","hash":"21cb16df461578539fc6e340e20d2799b2eb91ad","modified":1574654361264},{"_id":"public/2019/11/25/Game Engine Architecture - Foundations Part1/index.html","hash":"c9481da3eed72d5662a2b7d1229de0044df6be00","modified":1574654361264},{"_id":"public/2019/11/25/Django 实例 Web Application/index.html","hash":"54ff0e63b2a90f09ed4bbcb7e2de5c24263dd4b3","modified":1574654361264},{"_id":"public/2019/11/25/Game Engine Architecture - English/index.html","hash":"edc60b564d5cbab209192c05cb8c29ce040fb0d9","modified":1574654361264},{"_id":"public/2019/11/25/Django  初步构建/index.html","hash":"26293c8aba32d91a50320955b795fcc7a0cfae2a","modified":1574654361265},{"_id":"public/2019/11/25/Centos 部署 Django/index.html","hash":"41aaa986ff1a5219e758a5cfb496acf2f65e7b62","modified":1574654361265},{"_id":"public/2019/11/25/Django  初始测试/index.html","hash":"6180edfec4a927b2effdcd30205a853b2f28d522","modified":1574654361265},{"_id":"public/2019/11/25/CAD笔记/index.html","hash":"e394b1adc969606e21ba2c4517fbb3a995fc1370","modified":1574654361265},{"_id":"public/2019/11/25/Conda 常用操作/index.html","hash":"85049a40e500e72c86ab6405f72c962c7db1acab","modified":1574654361265},{"_id":"public/2019/10/12/python_4/index.html","hash":"2197b0a1a5ea5af24703d378744106ec770d99af","modified":1574654361265},{"_id":"public/2019/10/12/python_2/index.html","hash":"4b523c2ae20b0fdca4de788aa37212b83a428db1","modified":1574654361265},{"_id":"public/2019/10/12/Twisted  介绍/index.html","hash":"4bfe45885199a8b8df3677a139c8c3d062f022c0","modified":1574654361265},{"_id":"public/2019/10/12/python_1/index.html","hash":"e0c8ad439ab3e1768a9da7877e4b606204d46aa4","modified":1574654361265},{"_id":"public/2019/10/12/hello-world/index.html","hash":"6cf20acd776bdff97524af841ba2870a49c6d3b1","modified":1574654361266},{"_id":"public/2019/10/12/Python_3/index.html","hash":"92e7111b47dd8fc946175ae5ea55220c37f30f0f","modified":1574654361266},{"_id":"public/2019/10/12/Python 杂项/index.html","hash":"8fddf36545a8a1cbdceb9b043f3e8d439dd6546c","modified":1574654361266},{"_id":"public/2019/10/12/Python Core Programming Note 2/index.html","hash":"3aa0b9f4da2f797d258d1e5e1316e619349cb35e","modified":1574654361266},{"_id":"public/2019/10/12/Python Core Programming Note 1/index.html","hash":"9b5e9a4a52d217ac34b626ba8dbd762ebdd3d271","modified":1574654361266},{"_id":"public/archives/page/3/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361266},{"_id":"public/archives/page/2/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361266},{"_id":"public/archives/page/4/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361266},{"_id":"public/archives/2019/page/2/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361266},{"_id":"public/archives/2019/page/3/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361266},{"_id":"public/archives/2019/page/4/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361266},{"_id":"public/archives/2019/11/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361266},{"_id":"public/archives/2019/11/page/2/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361266},{"_id":"public/archives/2019/11/page/3/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361266},{"_id":"public/categories/Python的Web/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361266},{"_id":"public/categories/Python-Web/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361266},{"_id":"public/categories/Reading/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361267},{"_id":"public/categories/工作相关/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361267},{"_id":"public/categories/公司/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361267},{"_id":"public/categories/Reading/Book/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361267},{"_id":"public/categories/Reading/Book/Learn/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361267},{"_id":"public/categories/Reading/Book/Learn/英语学习/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361267},{"_id":"public/page/2/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361267},{"_id":"public/page/3/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361267},{"_id":"public/tags/Python/page/2/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361267},{"_id":"public/page/4/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361267},{"_id":"public/tags/Note/page/2/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361267},{"_id":"public/tags/Note/page/3/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361267},{"_id":"public/tags/CAD/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361267},{"_id":"public/tags/Conda/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361267},{"_id":"public/tags/Django/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361267},{"_id":"public/tags/Game/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361267},{"_id":"public/tags/Jenkins/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361268},{"_id":"public/tags/linux/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361268},{"_id":"public/tags/CI/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361268},{"_id":"public/tags/指令/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361268},{"_id":"public/tags/实例/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361268},{"_id":"public/tags/Git/index.html","hash":"2bd4bc266f5050a7aa130ba9223398e7e399fcea","modified":1574654361268},{"_id":"public/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1574654361268},{"_id":"public/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1574654361268},{"_id":"public/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1574654361268},{"_id":"public/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1574654361268},{"_id":"public/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1574654361268},{"_id":"public/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1574654361268},{"_id":"public/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1574654361268},{"_id":"public/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1574654361268},{"_id":"public/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1574654361268},{"_id":"public/css/fonts/iconfont.eot","hash":"3dfe8e557d9dfaf39bca088a02b76deb82dbaa3d","modified":1574654361268},{"_id":"public/css/fonts/iconfont.ttf","hash":"aa087561480fb9c2cfd541e33d1e99d5ac1a56bb","modified":1574654361268},{"_id":"public/css/fonts/iconfont.woff","hash":"f8ed131ccf13f4bdd3ec11fc3e997339dd7b66ba","modified":1574654361268},{"_id":"public/css/fonts/iconfont.svg","hash":"c61a31e5310430312677fffe4286097d29d10151","modified":1574654361268},{"_id":"public/css/mobile.css","hash":"79ab291be160e0ca753512a96c5198f7477f13be","modified":1574654361960},{"_id":"public/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1574654361961},{"_id":"public/css/hl_theme/atom-dark.css","hash":"88d11052a24e8100af6248eb4dbe1ce7b0e96408","modified":1574654361961},{"_id":"public/css/hl_theme/atom-light.css","hash":"a3c8f3ee9a655594eff7ac545cb2e6914c1abcc2","modified":1574654361961},{"_id":"public/css/hl_theme/brown-paper.css","hash":"500c8e750373f6656ff49a7857c871ceedcf8777","modified":1574654361961},{"_id":"public/css/hl_theme/darcula.css","hash":"4341074bae4bc9f0b86e32b623e27babc0159b6e","modified":1574654361961},{"_id":"public/css/hl_theme/github.css","hash":"e05a0806a508a26b9f3f3794b6b588ec6504ad3f","modified":1574654361961},{"_id":"public/css/hl_theme/github-gist.css","hash":"7a41c1c479d09df875f99f1f6d94aac42e9e2ad0","modified":1574654361961},{"_id":"public/css/style.css","hash":"fa10daca27f2163644aa8c14b0fca5aba9d14b06","modified":1574654361961},{"_id":"public/css/hl_theme/kimbie-dark.css","hash":"728527fcc308da454722c119b89e6da3025bd1e3","modified":1574654361977},{"_id":"public/css/hl_theme/gruvbox-dark.css","hash":"8c440d9b4ee19ac03eaee3c6af78ba52e5ba5535","modified":1574654361977},{"_id":"public/css/hl_theme/gruvbox-light.css","hash":"30514aaa242a34647aa666cfca4fc74c595ea8f2","modified":1574654361977},{"_id":"public/css/hl_theme/kimbie-light.css","hash":"0c61926c989163faefb031d27bce3e287d6e10f2","modified":1574654361977},{"_id":"public/css/hl_theme/railscasts.css","hash":"511f2fd2a84d426e5da5cb17880cc08f73beb002","modified":1574654361977},{"_id":"public/css/hl_theme/rainbow.css","hash":"7ff4251938076ddb7e4e49413db82653e5b61321","modified":1574654361977},{"_id":"public/css/hl_theme/sunburst.css","hash":"8a135abac1512cf430d1d1ad2304b79afa1a4d6e","modified":1574654361977},{"_id":"public/css/hl_theme/zenbum.css","hash":"0a78f74a93568e20b32ca7427c719e9bae9a0b55","modified":1574654361977},{"_id":"public/css/hl_theme/sublime.css","hash":"f65c5b116d9213afb9c324384a2f3bc86cb71121","modified":1574654361978},{"_id":"public/css/hl_theme/school-book.css","hash":"ffbbcd13a74ac2404262c50b7a43053dfd0096ff","modified":1574654361978},{"_id":"public/js/jquery.autocomplete.min.js","hash":"7b8ac4d06c9e763963832529f44a56ad42a81e5f","modified":1574654361978},{"_id":"public/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1574654361995},{"_id":"public/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1574654361996},{"_id":"public/js/script.js","hash":"7502191e29366a11323dc72ae365b1aed254e6f2","modified":1574654362012},{"_id":"public/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1574654362012},{"_id":"public/css/fonts/selection.json","hash":"047b615ea32dc48dae5b964061427d41feaaafdf","modified":1574654362013},{"_id":"public/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1574654362019},{"_id":"public/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1574654362051},{"_id":"public/js/gitalk.js","hash":"d1eb82a3280981bd652d9a8e323060e4311c547b","modified":1574654362055}],"Category":[{"name":"Python的Web","_id":"ck3dwjs7i0003ekuwkazq8n5m"},{"name":"Python Web","_id":"ck3dwjs7z000iekuwjdrluc6p"},{"name":"Reading","_id":"ck3dwjs84000pekuw1pb1p0mj"},{"name":"工作相关","_id":"ck3dwjs8c0012ekuw16mes5tm"},{"name":"公司","_id":"ck3dwjs8g0019ekuw38s7nclj"},{"name":"Python笔记","_id":"ck3dwjs8l001hekuwjk1pahie"},{"name":"Book","parent":"ck3dwjs84000pekuw1pb1p0mj","_id":"ck3dwjs8q001pekuw02kk4w4t"},{"name":"英语学习","_id":"ck3dwjs9e002qekuwqmburm0k"},{"name":"Learn","parent":"ck3dwjs8q001pekuw02kk4w4t","_id":"ck3dwjs9n0035ekuw2w5h4ykz"},{"name":"英语学习","parent":"ck3dwjs9n0035ekuw2w5h4ykz","_id":"ck3dwjsa0003yekuwqadtedmo"}],"Data":[],"Page":[{"title":"about","date":"2019-10-06T01:42:53.000Z","_content":"# 这是关于我，有空再加吧\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-10-06 09:42:53\n---\n# 这是关于我，有空再加吧\n","updated":"2019-10-12T10:01:26.501Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck3dwjs7f0001ekuwj9mlcq8f","content":"<h1 id=\"这是关于我，有空再加吧\"><a href=\"#这是关于我，有空再加吧\" class=\"headerlink\" title=\"这是关于我，有空再加吧\"></a>这是关于我，有空再加吧</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"这是关于我，有空再加吧\"><a href=\"#这是关于我，有空再加吧\" class=\"headerlink\" title=\"这是关于我，有空再加吧\"></a>这是关于我，有空再加吧</h1>"}],"Post":[{"title":"Centos 部署 Django","_content":"\n### 1. 下载必要库\n\n```\nyum -y groupinstall \"Development tools\"\n```\n\n### 2. 下载最新SQLITE\n\n到SQLite官网的下载页面：https://www.sqlite.org/download.html  这里是最新的版本，我们就安装它吧。\n\n```\nwget https://www.sqlite.org/2017/sqlite-autoconf-3160200.tar.gz\ntar zxvf sqlite-autoconf-3160200.tar.gz\ncd sqlite-autoconf-3160200\n\n./configure\nmake\nsudo make install\n```\n\n以默认方式安装后，会把编译好的二进制文件安装到 /usr/local/lib， 把头文件sqlite3.h sqlite3ext.h安装到/usr/local/include。\n\n用这两条命令确认一下已成功安装到这里：\n\n```\nls -l /usr/local/lib/*sqlite*\nls -l /usr/local/include/*sqlite*\n```\n\n### 3.Python 安装\n\n```\nwget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tgz\ntar -zxvf Python-3.6.6.tgz\n```\n\n进入解压好的目录\n```\n\nsudo LD_RUN_PATH=/usr/local/lib ./configure --enable-optimizations\nsudo LD_RUN_PATH=/usr/local/lib make altinstall\n\n```\n\n建立软链接\n\n```\nln -s /usr/local/python3/bin/python3.6 /usr/bin/python3\nln -s /usr/local/python3/bin/pip3.6 /usr/bin/pip3\n```\n\n看Python3和pip3安装情况\n```\npython3\n\npip3 -V\n```\n\n卸载：\n\n```\nwhereis python\nrm -rf ....\n```\n\n### 4. virtualenv安装\n\n```\npip3 install virtualenv\n```\n\n建立链接\n```\nln -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv\n```\n \n 创建虚拟环境\n \n ```\n mkdir -p /data/env\n mkdir -p /data/wwwroot\n\nvirtualenv --python=/usr/bin/python3 pyweb\n ```\n\n进入虚拟环境\n\n```\ncd /data/env/pyweb/bin\nsource activate\n```\n\n退出虚拟环境\n\n```\ndeactivate\n```\n\n### 5.虚拟环境下安装django, uwsgi\n\n```\npip3 install django （如果用于生产的话，则需要指定安装和你项目相同的版本）\npip3 install uwsgi\n\nln -s /usr/local/python3/bin/uwsgi /usr/bin/uwsgi\n```\n\n### 6. Django下创建项目和app\n\n```\ndjango-admin.py startproject mysite\n\ncd mysite\n\npython3 manage.py startapp blog\n```\n\n\n\n### 参考文章\nhttps://www.cnblogs.com/djangocn/p/9538551.html\nhttps://stackoverflow.com/questions/55674176/django-cant-find-new-sqlite-version-sqlite-3-8-3-or-later-is-required-found\nhttps://blog.csdn.net/yohjob/article/details/90760862","source":"_posts/Centos 部署 Django.md","raw":"---\ntitle: Centos 部署 Django\ncategories:\n- Python的Web\ntags: \n- Python\n- Note\n- Django\n---\n\n### 1. 下载必要库\n\n```\nyum -y groupinstall \"Development tools\"\n```\n\n### 2. 下载最新SQLITE\n\n到SQLite官网的下载页面：https://www.sqlite.org/download.html  这里是最新的版本，我们就安装它吧。\n\n```\nwget https://www.sqlite.org/2017/sqlite-autoconf-3160200.tar.gz\ntar zxvf sqlite-autoconf-3160200.tar.gz\ncd sqlite-autoconf-3160200\n\n./configure\nmake\nsudo make install\n```\n\n以默认方式安装后，会把编译好的二进制文件安装到 /usr/local/lib， 把头文件sqlite3.h sqlite3ext.h安装到/usr/local/include。\n\n用这两条命令确认一下已成功安装到这里：\n\n```\nls -l /usr/local/lib/*sqlite*\nls -l /usr/local/include/*sqlite*\n```\n\n### 3.Python 安装\n\n```\nwget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tgz\ntar -zxvf Python-3.6.6.tgz\n```\n\n进入解压好的目录\n```\n\nsudo LD_RUN_PATH=/usr/local/lib ./configure --enable-optimizations\nsudo LD_RUN_PATH=/usr/local/lib make altinstall\n\n```\n\n建立软链接\n\n```\nln -s /usr/local/python3/bin/python3.6 /usr/bin/python3\nln -s /usr/local/python3/bin/pip3.6 /usr/bin/pip3\n```\n\n看Python3和pip3安装情况\n```\npython3\n\npip3 -V\n```\n\n卸载：\n\n```\nwhereis python\nrm -rf ....\n```\n\n### 4. virtualenv安装\n\n```\npip3 install virtualenv\n```\n\n建立链接\n```\nln -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv\n```\n \n 创建虚拟环境\n \n ```\n mkdir -p /data/env\n mkdir -p /data/wwwroot\n\nvirtualenv --python=/usr/bin/python3 pyweb\n ```\n\n进入虚拟环境\n\n```\ncd /data/env/pyweb/bin\nsource activate\n```\n\n退出虚拟环境\n\n```\ndeactivate\n```\n\n### 5.虚拟环境下安装django, uwsgi\n\n```\npip3 install django （如果用于生产的话，则需要指定安装和你项目相同的版本）\npip3 install uwsgi\n\nln -s /usr/local/python3/bin/uwsgi /usr/bin/uwsgi\n```\n\n### 6. Django下创建项目和app\n\n```\ndjango-admin.py startproject mysite\n\ncd mysite\n\npython3 manage.py startapp blog\n```\n\n\n\n### 参考文章\nhttps://www.cnblogs.com/djangocn/p/9538551.html\nhttps://stackoverflow.com/questions/55674176/django-cant-find-new-sqlite-version-sqlite-3-8-3-or-later-is-required-found\nhttps://blog.csdn.net/yohjob/article/details/90760862","slug":"Centos 部署 Django","published":1,"date":"2019-11-25T03:25:48.217Z","updated":"2019-11-25T03:25:48.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs790000ekuwwapuut6h","content":"<h3 id=\"1-下载必要库\"><a href=\"#1-下载必要库\" class=\"headerlink\" title=\"1. 下载必要库\"></a>1. 下载必要库</h3><pre><code>yum -y groupinstall &quot;Development tools&quot;</code></pre><h3 id=\"2-下载最新SQLITE\"><a href=\"#2-下载最新SQLITE\" class=\"headerlink\" title=\"2. 下载最新SQLITE\"></a>2. 下载最新SQLITE</h3><p>到SQLite官网的下载页面：<a href=\"https://www.sqlite.org/download.html\">https://www.sqlite.org/download.html</a>  这里是最新的版本，我们就安装它吧。</p>\n<pre><code>wget https://www.sqlite.org/2017/sqlite-autoconf-3160200.tar.gz\ntar zxvf sqlite-autoconf-3160200.tar.gz\ncd sqlite-autoconf-3160200\n\n./configure\nmake\nsudo make install</code></pre><p>以默认方式安装后，会把编译好的二进制文件安装到 /usr/local/lib， 把头文件sqlite3.h sqlite3ext.h安装到/usr/local/include。</p>\n<p>用这两条命令确认一下已成功安装到这里：</p>\n<pre><code>ls -l /usr/local/lib/*sqlite*\nls -l /usr/local/include/*sqlite*</code></pre><h3 id=\"3-Python-安装\"><a href=\"#3-Python-安装\" class=\"headerlink\" title=\"3.Python 安装\"></a>3.Python 安装</h3><pre><code>wget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tgz\ntar -zxvf Python-3.6.6.tgz</code></pre><p>进入解压好的目录</p>\n<pre><code>\nsudo LD_RUN_PATH=/usr/local/lib ./configure --enable-optimizations\nsudo LD_RUN_PATH=/usr/local/lib make altinstall\n</code></pre><p>建立软链接</p>\n<pre><code>ln -s /usr/local/python3/bin/python3.6 /usr/bin/python3\nln -s /usr/local/python3/bin/pip3.6 /usr/bin/pip3</code></pre><p>看Python3和pip3安装情况</p>\n<pre><code>python3\n\npip3 -V</code></pre><p>卸载：</p>\n<pre><code>whereis python\nrm -rf ....</code></pre><h3 id=\"4-virtualenv安装\"><a href=\"#4-virtualenv安装\" class=\"headerlink\" title=\"4. virtualenv安装\"></a>4. virtualenv安装</h3><pre><code>pip3 install virtualenv</code></pre><p>建立链接</p>\n<pre><code>ln -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv</code></pre><p> 创建虚拟环境</p>\n<pre><code> mkdir -p /data/env\n mkdir -p /data/wwwroot\n\nvirtualenv --python=/usr/bin/python3 pyweb</code></pre><p>进入虚拟环境</p>\n<pre><code>cd /data/env/pyweb/bin\nsource activate</code></pre><p>退出虚拟环境</p>\n<pre><code>deactivate</code></pre><h3 id=\"5-虚拟环境下安装django-uwsgi\"><a href=\"#5-虚拟环境下安装django-uwsgi\" class=\"headerlink\" title=\"5.虚拟环境下安装django, uwsgi\"></a>5.虚拟环境下安装django, uwsgi</h3><pre><code>pip3 install django （如果用于生产的话，则需要指定安装和你项目相同的版本）\npip3 install uwsgi\n\nln -s /usr/local/python3/bin/uwsgi /usr/bin/uwsgi</code></pre><h3 id=\"6-Django下创建项目和app\"><a href=\"#6-Django下创建项目和app\" class=\"headerlink\" title=\"6. Django下创建项目和app\"></a>6. Django下创建项目和app</h3><pre><code>django-admin.py startproject mysite\n\ncd mysite\n\npython3 manage.py startapp blog</code></pre><h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><a href=\"https://www.cnblogs.com/djangocn/p/9538551.html\">https://www.cnblogs.com/djangocn/p/9538551.html</a><br><a href=\"https://stackoverflow.com/questions/55674176/django-cant-find-new-sqlite-version-sqlite-3-8-3-or-later-is-required-found\">https://stackoverflow.com/questions/55674176/django-cant-find-new-sqlite-version-sqlite-3-8-3-or-later-is-required-found</a><br><a href=\"https://blog.csdn.net/yohjob/article/details/90760862\">https://blog.csdn.net/yohjob/article/details/90760862</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-下载必要库\"><a href=\"#1-下载必要库\" class=\"headerlink\" title=\"1. 下载必要库\"></a>1. 下载必要库</h3><pre><code>yum -y groupinstall &quot;Development tools&quot;</code></pre><h3 id=\"2-下载最新SQLITE\"><a href=\"#2-下载最新SQLITE\" class=\"headerlink\" title=\"2. 下载最新SQLITE\"></a>2. 下载最新SQLITE</h3><p>到SQLite官网的下载页面：<a href=\"https://www.sqlite.org/download.html\">https://www.sqlite.org/download.html</a>  这里是最新的版本，我们就安装它吧。</p>\n<pre><code>wget https://www.sqlite.org/2017/sqlite-autoconf-3160200.tar.gz\ntar zxvf sqlite-autoconf-3160200.tar.gz\ncd sqlite-autoconf-3160200\n\n./configure\nmake\nsudo make install</code></pre><p>以默认方式安装后，会把编译好的二进制文件安装到 /usr/local/lib， 把头文件sqlite3.h sqlite3ext.h安装到/usr/local/include。</p>\n<p>用这两条命令确认一下已成功安装到这里：</p>\n<pre><code>ls -l /usr/local/lib/*sqlite*\nls -l /usr/local/include/*sqlite*</code></pre><h3 id=\"3-Python-安装\"><a href=\"#3-Python-安装\" class=\"headerlink\" title=\"3.Python 安装\"></a>3.Python 安装</h3><pre><code>wget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tgz\ntar -zxvf Python-3.6.6.tgz</code></pre><p>进入解压好的目录</p>\n<pre><code>\nsudo LD_RUN_PATH=/usr/local/lib ./configure --enable-optimizations\nsudo LD_RUN_PATH=/usr/local/lib make altinstall\n</code></pre><p>建立软链接</p>\n<pre><code>ln -s /usr/local/python3/bin/python3.6 /usr/bin/python3\nln -s /usr/local/python3/bin/pip3.6 /usr/bin/pip3</code></pre><p>看Python3和pip3安装情况</p>\n<pre><code>python3\n\npip3 -V</code></pre><p>卸载：</p>\n<pre><code>whereis python\nrm -rf ....</code></pre><h3 id=\"4-virtualenv安装\"><a href=\"#4-virtualenv安装\" class=\"headerlink\" title=\"4. virtualenv安装\"></a>4. virtualenv安装</h3><pre><code>pip3 install virtualenv</code></pre><p>建立链接</p>\n<pre><code>ln -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv</code></pre><p> 创建虚拟环境</p>\n<pre><code> mkdir -p /data/env\n mkdir -p /data/wwwroot\n\nvirtualenv --python=/usr/bin/python3 pyweb</code></pre><p>进入虚拟环境</p>\n<pre><code>cd /data/env/pyweb/bin\nsource activate</code></pre><p>退出虚拟环境</p>\n<pre><code>deactivate</code></pre><h3 id=\"5-虚拟环境下安装django-uwsgi\"><a href=\"#5-虚拟环境下安装django-uwsgi\" class=\"headerlink\" title=\"5.虚拟环境下安装django, uwsgi\"></a>5.虚拟环境下安装django, uwsgi</h3><pre><code>pip3 install django （如果用于生产的话，则需要指定安装和你项目相同的版本）\npip3 install uwsgi\n\nln -s /usr/local/python3/bin/uwsgi /usr/bin/uwsgi</code></pre><h3 id=\"6-Django下创建项目和app\"><a href=\"#6-Django下创建项目和app\" class=\"headerlink\" title=\"6. Django下创建项目和app\"></a>6. Django下创建项目和app</h3><pre><code>django-admin.py startproject mysite\n\ncd mysite\n\npython3 manage.py startapp blog</code></pre><h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><a href=\"https://www.cnblogs.com/djangocn/p/9538551.html\">https://www.cnblogs.com/djangocn/p/9538551.html</a><br><a href=\"https://stackoverflow.com/questions/55674176/django-cant-find-new-sqlite-version-sqlite-3-8-3-or-later-is-required-found\">https://stackoverflow.com/questions/55674176/django-cant-find-new-sqlite-version-sqlite-3-8-3-or-later-is-required-found</a><br><a href=\"https://blog.csdn.net/yohjob/article/details/90760862\">https://blog.csdn.net/yohjob/article/details/90760862</a></p>\n"},{"title":"CAD笔记","_content":"![enter description here](./images/1572531014589.png)\n\n## 笔记\n\n> dsaf","source":"_posts/CAD笔记.md","raw":"---\ntitle: CAD笔记\ncategories:\n- Python的Web\ntags: \n- CAD\n---\n![enter description here](./images/1572531014589.png)\n\n## 笔记\n\n> dsaf","slug":"CAD笔记","published":1,"date":"2019-11-25T03:25:48.215Z","updated":"2019-11-25T03:25:48.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs7g0002ekuw65hudre3","content":"<p><img src=\"./images/1572531014589.png\" alt=\"enter description here\"></p>\n<h2 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h2><blockquote>\n<p>dsaf</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"./images/1572531014589.png\" alt=\"enter description here\"></p>\n<h2 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h2><blockquote>\n<p>dsaf</p>\n</blockquote>\n"},{"title":"Conda 常用操作","_content":"\n\n### Conda介绍\n\n> Conda 是一个开源的软件包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。 Conda 是为 Python 程序创建的，适用于 Linux，OS X 和Windows，也可以打包和分发其他软件。\n\n### 下载&安装\n> conda官网：https://conda.io/miniconda.html\n\nlinux或mac ox版本：\n\n```\nwget -c https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n\nchmod 777 Miniconda3-latest-Linux-x86_64.sh #给执行权限\nbash Miniconda3-latest-Linux-x86_64.sh #运行\n```\n\n> 当命令行前面出现(base)的时候说明现在已经在conda的环境中了。这时候输入conda list 命令就有反应了\n\n\n###  添加频道\n\n官方频道\n \n```\nconda config --add channels bioconda\nconda config --add channels conda-forge\n```\n\n 清华镜像\n  \n``` \nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda\n```\n\n其他：\n\n``` \nconda config --add channels genomedk\n```\n\n显示安装的频道\n\n``` \n conda config --set show_channel_urls yes \n ``` \n \n查看已经添加的channels\n\n``` \nconda config --get channels\n``` \n\n已添加的channel在哪里查看\n\n``` \nvim ~/.condarc\n``` \n\n### 创建环境\n\n如创建一个python2.7环境且名为mysite\n\n``` \nconda create -n mysite python=2.7\n``` \n\n### 激活、退出环境\n\n激活：\nwindows环境下不用加conda前缀，mac及旧版本下可能需要使用source activate\n\n```\nconda activate mysite\n```\n\n退出：\n同激活\n\n``` \nconda deactivate mysite\n```\n\n### 删除环境\n\n``` \nconda remove -n mysite --all\n```\n\n### 重命名环境\n\n把一个原来叫做py2的环境重新命名成python2：\n\n``` \nconda create -n python2 --clone py2\nconda remove -n py2 --all\n```\n\n\n\n\n","source":"_posts/Conda 常用操作.md","raw":"---\ntitle: Conda 常用操作\ncategories:\n- Python的Web\ntags: \n- Python\n- Note\n- Django\n- Conda\n---\n\n\n### Conda介绍\n\n> Conda 是一个开源的软件包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。 Conda 是为 Python 程序创建的，适用于 Linux，OS X 和Windows，也可以打包和分发其他软件。\n\n### 下载&安装\n> conda官网：https://conda.io/miniconda.html\n\nlinux或mac ox版本：\n\n```\nwget -c https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n\nchmod 777 Miniconda3-latest-Linux-x86_64.sh #给执行权限\nbash Miniconda3-latest-Linux-x86_64.sh #运行\n```\n\n> 当命令行前面出现(base)的时候说明现在已经在conda的环境中了。这时候输入conda list 命令就有反应了\n\n\n###  添加频道\n\n官方频道\n \n```\nconda config --add channels bioconda\nconda config --add channels conda-forge\n```\n\n 清华镜像\n  \n``` \nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda\n```\n\n其他：\n\n``` \nconda config --add channels genomedk\n```\n\n显示安装的频道\n\n``` \n conda config --set show_channel_urls yes \n ``` \n \n查看已经添加的channels\n\n``` \nconda config --get channels\n``` \n\n已添加的channel在哪里查看\n\n``` \nvim ~/.condarc\n``` \n\n### 创建环境\n\n如创建一个python2.7环境且名为mysite\n\n``` \nconda create -n mysite python=2.7\n``` \n\n### 激活、退出环境\n\n激活：\nwindows环境下不用加conda前缀，mac及旧版本下可能需要使用source activate\n\n```\nconda activate mysite\n```\n\n退出：\n同激活\n\n``` \nconda deactivate mysite\n```\n\n### 删除环境\n\n``` \nconda remove -n mysite --all\n```\n\n### 重命名环境\n\n把一个原来叫做py2的环境重新命名成python2：\n\n``` \nconda create -n python2 --clone py2\nconda remove -n py2 --all\n```\n\n\n\n\n","slug":"Conda 常用操作","published":1,"date":"2019-11-25T03:25:48.217Z","updated":"2019-11-25T03:25:48.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs7l0005ekuwgr7a46fm","content":"<h3 id=\"Conda介绍\"><a href=\"#Conda介绍\" class=\"headerlink\" title=\"Conda介绍\"></a>Conda介绍</h3><blockquote>\n<p>Conda 是一个开源的软件包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。 Conda 是为 Python 程序创建的，适用于 Linux，OS X 和Windows，也可以打包和分发其他软件。</p>\n</blockquote>\n<h3 id=\"下载-amp-安装\"><a href=\"#下载-amp-安装\" class=\"headerlink\" title=\"下载&amp;安装\"></a>下载&amp;安装</h3><blockquote>\n<p>conda官网：<a href=\"https://conda.io/miniconda.html\">https://conda.io/miniconda.html</a></p>\n</blockquote>\n<p>linux或mac ox版本：</p>\n<pre><code>wget -c https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n\nchmod 777 Miniconda3-latest-Linux-x86_64.sh #给执行权限\nbash Miniconda3-latest-Linux-x86_64.sh #运行</code></pre><blockquote>\n<p>当命令行前面出现(base)的时候说明现在已经在conda的环境中了。这时候输入conda list 命令就有反应了</p>\n</blockquote>\n<h3 id=\"添加频道\"><a href=\"#添加频道\" class=\"headerlink\" title=\"添加频道\"></a>添加频道</h3><p>官方频道</p>\n<pre><code>conda config --add channels bioconda\nconda config --add channels conda-forge</code></pre><p> 清华镜像</p>\n<pre><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda</code></pre><p>其他：</p>\n<pre><code>conda config --add channels genomedk</code></pre><p>显示安装的频道</p>\n<pre><code> conda config --set show_channel_urls yes </code></pre><p>查看已经添加的channels</p>\n<pre><code>conda config --get channels</code></pre><p>已添加的channel在哪里查看</p>\n<pre><code>vim ~/.condarc</code></pre><h3 id=\"创建环境\"><a href=\"#创建环境\" class=\"headerlink\" title=\"创建环境\"></a>创建环境</h3><p>如创建一个python2.7环境且名为mysite</p>\n<pre><code>conda create -n mysite python=2.7</code></pre><h3 id=\"激活、退出环境\"><a href=\"#激活、退出环境\" class=\"headerlink\" title=\"激活、退出环境\"></a>激活、退出环境</h3><p>激活：<br>windows环境下不用加conda前缀，mac及旧版本下可能需要使用source activate</p>\n<pre><code>conda activate mysite</code></pre><p>退出：<br>同激活</p>\n<pre><code>conda deactivate mysite</code></pre><h3 id=\"删除环境\"><a href=\"#删除环境\" class=\"headerlink\" title=\"删除环境\"></a>删除环境</h3><pre><code>conda remove -n mysite --all</code></pre><h3 id=\"重命名环境\"><a href=\"#重命名环境\" class=\"headerlink\" title=\"重命名环境\"></a>重命名环境</h3><p>把一个原来叫做py2的环境重新命名成python2：</p>\n<pre><code>conda create -n python2 --clone py2\nconda remove -n py2 --all</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Conda介绍\"><a href=\"#Conda介绍\" class=\"headerlink\" title=\"Conda介绍\"></a>Conda介绍</h3><blockquote>\n<p>Conda 是一个开源的软件包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。 Conda 是为 Python 程序创建的，适用于 Linux，OS X 和Windows，也可以打包和分发其他软件。</p>\n</blockquote>\n<h3 id=\"下载-amp-安装\"><a href=\"#下载-amp-安装\" class=\"headerlink\" title=\"下载&amp;安装\"></a>下载&amp;安装</h3><blockquote>\n<p>conda官网：<a href=\"https://conda.io/miniconda.html\">https://conda.io/miniconda.html</a></p>\n</blockquote>\n<p>linux或mac ox版本：</p>\n<pre><code>wget -c https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n\nchmod 777 Miniconda3-latest-Linux-x86_64.sh #给执行权限\nbash Miniconda3-latest-Linux-x86_64.sh #运行</code></pre><blockquote>\n<p>当命令行前面出现(base)的时候说明现在已经在conda的环境中了。这时候输入conda list 命令就有反应了</p>\n</blockquote>\n<h3 id=\"添加频道\"><a href=\"#添加频道\" class=\"headerlink\" title=\"添加频道\"></a>添加频道</h3><p>官方频道</p>\n<pre><code>conda config --add channels bioconda\nconda config --add channels conda-forge</code></pre><p> 清华镜像</p>\n<pre><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda</code></pre><p>其他：</p>\n<pre><code>conda config --add channels genomedk</code></pre><p>显示安装的频道</p>\n<pre><code> conda config --set show_channel_urls yes </code></pre><p>查看已经添加的channels</p>\n<pre><code>conda config --get channels</code></pre><p>已添加的channel在哪里查看</p>\n<pre><code>vim ~/.condarc</code></pre><h3 id=\"创建环境\"><a href=\"#创建环境\" class=\"headerlink\" title=\"创建环境\"></a>创建环境</h3><p>如创建一个python2.7环境且名为mysite</p>\n<pre><code>conda create -n mysite python=2.7</code></pre><h3 id=\"激活、退出环境\"><a href=\"#激活、退出环境\" class=\"headerlink\" title=\"激活、退出环境\"></a>激活、退出环境</h3><p>激活：<br>windows环境下不用加conda前缀，mac及旧版本下可能需要使用source activate</p>\n<pre><code>conda activate mysite</code></pre><p>退出：<br>同激活</p>\n<pre><code>conda deactivate mysite</code></pre><h3 id=\"删除环境\"><a href=\"#删除环境\" class=\"headerlink\" title=\"删除环境\"></a>删除环境</h3><pre><code>conda remove -n mysite --all</code></pre><h3 id=\"重命名环境\"><a href=\"#重命名环境\" class=\"headerlink\" title=\"重命名环境\"></a>重命名环境</h3><p>把一个原来叫做py2的环境重新命名成python2：</p>\n<pre><code>conda create -n python2 --clone py2\nconda remove -n py2 --all</code></pre>"},{"title":"Django  初始测试","_content":"\n### 使用models.py 创建数据库\n\n> 注意事项：\n>1、makemigrations 和 migrate 工作原理分别是什么：\nmakemigrations：根据检测到的模型创建新的迁移。迁移的作用，更多的是将数据库的操作，以文件的形式记录下来，方便以后检查、调用、重做等等。\nmigrate：使数据库状态与当前模型集和迁移集同步。说白了，就是将对数据库的更改，主要是数据表设计的更改，在数据库中真实执行。例如，新建、修改、删除数据表，新增、修改、删除某数据表内的字段等等。\n2、如果不想使用 Django 的 makemigrations 和 migrate 功能，但是不小心执行了这两个命令会发生什么，\n首先在该app下建立 migrations目录，并记录下你所有的关于modes.py的改动，比如0001_initial.py，\n接着执行migrate的话，这时候会作用到数据库文件，产生对应的表\n3、官方解释：\n运行 python manage.py makemigrations 为模型的改变生成迁移文件。\n运行 python manage.py migrate 来应用数据库迁移。\n参考： https://blog.csdn.net/weixin_43507484/article/details/87950788\n\n> 1. 先执行一下迁移\n\n\n> 2. 编辑app里的models.py\n如：\n\n```\nfrom django.db import models\n\n\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField('date published')\n\n\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)\n```\n\n> 3. 激活模型\n\n```\n#mysite/settings.py\nINSTALLED_APPS = [\n    'polls.apps.PollsConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```\n\n> 4. 执行生成数据库\n\n\n```\npython manage.py makemigrations polls\n```\n\n输出迁移过程中可能执行的sql\n\n```\npython manage.py sqlmigrate polls 0001\n```\n\n最后，正式执行迁移\n\n```\npython manage.py migrate\n```\n\n\n\n### 使用API\n\n进入项目的Python控制台\n\n```\npython manage.py shell\n\nfrom polls.models import Choice, Question  # Import the model classes we just wrote.\nQuestion.objects.all()\n```\n\n给模型添加__str__()函数，这样默认输出将会改变\n\n```\nfrom django.db import models\n\nclass Question(models.Model):\n    # ...\n    def __str__(self):\n        return self.question_text\n\nclass Choice(models.Model):\n    # ...\n    def __str__(self):\n        return self.choice_text\n```\n\n\n\n### 使用管理员账号\n\n```\npython manage.py createsuperuser\n```\n\n此时进入xxxx/admin网址，登录就可看到数据库资源\n\n```\npython manage.py runserver\n```\n\n加入我们的项目\n\n```\nfrom django.contrib import admin\n\nfrom .models import Question\n\nadmin.site.register(Question)\n```\n\n无需重启，直接刷新就可以看到项目在主界面\n\n\n","source":"_posts/Django  初始测试.md","raw":"---\ntitle: Django  初始测试\ncategories:\n- Python的Web\ntags: \n- Python\n- Note\n- Django\n---\n\n### 使用models.py 创建数据库\n\n> 注意事项：\n>1、makemigrations 和 migrate 工作原理分别是什么：\nmakemigrations：根据检测到的模型创建新的迁移。迁移的作用，更多的是将数据库的操作，以文件的形式记录下来，方便以后检查、调用、重做等等。\nmigrate：使数据库状态与当前模型集和迁移集同步。说白了，就是将对数据库的更改，主要是数据表设计的更改，在数据库中真实执行。例如，新建、修改、删除数据表，新增、修改、删除某数据表内的字段等等。\n2、如果不想使用 Django 的 makemigrations 和 migrate 功能，但是不小心执行了这两个命令会发生什么，\n首先在该app下建立 migrations目录，并记录下你所有的关于modes.py的改动，比如0001_initial.py，\n接着执行migrate的话，这时候会作用到数据库文件，产生对应的表\n3、官方解释：\n运行 python manage.py makemigrations 为模型的改变生成迁移文件。\n运行 python manage.py migrate 来应用数据库迁移。\n参考： https://blog.csdn.net/weixin_43507484/article/details/87950788\n\n> 1. 先执行一下迁移\n\n\n> 2. 编辑app里的models.py\n如：\n\n```\nfrom django.db import models\n\n\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField('date published')\n\n\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)\n```\n\n> 3. 激活模型\n\n```\n#mysite/settings.py\nINSTALLED_APPS = [\n    'polls.apps.PollsConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```\n\n> 4. 执行生成数据库\n\n\n```\npython manage.py makemigrations polls\n```\n\n输出迁移过程中可能执行的sql\n\n```\npython manage.py sqlmigrate polls 0001\n```\n\n最后，正式执行迁移\n\n```\npython manage.py migrate\n```\n\n\n\n### 使用API\n\n进入项目的Python控制台\n\n```\npython manage.py shell\n\nfrom polls.models import Choice, Question  # Import the model classes we just wrote.\nQuestion.objects.all()\n```\n\n给模型添加__str__()函数，这样默认输出将会改变\n\n```\nfrom django.db import models\n\nclass Question(models.Model):\n    # ...\n    def __str__(self):\n        return self.question_text\n\nclass Choice(models.Model):\n    # ...\n    def __str__(self):\n        return self.choice_text\n```\n\n\n\n### 使用管理员账号\n\n```\npython manage.py createsuperuser\n```\n\n此时进入xxxx/admin网址，登录就可看到数据库资源\n\n```\npython manage.py runserver\n```\n\n加入我们的项目\n\n```\nfrom django.contrib import admin\n\nfrom .models import Question\n\nadmin.site.register(Question)\n```\n\n无需重启，直接刷新就可以看到项目在主界面\n\n\n","slug":"Django  初始测试","published":1,"date":"2019-11-25T03:25:48.218Z","updated":"2019-11-25T03:25:48.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs7m0006ekuwfnddyrnv","content":"<h3 id=\"使用models-py-创建数据库\"><a href=\"#使用models-py-创建数据库\" class=\"headerlink\" title=\"使用models.py 创建数据库\"></a>使用models.py 创建数据库</h3><blockquote>\n<p>注意事项：<br>1、makemigrations 和 migrate 工作原理分别是什么：<br>makemigrations：根据检测到的模型创建新的迁移。迁移的作用，更多的是将数据库的操作，以文件的形式记录下来，方便以后检查、调用、重做等等。<br>migrate：使数据库状态与当前模型集和迁移集同步。说白了，就是将对数据库的更改，主要是数据表设计的更改，在数据库中真实执行。例如，新建、修改、删除数据表，新增、修改、删除某数据表内的字段等等。<br>2、如果不想使用 Django 的 makemigrations 和 migrate 功能，但是不小心执行了这两个命令会发生什么，<br>首先在该app下建立 migrations目录，并记录下你所有的关于modes.py的改动，比如0001_initial.py，<br>接着执行migrate的话，这时候会作用到数据库文件，产生对应的表<br>3、官方解释：<br>运行 python manage.py makemigrations 为模型的改变生成迁移文件。<br>运行 python manage.py migrate 来应用数据库迁移。<br>参考： <a href=\"https://blog.csdn.net/weixin_43507484/article/details/87950788\">https://blog.csdn.net/weixin_43507484/article/details/87950788</a></p>\n</blockquote>\n<blockquote>\n<ol>\n<li>先执行一下迁移</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>编辑app里的models.py<br>如：</li>\n</ol>\n</blockquote>\n<pre><code>from django.db import models\n\n\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField(&#39;date published&#39;)\n\n\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)</code></pre><blockquote>\n<ol start=\"3\">\n<li>激活模型</li>\n</ol>\n</blockquote>\n<pre><code>#mysite/settings.py\nINSTALLED_APPS = [\n    &#39;polls.apps.PollsConfig&#39;,\n    &#39;django.contrib.admin&#39;,\n    &#39;django.contrib.auth&#39;,\n    &#39;django.contrib.contenttypes&#39;,\n    &#39;django.contrib.sessions&#39;,\n    &#39;django.contrib.messages&#39;,\n    &#39;django.contrib.staticfiles&#39;,\n]</code></pre><blockquote>\n<ol start=\"4\">\n<li>执行生成数据库</li>\n</ol>\n</blockquote>\n<pre><code>python manage.py makemigrations polls</code></pre><p>输出迁移过程中可能执行的sql</p>\n<pre><code>python manage.py sqlmigrate polls 0001</code></pre><p>最后，正式执行迁移</p>\n<pre><code>python manage.py migrate</code></pre><h3 id=\"使用API\"><a href=\"#使用API\" class=\"headerlink\" title=\"使用API\"></a>使用API</h3><p>进入项目的Python控制台</p>\n<pre><code>python manage.py shell\n\nfrom polls.models import Choice, Question  # Import the model classes we just wrote.\nQuestion.objects.all()</code></pre><p>给模型添加<strong>str</strong>()函数，这样默认输出将会改变</p>\n<pre><code>from django.db import models\n\nclass Question(models.Model):\n    # ...\n    def __str__(self):\n        return self.question_text\n\nclass Choice(models.Model):\n    # ...\n    def __str__(self):\n        return self.choice_text</code></pre><h3 id=\"使用管理员账号\"><a href=\"#使用管理员账号\" class=\"headerlink\" title=\"使用管理员账号\"></a>使用管理员账号</h3><pre><code>python manage.py createsuperuser</code></pre><p>此时进入xxxx/admin网址，登录就可看到数据库资源</p>\n<pre><code>python manage.py runserver</code></pre><p>加入我们的项目</p>\n<pre><code>from django.contrib import admin\n\nfrom .models import Question\n\nadmin.site.register(Question)</code></pre><p>无需重启，直接刷新就可以看到项目在主界面</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"使用models-py-创建数据库\"><a href=\"#使用models-py-创建数据库\" class=\"headerlink\" title=\"使用models.py 创建数据库\"></a>使用models.py 创建数据库</h3><blockquote>\n<p>注意事项：<br>1、makemigrations 和 migrate 工作原理分别是什么：<br>makemigrations：根据检测到的模型创建新的迁移。迁移的作用，更多的是将数据库的操作，以文件的形式记录下来，方便以后检查、调用、重做等等。<br>migrate：使数据库状态与当前模型集和迁移集同步。说白了，就是将对数据库的更改，主要是数据表设计的更改，在数据库中真实执行。例如，新建、修改、删除数据表，新增、修改、删除某数据表内的字段等等。<br>2、如果不想使用 Django 的 makemigrations 和 migrate 功能，但是不小心执行了这两个命令会发生什么，<br>首先在该app下建立 migrations目录，并记录下你所有的关于modes.py的改动，比如0001_initial.py，<br>接着执行migrate的话，这时候会作用到数据库文件，产生对应的表<br>3、官方解释：<br>运行 python manage.py makemigrations 为模型的改变生成迁移文件。<br>运行 python manage.py migrate 来应用数据库迁移。<br>参考： <a href=\"https://blog.csdn.net/weixin_43507484/article/details/87950788\">https://blog.csdn.net/weixin_43507484/article/details/87950788</a></p>\n</blockquote>\n<blockquote>\n<ol>\n<li>先执行一下迁移</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>编辑app里的models.py<br>如：</li>\n</ol>\n</blockquote>\n<pre><code>from django.db import models\n\n\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField(&#39;date published&#39;)\n\n\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)</code></pre><blockquote>\n<ol start=\"3\">\n<li>激活模型</li>\n</ol>\n</blockquote>\n<pre><code>#mysite/settings.py\nINSTALLED_APPS = [\n    &#39;polls.apps.PollsConfig&#39;,\n    &#39;django.contrib.admin&#39;,\n    &#39;django.contrib.auth&#39;,\n    &#39;django.contrib.contenttypes&#39;,\n    &#39;django.contrib.sessions&#39;,\n    &#39;django.contrib.messages&#39;,\n    &#39;django.contrib.staticfiles&#39;,\n]</code></pre><blockquote>\n<ol start=\"4\">\n<li>执行生成数据库</li>\n</ol>\n</blockquote>\n<pre><code>python manage.py makemigrations polls</code></pre><p>输出迁移过程中可能执行的sql</p>\n<pre><code>python manage.py sqlmigrate polls 0001</code></pre><p>最后，正式执行迁移</p>\n<pre><code>python manage.py migrate</code></pre><h3 id=\"使用API\"><a href=\"#使用API\" class=\"headerlink\" title=\"使用API\"></a>使用API</h3><p>进入项目的Python控制台</p>\n<pre><code>python manage.py shell\n\nfrom polls.models import Choice, Question  # Import the model classes we just wrote.\nQuestion.objects.all()</code></pre><p>给模型添加<strong>str</strong>()函数，这样默认输出将会改变</p>\n<pre><code>from django.db import models\n\nclass Question(models.Model):\n    # ...\n    def __str__(self):\n        return self.question_text\n\nclass Choice(models.Model):\n    # ...\n    def __str__(self):\n        return self.choice_text</code></pre><h3 id=\"使用管理员账号\"><a href=\"#使用管理员账号\" class=\"headerlink\" title=\"使用管理员账号\"></a>使用管理员账号</h3><pre><code>python manage.py createsuperuser</code></pre><p>此时进入xxxx/admin网址，登录就可看到数据库资源</p>\n<pre><code>python manage.py runserver</code></pre><p>加入我们的项目</p>\n<pre><code>from django.contrib import admin\n\nfrom .models import Question\n\nadmin.site.register(Question)</code></pre><p>无需重启，直接刷新就可以看到项目在主界面</p>\n"},{"title":"Django  初步构建","_content":"\n### Generic View\n>　简化写法，可选的有generic.IndexView和generic.DetailView\n>　DetailView 默认使用  \\<app name\\>/\\<model name\\>_detail.html.为模板， 可使用template重定向。自动生成model小写名字_list 为名的对象\n>　ListView 默认使用  \\<app name\\>/\\<model name\\>_list.html 为模板，可使用template重定向。 自动生成model小写名字的context对象\n\n","source":"_posts/Django  初步构建.md","raw":"---\ntitle: Django  初步构建\ncategories:\n- Python Web\ntags: \n- Python\n- Note\n- Django\n---\n\n### Generic View\n>　简化写法，可选的有generic.IndexView和generic.DetailView\n>　DetailView 默认使用  \\<app name\\>/\\<model name\\>_detail.html.为模板， 可使用template重定向。自动生成model小写名字_list 为名的对象\n>　ListView 默认使用  \\<app name\\>/\\<model name\\>_list.html 为模板，可使用template重定向。 自动生成model小写名字的context对象\n\n","slug":"Django  初步构建","published":1,"date":"2019-11-25T03:25:48.218Z","updated":"2019-11-25T03:25:48.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs7n0007ekuwjh4s0eoi","content":"<h3 id=\"Generic-View\"><a href=\"#Generic-View\" class=\"headerlink\" title=\"Generic View\"></a>Generic View</h3><blockquote>\n<p>　简化写法，可选的有generic.IndexView和generic.DetailView<br>　DetailView 默认使用  &lt;app name&gt;/&lt;model name&gt;_detail.html.为模板， 可使用template重定向。自动生成model小写名字_list 为名的对象<br>　ListView 默认使用  &lt;app name&gt;/&lt;model name&gt;_list.html 为模板，可使用template重定向。 自动生成model小写名字的context对象</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Generic-View\"><a href=\"#Generic-View\" class=\"headerlink\" title=\"Generic View\"></a>Generic View</h3><blockquote>\n<p>　简化写法，可选的有generic.IndexView和generic.DetailView<br>　DetailView 默认使用  &lt;app name&gt;/&lt;model name&gt;_detail.html.为模板， 可使用template重定向。自动生成model小写名字_list 为名的对象<br>　ListView 默认使用  &lt;app name&gt;/&lt;model name&gt;_list.html 为模板，可使用template重定向。 自动生成model小写名字的context对象</p>\n</blockquote>\n"},{"title":"Game Engine Architecture - English","_content":"\n## hence\n\n## emit\n\n## derivative\n\n## comprise\n\n## manipulate\n\n## indistinguishable\n\n## vehicle\n\n## loosely\n\n## intuitive notion\n\n## insanely\n\n## mod\n\n## considerable\n\n## blurry\n\n## orc\n\n## arguably\n\n## reserve\n\n## gamut\n\n## akin\n\n## craft\n\n## genre\n\n## optimal\n\n## trade-off\n\n## corridor\n\n## roaming\n\n## confined\n\n## traversal\n\n## forgiving\n\n## fidelity\n\n## ubiquitous\n\n## dungeon crawl\n\n\n\n","source":"_posts/Game Engine Architecture - English.md","raw":"---\ntitle: Game Engine Architecture - English\ncategories:\n- Reading\n- Book\n- Learn\n- 英语学习\ntags: \n- Game\n- English\n---\n\n## hence\n\n## emit\n\n## derivative\n\n## comprise\n\n## manipulate\n\n## indistinguishable\n\n## vehicle\n\n## loosely\n\n## intuitive notion\n\n## insanely\n\n## mod\n\n## considerable\n\n## blurry\n\n## orc\n\n## arguably\n\n## reserve\n\n## gamut\n\n## akin\n\n## craft\n\n## genre\n\n## optimal\n\n## trade-off\n\n## corridor\n\n## roaming\n\n## confined\n\n## traversal\n\n## forgiving\n\n## fidelity\n\n## ubiquitous\n\n## dungeon crawl\n\n\n\n","slug":"Game Engine Architecture - English","published":1,"date":"2019-11-25T03:25:48.219Z","updated":"2019-11-25T03:25:48.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs7q000aekuwrhdntjnj","content":"<h2 id=\"hence\"><a href=\"#hence\" class=\"headerlink\" title=\"hence\"></a>hence</h2><h2 id=\"emit\"><a href=\"#emit\" class=\"headerlink\" title=\"emit\"></a>emit</h2><h2 id=\"derivative\"><a href=\"#derivative\" class=\"headerlink\" title=\"derivative\"></a>derivative</h2><h2 id=\"comprise\"><a href=\"#comprise\" class=\"headerlink\" title=\"comprise\"></a>comprise</h2><h2 id=\"manipulate\"><a href=\"#manipulate\" class=\"headerlink\" title=\"manipulate\"></a>manipulate</h2><h2 id=\"indistinguishable\"><a href=\"#indistinguishable\" class=\"headerlink\" title=\"indistinguishable\"></a>indistinguishable</h2><h2 id=\"vehicle\"><a href=\"#vehicle\" class=\"headerlink\" title=\"vehicle\"></a>vehicle</h2><h2 id=\"loosely\"><a href=\"#loosely\" class=\"headerlink\" title=\"loosely\"></a>loosely</h2><h2 id=\"intuitive-notion\"><a href=\"#intuitive-notion\" class=\"headerlink\" title=\"intuitive notion\"></a>intuitive notion</h2><h2 id=\"insanely\"><a href=\"#insanely\" class=\"headerlink\" title=\"insanely\"></a>insanely</h2><h2 id=\"mod\"><a href=\"#mod\" class=\"headerlink\" title=\"mod\"></a>mod</h2><h2 id=\"considerable\"><a href=\"#considerable\" class=\"headerlink\" title=\"considerable\"></a>considerable</h2><h2 id=\"blurry\"><a href=\"#blurry\" class=\"headerlink\" title=\"blurry\"></a>blurry</h2><h2 id=\"orc\"><a href=\"#orc\" class=\"headerlink\" title=\"orc\"></a>orc</h2><h2 id=\"arguably\"><a href=\"#arguably\" class=\"headerlink\" title=\"arguably\"></a>arguably</h2><h2 id=\"reserve\"><a href=\"#reserve\" class=\"headerlink\" title=\"reserve\"></a>reserve</h2><h2 id=\"gamut\"><a href=\"#gamut\" class=\"headerlink\" title=\"gamut\"></a>gamut</h2><h2 id=\"akin\"><a href=\"#akin\" class=\"headerlink\" title=\"akin\"></a>akin</h2><h2 id=\"craft\"><a href=\"#craft\" class=\"headerlink\" title=\"craft\"></a>craft</h2><h2 id=\"genre\"><a href=\"#genre\" class=\"headerlink\" title=\"genre\"></a>genre</h2><h2 id=\"optimal\"><a href=\"#optimal\" class=\"headerlink\" title=\"optimal\"></a>optimal</h2><h2 id=\"trade-off\"><a href=\"#trade-off\" class=\"headerlink\" title=\"trade-off\"></a>trade-off</h2><h2 id=\"corridor\"><a href=\"#corridor\" class=\"headerlink\" title=\"corridor\"></a>corridor</h2><h2 id=\"roaming\"><a href=\"#roaming\" class=\"headerlink\" title=\"roaming\"></a>roaming</h2><h2 id=\"confined\"><a href=\"#confined\" class=\"headerlink\" title=\"confined\"></a>confined</h2><h2 id=\"traversal\"><a href=\"#traversal\" class=\"headerlink\" title=\"traversal\"></a>traversal</h2><h2 id=\"forgiving\"><a href=\"#forgiving\" class=\"headerlink\" title=\"forgiving\"></a>forgiving</h2><h2 id=\"fidelity\"><a href=\"#fidelity\" class=\"headerlink\" title=\"fidelity\"></a>fidelity</h2><h2 id=\"ubiquitous\"><a href=\"#ubiquitous\" class=\"headerlink\" title=\"ubiquitous\"></a>ubiquitous</h2><h2 id=\"dungeon-crawl\"><a href=\"#dungeon-crawl\" class=\"headerlink\" title=\"dungeon crawl\"></a>dungeon crawl</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"hence\"><a href=\"#hence\" class=\"headerlink\" title=\"hence\"></a>hence</h2><h2 id=\"emit\"><a href=\"#emit\" class=\"headerlink\" title=\"emit\"></a>emit</h2><h2 id=\"derivative\"><a href=\"#derivative\" class=\"headerlink\" title=\"derivative\"></a>derivative</h2><h2 id=\"comprise\"><a href=\"#comprise\" class=\"headerlink\" title=\"comprise\"></a>comprise</h2><h2 id=\"manipulate\"><a href=\"#manipulate\" class=\"headerlink\" title=\"manipulate\"></a>manipulate</h2><h2 id=\"indistinguishable\"><a href=\"#indistinguishable\" class=\"headerlink\" title=\"indistinguishable\"></a>indistinguishable</h2><h2 id=\"vehicle\"><a href=\"#vehicle\" class=\"headerlink\" title=\"vehicle\"></a>vehicle</h2><h2 id=\"loosely\"><a href=\"#loosely\" class=\"headerlink\" title=\"loosely\"></a>loosely</h2><h2 id=\"intuitive-notion\"><a href=\"#intuitive-notion\" class=\"headerlink\" title=\"intuitive notion\"></a>intuitive notion</h2><h2 id=\"insanely\"><a href=\"#insanely\" class=\"headerlink\" title=\"insanely\"></a>insanely</h2><h2 id=\"mod\"><a href=\"#mod\" class=\"headerlink\" title=\"mod\"></a>mod</h2><h2 id=\"considerable\"><a href=\"#considerable\" class=\"headerlink\" title=\"considerable\"></a>considerable</h2><h2 id=\"blurry\"><a href=\"#blurry\" class=\"headerlink\" title=\"blurry\"></a>blurry</h2><h2 id=\"orc\"><a href=\"#orc\" class=\"headerlink\" title=\"orc\"></a>orc</h2><h2 id=\"arguably\"><a href=\"#arguably\" class=\"headerlink\" title=\"arguably\"></a>arguably</h2><h2 id=\"reserve\"><a href=\"#reserve\" class=\"headerlink\" title=\"reserve\"></a>reserve</h2><h2 id=\"gamut\"><a href=\"#gamut\" class=\"headerlink\" title=\"gamut\"></a>gamut</h2><h2 id=\"akin\"><a href=\"#akin\" class=\"headerlink\" title=\"akin\"></a>akin</h2><h2 id=\"craft\"><a href=\"#craft\" class=\"headerlink\" title=\"craft\"></a>craft</h2><h2 id=\"genre\"><a href=\"#genre\" class=\"headerlink\" title=\"genre\"></a>genre</h2><h2 id=\"optimal\"><a href=\"#optimal\" class=\"headerlink\" title=\"optimal\"></a>optimal</h2><h2 id=\"trade-off\"><a href=\"#trade-off\" class=\"headerlink\" title=\"trade-off\"></a>trade-off</h2><h2 id=\"corridor\"><a href=\"#corridor\" class=\"headerlink\" title=\"corridor\"></a>corridor</h2><h2 id=\"roaming\"><a href=\"#roaming\" class=\"headerlink\" title=\"roaming\"></a>roaming</h2><h2 id=\"confined\"><a href=\"#confined\" class=\"headerlink\" title=\"confined\"></a>confined</h2><h2 id=\"traversal\"><a href=\"#traversal\" class=\"headerlink\" title=\"traversal\"></a>traversal</h2><h2 id=\"forgiving\"><a href=\"#forgiving\" class=\"headerlink\" title=\"forgiving\"></a>forgiving</h2><h2 id=\"fidelity\"><a href=\"#fidelity\" class=\"headerlink\" title=\"fidelity\"></a>fidelity</h2><h2 id=\"ubiquitous\"><a href=\"#ubiquitous\" class=\"headerlink\" title=\"ubiquitous\"></a>ubiquitous</h2><h2 id=\"dungeon-crawl\"><a href=\"#dungeon-crawl\" class=\"headerlink\" title=\"dungeon crawl\"></a>dungeon crawl</h2>"},{"title":"Game Engine Architecture - Foundations Part1","_content":"\n## What is Game?\n\n>In his excellent book, A Theory\nof Fun for Game Design **a game to be an interactive experience that provides the player with an increasingly challenging sequence of patterns which he or she learns and eventually masters**.\n\n>游戏： 一个交互性的经历提供一个玩家学习或将要学习的技能的挑战集合（持续提升的）\n\n* soft real-time game & hard real-time game\n  soft 意味着deadline不影响玩家，hard往往造成严重的后果。\n  \n\n## Game genres\n\n### FPS\n\n>first-person shooters aim to provide their players with the illusion of being\nimmersed in a detailed, hyperrealistic world\n\n>First-person shooters typically focus on technologies such as:\n>* efficient rendering of large 3D virtual worlds;\n>* a responsive camera control/aiming mechanic;\n>* high-fidelity animations of the player’s virtual arms and weapons;\n>* a wide range of powerful handheld weaponry;\n>* a forgiving player character motion and collision model, which often\ngives these games a “floaty” feel;\n>* high-fidelity animations and artificial intelligence for the non-player\ncharacters (NPCs)—the player’s enemies and allies; and\n>* small-scale online multiplayer capabilities (typically supporting up to\n64 simultaneous players), and the ubiquitous “death match” gameplay\nmode.\n\n> 高效渲染3D虚拟世界\n> 有响应式的相机控制与射击目标指向机制\n> 高质量的玩家手臂和武器控制\n> 丰富的装备选择\n> 丰富的人物动画库和碰撞模型\n> 非玩家（NPC）的高质量动作和人工智能\n> 小型的多人同屏（<64）和频繁的角色死亡重生的游戏机制\n\n### Platformers and Other Third-Person Games\n\n> Technologies specifically:\n> * moving platforms, ladders, ropes, trellises and other interesting locomotion modes;\n> * puzzle-like environmental elements;\n> * a third-person “follow camera” which stays focused on the player character and whose rotation is typically controlled by the human player via\nthe right joypad stick (on a console) or the mouse (on a PC—note that\nwhile there are a number of popular third-person shooters on a PC, the\nplatformer genre exists almost exclusively on consoles); and\n> * a complex camera collision system for ensuring that the view point never\n“clips” through background geometry or dynamic foreground objects\n\n> 移动平台，楼梯等模块\n> 场景的混淆视听的组件\n> 第三人称使用的相机跟随\n> 复杂的相机机制以显示当前游戏所需的空间\n\n\n\n","source":"_posts/Game Engine Architecture - Foundations Part1.md","raw":"---\ntitle: Game Engine Architecture - Foundations Part1 \ncategories:\n- Reading\n- Book\n- Learn\ntags: \n- Game\n---\n\n## What is Game?\n\n>In his excellent book, A Theory\nof Fun for Game Design **a game to be an interactive experience that provides the player with an increasingly challenging sequence of patterns which he or she learns and eventually masters**.\n\n>游戏： 一个交互性的经历提供一个玩家学习或将要学习的技能的挑战集合（持续提升的）\n\n* soft real-time game & hard real-time game\n  soft 意味着deadline不影响玩家，hard往往造成严重的后果。\n  \n\n## Game genres\n\n### FPS\n\n>first-person shooters aim to provide their players with the illusion of being\nimmersed in a detailed, hyperrealistic world\n\n>First-person shooters typically focus on technologies such as:\n>* efficient rendering of large 3D virtual worlds;\n>* a responsive camera control/aiming mechanic;\n>* high-fidelity animations of the player’s virtual arms and weapons;\n>* a wide range of powerful handheld weaponry;\n>* a forgiving player character motion and collision model, which often\ngives these games a “floaty” feel;\n>* high-fidelity animations and artificial intelligence for the non-player\ncharacters (NPCs)—the player’s enemies and allies; and\n>* small-scale online multiplayer capabilities (typically supporting up to\n64 simultaneous players), and the ubiquitous “death match” gameplay\nmode.\n\n> 高效渲染3D虚拟世界\n> 有响应式的相机控制与射击目标指向机制\n> 高质量的玩家手臂和武器控制\n> 丰富的装备选择\n> 丰富的人物动画库和碰撞模型\n> 非玩家（NPC）的高质量动作和人工智能\n> 小型的多人同屏（<64）和频繁的角色死亡重生的游戏机制\n\n### Platformers and Other Third-Person Games\n\n> Technologies specifically:\n> * moving platforms, ladders, ropes, trellises and other interesting locomotion modes;\n> * puzzle-like environmental elements;\n> * a third-person “follow camera” which stays focused on the player character and whose rotation is typically controlled by the human player via\nthe right joypad stick (on a console) or the mouse (on a PC—note that\nwhile there are a number of popular third-person shooters on a PC, the\nplatformer genre exists almost exclusively on consoles); and\n> * a complex camera collision system for ensuring that the view point never\n“clips” through background geometry or dynamic foreground objects\n\n> 移动平台，楼梯等模块\n> 场景的混淆视听的组件\n> 第三人称使用的相机跟随\n> 复杂的相机机制以显示当前游戏所需的空间\n\n\n\n","slug":"Game Engine Architecture - Foundations Part1","published":1,"date":"2019-11-25T03:25:48.219Z","updated":"2019-11-25T03:25:48.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs7s000bekuwr3xokshw","content":"<h2 id=\"What-is-Game\"><a href=\"#What-is-Game\" class=\"headerlink\" title=\"What is Game?\"></a>What is Game?</h2><blockquote>\n<p>In his excellent book, A Theory<br>of Fun for Game Design <strong>a game to be an interactive experience that provides the player with an increasingly challenging sequence of patterns which he or she learns and eventually masters</strong>.</p>\n</blockquote>\n<blockquote>\n<p>游戏： 一个交互性的经历提供一个玩家学习或将要学习的技能的挑战集合（持续提升的）</p>\n</blockquote>\n<ul>\n<li>soft real-time game &amp; hard real-time game<br>soft 意味着deadline不影响玩家，hard往往造成严重的后果。</li>\n</ul>\n<h2 id=\"Game-genres\"><a href=\"#Game-genres\" class=\"headerlink\" title=\"Game genres\"></a>Game genres</h2><h3 id=\"FPS\"><a href=\"#FPS\" class=\"headerlink\" title=\"FPS\"></a>FPS</h3><blockquote>\n<p>first-person shooters aim to provide their players with the illusion of being<br>immersed in a detailed, hyperrealistic world</p>\n</blockquote>\n<blockquote>\n<p>First-person shooters typically focus on technologies such as:</p>\n<ul>\n<li>efficient rendering of large 3D virtual worlds;</li>\n<li>a responsive camera control/aiming mechanic;</li>\n<li>high-fidelity animations of the player’s virtual arms and weapons;</li>\n<li>a wide range of powerful handheld weaponry;</li>\n<li>a forgiving player character motion and collision model, which often<br>gives these games a “floaty” feel;</li>\n<li>high-fidelity animations and artificial intelligence for the non-player<br>characters (NPCs)—the player’s enemies and allies; and</li>\n<li>small-scale online multiplayer capabilities (typically supporting up to<br>64 simultaneous players), and the ubiquitous “death match” gameplay<br>mode.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>高效渲染3D虚拟世界<br>有响应式的相机控制与射击目标指向机制<br>高质量的玩家手臂和武器控制<br>丰富的装备选择<br>丰富的人物动画库和碰撞模型<br>非玩家（NPC）的高质量动作和人工智能<br>小型的多人同屏（&lt;64）和频繁的角色死亡重生的游戏机制</p>\n</blockquote>\n<h3 id=\"Platformers-and-Other-Third-Person-Games\"><a href=\"#Platformers-and-Other-Third-Person-Games\" class=\"headerlink\" title=\"Platformers and Other Third-Person Games\"></a>Platformers and Other Third-Person Games</h3><blockquote>\n<p>Technologies specifically:</p>\n<ul>\n<li>moving platforms, ladders, ropes, trellises and other interesting locomotion modes;</li>\n<li>puzzle-like environmental elements;</li>\n<li>a third-person “follow camera” which stays focused on the player character and whose rotation is typically controlled by the human player via<br>the right joypad stick (on a console) or the mouse (on a PC—note that<br>while there are a number of popular third-person shooters on a PC, the<br>platformer genre exists almost exclusively on consoles); and</li>\n<li>a complex camera collision system for ensuring that the view point never<br>“clips” through background geometry or dynamic foreground objects</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>移动平台，楼梯等模块<br>场景的混淆视听的组件<br>第三人称使用的相机跟随<br>复杂的相机机制以显示当前游戏所需的空间</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"What-is-Game\"><a href=\"#What-is-Game\" class=\"headerlink\" title=\"What is Game?\"></a>What is Game?</h2><blockquote>\n<p>In his excellent book, A Theory<br>of Fun for Game Design <strong>a game to be an interactive experience that provides the player with an increasingly challenging sequence of patterns which he or she learns and eventually masters</strong>.</p>\n</blockquote>\n<blockquote>\n<p>游戏： 一个交互性的经历提供一个玩家学习或将要学习的技能的挑战集合（持续提升的）</p>\n</blockquote>\n<ul>\n<li>soft real-time game &amp; hard real-time game<br>soft 意味着deadline不影响玩家，hard往往造成严重的后果。</li>\n</ul>\n<h2 id=\"Game-genres\"><a href=\"#Game-genres\" class=\"headerlink\" title=\"Game genres\"></a>Game genres</h2><h3 id=\"FPS\"><a href=\"#FPS\" class=\"headerlink\" title=\"FPS\"></a>FPS</h3><blockquote>\n<p>first-person shooters aim to provide their players with the illusion of being<br>immersed in a detailed, hyperrealistic world</p>\n</blockquote>\n<blockquote>\n<p>First-person shooters typically focus on technologies such as:</p>\n<ul>\n<li>efficient rendering of large 3D virtual worlds;</li>\n<li>a responsive camera control/aiming mechanic;</li>\n<li>high-fidelity animations of the player’s virtual arms and weapons;</li>\n<li>a wide range of powerful handheld weaponry;</li>\n<li>a forgiving player character motion and collision model, which often<br>gives these games a “floaty” feel;</li>\n<li>high-fidelity animations and artificial intelligence for the non-player<br>characters (NPCs)—the player’s enemies and allies; and</li>\n<li>small-scale online multiplayer capabilities (typically supporting up to<br>64 simultaneous players), and the ubiquitous “death match” gameplay<br>mode.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>高效渲染3D虚拟世界<br>有响应式的相机控制与射击目标指向机制<br>高质量的玩家手臂和武器控制<br>丰富的装备选择<br>丰富的人物动画库和碰撞模型<br>非玩家（NPC）的高质量动作和人工智能<br>小型的多人同屏（&lt;64）和频繁的角色死亡重生的游戏机制</p>\n</blockquote>\n<h3 id=\"Platformers-and-Other-Third-Person-Games\"><a href=\"#Platformers-and-Other-Third-Person-Games\" class=\"headerlink\" title=\"Platformers and Other Third-Person Games\"></a>Platformers and Other Third-Person Games</h3><blockquote>\n<p>Technologies specifically:</p>\n<ul>\n<li>moving platforms, ladders, ropes, trellises and other interesting locomotion modes;</li>\n<li>puzzle-like environmental elements;</li>\n<li>a third-person “follow camera” which stays focused on the player character and whose rotation is typically controlled by the human player via<br>the right joypad stick (on a console) or the mouse (on a PC—note that<br>while there are a number of popular third-person shooters on a PC, the<br>platformer genre exists almost exclusively on consoles); and</li>\n<li>a complex camera collision system for ensuring that the view point never<br>“clips” through background geometry or dynamic foreground objects</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>移动平台，楼梯等模块<br>场景的混淆视听的组件<br>第三人称使用的相机跟随<br>复杂的相机机制以显示当前游戏所需的空间</p>\n</blockquote>\n"},{"title":"Jenkins打包事项","_content":"\n# Jenkins 打包说明\n\n\n\n## 脚本准备\n\n### 自动化脚本\n\n> 1. AutoCi.rar文件\n> 2. 将文件解压至与Assets同级目录即可\n\n### Unity脚本\n\n> 1. Editor 目录下创建类BundleMakerUtil.cs， 添加如下函数：\n>\n>    ```C#\n>      public static bool HasRawArg(string name)\n>      {\n>          var args = System.Environment.GetCommandLineArgs();\n>          for (int i = 0; i < args.Length; i++)\n>          {\n>              if (args[i].Trim() == name)\n>              {\n>                  return true;\n>              }\n>          }\n>          return false;\n>      }\n>    \n>    ```\n>\n>    \n>\n> 2. Editor目录下创建类BuilderMenu.cs　使用命名空间SGameBundleMaker. （也可自定义，但需要修改auto_ci.py里的配置）\n>\n> 3. BuilderMenu.cs类中创建 build_bundle_for_ci() 静态函数，示例：\n\n ```c#\n   public static void build_bundle_for_ci()\n   {\n   \t\t //... Code for build build \n          AssetBundleManifest bundle_manifest = null;\n            try\n            {\n                bundle_manifest = BuildPipeline.BuildAssetBundles(BundleMaker.BUNDLE_DIR, all_build, BuildAssetBundleOptions.DeterministicAssetBundle | BuildAssetBundleOptions.ChunkBasedCompression, EditorUserBuildSettings.activeBuildTarget);\n            }\n            catch (Exception e)\n            {\n                error_code_ = BundleMakerErrorCode.UNKNOWN;\n                Debug.LogError(\"BuildAssetBundles Error: \" + e.Message);\n                return;\n            }\n   }\n ```\n\n\n\n> 4. BuilderMenu.cs中创建 build_for_ci() 静态函数\n>\n>    注：-proj, -path 也可修改，需要与auto_ci.py中代码对应\n>\n>    示例如下:\n\n```c#\npublic static void build_for_ci()\n{\n    //！Builder类需要自己实现，具体作为对应不同平台打包用\n    string build_path = string.Empty;\n    #if UNITY_ANDROID\n        //是否输出项目文件或APK的标识\n        bool is_proj = BundleMakerUtil.HasRawArg(\"-proj\");\n    Debug.Log(\"build_for_ci, is_proj: \" + is_proj);\n    Builder.is_android_proj = is_proj;\n    if(Builder.is_android_proj){\n        build_path = Const.PROJECT_DIR + \"autopack/android/XGameProject\";\n    }else{\n        build_path = Const.PROJECT_DIR + \"autopack/android/XGame.apk\";\n    }\n    #elif UNITY_IPHONE\n        build_path = BundleMakerUtil.GetArg(\"-path\");\n    if (string.IsNullOrEmpty(build_path))\n    {\n        Debug.LogError(\"------build path null\");\n        return;\n    }\n    Debug.Log(\"build_for_ci, build_path: \" + build_path);\n    //build_path = string.Format(\"{0}autopack/ios/XcodeProject{1}\", new DirectoryInfo(Const.PROJECT_DIR).Parent.FullName, System.DateTime.Now.ToString(\"yyyy-MM-dd--HH-mm-ss\"));\n    #else\n        build_path = Const.PROJECT_DIR + \"autopack/win32/XGame.exe\";\n    #endif\n        //是否是debug版本的标识\n        bool is_debug = BundleMakerUtil.HasRawArg(\"-debug\");\n    Builder.is_debug_build_ = is_debug; \n    Builder.build_package(build_path, true);\n}\n```\n\n\n\n## Jenkins配置\n\n> 1. Jenkins安装 Powershell插件，在 插件列表中搜索到这个：\n\n<img src=\"./images/1571217538404.png\" alt=\"1571217538404\" style=\"zoom:100%;\" />\n\n> 2. 安装完后，重启下Jetkins\n> 3. 在项目配置->构建 里选择使用Windows PowerShell:\n\n<img src=\"./images/1571217610540.png\" alt=\"1571217610540\" style=\"zoom:100%;\" />\n\n> 4. 添加如下配置在Command格内：\n\n```powershell\necho ${ENV:WORKSPACE}\ncd ${ENV:WORKSPACE}/Unity\n./AutoCi/autobuild_android.ps1\n```\n\n<img src=\"./images/1571217788247.png\" alt=\"1571217788247\" style=\"zoom:100%;\" />\n\n\n\n## 打什么样的包？  设置环境变量\n\n> 1. 找到Jenkins环境变量设置\n>\n>    **Manage Jenkins**   ->  **Configure System**\n\n\n\n![1571216524617](./images/1571216524617.png)\n\n<img src=\"./images/1571216565243.png\" alt=\"1571216565243\" style=\"zoom:67%;\" />\n\n\n\n> 2.  打 Apk \n\n设置 IsApk 为 true\n\n\n\n> 3. 打 aar到平台\n\n设置 IsApk 为false或其他\n\n\n\n> 4. 带Debug的包\n\n设置 IsDebug为true,  当不为true时则默认为relase包\n\n\n\n## CI的执行脚本说明\n\n> 1. auto_ci.py -仅打aar到平台需要\n>    * 修改manifest.xml文件，去掉intent-filter\n>    * 修改build.gradle文件，设置为library，去掉applicationId，设置gradle版本，添加jcenter(),google()到 all projects块\n> 2. jksdk_util.py -上传aar到平台\n>    \n>    * 需要打开文件，更改下id为对应项目\n>    \n>    * 上传到平台，需要改成指定格式的名字： \n>    \n>        游戏名称-框架类型-debug/release-version.出包号.aar\n\n\n\n## 注意事项\n\n> 1. Powershell 脚本访问Jenkins环境变量记得加 **ENV:** 前缀\n> 2. 在build.gradle加入的all projects块的代码，是由于gradle有时会找不到相关的jar包，又不会启动自动下载导致\n\n","source":"_posts/Jenkins打包事项.md","raw":"---\ntitle: Jenkins打包事项\ncategories:\n- 工作相关\ntags: \n- Jenkins\n- CI\n---\n\n# Jenkins 打包说明\n\n\n\n## 脚本准备\n\n### 自动化脚本\n\n> 1. AutoCi.rar文件\n> 2. 将文件解压至与Assets同级目录即可\n\n### Unity脚本\n\n> 1. Editor 目录下创建类BundleMakerUtil.cs， 添加如下函数：\n>\n>    ```C#\n>      public static bool HasRawArg(string name)\n>      {\n>          var args = System.Environment.GetCommandLineArgs();\n>          for (int i = 0; i < args.Length; i++)\n>          {\n>              if (args[i].Trim() == name)\n>              {\n>                  return true;\n>              }\n>          }\n>          return false;\n>      }\n>    \n>    ```\n>\n>    \n>\n> 2. Editor目录下创建类BuilderMenu.cs　使用命名空间SGameBundleMaker. （也可自定义，但需要修改auto_ci.py里的配置）\n>\n> 3. BuilderMenu.cs类中创建 build_bundle_for_ci() 静态函数，示例：\n\n ```c#\n   public static void build_bundle_for_ci()\n   {\n   \t\t //... Code for build build \n          AssetBundleManifest bundle_manifest = null;\n            try\n            {\n                bundle_manifest = BuildPipeline.BuildAssetBundles(BundleMaker.BUNDLE_DIR, all_build, BuildAssetBundleOptions.DeterministicAssetBundle | BuildAssetBundleOptions.ChunkBasedCompression, EditorUserBuildSettings.activeBuildTarget);\n            }\n            catch (Exception e)\n            {\n                error_code_ = BundleMakerErrorCode.UNKNOWN;\n                Debug.LogError(\"BuildAssetBundles Error: \" + e.Message);\n                return;\n            }\n   }\n ```\n\n\n\n> 4. BuilderMenu.cs中创建 build_for_ci() 静态函数\n>\n>    注：-proj, -path 也可修改，需要与auto_ci.py中代码对应\n>\n>    示例如下:\n\n```c#\npublic static void build_for_ci()\n{\n    //！Builder类需要自己实现，具体作为对应不同平台打包用\n    string build_path = string.Empty;\n    #if UNITY_ANDROID\n        //是否输出项目文件或APK的标识\n        bool is_proj = BundleMakerUtil.HasRawArg(\"-proj\");\n    Debug.Log(\"build_for_ci, is_proj: \" + is_proj);\n    Builder.is_android_proj = is_proj;\n    if(Builder.is_android_proj){\n        build_path = Const.PROJECT_DIR + \"autopack/android/XGameProject\";\n    }else{\n        build_path = Const.PROJECT_DIR + \"autopack/android/XGame.apk\";\n    }\n    #elif UNITY_IPHONE\n        build_path = BundleMakerUtil.GetArg(\"-path\");\n    if (string.IsNullOrEmpty(build_path))\n    {\n        Debug.LogError(\"------build path null\");\n        return;\n    }\n    Debug.Log(\"build_for_ci, build_path: \" + build_path);\n    //build_path = string.Format(\"{0}autopack/ios/XcodeProject{1}\", new DirectoryInfo(Const.PROJECT_DIR).Parent.FullName, System.DateTime.Now.ToString(\"yyyy-MM-dd--HH-mm-ss\"));\n    #else\n        build_path = Const.PROJECT_DIR + \"autopack/win32/XGame.exe\";\n    #endif\n        //是否是debug版本的标识\n        bool is_debug = BundleMakerUtil.HasRawArg(\"-debug\");\n    Builder.is_debug_build_ = is_debug; \n    Builder.build_package(build_path, true);\n}\n```\n\n\n\n## Jenkins配置\n\n> 1. Jenkins安装 Powershell插件，在 插件列表中搜索到这个：\n\n<img src=\"./images/1571217538404.png\" alt=\"1571217538404\" style=\"zoom:100%;\" />\n\n> 2. 安装完后，重启下Jetkins\n> 3. 在项目配置->构建 里选择使用Windows PowerShell:\n\n<img src=\"./images/1571217610540.png\" alt=\"1571217610540\" style=\"zoom:100%;\" />\n\n> 4. 添加如下配置在Command格内：\n\n```powershell\necho ${ENV:WORKSPACE}\ncd ${ENV:WORKSPACE}/Unity\n./AutoCi/autobuild_android.ps1\n```\n\n<img src=\"./images/1571217788247.png\" alt=\"1571217788247\" style=\"zoom:100%;\" />\n\n\n\n## 打什么样的包？  设置环境变量\n\n> 1. 找到Jenkins环境变量设置\n>\n>    **Manage Jenkins**   ->  **Configure System**\n\n\n\n![1571216524617](./images/1571216524617.png)\n\n<img src=\"./images/1571216565243.png\" alt=\"1571216565243\" style=\"zoom:67%;\" />\n\n\n\n> 2.  打 Apk \n\n设置 IsApk 为 true\n\n\n\n> 3. 打 aar到平台\n\n设置 IsApk 为false或其他\n\n\n\n> 4. 带Debug的包\n\n设置 IsDebug为true,  当不为true时则默认为relase包\n\n\n\n## CI的执行脚本说明\n\n> 1. auto_ci.py -仅打aar到平台需要\n>    * 修改manifest.xml文件，去掉intent-filter\n>    * 修改build.gradle文件，设置为library，去掉applicationId，设置gradle版本，添加jcenter(),google()到 all projects块\n> 2. jksdk_util.py -上传aar到平台\n>    \n>    * 需要打开文件，更改下id为对应项目\n>    \n>    * 上传到平台，需要改成指定格式的名字： \n>    \n>        游戏名称-框架类型-debug/release-version.出包号.aar\n\n\n\n## 注意事项\n\n> 1. Powershell 脚本访问Jenkins环境变量记得加 **ENV:** 前缀\n> 2. 在build.gradle加入的all projects块的代码，是由于gradle有时会找不到相关的jar包，又不会启动自动下载导致\n\n","slug":"Jenkins打包事项","published":1,"date":"2019-11-25T03:25:48.220Z","updated":"2019-11-25T03:25:48.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs7w000fekuws5ybuiuu","content":"<h1 id=\"Jenkins-打包说明\"><a href=\"#Jenkins-打包说明\" class=\"headerlink\" title=\"Jenkins 打包说明\"></a>Jenkins 打包说明</h1><h2 id=\"脚本准备\"><a href=\"#脚本准备\" class=\"headerlink\" title=\"脚本准备\"></a>脚本准备</h2><h3 id=\"自动化脚本\"><a href=\"#自动化脚本\" class=\"headerlink\" title=\"自动化脚本\"></a>自动化脚本</h3><blockquote>\n<ol>\n<li>AutoCi.rar文件</li>\n<li>将文件解压至与Assets同级目录即可</li>\n</ol>\n</blockquote>\n<h3 id=\"Unity脚本\"><a href=\"#Unity脚本\" class=\"headerlink\" title=\"Unity脚本\"></a>Unity脚本</h3><blockquote>\n<ol>\n<li><p>Editor 目录下创建类BundleMakerUtil.cs， 添加如下函数：</p>\n<pre><code class=\"C#\">  public static bool HasRawArg(string name)\n  {\n      var args = System.Environment.GetCommandLineArgs();\n      for (int i = 0; i &lt; args.Length; i++)\n      {\n          if (args[i].Trim() == name)\n          {\n              return true;\n          }\n      }\n      return false;\n  }\n</code></pre>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>Editor目录下创建类BuilderMenu.cs　使用命名空间SGameBundleMaker. （也可自定义，但需要修改auto_ci.py里的配置）</p>\n</li>\n<li><p>BuilderMenu.cs类中创建 build_bundle_for_ci() 静态函数，示例：</p>\n</li>\n</ol>\n</blockquote>\n<pre><code class=\"c#\">   public static void build_bundle_for_ci()\n   {\n            //... Code for build build \n          AssetBundleManifest bundle_manifest = null;\n            try\n            {\n                bundle_manifest = BuildPipeline.BuildAssetBundles(BundleMaker.BUNDLE_DIR, all_build, BuildAssetBundleOptions.DeterministicAssetBundle | BuildAssetBundleOptions.ChunkBasedCompression, EditorUserBuildSettings.activeBuildTarget);\n            }\n            catch (Exception e)\n            {\n                error_code_ = BundleMakerErrorCode.UNKNOWN;\n                Debug.LogError(&quot;BuildAssetBundles Error: &quot; + e.Message);\n                return;\n            }\n   }</code></pre>\n<blockquote>\n<ol start=\"4\">\n<li><p>BuilderMenu.cs中创建 build_for_ci() 静态函数</p>\n<p>注：-proj, -path 也可修改，需要与auto_ci.py中代码对应</p>\n<p>示例如下:</p>\n</li>\n</ol>\n</blockquote>\n<pre><code class=\"c#\">public static void build_for_ci()\n{\n    //！Builder类需要自己实现，具体作为对应不同平台打包用\n    string build_path = string.Empty;\n    #if UNITY_ANDROID\n        //是否输出项目文件或APK的标识\n        bool is_proj = BundleMakerUtil.HasRawArg(&quot;-proj&quot;);\n    Debug.Log(&quot;build_for_ci, is_proj: &quot; + is_proj);\n    Builder.is_android_proj = is_proj;\n    if(Builder.is_android_proj){\n        build_path = Const.PROJECT_DIR + &quot;autopack/android/XGameProject&quot;;\n    }else{\n        build_path = Const.PROJECT_DIR + &quot;autopack/android/XGame.apk&quot;;\n    }\n    #elif UNITY_IPHONE\n        build_path = BundleMakerUtil.GetArg(&quot;-path&quot;);\n    if (string.IsNullOrEmpty(build_path))\n    {\n        Debug.LogError(&quot;------build path null&quot;);\n        return;\n    }\n    Debug.Log(&quot;build_for_ci, build_path: &quot; + build_path);\n    //build_path = string.Format(&quot;{0}autopack/ios/XcodeProject{1}&quot;, new DirectoryInfo(Const.PROJECT_DIR).Parent.FullName, System.DateTime.Now.ToString(&quot;yyyy-MM-dd--HH-mm-ss&quot;));\n    #else\n        build_path = Const.PROJECT_DIR + &quot;autopack/win32/XGame.exe&quot;;\n    #endif\n        //是否是debug版本的标识\n        bool is_debug = BundleMakerUtil.HasRawArg(&quot;-debug&quot;);\n    Builder.is_debug_build_ = is_debug; \n    Builder.build_package(build_path, true);\n}</code></pre>\n<h2 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h2><blockquote>\n<ol>\n<li>Jenkins安装 Powershell插件，在 插件列表中搜索到这个：</li>\n</ol>\n</blockquote>\n<img src=\"./images/1571217538404.png\" alt=\"1571217538404\" style=\"zoom:100%;\" />\n\n<blockquote>\n<ol start=\"2\">\n<li>安装完后，重启下Jetkins</li>\n<li>在项目配置-&gt;构建 里选择使用Windows PowerShell:</li>\n</ol>\n</blockquote>\n<img src=\"./images/1571217610540.png\" alt=\"1571217610540\" style=\"zoom:100%;\" />\n\n<blockquote>\n<ol start=\"4\">\n<li>添加如下配置在Command格内：</li>\n</ol>\n</blockquote>\n<pre><code class=\"powershell\">echo ${ENV:WORKSPACE}\ncd ${ENV:WORKSPACE}/Unity\n./AutoCi/autobuild_android.ps1</code></pre>\n<img src=\"./images/1571217788247.png\" alt=\"1571217788247\" style=\"zoom:100%;\" />\n\n\n\n<h2 id=\"打什么样的包？-设置环境变量\"><a href=\"#打什么样的包？-设置环境变量\" class=\"headerlink\" title=\"打什么样的包？  设置环境变量\"></a>打什么样的包？  设置环境变量</h2><blockquote>\n<ol>\n<li><p>找到Jenkins环境变量设置</p>\n<p><strong>Manage Jenkins</strong>   -&gt;  <strong>Configure System</strong></p>\n</li>\n</ol>\n</blockquote>\n<p><img src=\"./images/1571216524617.png\" alt=\"1571216524617\"></p>\n<img src=\"./images/1571216565243.png\" alt=\"1571216565243\" style=\"zoom:67%;\" />\n\n\n\n<blockquote>\n<ol start=\"2\">\n<li>打 Apk </li>\n</ol>\n</blockquote>\n<p>设置 IsApk 为 true</p>\n<blockquote>\n<ol start=\"3\">\n<li>打 aar到平台</li>\n</ol>\n</blockquote>\n<p>设置 IsApk 为false或其他</p>\n<blockquote>\n<ol start=\"4\">\n<li>带Debug的包</li>\n</ol>\n</blockquote>\n<p>设置 IsDebug为true,  当不为true时则默认为relase包</p>\n<h2 id=\"CI的执行脚本说明\"><a href=\"#CI的执行脚本说明\" class=\"headerlink\" title=\"CI的执行脚本说明\"></a>CI的执行脚本说明</h2><blockquote>\n<ol>\n<li><p>auto_ci.py -仅打aar到平台需要</p>\n<ul>\n<li>修改manifest.xml文件，去掉intent-filter</li>\n<li>修改build.gradle文件，设置为library，去掉applicationId，设置gradle版本，添加jcenter(),google()到 all projects块</li>\n</ul>\n</li>\n<li><p>jksdk_util.py -上传aar到平台</p>\n<ul>\n<li><p>需要打开文件，更改下id为对应项目</p>\n</li>\n<li><p>上传到平台，需要改成指定格式的名字： </p>\n<p>  游戏名称-框架类型-debug/release-version.出包号.aar</p>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><blockquote>\n<ol>\n<li>Powershell 脚本访问Jenkins环境变量记得加 <strong>ENV:</strong> 前缀</li>\n<li>在build.gradle加入的all projects块的代码，是由于gradle有时会找不到相关的jar包，又不会启动自动下载导致</li>\n</ol>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Jenkins-打包说明\"><a href=\"#Jenkins-打包说明\" class=\"headerlink\" title=\"Jenkins 打包说明\"></a>Jenkins 打包说明</h1><h2 id=\"脚本准备\"><a href=\"#脚本准备\" class=\"headerlink\" title=\"脚本准备\"></a>脚本准备</h2><h3 id=\"自动化脚本\"><a href=\"#自动化脚本\" class=\"headerlink\" title=\"自动化脚本\"></a>自动化脚本</h3><blockquote>\n<ol>\n<li>AutoCi.rar文件</li>\n<li>将文件解压至与Assets同级目录即可</li>\n</ol>\n</blockquote>\n<h3 id=\"Unity脚本\"><a href=\"#Unity脚本\" class=\"headerlink\" title=\"Unity脚本\"></a>Unity脚本</h3><blockquote>\n<ol>\n<li><p>Editor 目录下创建类BundleMakerUtil.cs， 添加如下函数：</p>\n<pre><code class=\"C#\">  public static bool HasRawArg(string name)\n  {\n      var args = System.Environment.GetCommandLineArgs();\n      for (int i = 0; i &lt; args.Length; i++)\n      {\n          if (args[i].Trim() == name)\n          {\n              return true;\n          }\n      }\n      return false;\n  }\n</code></pre>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>Editor目录下创建类BuilderMenu.cs　使用命名空间SGameBundleMaker. （也可自定义，但需要修改auto_ci.py里的配置）</p>\n</li>\n<li><p>BuilderMenu.cs类中创建 build_bundle_for_ci() 静态函数，示例：</p>\n</li>\n</ol>\n</blockquote>\n<pre><code class=\"c#\">   public static void build_bundle_for_ci()\n   {\n            //... Code for build build \n          AssetBundleManifest bundle_manifest = null;\n            try\n            {\n                bundle_manifest = BuildPipeline.BuildAssetBundles(BundleMaker.BUNDLE_DIR, all_build, BuildAssetBundleOptions.DeterministicAssetBundle | BuildAssetBundleOptions.ChunkBasedCompression, EditorUserBuildSettings.activeBuildTarget);\n            }\n            catch (Exception e)\n            {\n                error_code_ = BundleMakerErrorCode.UNKNOWN;\n                Debug.LogError(&quot;BuildAssetBundles Error: &quot; + e.Message);\n                return;\n            }\n   }</code></pre>\n<blockquote>\n<ol start=\"4\">\n<li><p>BuilderMenu.cs中创建 build_for_ci() 静态函数</p>\n<p>注：-proj, -path 也可修改，需要与auto_ci.py中代码对应</p>\n<p>示例如下:</p>\n</li>\n</ol>\n</blockquote>\n<pre><code class=\"c#\">public static void build_for_ci()\n{\n    //！Builder类需要自己实现，具体作为对应不同平台打包用\n    string build_path = string.Empty;\n    #if UNITY_ANDROID\n        //是否输出项目文件或APK的标识\n        bool is_proj = BundleMakerUtil.HasRawArg(&quot;-proj&quot;);\n    Debug.Log(&quot;build_for_ci, is_proj: &quot; + is_proj);\n    Builder.is_android_proj = is_proj;\n    if(Builder.is_android_proj){\n        build_path = Const.PROJECT_DIR + &quot;autopack/android/XGameProject&quot;;\n    }else{\n        build_path = Const.PROJECT_DIR + &quot;autopack/android/XGame.apk&quot;;\n    }\n    #elif UNITY_IPHONE\n        build_path = BundleMakerUtil.GetArg(&quot;-path&quot;);\n    if (string.IsNullOrEmpty(build_path))\n    {\n        Debug.LogError(&quot;------build path null&quot;);\n        return;\n    }\n    Debug.Log(&quot;build_for_ci, build_path: &quot; + build_path);\n    //build_path = string.Format(&quot;{0}autopack/ios/XcodeProject{1}&quot;, new DirectoryInfo(Const.PROJECT_DIR).Parent.FullName, System.DateTime.Now.ToString(&quot;yyyy-MM-dd--HH-mm-ss&quot;));\n    #else\n        build_path = Const.PROJECT_DIR + &quot;autopack/win32/XGame.exe&quot;;\n    #endif\n        //是否是debug版本的标识\n        bool is_debug = BundleMakerUtil.HasRawArg(&quot;-debug&quot;);\n    Builder.is_debug_build_ = is_debug; \n    Builder.build_package(build_path, true);\n}</code></pre>\n<h2 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h2><blockquote>\n<ol>\n<li>Jenkins安装 Powershell插件，在 插件列表中搜索到这个：</li>\n</ol>\n</blockquote>\n<img src=\"./images/1571217538404.png\" alt=\"1571217538404\" style=\"zoom:100%;\" />\n\n<blockquote>\n<ol start=\"2\">\n<li>安装完后，重启下Jetkins</li>\n<li>在项目配置-&gt;构建 里选择使用Windows PowerShell:</li>\n</ol>\n</blockquote>\n<img src=\"./images/1571217610540.png\" alt=\"1571217610540\" style=\"zoom:100%;\" />\n\n<blockquote>\n<ol start=\"4\">\n<li>添加如下配置在Command格内：</li>\n</ol>\n</blockquote>\n<pre><code class=\"powershell\">echo ${ENV:WORKSPACE}\ncd ${ENV:WORKSPACE}/Unity\n./AutoCi/autobuild_android.ps1</code></pre>\n<img src=\"./images/1571217788247.png\" alt=\"1571217788247\" style=\"zoom:100%;\" />\n\n\n\n<h2 id=\"打什么样的包？-设置环境变量\"><a href=\"#打什么样的包？-设置环境变量\" class=\"headerlink\" title=\"打什么样的包？  设置环境变量\"></a>打什么样的包？  设置环境变量</h2><blockquote>\n<ol>\n<li><p>找到Jenkins环境变量设置</p>\n<p><strong>Manage Jenkins</strong>   -&gt;  <strong>Configure System</strong></p>\n</li>\n</ol>\n</blockquote>\n<p><img src=\"./images/1571216524617.png\" alt=\"1571216524617\"></p>\n<img src=\"./images/1571216565243.png\" alt=\"1571216565243\" style=\"zoom:67%;\" />\n\n\n\n<blockquote>\n<ol start=\"2\">\n<li>打 Apk </li>\n</ol>\n</blockquote>\n<p>设置 IsApk 为 true</p>\n<blockquote>\n<ol start=\"3\">\n<li>打 aar到平台</li>\n</ol>\n</blockquote>\n<p>设置 IsApk 为false或其他</p>\n<blockquote>\n<ol start=\"4\">\n<li>带Debug的包</li>\n</ol>\n</blockquote>\n<p>设置 IsDebug为true,  当不为true时则默认为relase包</p>\n<h2 id=\"CI的执行脚本说明\"><a href=\"#CI的执行脚本说明\" class=\"headerlink\" title=\"CI的执行脚本说明\"></a>CI的执行脚本说明</h2><blockquote>\n<ol>\n<li><p>auto_ci.py -仅打aar到平台需要</p>\n<ul>\n<li>修改manifest.xml文件，去掉intent-filter</li>\n<li>修改build.gradle文件，设置为library，去掉applicationId，设置gradle版本，添加jcenter(),google()到 all projects块</li>\n</ul>\n</li>\n<li><p>jksdk_util.py -上传aar到平台</p>\n<ul>\n<li><p>需要打开文件，更改下id为对应项目</p>\n</li>\n<li><p>上传到平台，需要改成指定格式的名字： </p>\n<p>  游戏名称-框架类型-debug/release-version.出包号.aar</p>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><blockquote>\n<ol>\n<li>Powershell 脚本访问Jenkins环境变量记得加 <strong>ENV:</strong> 前缀</li>\n<li>在build.gradle加入的all projects块的代码，是由于gradle有时会找不到相关的jar包，又不会启动自动下载导致</li>\n</ol>\n</blockquote>\n"},{"title":"Linux与window常用指令","_content":"\n## linux启动关闭服务\n\n```shell\nps -ef|grep tomcat                        //查看所有进程\nkill -9 pid                               //关闭对应pid进程\ncd /root/DCIM/apache-tomcat-7.0.90/bin    //打开服务所在的文件夹\nls                                        //查看所有文件 显示除隐藏文件外所有文件及目录的名字\n./startup.sh                              //启动.sh文件\ntail -f ../logs/catalina.out              //查看指定文件夹里的日志\n \n \nls –a                                     //显示当前目录中的所有文件，包含隐藏文件\n```\n\n\n## windows 查看服务\n\n```\nsc query redis //查询redis的服务\n\nsc stop/start redis\nsc showid redis\nsc qc redis //查询信息\nsc enumdepend redis //查询依赖\n```","source":"_posts/Linux与window常用指令.md","raw":"---\ntitle: Linux与window常用指令\ntags: \n- linux\n- 指令\n---\n\n## linux启动关闭服务\n\n```shell\nps -ef|grep tomcat                        //查看所有进程\nkill -9 pid                               //关闭对应pid进程\ncd /root/DCIM/apache-tomcat-7.0.90/bin    //打开服务所在的文件夹\nls                                        //查看所有文件 显示除隐藏文件外所有文件及目录的名字\n./startup.sh                              //启动.sh文件\ntail -f ../logs/catalina.out              //查看指定文件夹里的日志\n \n \nls –a                                     //显示当前目录中的所有文件，包含隐藏文件\n```\n\n\n## windows 查看服务\n\n```\nsc query redis //查询redis的服务\n\nsc stop/start redis\nsc showid redis\nsc qc redis //查询信息\nsc enumdepend redis //查询依赖\n```","slug":"Linux与window常用指令","published":1,"date":"2019-11-25T03:25:48.220Z","updated":"2019-11-25T03:25:48.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs7y000hekuw5ty6r8mc","content":"<h2 id=\"linux启动关闭服务\"><a href=\"#linux启动关闭服务\" class=\"headerlink\" title=\"linux启动关闭服务\"></a>linux启动关闭服务</h2><pre><code class=\"shell\">ps -ef|grep tomcat                        //查看所有进程\nkill -9 pid                               //关闭对应pid进程\ncd /root/DCIM/apache-tomcat-7.0.90/bin    //打开服务所在的文件夹\nls                                        //查看所有文件 显示除隐藏文件外所有文件及目录的名字\n./startup.sh                              //启动.sh文件\ntail -f ../logs/catalina.out              //查看指定文件夹里的日志\n\n\nls –a                                     //显示当前目录中的所有文件，包含隐藏文件</code></pre>\n<h2 id=\"windows-查看服务\"><a href=\"#windows-查看服务\" class=\"headerlink\" title=\"windows 查看服务\"></a>windows 查看服务</h2><pre><code>sc query redis //查询redis的服务\n\nsc stop/start redis\nsc showid redis\nsc qc redis //查询信息\nsc enumdepend redis //查询依赖</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"linux启动关闭服务\"><a href=\"#linux启动关闭服务\" class=\"headerlink\" title=\"linux启动关闭服务\"></a>linux启动关闭服务</h2><pre><code class=\"shell\">ps -ef|grep tomcat                        //查看所有进程\nkill -9 pid                               //关闭对应pid进程\ncd /root/DCIM/apache-tomcat-7.0.90/bin    //打开服务所在的文件夹\nls                                        //查看所有文件 显示除隐藏文件外所有文件及目录的名字\n./startup.sh                              //启动.sh文件\ntail -f ../logs/catalina.out              //查看指定文件夹里的日志\n\n\nls –a                                     //显示当前目录中的所有文件，包含隐藏文件</code></pre>\n<h2 id=\"windows-查看服务\"><a href=\"#windows-查看服务\" class=\"headerlink\" title=\"windows 查看服务\"></a>windows 查看服务</h2><pre><code>sc query redis //查询redis的服务\n\nsc stop/start redis\nsc showid redis\nsc qc redis //查询信息\nsc enumdepend redis //查询依赖</code></pre>"},{"title":"Django 实例 Web Application","_content":"\n## Preparing\n\n > Python\n > Django\n > Html\n > css\n > Javascript\n > Databases\n > HeroKu\n > Materialize  \n > Beautiful suite\n > Web scraping\n\n\n## Starters!\n\n+ 创建conda环境\n\n```\nconda create --name codedaddies python=3\n```\n\n+ 安装django\n\n```\npip install django\n```\n\n+ 创建工程（指定目录下）\n\n```\ndjango-admin startproject codedaddies_list\n```\n\n+ 创建APP\n\n```\npython manage.py startapp my_app\n```\n\n+ 数据库构建\n\n```\npython manage.py makemigrations\npython manage.py migrate\n```\n\n+ Templates文件夹\n> 配置在settings中，加入以下：\nTEMPLATE_DIR = os.path.join(BASE_DIR, \"templates\")\n> 底部加入:\nSTATICFILES_DIR = (os.path.join(BASE_DIR, 'static'),)\n\n> TEMPLATES块中设置DIRS\n> 'DIRS': [TEMPLATE_DIR],\n\n注：需要在pycharm中设置templates标志\n\n+ 启用admin\n```\npython manage.py createsuperuser\n```\n\n\n## First Page\n\n+ APP中新建urls.py\n在文件中配置路径表：\n\n```\nfrom . import views\n\n\nurlpatterns = [\n    path('', views.home, name='home'),\n]\n```\n\n+ 创建视图（与上面的Home匹配）\n在views.py\n\n```\ndef home(request):\n    return render(request, 'base.html')\n```\n\n+ 创建数据表\n\nmodels.py中\n\n```\nclass Search(models.Model):\n    search = models.CharField(max_length=500)\n    created = models.DateTimeField(auto_now=True)\n\n```\n记得执行migrate操作\n\n+ 添加admin管理\n\n```\nfrom .models import Search\n\n# Register your models here.\nadmin.site.register(Search)\n```\n\n","source":"_posts/Django 实例 Web Application.md","raw":"---\ntitle: Django 实例 Web Application\ncategories:\n- Python Web\ntags: \n- Python\n- Note\n- Django\n- 实例\n---\n\n## Preparing\n\n > Python\n > Django\n > Html\n > css\n > Javascript\n > Databases\n > HeroKu\n > Materialize  \n > Beautiful suite\n > Web scraping\n\n\n## Starters!\n\n+ 创建conda环境\n\n```\nconda create --name codedaddies python=3\n```\n\n+ 安装django\n\n```\npip install django\n```\n\n+ 创建工程（指定目录下）\n\n```\ndjango-admin startproject codedaddies_list\n```\n\n+ 创建APP\n\n```\npython manage.py startapp my_app\n```\n\n+ 数据库构建\n\n```\npython manage.py makemigrations\npython manage.py migrate\n```\n\n+ Templates文件夹\n> 配置在settings中，加入以下：\nTEMPLATE_DIR = os.path.join(BASE_DIR, \"templates\")\n> 底部加入:\nSTATICFILES_DIR = (os.path.join(BASE_DIR, 'static'),)\n\n> TEMPLATES块中设置DIRS\n> 'DIRS': [TEMPLATE_DIR],\n\n注：需要在pycharm中设置templates标志\n\n+ 启用admin\n```\npython manage.py createsuperuser\n```\n\n\n## First Page\n\n+ APP中新建urls.py\n在文件中配置路径表：\n\n```\nfrom . import views\n\n\nurlpatterns = [\n    path('', views.home, name='home'),\n]\n```\n\n+ 创建视图（与上面的Home匹配）\n在views.py\n\n```\ndef home(request):\n    return render(request, 'base.html')\n```\n\n+ 创建数据表\n\nmodels.py中\n\n```\nclass Search(models.Model):\n    search = models.CharField(max_length=500)\n    created = models.DateTimeField(auto_now=True)\n\n```\n记得执行migrate操作\n\n+ 添加admin管理\n\n```\nfrom .models import Search\n\n# Register your models here.\nadmin.site.register(Search)\n```\n\n","slug":"Django 实例 Web Application","published":1,"date":"2019-11-25T03:25:48.219Z","updated":"2019-11-25T03:25:48.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs81000lekuw63ixp84j","content":"<h2 id=\"Preparing\"><a href=\"#Preparing\" class=\"headerlink\" title=\"Preparing\"></a>Preparing</h2><blockquote>\n<p>Python<br>Django<br>Html<br>css<br>Javascript<br>Databases<br>HeroKu<br>Materialize<br>Beautiful suite<br>Web scraping</p>\n</blockquote>\n<h2 id=\"Starters\"><a href=\"#Starters\" class=\"headerlink\" title=\"Starters!\"></a>Starters!</h2><ul>\n<li>创建conda环境</li>\n</ul>\n<pre><code>conda create --name codedaddies python=3</code></pre><ul>\n<li>安装django</li>\n</ul>\n<pre><code>pip install django</code></pre><ul>\n<li>创建工程（指定目录下）</li>\n</ul>\n<pre><code>django-admin startproject codedaddies_list</code></pre><ul>\n<li>创建APP</li>\n</ul>\n<pre><code>python manage.py startapp my_app</code></pre><ul>\n<li>数据库构建</li>\n</ul>\n<pre><code>python manage.py makemigrations\npython manage.py migrate</code></pre><ul>\n<li>Templates文件夹<blockquote>\n<p>配置在settings中，加入以下：<br>TEMPLATE_DIR = os.path.join(BASE_DIR, “templates”)<br>底部加入:<br>STATICFILES_DIR = (os.path.join(BASE_DIR, ‘static’),)</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>TEMPLATES块中设置DIRS<br>‘DIRS’: [TEMPLATE_DIR],</p>\n</blockquote>\n<p>注：需要在pycharm中设置templates标志</p>\n<ul>\n<li>启用admin<pre><code>python manage.py createsuperuser</code></pre></li>\n</ul>\n<h2 id=\"First-Page\"><a href=\"#First-Page\" class=\"headerlink\" title=\"First Page\"></a>First Page</h2><ul>\n<li>APP中新建urls.py<br>在文件中配置路径表：</li>\n</ul>\n<pre><code>from . import views\n\n\nurlpatterns = [\n    path(&#39;&#39;, views.home, name=&#39;home&#39;),\n]</code></pre><ul>\n<li>创建视图（与上面的Home匹配）<br>在views.py</li>\n</ul>\n<pre><code>def home(request):\n    return render(request, &#39;base.html&#39;)</code></pre><ul>\n<li>创建数据表</li>\n</ul>\n<p>models.py中</p>\n<pre><code>class Search(models.Model):\n    search = models.CharField(max_length=500)\n    created = models.DateTimeField(auto_now=True)\n</code></pre><p>记得执行migrate操作</p>\n<ul>\n<li>添加admin管理</li>\n</ul>\n<pre><code>from .models import Search\n\n# Register your models here.\nadmin.site.register(Search)</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Preparing\"><a href=\"#Preparing\" class=\"headerlink\" title=\"Preparing\"></a>Preparing</h2><blockquote>\n<p>Python<br>Django<br>Html<br>css<br>Javascript<br>Databases<br>HeroKu<br>Materialize<br>Beautiful suite<br>Web scraping</p>\n</blockquote>\n<h2 id=\"Starters\"><a href=\"#Starters\" class=\"headerlink\" title=\"Starters!\"></a>Starters!</h2><ul>\n<li>创建conda环境</li>\n</ul>\n<pre><code>conda create --name codedaddies python=3</code></pre><ul>\n<li>安装django</li>\n</ul>\n<pre><code>pip install django</code></pre><ul>\n<li>创建工程（指定目录下）</li>\n</ul>\n<pre><code>django-admin startproject codedaddies_list</code></pre><ul>\n<li>创建APP</li>\n</ul>\n<pre><code>python manage.py startapp my_app</code></pre><ul>\n<li>数据库构建</li>\n</ul>\n<pre><code>python manage.py makemigrations\npython manage.py migrate</code></pre><ul>\n<li>Templates文件夹<blockquote>\n<p>配置在settings中，加入以下：<br>TEMPLATE_DIR = os.path.join(BASE_DIR, “templates”)<br>底部加入:<br>STATICFILES_DIR = (os.path.join(BASE_DIR, ‘static’),)</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>TEMPLATES块中设置DIRS<br>‘DIRS’: [TEMPLATE_DIR],</p>\n</blockquote>\n<p>注：需要在pycharm中设置templates标志</p>\n<ul>\n<li>启用admin<pre><code>python manage.py createsuperuser</code></pre></li>\n</ul>\n<h2 id=\"First-Page\"><a href=\"#First-Page\" class=\"headerlink\" title=\"First Page\"></a>First Page</h2><ul>\n<li>APP中新建urls.py<br>在文件中配置路径表：</li>\n</ul>\n<pre><code>from . import views\n\n\nurlpatterns = [\n    path(&#39;&#39;, views.home, name=&#39;home&#39;),\n]</code></pre><ul>\n<li>创建视图（与上面的Home匹配）<br>在views.py</li>\n</ul>\n<pre><code>def home(request):\n    return render(request, &#39;base.html&#39;)</code></pre><ul>\n<li>创建数据表</li>\n</ul>\n<p>models.py中</p>\n<pre><code>class Search(models.Model):\n    search = models.CharField(max_length=500)\n    created = models.DateTimeField(auto_now=True)\n</code></pre><p>记得执行migrate操作</p>\n<ul>\n<li>添加admin管理</li>\n</ul>\n<pre><code>from .models import Search\n\n# Register your models here.\nadmin.site.register(Search)</code></pre>"},{"title":"Smargit  简单使用说明","_content":"\n## 下载安装\n\n* 打开网址：https://www.syntevo.com/smartgit/\n* 如图，点击Download，进入后选择自己自己的系统平台\n![enter description here](./images/1574504169104.png)\n\n![enter description here](./images/1574504183153.png)\n\n* 解压后，直接点击EXE文件安装，使用默认选项就行了。\n\n## 第一次打开\n\n1. 如果本地已经用过乌龟拉项目，smartgit会自动检测出项目，点击打开即可\n2. 如果没有项目，请直接选择克隆新项目\n![enter description here](./images/1574504408755.png)\n![](./images/1574504420111.png)\n![enter description here](./images/1574504426236.png)\n\n\n## 切换分支\n双击分支窗口的一个分支即可：\n![enter description here](./images/1574504495536.png)\n\n## 拉取最新\n![enter description here](./images/1574504516272.png)\n如果弹出窗口，选择“快进”的方式就可以了\n\n## 提交更改\n* 点亮来更改和新增的标识，来显示文件，如图：\n ![enter description here](./images/1574504592931.png)\n\n* 选择自己的更改项，点提交并推送就行\n![enter description here](./images/1574504634973.png)\n\n![enter description here](./images/1574504645523.png)\n\n## 建议\n\n1. 提交前先点一下拉取，获取到最新的代码\n2. 如果发现显示有问题，右击仓库窗口里的项目来刷新一下，如：\n![enter description here](./images/1574504738524.png)\n","source":"_posts/Smargit  简单使用说明.md","raw":"---\ntitle: Smargit  简单使用说明\ncategories:\n- 公司\ntags: \n- Git\n---\n\n## 下载安装\n\n* 打开网址：https://www.syntevo.com/smartgit/\n* 如图，点击Download，进入后选择自己自己的系统平台\n![enter description here](./images/1574504169104.png)\n\n![enter description here](./images/1574504183153.png)\n\n* 解压后，直接点击EXE文件安装，使用默认选项就行了。\n\n## 第一次打开\n\n1. 如果本地已经用过乌龟拉项目，smartgit会自动检测出项目，点击打开即可\n2. 如果没有项目，请直接选择克隆新项目\n![enter description here](./images/1574504408755.png)\n![](./images/1574504420111.png)\n![enter description here](./images/1574504426236.png)\n\n\n## 切换分支\n双击分支窗口的一个分支即可：\n![enter description here](./images/1574504495536.png)\n\n## 拉取最新\n![enter description here](./images/1574504516272.png)\n如果弹出窗口，选择“快进”的方式就可以了\n\n## 提交更改\n* 点亮来更改和新增的标识，来显示文件，如图：\n ![enter description here](./images/1574504592931.png)\n\n* 选择自己的更改项，点提交并推送就行\n![enter description here](./images/1574504634973.png)\n\n![enter description here](./images/1574504645523.png)\n\n## 建议\n\n1. 提交前先点一下拉取，获取到最新的代码\n2. 如果发现显示有问题，右击仓库窗口里的项目来刷新一下，如：\n![enter description here](./images/1574504738524.png)\n","slug":"Smargit  简单使用说明","published":1,"date":"2019-11-25T03:25:48.221Z","updated":"2019-11-25T03:25:48.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs82000nekuwi7n1zydg","content":"<h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><ul>\n<li>打开网址：<a href=\"https://www.syntevo.com/smartgit/\">https://www.syntevo.com/smartgit/</a></li>\n<li>如图，点击Download，进入后选择自己自己的系统平台<br><img src=\"./images/1574504169104.png\" alt=\"enter description here\"></li>\n</ul>\n<p><img src=\"./images/1574504183153.png\" alt=\"enter description here\"></p>\n<ul>\n<li>解压后，直接点击EXE文件安装，使用默认选项就行了。</li>\n</ul>\n<h2 id=\"第一次打开\"><a href=\"#第一次打开\" class=\"headerlink\" title=\"第一次打开\"></a>第一次打开</h2><ol>\n<li>如果本地已经用过乌龟拉项目，smartgit会自动检测出项目，点击打开即可</li>\n<li>如果没有项目，请直接选择克隆新项目<br><img src=\"./images/1574504408755.png\" alt=\"enter description here\"><br><img src=\"./images/1574504420111.png\" alt=\"\"><br><img src=\"./images/1574504426236.png\" alt=\"enter description here\"></li>\n</ol>\n<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2><p>双击分支窗口的一个分支即可：<br><img src=\"./images/1574504495536.png\" alt=\"enter description here\"></p>\n<h2 id=\"拉取最新\"><a href=\"#拉取最新\" class=\"headerlink\" title=\"拉取最新\"></a>拉取最新</h2><p><img src=\"./images/1574504516272.png\" alt=\"enter description here\"><br>如果弹出窗口，选择“快进”的方式就可以了</p>\n<h2 id=\"提交更改\"><a href=\"#提交更改\" class=\"headerlink\" title=\"提交更改\"></a>提交更改</h2><ul>\n<li><p>点亮来更改和新增的标识，来显示文件，如图：<br><img src=\"./images/1574504592931.png\" alt=\"enter description here\"></p>\n</li>\n<li><p>选择自己的更改项，点提交并推送就行<br><img src=\"./images/1574504634973.png\" alt=\"enter description here\"></p>\n</li>\n</ul>\n<p><img src=\"./images/1574504645523.png\" alt=\"enter description here\"></p>\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><ol>\n<li>提交前先点一下拉取，获取到最新的代码</li>\n<li>如果发现显示有问题，右击仓库窗口里的项目来刷新一下，如：<br><img src=\"./images/1574504738524.png\" alt=\"enter description here\"></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><ul>\n<li>打开网址：<a href=\"https://www.syntevo.com/smartgit/\">https://www.syntevo.com/smartgit/</a></li>\n<li>如图，点击Download，进入后选择自己自己的系统平台<br><img src=\"./images/1574504169104.png\" alt=\"enter description here\"></li>\n</ul>\n<p><img src=\"./images/1574504183153.png\" alt=\"enter description here\"></p>\n<ul>\n<li>解压后，直接点击EXE文件安装，使用默认选项就行了。</li>\n</ul>\n<h2 id=\"第一次打开\"><a href=\"#第一次打开\" class=\"headerlink\" title=\"第一次打开\"></a>第一次打开</h2><ol>\n<li>如果本地已经用过乌龟拉项目，smartgit会自动检测出项目，点击打开即可</li>\n<li>如果没有项目，请直接选择克隆新项目<br><img src=\"./images/1574504408755.png\" alt=\"enter description here\"><br><img src=\"./images/1574504420111.png\" alt=\"\"><br><img src=\"./images/1574504426236.png\" alt=\"enter description here\"></li>\n</ol>\n<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2><p>双击分支窗口的一个分支即可：<br><img src=\"./images/1574504495536.png\" alt=\"enter description here\"></p>\n<h2 id=\"拉取最新\"><a href=\"#拉取最新\" class=\"headerlink\" title=\"拉取最新\"></a>拉取最新</h2><p><img src=\"./images/1574504516272.png\" alt=\"enter description here\"><br>如果弹出窗口，选择“快进”的方式就可以了</p>\n<h2 id=\"提交更改\"><a href=\"#提交更改\" class=\"headerlink\" title=\"提交更改\"></a>提交更改</h2><ul>\n<li><p>点亮来更改和新增的标识，来显示文件，如图：<br><img src=\"./images/1574504592931.png\" alt=\"enter description here\"></p>\n</li>\n<li><p>选择自己的更改项，点提交并推送就行<br><img src=\"./images/1574504634973.png\" alt=\"enter description here\"></p>\n</li>\n</ul>\n<p><img src=\"./images/1574504645523.png\" alt=\"enter description here\"></p>\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><ol>\n<li>提交前先点一下拉取，获取到最新的代码</li>\n<li>如果发现显示有问题，右击仓库窗口里的项目来刷新一下，如：<br><img src=\"./images/1574504738524.png\" alt=\"enter description here\"></li>\n</ol>\n"},{"title":"Python Core Programming Note 1","_content":"\n## Regular Expression\n![常用表达式](./images/1570674939333.png)\n![续](./images/1570674953248.png)\n\n## match() & search()\n\n```python\nimport re\nm = re.match('\\d','a541')\nif m is not None:\n    print(m.group())\nelse:\n    print(\"none found\")\n\t\n## none found\n\nimport re\nm = re.match('\\d','a541')\nif m is not None:\n    print(m.group())\nelse:\n    print(\"none found\")\n\t\n## 5\n```\n```\nimport re\nm = re.search('..[\\d]{1,3}','\\na51')\nif m is not None:\n    print(m.group())\nelse:\n    print(\"none found\")\n# . 匹配除\\n外的任意字符，其他如\\t,\\.都可以\n```\n\n## 分组\n\n```python\nimport re\nm = re.search('\\w+@(\\w+\\.)*(\\w+)*\\.com','aaa@aa.a.com')\nif m is not None:\n    print(m.group())\nelse:\n    print(\"none found\")\n```\n\n## sub() & subn()\n\n```python\n#使用函数作为参数\ndef repl_t(txt):\n    if txt.group(0) == '-':\n        return 'x'\n    elif txt.group(0) == '--':\n        return '-'\n    elif txt.group(0) == '-1':\n        return '\\\"good\\\"'\nm = re.subn('(-{1,2})\\d?',repl_t,\"d----asf-s-a-123\")\nprint(m)\n```\n\n### Regular Expression -> Split()\n\n```python\ndata = (\n 'Mountain View, CA 94040',\n 'Sunnyvale, CA',\n 'Los Altos, 94023',\n 'Cupertino 95014',\n 'Palo Alto CA',\n )\n\nfor d in data:\n     v = re.split(r\", |(?= (?:\\d{5}|[A-Z]{2})) \",d)\n     print(v)\n```\n\n### 扩展表达式\n// 前瞻：\nexp1(?=exp2) 查找exp2前面的exp1\n// 后顾：\n(?<=exp2)exp1 查找exp2后面的exp1\n// 负前瞻：\nexp1(?!exp2) 查找后面不是exp2的exp1\n// 负后顾：\n(?<!exp2)exp1 查找前面不是exp2的exp1\n\n要理解?:则需要理解捕获分组和非捕获分组的概念：\n\n> ()表示捕获分组，()会把每个分组里的匹配的值保存起来，使用$n(n是一个数字，表示第n个捕获组的内容)\n> (?:)表示非捕获分组，和捕获分组唯一的区别在于，非捕获分组匹配的值不会保存起来\n\n\n```python\nm = re.findall(r'(?<!YES)yes','YESyes? YESYes . YESyesYES!! ')\nprint(m)\n\nm = re.sub('\\B(?=(?:\\d{3})+(?!\\d))',',',\"123456789\")\nprint(m)\n```\n\n?i ignorecase\n?m multi-line search\n?s dotall, 点号也可表示\\n\n?x 格式化正则中的空格\n?: 分组查询但不保存在结果中\n\n```python\nm = re.findall(r'(?m)(^th[\\w ]+)', \"\"\"\nThis line is the first,\nanother line,\nthat line, it's the best\n\"\"\")\n\nprint(m)\n```\n\n```python\nm = re.search(r'''(?x)\n \\((\\d{3})\\) # 区号\n [ ] # 空白符\n (\\d{3}) # 前缀\n - # 横线\n (\\d{4}) # 终点数字\n ''', '(800) 555-1212').group()\nprint(m)\n```\n\n```python\nm = re.findall(r'http://(?:\\w+\\.)*(\\w+\\.com)','http://google.com http://www.google.com http://code.google.com')\nprint(m)\n```\n\n### 贪婪与非贪婪\n一个方案是使用“非贪婪”操作符“?”。读者可以在“*”、“+”或者“?”之后使\n用该操作符。该操作符将要求正则表达式引擎匹配尽可能少的字符。\n\n```python\ndata = 'Thu Feb 15 17:46:04 2007::uzifzf@dpyivihw.gov::1171590364-6-8'\npatt = '.+?(\\d+-\\d+-\\d+)'\nm = re.match(patt, data).group(1)\nprint(m)\n```","source":"_posts/Python Core Programming Note 1.md","raw":"---\ntitle: Python Core Programming Note 1\ncategories:\n- Python笔记\ntags: \n- Python\n- Core Programming\n- Note\n---\n\n## Regular Expression\n![常用表达式](./images/1570674939333.png)\n![续](./images/1570674953248.png)\n\n## match() & search()\n\n```python\nimport re\nm = re.match('\\d','a541')\nif m is not None:\n    print(m.group())\nelse:\n    print(\"none found\")\n\t\n## none found\n\nimport re\nm = re.match('\\d','a541')\nif m is not None:\n    print(m.group())\nelse:\n    print(\"none found\")\n\t\n## 5\n```\n```\nimport re\nm = re.search('..[\\d]{1,3}','\\na51')\nif m is not None:\n    print(m.group())\nelse:\n    print(\"none found\")\n# . 匹配除\\n外的任意字符，其他如\\t,\\.都可以\n```\n\n## 分组\n\n```python\nimport re\nm = re.search('\\w+@(\\w+\\.)*(\\w+)*\\.com','aaa@aa.a.com')\nif m is not None:\n    print(m.group())\nelse:\n    print(\"none found\")\n```\n\n## sub() & subn()\n\n```python\n#使用函数作为参数\ndef repl_t(txt):\n    if txt.group(0) == '-':\n        return 'x'\n    elif txt.group(0) == '--':\n        return '-'\n    elif txt.group(0) == '-1':\n        return '\\\"good\\\"'\nm = re.subn('(-{1,2})\\d?',repl_t,\"d----asf-s-a-123\")\nprint(m)\n```\n\n### Regular Expression -> Split()\n\n```python\ndata = (\n 'Mountain View, CA 94040',\n 'Sunnyvale, CA',\n 'Los Altos, 94023',\n 'Cupertino 95014',\n 'Palo Alto CA',\n )\n\nfor d in data:\n     v = re.split(r\", |(?= (?:\\d{5}|[A-Z]{2})) \",d)\n     print(v)\n```\n\n### 扩展表达式\n// 前瞻：\nexp1(?=exp2) 查找exp2前面的exp1\n// 后顾：\n(?<=exp2)exp1 查找exp2后面的exp1\n// 负前瞻：\nexp1(?!exp2) 查找后面不是exp2的exp1\n// 负后顾：\n(?<!exp2)exp1 查找前面不是exp2的exp1\n\n要理解?:则需要理解捕获分组和非捕获分组的概念：\n\n> ()表示捕获分组，()会把每个分组里的匹配的值保存起来，使用$n(n是一个数字，表示第n个捕获组的内容)\n> (?:)表示非捕获分组，和捕获分组唯一的区别在于，非捕获分组匹配的值不会保存起来\n\n\n```python\nm = re.findall(r'(?<!YES)yes','YESyes? YESYes . YESyesYES!! ')\nprint(m)\n\nm = re.sub('\\B(?=(?:\\d{3})+(?!\\d))',',',\"123456789\")\nprint(m)\n```\n\n?i ignorecase\n?m multi-line search\n?s dotall, 点号也可表示\\n\n?x 格式化正则中的空格\n?: 分组查询但不保存在结果中\n\n```python\nm = re.findall(r'(?m)(^th[\\w ]+)', \"\"\"\nThis line is the first,\nanother line,\nthat line, it's the best\n\"\"\")\n\nprint(m)\n```\n\n```python\nm = re.search(r'''(?x)\n \\((\\d{3})\\) # 区号\n [ ] # 空白符\n (\\d{3}) # 前缀\n - # 横线\n (\\d{4}) # 终点数字\n ''', '(800) 555-1212').group()\nprint(m)\n```\n\n```python\nm = re.findall(r'http://(?:\\w+\\.)*(\\w+\\.com)','http://google.com http://www.google.com http://code.google.com')\nprint(m)\n```\n\n### 贪婪与非贪婪\n一个方案是使用“非贪婪”操作符“?”。读者可以在“*”、“+”或者“?”之后使\n用该操作符。该操作符将要求正则表达式引擎匹配尽可能少的字符。\n\n```python\ndata = 'Thu Feb 15 17:46:04 2007::uzifzf@dpyivihw.gov::1171590364-6-8'\npatt = '.+?(\\d+-\\d+-\\d+)'\nm = re.match(patt, data).group(1)\nprint(m)\n```","slug":"Python Core Programming Note 1","published":1,"date":"2019-10-12T10:01:26.487Z","updated":"2019-10-12T10:01:26.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs85000sekuwzrqxaduy","content":"<h2 id=\"Regular-Expression\"><a href=\"#Regular-Expression\" class=\"headerlink\" title=\"Regular Expression\"></a>Regular Expression</h2><p><img src=\"./images/1570674939333.png\" alt=\"常用表达式\"><br><img src=\"./images/1570674953248.png\" alt=\"续\"></p>\n<h2 id=\"match-amp-search\"><a href=\"#match-amp-search\" class=\"headerlink\" title=\"match() &amp; search()\"></a>match() &amp; search()</h2><pre><code class=\"python\">import re\nm = re.match(&#39;\\d&#39;,&#39;a541&#39;)\nif m is not None:\n    print(m.group())\nelse:\n    print(&quot;none found&quot;)\n\n## none found\n\nimport re\nm = re.match(&#39;\\d&#39;,&#39;a541&#39;)\nif m is not None:\n    print(m.group())\nelse:\n    print(&quot;none found&quot;)\n\n## 5</code></pre>\n<pre><code>import re\nm = re.search(&#39;..[\\d]{1,3}&#39;,&#39;\\na51&#39;)\nif m is not None:\n    print(m.group())\nelse:\n    print(&quot;none found&quot;)\n# . 匹配除\\n外的任意字符，其他如\\t,\\.都可以</code></pre><h2 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h2><pre><code class=\"python\">import re\nm = re.search(&#39;\\w+@(\\w+\\.)*(\\w+)*\\.com&#39;,&#39;aaa@aa.a.com&#39;)\nif m is not None:\n    print(m.group())\nelse:\n    print(&quot;none found&quot;)</code></pre>\n<h2 id=\"sub-amp-subn\"><a href=\"#sub-amp-subn\" class=\"headerlink\" title=\"sub() &amp; subn()\"></a>sub() &amp; subn()</h2><pre><code class=\"python\">#使用函数作为参数\ndef repl_t(txt):\n    if txt.group(0) == &#39;-&#39;:\n        return &#39;x&#39;\n    elif txt.group(0) == &#39;--&#39;:\n        return &#39;-&#39;\n    elif txt.group(0) == &#39;-1&#39;:\n        return &#39;\\&quot;good\\&quot;&#39;\nm = re.subn(&#39;(-{1,2})\\d?&#39;,repl_t,&quot;d----asf-s-a-123&quot;)\nprint(m)</code></pre>\n<h3 id=\"Regular-Expression-gt-Split\"><a href=\"#Regular-Expression-gt-Split\" class=\"headerlink\" title=\"Regular Expression -&gt; Split()\"></a>Regular Expression -&gt; Split()</h3><pre><code class=\"python\">data = (\n &#39;Mountain View, CA 94040&#39;,\n &#39;Sunnyvale, CA&#39;,\n &#39;Los Altos, 94023&#39;,\n &#39;Cupertino 95014&#39;,\n &#39;Palo Alto CA&#39;,\n )\n\nfor d in data:\n     v = re.split(r&quot;, |(?= (?:\\d{5}|[A-Z]{2})) &quot;,d)\n     print(v)</code></pre>\n<h3 id=\"扩展表达式\"><a href=\"#扩展表达式\" class=\"headerlink\" title=\"扩展表达式\"></a>扩展表达式</h3><p>// 前瞻：<br>exp1(?=exp2) 查找exp2前面的exp1<br>// 后顾：<br>(?&lt;=exp2)exp1 查找exp2后面的exp1<br>// 负前瞻：<br>exp1(?!exp2) 查找后面不是exp2的exp1<br>// 负后顾：<br>(?&lt;!exp2)exp1 查找前面不是exp2的exp1</p>\n<p>要理解?:则需要理解捕获分组和非捕获分组的概念：</p>\n<blockquote>\n<p>()表示捕获分组，()会把每个分组里的匹配的值保存起来，使用$n(n是一个数字，表示第n个捕获组的内容)<br>(?:)表示非捕获分组，和捕获分组唯一的区别在于，非捕获分组匹配的值不会保存起来</p>\n</blockquote>\n<pre><code class=\"python\">m = re.findall(r&#39;(?&lt;!YES)yes&#39;,&#39;YESyes? YESYes . YESyesYES!! &#39;)\nprint(m)\n\nm = re.sub(&#39;\\B(?=(?:\\d{3})+(?!\\d))&#39;,&#39;,&#39;,&quot;123456789&quot;)\nprint(m)</code></pre>\n<p>?i ignorecase<br>?m multi-line search<br>?s dotall, 点号也可表示\\n<br>?x 格式化正则中的空格<br>?: 分组查询但不保存在结果中</p>\n<pre><code class=\"python\">m = re.findall(r&#39;(?m)(^th[\\w ]+)&#39;, &quot;&quot;&quot;\nThis line is the first,\nanother line,\nthat line, it&#39;s the best\n&quot;&quot;&quot;)\n\nprint(m)</code></pre>\n<pre><code class=\"python\">m = re.search(r&#39;&#39;&#39;(?x)\n \\((\\d{3})\\) # 区号\n [ ] # 空白符\n (\\d{3}) # 前缀\n - # 横线\n (\\d{4}) # 终点数字\n &#39;&#39;&#39;, &#39;(800) 555-1212&#39;).group()\nprint(m)</code></pre>\n<pre><code class=\"python\">m = re.findall(r&#39;http://(?:\\w+\\.)*(\\w+\\.com)&#39;,&#39;http://google.com http://www.google.com http://code.google.com&#39;)\nprint(m)</code></pre>\n<h3 id=\"贪婪与非贪婪\"><a href=\"#贪婪与非贪婪\" class=\"headerlink\" title=\"贪婪与非贪婪\"></a>贪婪与非贪婪</h3><p>一个方案是使用“非贪婪”操作符“?”。读者可以在“*”、“+”或者“?”之后使<br>用该操作符。该操作符将要求正则表达式引擎匹配尽可能少的字符。</p>\n<pre><code class=\"python\">data = &#39;Thu Feb 15 17:46:04 2007::uzifzf@dpyivihw.gov::1171590364-6-8&#39;\npatt = &#39;.+?(\\d+-\\d+-\\d+)&#39;\nm = re.match(patt, data).group(1)\nprint(m)</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Regular-Expression\"><a href=\"#Regular-Expression\" class=\"headerlink\" title=\"Regular Expression\"></a>Regular Expression</h2><p><img src=\"./images/1570674939333.png\" alt=\"常用表达式\"><br><img src=\"./images/1570674953248.png\" alt=\"续\"></p>\n<h2 id=\"match-amp-search\"><a href=\"#match-amp-search\" class=\"headerlink\" title=\"match() &amp; search()\"></a>match() &amp; search()</h2><pre><code class=\"python\">import re\nm = re.match(&#39;\\d&#39;,&#39;a541&#39;)\nif m is not None:\n    print(m.group())\nelse:\n    print(&quot;none found&quot;)\n\n## none found\n\nimport re\nm = re.match(&#39;\\d&#39;,&#39;a541&#39;)\nif m is not None:\n    print(m.group())\nelse:\n    print(&quot;none found&quot;)\n\n## 5</code></pre>\n<pre><code>import re\nm = re.search(&#39;..[\\d]{1,3}&#39;,&#39;\\na51&#39;)\nif m is not None:\n    print(m.group())\nelse:\n    print(&quot;none found&quot;)\n# . 匹配除\\n外的任意字符，其他如\\t,\\.都可以</code></pre><h2 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h2><pre><code class=\"python\">import re\nm = re.search(&#39;\\w+@(\\w+\\.)*(\\w+)*\\.com&#39;,&#39;aaa@aa.a.com&#39;)\nif m is not None:\n    print(m.group())\nelse:\n    print(&quot;none found&quot;)</code></pre>\n<h2 id=\"sub-amp-subn\"><a href=\"#sub-amp-subn\" class=\"headerlink\" title=\"sub() &amp; subn()\"></a>sub() &amp; subn()</h2><pre><code class=\"python\">#使用函数作为参数\ndef repl_t(txt):\n    if txt.group(0) == &#39;-&#39;:\n        return &#39;x&#39;\n    elif txt.group(0) == &#39;--&#39;:\n        return &#39;-&#39;\n    elif txt.group(0) == &#39;-1&#39;:\n        return &#39;\\&quot;good\\&quot;&#39;\nm = re.subn(&#39;(-{1,2})\\d?&#39;,repl_t,&quot;d----asf-s-a-123&quot;)\nprint(m)</code></pre>\n<h3 id=\"Regular-Expression-gt-Split\"><a href=\"#Regular-Expression-gt-Split\" class=\"headerlink\" title=\"Regular Expression -&gt; Split()\"></a>Regular Expression -&gt; Split()</h3><pre><code class=\"python\">data = (\n &#39;Mountain View, CA 94040&#39;,\n &#39;Sunnyvale, CA&#39;,\n &#39;Los Altos, 94023&#39;,\n &#39;Cupertino 95014&#39;,\n &#39;Palo Alto CA&#39;,\n )\n\nfor d in data:\n     v = re.split(r&quot;, |(?= (?:\\d{5}|[A-Z]{2})) &quot;,d)\n     print(v)</code></pre>\n<h3 id=\"扩展表达式\"><a href=\"#扩展表达式\" class=\"headerlink\" title=\"扩展表达式\"></a>扩展表达式</h3><p>// 前瞻：<br>exp1(?=exp2) 查找exp2前面的exp1<br>// 后顾：<br>(?&lt;=exp2)exp1 查找exp2后面的exp1<br>// 负前瞻：<br>exp1(?!exp2) 查找后面不是exp2的exp1<br>// 负后顾：<br>(?&lt;!exp2)exp1 查找前面不是exp2的exp1</p>\n<p>要理解?:则需要理解捕获分组和非捕获分组的概念：</p>\n<blockquote>\n<p>()表示捕获分组，()会把每个分组里的匹配的值保存起来，使用$n(n是一个数字，表示第n个捕获组的内容)<br>(?:)表示非捕获分组，和捕获分组唯一的区别在于，非捕获分组匹配的值不会保存起来</p>\n</blockquote>\n<pre><code class=\"python\">m = re.findall(r&#39;(?&lt;!YES)yes&#39;,&#39;YESyes? YESYes . YESyesYES!! &#39;)\nprint(m)\n\nm = re.sub(&#39;\\B(?=(?:\\d{3})+(?!\\d))&#39;,&#39;,&#39;,&quot;123456789&quot;)\nprint(m)</code></pre>\n<p>?i ignorecase<br>?m multi-line search<br>?s dotall, 点号也可表示\\n<br>?x 格式化正则中的空格<br>?: 分组查询但不保存在结果中</p>\n<pre><code class=\"python\">m = re.findall(r&#39;(?m)(^th[\\w ]+)&#39;, &quot;&quot;&quot;\nThis line is the first,\nanother line,\nthat line, it&#39;s the best\n&quot;&quot;&quot;)\n\nprint(m)</code></pre>\n<pre><code class=\"python\">m = re.search(r&#39;&#39;&#39;(?x)\n \\((\\d{3})\\) # 区号\n [ ] # 空白符\n (\\d{3}) # 前缀\n - # 横线\n (\\d{4}) # 终点数字\n &#39;&#39;&#39;, &#39;(800) 555-1212&#39;).group()\nprint(m)</code></pre>\n<pre><code class=\"python\">m = re.findall(r&#39;http://(?:\\w+\\.)*(\\w+\\.com)&#39;,&#39;http://google.com http://www.google.com http://code.google.com&#39;)\nprint(m)</code></pre>\n<h3 id=\"贪婪与非贪婪\"><a href=\"#贪婪与非贪婪\" class=\"headerlink\" title=\"贪婪与非贪婪\"></a>贪婪与非贪婪</h3><p>一个方案是使用“非贪婪”操作符“?”。读者可以在“*”、“+”或者“?”之后使<br>用该操作符。该操作符将要求正则表达式引擎匹配尽可能少的字符。</p>\n<pre><code class=\"python\">data = &#39;Thu Feb 15 17:46:04 2007::uzifzf@dpyivihw.gov::1171590364-6-8&#39;\npatt = &#39;.+?(\\d+-\\d+-\\d+)&#39;\nm = re.match(patt, data).group(1)\nprint(m)</code></pre>\n"},{"title":"Python Core Programming Note 2","_content":"\n## Net Programming\n\n#### 1. TCP\n+ Server:\n\n```python\nfrom socket import *\nfrom time import ctime\n\nHOST = ''\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\ntcpSerSocket = socket(AF_INET, SOCK_STREAM)\ntcpSerSocket.bind(ADDR)\ntcpSerSocket.listen(5)\n\ntry:\n    while True:\n        print(\"waiting for connection...\")\n        tcpCliSocket, addr = tcpSerSocket.accept()\n        print(\"connected from :\",addr)\n        while True:\n            data = tcpCliSocket.recv(BUFSIZ)\n            if not data:\n                break\n            print(\"rec:\",data)\n            send_str = '[%s] %s' %(bytes(ctime(), 'utf-8'), 'Oh?')\n            tcpCliSocket.send(send_str.encode('utf-8'))\n        tcpCliSocket.close()\nexcept EOFError:\n    print(\"Error: EOFEError\")\nexcept KeyboardInterrupt:\n    print(\"Error: EOFEError\")\nfinally:\n    tcpSerSocket.close()\n```\n\n+ Client\n\n```python\nfrom socket import *\n\nHOST = '127.0.0.1' \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\ntcpCliSocket = socket(AF_INET, SOCK_STREAM)\ntcpCliSocket.connect(ADDR)\n\nwhile True:\n    data = input('> ')\n    if not data:\n        break\n\n    tcpCliSocket.send(data.encode('utf-8'))\n    data = tcpCliSocket.recv(BUFSIZ)\n    if not data:\n        break\n    print(data.decode('utf-8'))\n\ntcpCliSocket.close()\n\n```\n\n#### 2. UDP\n\n+ Server\n\n```python\nfrom socket import *\nfrom time import ctime\n\nHOST = ''\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nudpSerSocket = socket(AF_INET, SOCK_DGRAM)\nudpSerSocket.bind(ADDR)\n\ntry:\n    while True:\n        print(\"waiting for message...\")\n        msg, addr = udpSerSocket.recvfrom(BUFSIZ)\n        if msg.decode('utf-8') == ' ':\n            break\n        print('Rev client:',msg)\n        send_str = '[%s] %s' %(bytes(ctime(), 'utf-8'), msg)\n        udpSerSocket.sendto(send_str.encode('utf-8'),addr)\n        \nexcept EOFError:\n    print(\"Error: EOFEError\")\nexcept KeyboardInterrupt:\n    print(\"Error: EOFEError\")\nfinally:\n    udpSerSocket.close()\n```\n\n+ Client\n\n```python\nfrom socket import *\n\nHOST = '127.0.0.1' \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nudpCliSocket = socket(AF_INET, SOCK_DGRAM)\nwhile True:\n    data = input('> ')\n    if not data:\n        break\n\n    udpCliSocket.sendto(data.encode('utf-8'),ADDR)\n    if data == ' ':\n        break\n    data,ADDR = udpCliSocket.recvfrom(BUFSIZ)\n    if not data:\n        break\n    print(data.decode('utf-8'))\n\nudpCliSocket.close()\n```\n\n### 使用SocketServer\n+ Server\n\n```python\nfrom socketserver import (TCPServer as TCP, StreamRequestHandler as SRH)\nfrom time import ctime\n\n\nHOST = ''\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nclass MyRequestHandler(SRH):\n    def handle(self):\n        print(\"connected from..\", self.client_address)\n        send_str = '[%s] %s' %(bytes(ctime(), 'utf-8'), self.rfile.readline())\n        self.wfile.write(send_str.encode('utf-8'))\n\ntcpServ = TCP(ADDR, MyRequestHandler)\nprint(\"waiting for connection...\")\ntcpServ.serve_forever()\n        \n```\n\n+ Client\n不同之处：需要把建立和连接放在每次循环中\n\n```\nfrom socket import *\n\nHOST = '127.0.0.1' \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\n\n\nwhile True:\n    tcpCliSocket = socket(AF_INET, SOCK_STREAM)\n    tcpCliSocket.connect(ADDR)\n    data = input('> ')\n    if not data:\n        break\n\n    send_data = \"%s\\n\" % data\n    tcpCliSocket.send(send_data.encode('utf-8'))\n    data = tcpCliSocket.recv(BUFSIZ)\n    if not data:\n        break\n    print(data.decode('utf-8'))\n    tcpCliSocket.close()\n\n```\n","source":"_posts/Python Core Programming Note 2.md","raw":"---\ntitle: Python Core Programming Note 2\ncategories:\n- Python笔记\ntags: \n- Python\n- Core Programming\n- Note\n---\n\n## Net Programming\n\n#### 1. TCP\n+ Server:\n\n```python\nfrom socket import *\nfrom time import ctime\n\nHOST = ''\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\ntcpSerSocket = socket(AF_INET, SOCK_STREAM)\ntcpSerSocket.bind(ADDR)\ntcpSerSocket.listen(5)\n\ntry:\n    while True:\n        print(\"waiting for connection...\")\n        tcpCliSocket, addr = tcpSerSocket.accept()\n        print(\"connected from :\",addr)\n        while True:\n            data = tcpCliSocket.recv(BUFSIZ)\n            if not data:\n                break\n            print(\"rec:\",data)\n            send_str = '[%s] %s' %(bytes(ctime(), 'utf-8'), 'Oh?')\n            tcpCliSocket.send(send_str.encode('utf-8'))\n        tcpCliSocket.close()\nexcept EOFError:\n    print(\"Error: EOFEError\")\nexcept KeyboardInterrupt:\n    print(\"Error: EOFEError\")\nfinally:\n    tcpSerSocket.close()\n```\n\n+ Client\n\n```python\nfrom socket import *\n\nHOST = '127.0.0.1' \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\ntcpCliSocket = socket(AF_INET, SOCK_STREAM)\ntcpCliSocket.connect(ADDR)\n\nwhile True:\n    data = input('> ')\n    if not data:\n        break\n\n    tcpCliSocket.send(data.encode('utf-8'))\n    data = tcpCliSocket.recv(BUFSIZ)\n    if not data:\n        break\n    print(data.decode('utf-8'))\n\ntcpCliSocket.close()\n\n```\n\n#### 2. UDP\n\n+ Server\n\n```python\nfrom socket import *\nfrom time import ctime\n\nHOST = ''\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nudpSerSocket = socket(AF_INET, SOCK_DGRAM)\nudpSerSocket.bind(ADDR)\n\ntry:\n    while True:\n        print(\"waiting for message...\")\n        msg, addr = udpSerSocket.recvfrom(BUFSIZ)\n        if msg.decode('utf-8') == ' ':\n            break\n        print('Rev client:',msg)\n        send_str = '[%s] %s' %(bytes(ctime(), 'utf-8'), msg)\n        udpSerSocket.sendto(send_str.encode('utf-8'),addr)\n        \nexcept EOFError:\n    print(\"Error: EOFEError\")\nexcept KeyboardInterrupt:\n    print(\"Error: EOFEError\")\nfinally:\n    udpSerSocket.close()\n```\n\n+ Client\n\n```python\nfrom socket import *\n\nHOST = '127.0.0.1' \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nudpCliSocket = socket(AF_INET, SOCK_DGRAM)\nwhile True:\n    data = input('> ')\n    if not data:\n        break\n\n    udpCliSocket.sendto(data.encode('utf-8'),ADDR)\n    if data == ' ':\n        break\n    data,ADDR = udpCliSocket.recvfrom(BUFSIZ)\n    if not data:\n        break\n    print(data.decode('utf-8'))\n\nudpCliSocket.close()\n```\n\n### 使用SocketServer\n+ Server\n\n```python\nfrom socketserver import (TCPServer as TCP, StreamRequestHandler as SRH)\nfrom time import ctime\n\n\nHOST = ''\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nclass MyRequestHandler(SRH):\n    def handle(self):\n        print(\"connected from..\", self.client_address)\n        send_str = '[%s] %s' %(bytes(ctime(), 'utf-8'), self.rfile.readline())\n        self.wfile.write(send_str.encode('utf-8'))\n\ntcpServ = TCP(ADDR, MyRequestHandler)\nprint(\"waiting for connection...\")\ntcpServ.serve_forever()\n        \n```\n\n+ Client\n不同之处：需要把建立和连接放在每次循环中\n\n```\nfrom socket import *\n\nHOST = '127.0.0.1' \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\n\n\nwhile True:\n    tcpCliSocket = socket(AF_INET, SOCK_STREAM)\n    tcpCliSocket.connect(ADDR)\n    data = input('> ')\n    if not data:\n        break\n\n    send_data = \"%s\\n\" % data\n    tcpCliSocket.send(send_data.encode('utf-8'))\n    data = tcpCliSocket.recv(BUFSIZ)\n    if not data:\n        break\n    print(data.decode('utf-8'))\n    tcpCliSocket.close()\n\n```\n","slug":"Python Core Programming Note 2","published":1,"date":"2019-10-12T10:01:26.488Z","updated":"2019-10-12T10:01:26.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs86000uekuwmhp09uou","content":"<h2 id=\"Net-Programming\"><a href=\"#Net-Programming\" class=\"headerlink\" title=\"Net Programming\"></a>Net Programming</h2><h4 id=\"1-TCP\"><a href=\"#1-TCP\" class=\"headerlink\" title=\"1. TCP\"></a>1. TCP</h4><ul>\n<li>Server:</li>\n</ul>\n<pre><code class=\"python\">from socket import *\nfrom time import ctime\n\nHOST = &#39;&#39;\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\ntcpSerSocket = socket(AF_INET, SOCK_STREAM)\ntcpSerSocket.bind(ADDR)\ntcpSerSocket.listen(5)\n\ntry:\n    while True:\n        print(&quot;waiting for connection...&quot;)\n        tcpCliSocket, addr = tcpSerSocket.accept()\n        print(&quot;connected from :&quot;,addr)\n        while True:\n            data = tcpCliSocket.recv(BUFSIZ)\n            if not data:\n                break\n            print(&quot;rec:&quot;,data)\n            send_str = &#39;[%s] %s&#39; %(bytes(ctime(), &#39;utf-8&#39;), &#39;Oh?&#39;)\n            tcpCliSocket.send(send_str.encode(&#39;utf-8&#39;))\n        tcpCliSocket.close()\nexcept EOFError:\n    print(&quot;Error: EOFEError&quot;)\nexcept KeyboardInterrupt:\n    print(&quot;Error: EOFEError&quot;)\nfinally:\n    tcpSerSocket.close()</code></pre>\n<ul>\n<li>Client</li>\n</ul>\n<pre><code class=\"python\">from socket import *\n\nHOST = &#39;127.0.0.1&#39; \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\ntcpCliSocket = socket(AF_INET, SOCK_STREAM)\ntcpCliSocket.connect(ADDR)\n\nwhile True:\n    data = input(&#39;&gt; &#39;)\n    if not data:\n        break\n\n    tcpCliSocket.send(data.encode(&#39;utf-8&#39;))\n    data = tcpCliSocket.recv(BUFSIZ)\n    if not data:\n        break\n    print(data.decode(&#39;utf-8&#39;))\n\ntcpCliSocket.close()\n</code></pre>\n<h4 id=\"2-UDP\"><a href=\"#2-UDP\" class=\"headerlink\" title=\"2. UDP\"></a>2. UDP</h4><ul>\n<li>Server</li>\n</ul>\n<pre><code class=\"python\">from socket import *\nfrom time import ctime\n\nHOST = &#39;&#39;\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nudpSerSocket = socket(AF_INET, SOCK_DGRAM)\nudpSerSocket.bind(ADDR)\n\ntry:\n    while True:\n        print(&quot;waiting for message...&quot;)\n        msg, addr = udpSerSocket.recvfrom(BUFSIZ)\n        if msg.decode(&#39;utf-8&#39;) == &#39; &#39;:\n            break\n        print(&#39;Rev client:&#39;,msg)\n        send_str = &#39;[%s] %s&#39; %(bytes(ctime(), &#39;utf-8&#39;), msg)\n        udpSerSocket.sendto(send_str.encode(&#39;utf-8&#39;),addr)\n\nexcept EOFError:\n    print(&quot;Error: EOFEError&quot;)\nexcept KeyboardInterrupt:\n    print(&quot;Error: EOFEError&quot;)\nfinally:\n    udpSerSocket.close()</code></pre>\n<ul>\n<li>Client</li>\n</ul>\n<pre><code class=\"python\">from socket import *\n\nHOST = &#39;127.0.0.1&#39; \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nudpCliSocket = socket(AF_INET, SOCK_DGRAM)\nwhile True:\n    data = input(&#39;&gt; &#39;)\n    if not data:\n        break\n\n    udpCliSocket.sendto(data.encode(&#39;utf-8&#39;),ADDR)\n    if data == &#39; &#39;:\n        break\n    data,ADDR = udpCliSocket.recvfrom(BUFSIZ)\n    if not data:\n        break\n    print(data.decode(&#39;utf-8&#39;))\n\nudpCliSocket.close()</code></pre>\n<h3 id=\"使用SocketServer\"><a href=\"#使用SocketServer\" class=\"headerlink\" title=\"使用SocketServer\"></a>使用SocketServer</h3><ul>\n<li>Server</li>\n</ul>\n<pre><code class=\"python\">from socketserver import (TCPServer as TCP, StreamRequestHandler as SRH)\nfrom time import ctime\n\n\nHOST = &#39;&#39;\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nclass MyRequestHandler(SRH):\n    def handle(self):\n        print(&quot;connected from..&quot;, self.client_address)\n        send_str = &#39;[%s] %s&#39; %(bytes(ctime(), &#39;utf-8&#39;), self.rfile.readline())\n        self.wfile.write(send_str.encode(&#39;utf-8&#39;))\n\ntcpServ = TCP(ADDR, MyRequestHandler)\nprint(&quot;waiting for connection...&quot;)\ntcpServ.serve_forever()\n</code></pre>\n<ul>\n<li>Client<br>不同之处：需要把建立和连接放在每次循环中</li>\n</ul>\n<pre><code>from socket import *\n\nHOST = &#39;127.0.0.1&#39; \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\n\n\nwhile True:\n    tcpCliSocket = socket(AF_INET, SOCK_STREAM)\n    tcpCliSocket.connect(ADDR)\n    data = input(&#39;&gt; &#39;)\n    if not data:\n        break\n\n    send_data = &quot;%s\\n&quot; % data\n    tcpCliSocket.send(send_data.encode(&#39;utf-8&#39;))\n    data = tcpCliSocket.recv(BUFSIZ)\n    if not data:\n        break\n    print(data.decode(&#39;utf-8&#39;))\n    tcpCliSocket.close()\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Net-Programming\"><a href=\"#Net-Programming\" class=\"headerlink\" title=\"Net Programming\"></a>Net Programming</h2><h4 id=\"1-TCP\"><a href=\"#1-TCP\" class=\"headerlink\" title=\"1. TCP\"></a>1. TCP</h4><ul>\n<li>Server:</li>\n</ul>\n<pre><code class=\"python\">from socket import *\nfrom time import ctime\n\nHOST = &#39;&#39;\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\ntcpSerSocket = socket(AF_INET, SOCK_STREAM)\ntcpSerSocket.bind(ADDR)\ntcpSerSocket.listen(5)\n\ntry:\n    while True:\n        print(&quot;waiting for connection...&quot;)\n        tcpCliSocket, addr = tcpSerSocket.accept()\n        print(&quot;connected from :&quot;,addr)\n        while True:\n            data = tcpCliSocket.recv(BUFSIZ)\n            if not data:\n                break\n            print(&quot;rec:&quot;,data)\n            send_str = &#39;[%s] %s&#39; %(bytes(ctime(), &#39;utf-8&#39;), &#39;Oh?&#39;)\n            tcpCliSocket.send(send_str.encode(&#39;utf-8&#39;))\n        tcpCliSocket.close()\nexcept EOFError:\n    print(&quot;Error: EOFEError&quot;)\nexcept KeyboardInterrupt:\n    print(&quot;Error: EOFEError&quot;)\nfinally:\n    tcpSerSocket.close()</code></pre>\n<ul>\n<li>Client</li>\n</ul>\n<pre><code class=\"python\">from socket import *\n\nHOST = &#39;127.0.0.1&#39; \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\ntcpCliSocket = socket(AF_INET, SOCK_STREAM)\ntcpCliSocket.connect(ADDR)\n\nwhile True:\n    data = input(&#39;&gt; &#39;)\n    if not data:\n        break\n\n    tcpCliSocket.send(data.encode(&#39;utf-8&#39;))\n    data = tcpCliSocket.recv(BUFSIZ)\n    if not data:\n        break\n    print(data.decode(&#39;utf-8&#39;))\n\ntcpCliSocket.close()\n</code></pre>\n<h4 id=\"2-UDP\"><a href=\"#2-UDP\" class=\"headerlink\" title=\"2. UDP\"></a>2. UDP</h4><ul>\n<li>Server</li>\n</ul>\n<pre><code class=\"python\">from socket import *\nfrom time import ctime\n\nHOST = &#39;&#39;\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nudpSerSocket = socket(AF_INET, SOCK_DGRAM)\nudpSerSocket.bind(ADDR)\n\ntry:\n    while True:\n        print(&quot;waiting for message...&quot;)\n        msg, addr = udpSerSocket.recvfrom(BUFSIZ)\n        if msg.decode(&#39;utf-8&#39;) == &#39; &#39;:\n            break\n        print(&#39;Rev client:&#39;,msg)\n        send_str = &#39;[%s] %s&#39; %(bytes(ctime(), &#39;utf-8&#39;), msg)\n        udpSerSocket.sendto(send_str.encode(&#39;utf-8&#39;),addr)\n\nexcept EOFError:\n    print(&quot;Error: EOFEError&quot;)\nexcept KeyboardInterrupt:\n    print(&quot;Error: EOFEError&quot;)\nfinally:\n    udpSerSocket.close()</code></pre>\n<ul>\n<li>Client</li>\n</ul>\n<pre><code class=\"python\">from socket import *\n\nHOST = &#39;127.0.0.1&#39; \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nudpCliSocket = socket(AF_INET, SOCK_DGRAM)\nwhile True:\n    data = input(&#39;&gt; &#39;)\n    if not data:\n        break\n\n    udpCliSocket.sendto(data.encode(&#39;utf-8&#39;),ADDR)\n    if data == &#39; &#39;:\n        break\n    data,ADDR = udpCliSocket.recvfrom(BUFSIZ)\n    if not data:\n        break\n    print(data.decode(&#39;utf-8&#39;))\n\nudpCliSocket.close()</code></pre>\n<h3 id=\"使用SocketServer\"><a href=\"#使用SocketServer\" class=\"headerlink\" title=\"使用SocketServer\"></a>使用SocketServer</h3><ul>\n<li>Server</li>\n</ul>\n<pre><code class=\"python\">from socketserver import (TCPServer as TCP, StreamRequestHandler as SRH)\nfrom time import ctime\n\n\nHOST = &#39;&#39;\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nclass MyRequestHandler(SRH):\n    def handle(self):\n        print(&quot;connected from..&quot;, self.client_address)\n        send_str = &#39;[%s] %s&#39; %(bytes(ctime(), &#39;utf-8&#39;), self.rfile.readline())\n        self.wfile.write(send_str.encode(&#39;utf-8&#39;))\n\ntcpServ = TCP(ADDR, MyRequestHandler)\nprint(&quot;waiting for connection...&quot;)\ntcpServ.serve_forever()\n</code></pre>\n<ul>\n<li>Client<br>不同之处：需要把建立和连接放在每次循环中</li>\n</ul>\n<pre><code>from socket import *\n\nHOST = &#39;127.0.0.1&#39; \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\n\n\nwhile True:\n    tcpCliSocket = socket(AF_INET, SOCK_STREAM)\n    tcpCliSocket.connect(ADDR)\n    data = input(&#39;&gt; &#39;)\n    if not data:\n        break\n\n    send_data = &quot;%s\\n&quot; % data\n    tcpCliSocket.send(send_data.encode(&#39;utf-8&#39;))\n    data = tcpCliSocket.recv(BUFSIZ)\n    if not data:\n        break\n    print(data.decode(&#39;utf-8&#39;))\n    tcpCliSocket.close()\n</code></pre>"},{"title":"Python 杂项","_content":"## Python 杂项\n\n### 关于 *args 和 **kwargs参数的用法\n\n> * 允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。\n\n```python\ndef f(a,*args):\n    print(args)\n\nf(1,2,3,4)\n\n\ndef calc(*numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    print(sum)\n\ncalc(1,2,3,4)\n```\n\n>  ** ,关键字参数允许你传入0个或任意个含参数名的参数,这些关键字参数在函数内部自动组装为一个dict。\n\n```python\ndef d(**kargs):\n    print(kargs)\n    \nd(a=1,b=2)\n\n#在函数混合使用*以及**。\ndef h(a,*args,**kargs):\n    print(a,args,kargs)\n\nh(1,2,3,x=4,y=5)\n\ndef person(name,age,**kw):\n    print('name:',name,'age:',age,'other:',kw)\n    \nperson('Adam', 45, gender='M', job='Engineer')\n```\n","source":"_posts/Python 杂项.md","raw":"---\ntitle:  Python 杂项\ncategories:\n- Python笔记\ntags: \n- Python\n- Note\n---\n## Python 杂项\n\n### 关于 *args 和 **kwargs参数的用法\n\n> * 允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。\n\n```python\ndef f(a,*args):\n    print(args)\n\nf(1,2,3,4)\n\n\ndef calc(*numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    print(sum)\n\ncalc(1,2,3,4)\n```\n\n>  ** ,关键字参数允许你传入0个或任意个含参数名的参数,这些关键字参数在函数内部自动组装为一个dict。\n\n```python\ndef d(**kargs):\n    print(kargs)\n    \nd(a=1,b=2)\n\n#在函数混合使用*以及**。\ndef h(a,*args,**kargs):\n    print(a,args,kargs)\n\nh(1,2,3,x=4,y=5)\n\ndef person(name,age,**kw):\n    print('name:',name,'age:',age,'other:',kw)\n    \nperson('Adam', 45, gender='M', job='Engineer')\n```\n","slug":"Python 杂项","published":1,"date":"2019-10-12T10:01:26.489Z","updated":"2019-10-12T10:01:26.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs89000zekuwy6fc3e2s","content":"<h2 id=\"Python-杂项\"><a href=\"#Python-杂项\" class=\"headerlink\" title=\"Python 杂项\"></a>Python 杂项</h2><h3 id=\"关于-args-和-kwargs参数的用法\"><a href=\"#关于-args-和-kwargs参数的用法\" class=\"headerlink\" title=\"关于 args 和 *kwargs参数的用法\"></a>关于 <em>args 和 *</em>kwargs参数的用法</h3><blockquote>\n<ul>\n<li>允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。</li>\n</ul>\n</blockquote>\n<pre><code class=\"python\">def f(a,*args):\n    print(args)\n\nf(1,2,3,4)\n\n\ndef calc(*numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    print(sum)\n\ncalc(1,2,3,4)</code></pre>\n<blockquote>\n<p> ** ,关键字参数允许你传入0个或任意个含参数名的参数,这些关键字参数在函数内部自动组装为一个dict。</p>\n</blockquote>\n<pre><code class=\"python\">def d(**kargs):\n    print(kargs)\n\nd(a=1,b=2)\n\n#在函数混合使用*以及**。\ndef h(a,*args,**kargs):\n    print(a,args,kargs)\n\nh(1,2,3,x=4,y=5)\n\ndef person(name,age,**kw):\n    print(&#39;name:&#39;,name,&#39;age:&#39;,age,&#39;other:&#39;,kw)\n\nperson(&#39;Adam&#39;, 45, gender=&#39;M&#39;, job=&#39;Engineer&#39;)</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Python-杂项\"><a href=\"#Python-杂项\" class=\"headerlink\" title=\"Python 杂项\"></a>Python 杂项</h2><h3 id=\"关于-args-和-kwargs参数的用法\"><a href=\"#关于-args-和-kwargs参数的用法\" class=\"headerlink\" title=\"关于 args 和 *kwargs参数的用法\"></a>关于 <em>args 和 *</em>kwargs参数的用法</h3><blockquote>\n<ul>\n<li>允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。</li>\n</ul>\n</blockquote>\n<pre><code class=\"python\">def f(a,*args):\n    print(args)\n\nf(1,2,3,4)\n\n\ndef calc(*numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    print(sum)\n\ncalc(1,2,3,4)</code></pre>\n<blockquote>\n<p> ** ,关键字参数允许你传入0个或任意个含参数名的参数,这些关键字参数在函数内部自动组装为一个dict。</p>\n</blockquote>\n<pre><code class=\"python\">def d(**kargs):\n    print(kargs)\n\nd(a=1,b=2)\n\n#在函数混合使用*以及**。\ndef h(a,*args,**kargs):\n    print(a,args,kargs)\n\nh(1,2,3,x=4,y=5)\n\ndef person(name,age,**kw):\n    print(&#39;name:&#39;,name,&#39;age:&#39;,age,&#39;other:&#39;,kw)\n\nperson(&#39;Adam&#39;, 45, gender=&#39;M&#39;, job=&#39;Engineer&#39;)</code></pre>\n"},{"title":"Python Note 3","_content":"# Python Note 3\n\n### Classes\n> Use Pacal naming convertion,not like variables/function use lower cases and underscore connection.\n> Basic usage:\n\n```python\nclass Point:\n\tdef draw(self):\n\t\tprint(\"draw\")\n\n\tdef print(self):\n\t\tprint(\"this is point\")\n\n\npoint1 = Point()\npoint1.x = 5\npoint1.draw()\nprint(point1.x)\n```\n\n### Constructor\n\n```python\nclass Point:\n\tdef __init__(self, x, y):\n\t\tself.x = x\n\t\tself.y = y\n\n\tdef draw(self):\n\t\tprint(\"draw\")\n\n\tdef print(self):\n\t\tprint(\"this is point\")\n\n\npoint1 = Point(10, 5)\npoint1.draw()\nprint(point1.x)\n\n#exercise\nclass Person:\n\tdef __init__(self, name):\n\t\tself.name = name\n\n\tdef talk(self):\n\t\tprint(f\"{self.name} is talking..\")\n\n\nwhile True:\n\tperson_name = str(input(\"Please enter person: \"))\n\tif person_name == \"Quit\":\n\t\tbreak\n\telif person_name != \"\":\n\t\tnew_person = Person(person_name)\n\t\tnew_person.talk()\n\telse:\n\t\tprint(\"You enter a empty!\")\n\n```\n\n### inheritance\n> use bracket to inherit parent class\n\n```python\nclass Mammal:\n\tdef walk(self):\n\t\tprint(\"walk\")\n\n\nclass Dog(Mammal):\n\tdef bark(self):\n\t\tprint(\"bark\")\n\n\nclass Cat(Mammal):\n\tpass  # tell python to pass this line\n\n\ndog1 = Dog()\ndog1.walk()\ndog1.bark()\n\n```\n\n### module\n> each file refer a module\n\n```python\nimport converters #to import converters.py\nfrom converters import kg_to_lbs\n\n#exercise\nimport  convertors\nfrom convertors import weight_to_lbs\n\nprint(weight_to_lbs())\nnumbers = [5,1,8,2]\nmaximum = convertors.find_max(numbers)\nprint(max(numbers))\n```\n\n### package\n> a set of modules: directory with \"__init__.py\" file\n\n```python\nfrom ecommerce.shopping import test\nfrom ecommerce import shopping\ntest()\nshopping.test()\n```\n\n### use python build-in module\n> search [python module index](https://docs.python.org/3/py-modindex.html)\n> PEP: python enhancement proposal\n\n```python\nimport  random\nmembers = [\"Jack\", \"Rose\", \"Bob\", \"Avery\", \"Mosh\"]\nm = random.choice(members)\nprint(m)\n\n#exercise\nimport random\nclass Dice: #will get PEP 8 warning\n    def roll(self):\n        r1 = random.randint(0, 5)\n        r2 = random.randint(0, 5)\n        return r1,r2  #Python will auto make it to Tuple\n\n\n\nmydice = Dice()\nprint(mydice.roll())\n```\n\n```python\nfrom pathlib import Path\n\npath = Path(\"pydemo2/ecommerce\")\nfor p in path.glob(\"*.py\"):\n    print(p)\n\n```\n\n","source":"_posts/Python_3.md","raw":"---\ntitle: Python Note 3\ncategories:\n- Python笔记\ntags: \n- Python\n- Note\n---\n# Python Note 3\n\n### Classes\n> Use Pacal naming convertion,not like variables/function use lower cases and underscore connection.\n> Basic usage:\n\n```python\nclass Point:\n\tdef draw(self):\n\t\tprint(\"draw\")\n\n\tdef print(self):\n\t\tprint(\"this is point\")\n\n\npoint1 = Point()\npoint1.x = 5\npoint1.draw()\nprint(point1.x)\n```\n\n### Constructor\n\n```python\nclass Point:\n\tdef __init__(self, x, y):\n\t\tself.x = x\n\t\tself.y = y\n\n\tdef draw(self):\n\t\tprint(\"draw\")\n\n\tdef print(self):\n\t\tprint(\"this is point\")\n\n\npoint1 = Point(10, 5)\npoint1.draw()\nprint(point1.x)\n\n#exercise\nclass Person:\n\tdef __init__(self, name):\n\t\tself.name = name\n\n\tdef talk(self):\n\t\tprint(f\"{self.name} is talking..\")\n\n\nwhile True:\n\tperson_name = str(input(\"Please enter person: \"))\n\tif person_name == \"Quit\":\n\t\tbreak\n\telif person_name != \"\":\n\t\tnew_person = Person(person_name)\n\t\tnew_person.talk()\n\telse:\n\t\tprint(\"You enter a empty!\")\n\n```\n\n### inheritance\n> use bracket to inherit parent class\n\n```python\nclass Mammal:\n\tdef walk(self):\n\t\tprint(\"walk\")\n\n\nclass Dog(Mammal):\n\tdef bark(self):\n\t\tprint(\"bark\")\n\n\nclass Cat(Mammal):\n\tpass  # tell python to pass this line\n\n\ndog1 = Dog()\ndog1.walk()\ndog1.bark()\n\n```\n\n### module\n> each file refer a module\n\n```python\nimport converters #to import converters.py\nfrom converters import kg_to_lbs\n\n#exercise\nimport  convertors\nfrom convertors import weight_to_lbs\n\nprint(weight_to_lbs())\nnumbers = [5,1,8,2]\nmaximum = convertors.find_max(numbers)\nprint(max(numbers))\n```\n\n### package\n> a set of modules: directory with \"__init__.py\" file\n\n```python\nfrom ecommerce.shopping import test\nfrom ecommerce import shopping\ntest()\nshopping.test()\n```\n\n### use python build-in module\n> search [python module index](https://docs.python.org/3/py-modindex.html)\n> PEP: python enhancement proposal\n\n```python\nimport  random\nmembers = [\"Jack\", \"Rose\", \"Bob\", \"Avery\", \"Mosh\"]\nm = random.choice(members)\nprint(m)\n\n#exercise\nimport random\nclass Dice: #will get PEP 8 warning\n    def roll(self):\n        r1 = random.randint(0, 5)\n        r2 = random.randint(0, 5)\n        return r1,r2  #Python will auto make it to Tuple\n\n\n\nmydice = Dice()\nprint(mydice.roll())\n```\n\n```python\nfrom pathlib import Path\n\npath = Path(\"pydemo2/ecommerce\")\nfor p in path.glob(\"*.py\"):\n    print(p)\n\n```\n\n","slug":"Python_3","published":1,"date":"2019-10-12T10:01:26.489Z","updated":"2019-10-12T10:01:26.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs8b0011ekuwlf98umqn","content":"<h1 id=\"Python-Note-3\"><a href=\"#Python-Note-3\" class=\"headerlink\" title=\"Python Note 3\"></a>Python Note 3</h1><h3 id=\"Classes\"><a href=\"#Classes\" class=\"headerlink\" title=\"Classes\"></a>Classes</h3><blockquote>\n<p>Use Pacal naming convertion,not like variables/function use lower cases and underscore connection.<br>Basic usage:</p>\n</blockquote>\n<pre><code class=\"python\">class Point:\n    def draw(self):\n        print(&quot;draw&quot;)\n\n    def print(self):\n        print(&quot;this is point&quot;)\n\n\npoint1 = Point()\npoint1.x = 5\npoint1.draw()\nprint(point1.x)</code></pre>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a>Constructor</h3><pre><code class=\"python\">class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def draw(self):\n        print(&quot;draw&quot;)\n\n    def print(self):\n        print(&quot;this is point&quot;)\n\n\npoint1 = Point(10, 5)\npoint1.draw()\nprint(point1.x)\n\n#exercise\nclass Person:\n    def __init__(self, name):\n        self.name = name\n\n    def talk(self):\n        print(f&quot;{self.name} is talking..&quot;)\n\n\nwhile True:\n    person_name = str(input(&quot;Please enter person: &quot;))\n    if person_name == &quot;Quit&quot;:\n        break\n    elif person_name != &quot;&quot;:\n        new_person = Person(person_name)\n        new_person.talk()\n    else:\n        print(&quot;You enter a empty!&quot;)\n</code></pre>\n<h3 id=\"inheritance\"><a href=\"#inheritance\" class=\"headerlink\" title=\"inheritance\"></a>inheritance</h3><blockquote>\n<p>use bracket to inherit parent class</p>\n</blockquote>\n<pre><code class=\"python\">class Mammal:\n    def walk(self):\n        print(&quot;walk&quot;)\n\n\nclass Dog(Mammal):\n    def bark(self):\n        print(&quot;bark&quot;)\n\n\nclass Cat(Mammal):\n    pass  # tell python to pass this line\n\n\ndog1 = Dog()\ndog1.walk()\ndog1.bark()\n</code></pre>\n<h3 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h3><blockquote>\n<p>each file refer a module</p>\n</blockquote>\n<pre><code class=\"python\">import converters #to import converters.py\nfrom converters import kg_to_lbs\n\n#exercise\nimport  convertors\nfrom convertors import weight_to_lbs\n\nprint(weight_to_lbs())\nnumbers = [5,1,8,2]\nmaximum = convertors.find_max(numbers)\nprint(max(numbers))</code></pre>\n<h3 id=\"package\"><a href=\"#package\" class=\"headerlink\" title=\"package\"></a>package</h3><blockquote>\n<p>a set of modules: directory with “<strong>init</strong>.py” file</p>\n</blockquote>\n<pre><code class=\"python\">from ecommerce.shopping import test\nfrom ecommerce import shopping\ntest()\nshopping.test()</code></pre>\n<h3 id=\"use-python-build-in-module\"><a href=\"#use-python-build-in-module\" class=\"headerlink\" title=\"use python build-in module\"></a>use python build-in module</h3><blockquote>\n<p>search <a href=\"https://docs.python.org/3/py-modindex.html\">python module index</a><br>PEP: python enhancement proposal</p>\n</blockquote>\n<pre><code class=\"python\">import  random\nmembers = [&quot;Jack&quot;, &quot;Rose&quot;, &quot;Bob&quot;, &quot;Avery&quot;, &quot;Mosh&quot;]\nm = random.choice(members)\nprint(m)\n\n#exercise\nimport random\nclass Dice: #will get PEP 8 warning\n    def roll(self):\n        r1 = random.randint(0, 5)\n        r2 = random.randint(0, 5)\n        return r1,r2  #Python will auto make it to Tuple\n\n\n\nmydice = Dice()\nprint(mydice.roll())</code></pre>\n<pre><code class=\"python\">from pathlib import Path\n\npath = Path(&quot;pydemo2/ecommerce&quot;)\nfor p in path.glob(&quot;*.py&quot;):\n    print(p)\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Python-Note-3\"><a href=\"#Python-Note-3\" class=\"headerlink\" title=\"Python Note 3\"></a>Python Note 3</h1><h3 id=\"Classes\"><a href=\"#Classes\" class=\"headerlink\" title=\"Classes\"></a>Classes</h3><blockquote>\n<p>Use Pacal naming convertion,not like variables/function use lower cases and underscore connection.<br>Basic usage:</p>\n</blockquote>\n<pre><code class=\"python\">class Point:\n    def draw(self):\n        print(&quot;draw&quot;)\n\n    def print(self):\n        print(&quot;this is point&quot;)\n\n\npoint1 = Point()\npoint1.x = 5\npoint1.draw()\nprint(point1.x)</code></pre>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a>Constructor</h3><pre><code class=\"python\">class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def draw(self):\n        print(&quot;draw&quot;)\n\n    def print(self):\n        print(&quot;this is point&quot;)\n\n\npoint1 = Point(10, 5)\npoint1.draw()\nprint(point1.x)\n\n#exercise\nclass Person:\n    def __init__(self, name):\n        self.name = name\n\n    def talk(self):\n        print(f&quot;{self.name} is talking..&quot;)\n\n\nwhile True:\n    person_name = str(input(&quot;Please enter person: &quot;))\n    if person_name == &quot;Quit&quot;:\n        break\n    elif person_name != &quot;&quot;:\n        new_person = Person(person_name)\n        new_person.talk()\n    else:\n        print(&quot;You enter a empty!&quot;)\n</code></pre>\n<h3 id=\"inheritance\"><a href=\"#inheritance\" class=\"headerlink\" title=\"inheritance\"></a>inheritance</h3><blockquote>\n<p>use bracket to inherit parent class</p>\n</blockquote>\n<pre><code class=\"python\">class Mammal:\n    def walk(self):\n        print(&quot;walk&quot;)\n\n\nclass Dog(Mammal):\n    def bark(self):\n        print(&quot;bark&quot;)\n\n\nclass Cat(Mammal):\n    pass  # tell python to pass this line\n\n\ndog1 = Dog()\ndog1.walk()\ndog1.bark()\n</code></pre>\n<h3 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h3><blockquote>\n<p>each file refer a module</p>\n</blockquote>\n<pre><code class=\"python\">import converters #to import converters.py\nfrom converters import kg_to_lbs\n\n#exercise\nimport  convertors\nfrom convertors import weight_to_lbs\n\nprint(weight_to_lbs())\nnumbers = [5,1,8,2]\nmaximum = convertors.find_max(numbers)\nprint(max(numbers))</code></pre>\n<h3 id=\"package\"><a href=\"#package\" class=\"headerlink\" title=\"package\"></a>package</h3><blockquote>\n<p>a set of modules: directory with “<strong>init</strong>.py” file</p>\n</blockquote>\n<pre><code class=\"python\">from ecommerce.shopping import test\nfrom ecommerce import shopping\ntest()\nshopping.test()</code></pre>\n<h3 id=\"use-python-build-in-module\"><a href=\"#use-python-build-in-module\" class=\"headerlink\" title=\"use python build-in module\"></a>use python build-in module</h3><blockquote>\n<p>search <a href=\"https://docs.python.org/3/py-modindex.html\">python module index</a><br>PEP: python enhancement proposal</p>\n</blockquote>\n<pre><code class=\"python\">import  random\nmembers = [&quot;Jack&quot;, &quot;Rose&quot;, &quot;Bob&quot;, &quot;Avery&quot;, &quot;Mosh&quot;]\nm = random.choice(members)\nprint(m)\n\n#exercise\nimport random\nclass Dice: #will get PEP 8 warning\n    def roll(self):\n        r1 = random.randint(0, 5)\n        r2 = random.randint(0, 5)\n        return r1,r2  #Python will auto make it to Tuple\n\n\n\nmydice = Dice()\nprint(mydice.roll())</code></pre>\n<pre><code class=\"python\">from pathlib import Path\n\npath = Path(&quot;pydemo2/ecommerce&quot;)\nfor p in path.glob(&quot;*.py&quot;):\n    print(p)\n</code></pre>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-10-12T10:01:26.493Z","updated":"2019-10-12T10:01:26.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs8d0015ekuwm0gmnpml","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"Python Note 1","_content":"# Python Note 1\n\n+ ### while结构\n 注： \"\"\"  多行string\n \n```python\nn = 0\nwhile n < 5:\n\tprint(\"\"\"\nThis is test!\nThis is test2!\nThis is test3!\n\t\"\"\")\n\tn = n + 1\n```\n\n+ ### For结构\n * 普通使用\n \n ```python\n for i in range(5):\n \tprint()\n ```\n * Use curly braces, 显示变量\n\n```python\n for i in range(5):\n \tprint(f\"i:{i}\")\n ```\n * 使用重复*个数输出字符\n\n```python\n for i in range(5):\n \tprint(f\"i:{i}\"*4)\n ```\n\n+ ### List\n* 普遍用法\n\n```python\nnames = ['John', 'Bob', 'Mosh', 'Sarah', 'Mary']\nprint(names[2:])  #Print will start from 'Mosh'''\nprint(names[:])  #Print all'\nnames[0] = 'Joh' #Change item\nprint(names)  #output\n# 2d list\nmatrix = [\n   [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nmatrix[0][-3] = 20\nprint(matrix)\n```\n\n* 编辑类\n\n```python\nnumbers = [5,2,1,7]\nnumbers.insert(-2,20)\nnumbers.remove(2)\nnumbers.append(45)\nnumbers.pop() #remove the last and return it\nprint(numbers.index(5))\nnumbers.sort()\nnumbers.reverse() #get deasc order\nif 5 in numbers:\n    print(numbers.index(5))\nnumbers2 = numbers.copy()\nnumbers.append(45)\nprint(numbers)\nprint(numbers2)\n\n#去重复\nnumbers = [5,20,1,5,7,5,6,4,5]\nuniques = []\nfor i in numbers:\n    if i not in uniques:\n        uniques.append(i)\nprint(uniques)\n```\n\n+ ### Tuple\n+ 类似于List，但不可修改\n\n```python\nnumbers = (5,20,1,5,7,5,6,4,5)\nnumbers[0] = 1 #TypeError: 'tuple' object does not support item assignment\n```\n\n+ ### Unpacking\n+ 映射数组成员\n\n```python\ncoordinates = (1,2,3)\na = coordinates[0]\nb = coordinates[1]\nc = coordinates[2]\n\n# use Unpacking feature, unpacking the tuple/list to three variable\nx, y, z = coordinates\nprint(f\"{a},{b},{c} <=> {x}, {y}, {z}\")\n```\n\n+ ### Dictionary\n\n```python\ncustomer = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"is_verified\": True\n}\nprint(customer[\"name\"])\n# print(customer[\"Name\"]) #KeyError,don't contain\n# print(customer[\"birthdate\"])#KeyError,don't contain\nprint(customer.get(\"name\"))\nprint(customer.get(\"Name\",\"Hey\")) #Print,with default value:'Hey'\ncustomer[\"name\"] = \"AA\"\nprint(customer.get(\"name\"))\n\n#Exercise\ninput_str = str(input(\"Phone:\"))\ndigits_map = {\n    \"1\":\"One\",\n    \"2\":\"Two\",\n    \"3\":\"Three\",\n    \"4\":\"Four\",\n}\noutput = ''\nfor s in input_str:\n    output += digits_map.get(s,\"\") + \" \"\n\nprint(output)\n```\n+ [mac]ctrl+cmd+space>> to show emojis","source":"_posts/python_1.md","raw":"---\ntitle: Python Note 1\ncategories:\n- Python笔记\ntags: \n- Python\n- Note\n---\n# Python Note 1\n\n+ ### while结构\n 注： \"\"\"  多行string\n \n```python\nn = 0\nwhile n < 5:\n\tprint(\"\"\"\nThis is test!\nThis is test2!\nThis is test3!\n\t\"\"\")\n\tn = n + 1\n```\n\n+ ### For结构\n * 普通使用\n \n ```python\n for i in range(5):\n \tprint()\n ```\n * Use curly braces, 显示变量\n\n```python\n for i in range(5):\n \tprint(f\"i:{i}\")\n ```\n * 使用重复*个数输出字符\n\n```python\n for i in range(5):\n \tprint(f\"i:{i}\"*4)\n ```\n\n+ ### List\n* 普遍用法\n\n```python\nnames = ['John', 'Bob', 'Mosh', 'Sarah', 'Mary']\nprint(names[2:])  #Print will start from 'Mosh'''\nprint(names[:])  #Print all'\nnames[0] = 'Joh' #Change item\nprint(names)  #output\n# 2d list\nmatrix = [\n   [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nmatrix[0][-3] = 20\nprint(matrix)\n```\n\n* 编辑类\n\n```python\nnumbers = [5,2,1,7]\nnumbers.insert(-2,20)\nnumbers.remove(2)\nnumbers.append(45)\nnumbers.pop() #remove the last and return it\nprint(numbers.index(5))\nnumbers.sort()\nnumbers.reverse() #get deasc order\nif 5 in numbers:\n    print(numbers.index(5))\nnumbers2 = numbers.copy()\nnumbers.append(45)\nprint(numbers)\nprint(numbers2)\n\n#去重复\nnumbers = [5,20,1,5,7,5,6,4,5]\nuniques = []\nfor i in numbers:\n    if i not in uniques:\n        uniques.append(i)\nprint(uniques)\n```\n\n+ ### Tuple\n+ 类似于List，但不可修改\n\n```python\nnumbers = (5,20,1,5,7,5,6,4,5)\nnumbers[0] = 1 #TypeError: 'tuple' object does not support item assignment\n```\n\n+ ### Unpacking\n+ 映射数组成员\n\n```python\ncoordinates = (1,2,3)\na = coordinates[0]\nb = coordinates[1]\nc = coordinates[2]\n\n# use Unpacking feature, unpacking the tuple/list to three variable\nx, y, z = coordinates\nprint(f\"{a},{b},{c} <=> {x}, {y}, {z}\")\n```\n\n+ ### Dictionary\n\n```python\ncustomer = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"is_verified\": True\n}\nprint(customer[\"name\"])\n# print(customer[\"Name\"]) #KeyError,don't contain\n# print(customer[\"birthdate\"])#KeyError,don't contain\nprint(customer.get(\"name\"))\nprint(customer.get(\"Name\",\"Hey\")) #Print,with default value:'Hey'\ncustomer[\"name\"] = \"AA\"\nprint(customer.get(\"name\"))\n\n#Exercise\ninput_str = str(input(\"Phone:\"))\ndigits_map = {\n    \"1\":\"One\",\n    \"2\":\"Two\",\n    \"3\":\"Three\",\n    \"4\":\"Four\",\n}\noutput = ''\nfor s in input_str:\n    output += digits_map.get(s,\"\") + \" \"\n\nprint(output)\n```\n+ [mac]ctrl+cmd+space>> to show emojis","slug":"python_1","published":1,"date":"2019-10-12T10:01:26.499Z","updated":"2019-10-12T10:01:26.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs8f0017ekuw15q296ah","content":"<h1 id=\"Python-Note-1\"><a href=\"#Python-Note-1\" class=\"headerlink\" title=\"Python Note 1\"></a>Python Note 1</h1><ul>\n<li><h3 id=\"while结构\"><a href=\"#while结构\" class=\"headerlink\" title=\"while结构\"></a>while结构</h3>注： “””  多行string</li>\n</ul>\n<pre><code class=\"python\">n = 0\nwhile n &lt; 5:\n    print(&quot;&quot;&quot;\nThis is test!\nThis is test2!\nThis is test3!\n    &quot;&quot;&quot;)\n    n = n + 1</code></pre>\n<ul>\n<li><h3 id=\"For结构\"><a href=\"#For结构\" class=\"headerlink\" title=\"For结构\"></a>For结构</h3><ul>\n<li>普通使用</li>\n</ul>\n<pre><code class=\"python\">for i in range(5):\n   print()</code></pre>\n<ul>\n<li>Use curly braces, 显示变量</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"python\"> for i in range(5):\n     print(f&quot;i:{i}&quot;)</code></pre>\n<ul>\n<li>使用重复*个数输出字符</li>\n</ul>\n<pre><code class=\"python\"> for i in range(5):\n     print(f&quot;i:{i}&quot;*4)</code></pre>\n<ul>\n<li><h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3></li>\n</ul>\n<ul>\n<li>普遍用法</li>\n</ul>\n<pre><code class=\"python\">names = [&#39;John&#39;, &#39;Bob&#39;, &#39;Mosh&#39;, &#39;Sarah&#39;, &#39;Mary&#39;]\nprint(names[2:])  #Print will start from &#39;Mosh&#39;&#39;&#39;\nprint(names[:])  #Print all&#39;\nnames[0] = &#39;Joh&#39; #Change item\nprint(names)  #output\n# 2d list\nmatrix = [\n   [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nmatrix[0][-3] = 20\nprint(matrix)</code></pre>\n<ul>\n<li>编辑类</li>\n</ul>\n<pre><code class=\"python\">numbers = [5,2,1,7]\nnumbers.insert(-2,20)\nnumbers.remove(2)\nnumbers.append(45)\nnumbers.pop() #remove the last and return it\nprint(numbers.index(5))\nnumbers.sort()\nnumbers.reverse() #get deasc order\nif 5 in numbers:\n    print(numbers.index(5))\nnumbers2 = numbers.copy()\nnumbers.append(45)\nprint(numbers)\nprint(numbers2)\n\n#去重复\nnumbers = [5,20,1,5,7,5,6,4,5]\nuniques = []\nfor i in numbers:\n    if i not in uniques:\n        uniques.append(i)\nprint(uniques)</code></pre>\n<ul>\n<li><h3 id=\"Tuple\"><a href=\"#Tuple\" class=\"headerlink\" title=\"Tuple\"></a>Tuple</h3></li>\n<li>类似于List，但不可修改</li>\n</ul>\n<pre><code class=\"python\">numbers = (5,20,1,5,7,5,6,4,5)\nnumbers[0] = 1 #TypeError: &#39;tuple&#39; object does not support item assignment</code></pre>\n<ul>\n<li><h3 id=\"Unpacking\"><a href=\"#Unpacking\" class=\"headerlink\" title=\"Unpacking\"></a>Unpacking</h3></li>\n<li>映射数组成员</li>\n</ul>\n<pre><code class=\"python\">coordinates = (1,2,3)\na = coordinates[0]\nb = coordinates[1]\nc = coordinates[2]\n\n# use Unpacking feature, unpacking the tuple/list to three variable\nx, y, z = coordinates\nprint(f&quot;{a},{b},{c} &lt;=&gt; {x}, {y}, {z}&quot;)</code></pre>\n<ul>\n<li><h3 id=\"Dictionary\"><a href=\"#Dictionary\" class=\"headerlink\" title=\"Dictionary\"></a>Dictionary</h3></li>\n</ul>\n<pre><code class=\"python\">customer = {\n    &quot;name&quot;: &quot;John&quot;,\n    &quot;age&quot;: 30,\n    &quot;is_verified&quot;: True\n}\nprint(customer[&quot;name&quot;])\n# print(customer[&quot;Name&quot;]) #KeyError,don&#39;t contain\n# print(customer[&quot;birthdate&quot;])#KeyError,don&#39;t contain\nprint(customer.get(&quot;name&quot;))\nprint(customer.get(&quot;Name&quot;,&quot;Hey&quot;)) #Print,with default value:&#39;Hey&#39;\ncustomer[&quot;name&quot;] = &quot;AA&quot;\nprint(customer.get(&quot;name&quot;))\n\n#Exercise\ninput_str = str(input(&quot;Phone:&quot;))\ndigits_map = {\n    &quot;1&quot;:&quot;One&quot;,\n    &quot;2&quot;:&quot;Two&quot;,\n    &quot;3&quot;:&quot;Three&quot;,\n    &quot;4&quot;:&quot;Four&quot;,\n}\noutput = &#39;&#39;\nfor s in input_str:\n    output += digits_map.get(s,&quot;&quot;) + &quot; &quot;\n\nprint(output)</code></pre>\n<ul>\n<li>[mac]ctrl+cmd+space&gt;&gt; to show emojis</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Python-Note-1\"><a href=\"#Python-Note-1\" class=\"headerlink\" title=\"Python Note 1\"></a>Python Note 1</h1><ul>\n<li><h3 id=\"while结构\"><a href=\"#while结构\" class=\"headerlink\" title=\"while结构\"></a>while结构</h3>注： “””  多行string</li>\n</ul>\n<pre><code class=\"python\">n = 0\nwhile n &lt; 5:\n    print(&quot;&quot;&quot;\nThis is test!\nThis is test2!\nThis is test3!\n    &quot;&quot;&quot;)\n    n = n + 1</code></pre>\n<ul>\n<li><h3 id=\"For结构\"><a href=\"#For结构\" class=\"headerlink\" title=\"For结构\"></a>For结构</h3><ul>\n<li>普通使用</li>\n</ul>\n<pre><code class=\"python\">for i in range(5):\n   print()</code></pre>\n<ul>\n<li>Use curly braces, 显示变量</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"python\"> for i in range(5):\n     print(f&quot;i:{i}&quot;)</code></pre>\n<ul>\n<li>使用重复*个数输出字符</li>\n</ul>\n<pre><code class=\"python\"> for i in range(5):\n     print(f&quot;i:{i}&quot;*4)</code></pre>\n<ul>\n<li><h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3></li>\n</ul>\n<ul>\n<li>普遍用法</li>\n</ul>\n<pre><code class=\"python\">names = [&#39;John&#39;, &#39;Bob&#39;, &#39;Mosh&#39;, &#39;Sarah&#39;, &#39;Mary&#39;]\nprint(names[2:])  #Print will start from &#39;Mosh&#39;&#39;&#39;\nprint(names[:])  #Print all&#39;\nnames[0] = &#39;Joh&#39; #Change item\nprint(names)  #output\n# 2d list\nmatrix = [\n   [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nmatrix[0][-3] = 20\nprint(matrix)</code></pre>\n<ul>\n<li>编辑类</li>\n</ul>\n<pre><code class=\"python\">numbers = [5,2,1,7]\nnumbers.insert(-2,20)\nnumbers.remove(2)\nnumbers.append(45)\nnumbers.pop() #remove the last and return it\nprint(numbers.index(5))\nnumbers.sort()\nnumbers.reverse() #get deasc order\nif 5 in numbers:\n    print(numbers.index(5))\nnumbers2 = numbers.copy()\nnumbers.append(45)\nprint(numbers)\nprint(numbers2)\n\n#去重复\nnumbers = [5,20,1,5,7,5,6,4,5]\nuniques = []\nfor i in numbers:\n    if i not in uniques:\n        uniques.append(i)\nprint(uniques)</code></pre>\n<ul>\n<li><h3 id=\"Tuple\"><a href=\"#Tuple\" class=\"headerlink\" title=\"Tuple\"></a>Tuple</h3></li>\n<li>类似于List，但不可修改</li>\n</ul>\n<pre><code class=\"python\">numbers = (5,20,1,5,7,5,6,4,5)\nnumbers[0] = 1 #TypeError: &#39;tuple&#39; object does not support item assignment</code></pre>\n<ul>\n<li><h3 id=\"Unpacking\"><a href=\"#Unpacking\" class=\"headerlink\" title=\"Unpacking\"></a>Unpacking</h3></li>\n<li>映射数组成员</li>\n</ul>\n<pre><code class=\"python\">coordinates = (1,2,3)\na = coordinates[0]\nb = coordinates[1]\nc = coordinates[2]\n\n# use Unpacking feature, unpacking the tuple/list to three variable\nx, y, z = coordinates\nprint(f&quot;{a},{b},{c} &lt;=&gt; {x}, {y}, {z}&quot;)</code></pre>\n<ul>\n<li><h3 id=\"Dictionary\"><a href=\"#Dictionary\" class=\"headerlink\" title=\"Dictionary\"></a>Dictionary</h3></li>\n</ul>\n<pre><code class=\"python\">customer = {\n    &quot;name&quot;: &quot;John&quot;,\n    &quot;age&quot;: 30,\n    &quot;is_verified&quot;: True\n}\nprint(customer[&quot;name&quot;])\n# print(customer[&quot;Name&quot;]) #KeyError,don&#39;t contain\n# print(customer[&quot;birthdate&quot;])#KeyError,don&#39;t contain\nprint(customer.get(&quot;name&quot;))\nprint(customer.get(&quot;Name&quot;,&quot;Hey&quot;)) #Print,with default value:&#39;Hey&#39;\ncustomer[&quot;name&quot;] = &quot;AA&quot;\nprint(customer.get(&quot;name&quot;))\n\n#Exercise\ninput_str = str(input(&quot;Phone:&quot;))\ndigits_map = {\n    &quot;1&quot;:&quot;One&quot;,\n    &quot;2&quot;:&quot;Two&quot;,\n    &quot;3&quot;:&quot;Three&quot;,\n    &quot;4&quot;:&quot;Four&quot;,\n}\noutput = &#39;&#39;\nfor s in input_str:\n    output += digits_map.get(s,&quot;&quot;) + &quot; &quot;\n\nprint(output)</code></pre>\n<ul>\n<li>[mac]ctrl+cmd+space&gt;&gt; to show emojis</li>\n</ul>\n"},{"title":"Python Note 4","_content":"# Python Note 4\n\n### Pypi & Pip\n+ [pypi](https://pypi.org/)\n+ use as : pip install openpyxl  to install \n\n### Use openpyxl\n\n```python\nimport openpyxl as xl\nfrom openpyxl.chart import BarChart, Reference\nwb = xl.load_workbook(\"pydemo2/transactions.xlsx\")\nsheet = wb[\"Sheet1\"]\nfor row in range(2, sheet.max_row + 1):\n    cell = sheet.cell(row, 3)\n    real_val = cell.value * 0.9\n    real_val_cell = sheet.cell(row, 4)\n    real_val_cell.value = real_val\n\nvalues = Reference(sheet, min_row=2, max_row=sheet.max_row, min_col=4, max_col=4)\nchart = BarChart()\nchart.add_data(values)\nsheet.add_chart(chart, 'e2')\nwb.save('pydemo2/transactions_n2.xlsx')\n```\n\n### Machine learning\n\n+ Self-driving Cars\n+ Robotics\n+ Language Processing\n+ Vision Processing\n+ Forecasting Stock Market Trends","source":"_posts/python_4.md","raw":"---\ntitle: Python Note 4\ncategories:\n- Python笔记\ntags: \n- Python\n- Note\n---\n# Python Note 4\n\n### Pypi & Pip\n+ [pypi](https://pypi.org/)\n+ use as : pip install openpyxl  to install \n\n### Use openpyxl\n\n```python\nimport openpyxl as xl\nfrom openpyxl.chart import BarChart, Reference\nwb = xl.load_workbook(\"pydemo2/transactions.xlsx\")\nsheet = wb[\"Sheet1\"]\nfor row in range(2, sheet.max_row + 1):\n    cell = sheet.cell(row, 3)\n    real_val = cell.value * 0.9\n    real_val_cell = sheet.cell(row, 4)\n    real_val_cell.value = real_val\n\nvalues = Reference(sheet, min_row=2, max_row=sheet.max_row, min_col=4, max_col=4)\nchart = BarChart()\nchart.add_data(values)\nsheet.add_chart(chart, 'e2')\nwb.save('pydemo2/transactions_n2.xlsx')\n```\n\n### Machine learning\n\n+ Self-driving Cars\n+ Robotics\n+ Language Processing\n+ Vision Processing\n+ Forecasting Stock Market Trends","slug":"python_4","published":1,"date":"2019-10-12T10:01:26.500Z","updated":"2019-10-12T10:01:26.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs8h001bekuwz3n4n6ty","content":"<h1 id=\"Python-Note-4\"><a href=\"#Python-Note-4\" class=\"headerlink\" title=\"Python Note 4\"></a>Python Note 4</h1><h3 id=\"Pypi-amp-Pip\"><a href=\"#Pypi-amp-Pip\" class=\"headerlink\" title=\"Pypi &amp; Pip\"></a>Pypi &amp; Pip</h3><ul>\n<li><a href=\"https://pypi.org/\">pypi</a></li>\n<li>use as : pip install openpyxl  to install </li>\n</ul>\n<h3 id=\"Use-openpyxl\"><a href=\"#Use-openpyxl\" class=\"headerlink\" title=\"Use openpyxl\"></a>Use openpyxl</h3><pre><code class=\"python\">import openpyxl as xl\nfrom openpyxl.chart import BarChart, Reference\nwb = xl.load_workbook(&quot;pydemo2/transactions.xlsx&quot;)\nsheet = wb[&quot;Sheet1&quot;]\nfor row in range(2, sheet.max_row + 1):\n    cell = sheet.cell(row, 3)\n    real_val = cell.value * 0.9\n    real_val_cell = sheet.cell(row, 4)\n    real_val_cell.value = real_val\n\nvalues = Reference(sheet, min_row=2, max_row=sheet.max_row, min_col=4, max_col=4)\nchart = BarChart()\nchart.add_data(values)\nsheet.add_chart(chart, &#39;e2&#39;)\nwb.save(&#39;pydemo2/transactions_n2.xlsx&#39;)</code></pre>\n<h3 id=\"Machine-learning\"><a href=\"#Machine-learning\" class=\"headerlink\" title=\"Machine learning\"></a>Machine learning</h3><ul>\n<li>Self-driving Cars</li>\n<li>Robotics</li>\n<li>Language Processing</li>\n<li>Vision Processing</li>\n<li>Forecasting Stock Market Trends</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Python-Note-4\"><a href=\"#Python-Note-4\" class=\"headerlink\" title=\"Python Note 4\"></a>Python Note 4</h1><h3 id=\"Pypi-amp-Pip\"><a href=\"#Pypi-amp-Pip\" class=\"headerlink\" title=\"Pypi &amp; Pip\"></a>Pypi &amp; Pip</h3><ul>\n<li><a href=\"https://pypi.org/\">pypi</a></li>\n<li>use as : pip install openpyxl  to install </li>\n</ul>\n<h3 id=\"Use-openpyxl\"><a href=\"#Use-openpyxl\" class=\"headerlink\" title=\"Use openpyxl\"></a>Use openpyxl</h3><pre><code class=\"python\">import openpyxl as xl\nfrom openpyxl.chart import BarChart, Reference\nwb = xl.load_workbook(&quot;pydemo2/transactions.xlsx&quot;)\nsheet = wb[&quot;Sheet1&quot;]\nfor row in range(2, sheet.max_row + 1):\n    cell = sheet.cell(row, 3)\n    real_val = cell.value * 0.9\n    real_val_cell = sheet.cell(row, 4)\n    real_val_cell.value = real_val\n\nvalues = Reference(sheet, min_row=2, max_row=sheet.max_row, min_col=4, max_col=4)\nchart = BarChart()\nchart.add_data(values)\nsheet.add_chart(chart, &#39;e2&#39;)\nwb.save(&#39;pydemo2/transactions_n2.xlsx&#39;)</code></pre>\n<h3 id=\"Machine-learning\"><a href=\"#Machine-learning\" class=\"headerlink\" title=\"Machine learning\"></a>Machine learning</h3><ul>\n<li>Self-driving Cars</li>\n<li>Robotics</li>\n<li>Language Processing</li>\n<li>Vision Processing</li>\n<li>Forecasting Stock Market Trends</li>\n</ul>\n"},{"title":"常用单词学习","_content":"\n## colon\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30Anbf371a598eda69b4ccf46d35c7add5fc.mp3?t=colon\">\n      </audio>\n      \n+ 英 /ˈkəʊlən; ˈkəʊlɒn/  美 /ˈkoʊlən/  全球(美国)\nn. [解剖] 结肠；**冒号**（用于引语、说明、例证等之前）；科郎（哥斯达黎加货币单位）\n\n## quote\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30AQ4bbc942967962574bc81e020b01e1ba5.mp3?t=quote\">\n      </audio>\n\t  \n+ 英 /kwəʊt/  美 /kwoʊt/  全球(加拿大)  \nvt. 引述；引用；举例说明；报价；以……为证；为（企业的股份）上市\nvi. 引述；引用\nn. 引文；语录；开价；（股票）牌价；**引号**；（建筑或维修的）报价单\nn. (Quote) （美、俄、澳、马、荷）克奥特（人名）\n\n## apostrophe\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30SK8385e1c12f88cd501bf9c8ecfdef0800.mp3?t=apostrophe\">\n      </audio>\n\t  \n+ 英 /əˈpɒstrəfi/  美 /əˈpɑːstrəfi/  全球(英国)  \nn. 省略符号，撇号；呼语，顿呼\n\n## curly braces\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd309Bd6d78ac827a8d1b86b3bf601e93b4aaf.mp3?t=curly\">\n      </audio>\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30VP32b434afefd5946ee0ffb398b9d27f54.mp3?t=braces\">\n      </audio>\n\t  \n花括号\n\n## forward slash\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30eR83f990e90451dafef5a412ccdb12bd5b.mp3?t=slash\">\n      </audio>\n\t  \n斜杠（分隔号“/”）\n\n## back slash\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30eR83f990e90451dafef5a412ccdb12bd5b.mp3?t=slash\">\n      </audio>\n\t  \n正斜杠（分隔“\\”）\n\n## modulus\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30Ac9556257c524e8be83626de5de312dc40.mp3?t=modulus\">\n      </audio>\n\t  \n+ /'mɑdʒə,lai/ \nn. 模数；模（modulis 是复数）\n\n## asterisks\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30hw37be14616938459174674dfbc8e99d58.mp3?t=asterisk\">\n      </audio>\n\n+ 英 /ˈæstərɪsk/  美 /ˈæstərɪsk/  全球(美国)  \nn. 星号；星号键\nvt. 注上星号；用星号标出\n\n## exponentiation\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30Bt28530849f681345db3701ff6ce7a6bc0.mp3?t=exponentiation\">\n      </audio>\n\t  \n+ 英 /,ekspənenʃɪ'eɪʃ(ə)n/  美 /,ɛkspo,nɛnʃɪ'eʃən/  全球(美国)  \nn. [数] 取幂，求幂；乘方\n\n## multiplication\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30PS0d4e8cd35271884d6f6a01965ff6139c.mp3?t=multiplication\">\n      </audio>\n\t  \n+ 英 /ˌmʌltɪplɪˈkeɪʃn/  美 /ˌmʌltɪplɪˈkeɪʃn/  全球(美国)  \nn. [数] 乘法；增加\n\n## parenthesis\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30z4458c07e8c85323c67609468b15e1bc7b.mp3?t=parenthesis\">\n      </audio>\n\t  \n+ 英 /pəˈrenθəsɪs/  美 /pəˈrenθəsɪs/  全球(美国)  \nn. 插入语,插入成分\nn. **圆括号**\nn. 间歇，插曲\n\n## mammal\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30UHa4f52b3cda24670558fd591e13eb700f.mp3?t=mammal\">\n      </audio>\n\t  \n+ 英 /ˈmæml/  美 /ˈmæml/  全球(美国)  \nn. [脊椎] 哺乳动物\n\n## loaves\n+ I'd love two loaves of breads fresh from ovan.\nn. loaf 多数，多条面包\n\n## wheat\nn. 小麦\n\n## cereal\nn.谷物\n\n## muffins\nn.松饼\n\n## oven\nn.烤箱\n\n## fresh from\n+  fresh from oven\n刚出，新鲜出\n\n## bread rolls\nn. 圆面包\n\n## $20.50\n20 dollars and 50 cents\n\n## a slice of\n切一片\n\n## heavy drinker\nn. 大酒量的人\n\n## lightweight\nn.酒量不好的人\n\n## blow\nv. 吹\n\n## steam\nn. 蒸汽\n\n## blow off some steam\n舒缓压力\n\n## brew\n+ I brew some coffee. \nn.酿的啤酒/咖啡 v.酿\n\n## beer\nn.啤酒\n\n## on the rocks\n+ This whiskey on the rocks is fantastic.\nn.破产，酒加冰\n\n## neat\n+ They like to drink their whiskey neet.\nn. 原汁原味\n\n\n## hard stuff\nn.烈酒， 难搞的东西\n\n## stiff \n+ I could handle a stiff drink, but I'd still rather order sweeter cocktails.\nadj.烈性的，严厉的，呆板的\n\n## hangover\nbe hangover /  have a hangover\nI don't like being hangover the next day.\nn.宿醉， 遗物\n\n## hammered\n+ I got hammered last night.\n+ We can get you home if you hammered.\nadj.醉酒的\n\n## nagging\nn.唠叨、\n\n## drink someone under the table\nn.把某人喝倒\n\n## soda\nn.苏打\n\n## buzzed\nadj. 头有点晕\n\n## watered down\n渗水\n\n## shots\n+ take the shot. 一口喝完\n+ we have a lots of shots.\nn. 喝酒的小杯子\n\n## chug\nAre you chugging it?\nn. beer的杯子\n\n## tequila\nn. 龙舌兰酒\n\n## bartender\nn.调酒师\n\n## beer gut\nn.啤酒肚\n\n## beer belly\nn.啤酒肚\n\n## go for a jog\nn.运动，慢跑\n\n## carbonated drink/beverage\nn. 碳酸饮料\n\n## snack\nn. 小吃\n\n## cuisine\nn.烹饪","source":"_posts/常用单词学习.md","raw":"---\ntitle: 常用单词学习\ncategories:\n- 英语学习\ntags: \n- English\n- Note\n---\n\n## colon\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30Anbf371a598eda69b4ccf46d35c7add5fc.mp3?t=colon\">\n      </audio>\n      \n+ 英 /ˈkəʊlən; ˈkəʊlɒn/  美 /ˈkoʊlən/  全球(美国)\nn. [解剖] 结肠；**冒号**（用于引语、说明、例证等之前）；科郎（哥斯达黎加货币单位）\n\n## quote\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30AQ4bbc942967962574bc81e020b01e1ba5.mp3?t=quote\">\n      </audio>\n\t  \n+ 英 /kwəʊt/  美 /kwoʊt/  全球(加拿大)  \nvt. 引述；引用；举例说明；报价；以……为证；为（企业的股份）上市\nvi. 引述；引用\nn. 引文；语录；开价；（股票）牌价；**引号**；（建筑或维修的）报价单\nn. (Quote) （美、俄、澳、马、荷）克奥特（人名）\n\n## apostrophe\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30SK8385e1c12f88cd501bf9c8ecfdef0800.mp3?t=apostrophe\">\n      </audio>\n\t  \n+ 英 /əˈpɒstrəfi/  美 /əˈpɑːstrəfi/  全球(英国)  \nn. 省略符号，撇号；呼语，顿呼\n\n## curly braces\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd309Bd6d78ac827a8d1b86b3bf601e93b4aaf.mp3?t=curly\">\n      </audio>\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30VP32b434afefd5946ee0ffb398b9d27f54.mp3?t=braces\">\n      </audio>\n\t  \n花括号\n\n## forward slash\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30eR83f990e90451dafef5a412ccdb12bd5b.mp3?t=slash\">\n      </audio>\n\t  \n斜杠（分隔号“/”）\n\n## back slash\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30eR83f990e90451dafef5a412ccdb12bd5b.mp3?t=slash\">\n      </audio>\n\t  \n正斜杠（分隔“\\”）\n\n## modulus\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30Ac9556257c524e8be83626de5de312dc40.mp3?t=modulus\">\n      </audio>\n\t  \n+ /'mɑdʒə,lai/ \nn. 模数；模（modulis 是复数）\n\n## asterisks\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30hw37be14616938459174674dfbc8e99d58.mp3?t=asterisk\">\n      </audio>\n\n+ 英 /ˈæstərɪsk/  美 /ˈæstərɪsk/  全球(美国)  \nn. 星号；星号键\nvt. 注上星号；用星号标出\n\n## exponentiation\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30Bt28530849f681345db3701ff6ce7a6bc0.mp3?t=exponentiation\">\n      </audio>\n\t  \n+ 英 /,ekspənenʃɪ'eɪʃ(ə)n/  美 /,ɛkspo,nɛnʃɪ'eʃən/  全球(美国)  \nn. [数] 取幂，求幂；乘方\n\n## multiplication\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30PS0d4e8cd35271884d6f6a01965ff6139c.mp3?t=multiplication\">\n      </audio>\n\t  \n+ 英 /ˌmʌltɪplɪˈkeɪʃn/  美 /ˌmʌltɪplɪˈkeɪʃn/  全球(美国)  \nn. [数] 乘法；增加\n\n## parenthesis\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30z4458c07e8c85323c67609468b15e1bc7b.mp3?t=parenthesis\">\n      </audio>\n\t  \n+ 英 /pəˈrenθəsɪs/  美 /pəˈrenθəsɪs/  全球(美国)  \nn. 插入语,插入成分\nn. **圆括号**\nn. 间歇，插曲\n\n## mammal\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30UHa4f52b3cda24670558fd591e13eb700f.mp3?t=mammal\">\n      </audio>\n\t  \n+ 英 /ˈmæml/  美 /ˈmæml/  全球(美国)  \nn. [脊椎] 哺乳动物\n\n## loaves\n+ I'd love two loaves of breads fresh from ovan.\nn. loaf 多数，多条面包\n\n## wheat\nn. 小麦\n\n## cereal\nn.谷物\n\n## muffins\nn.松饼\n\n## oven\nn.烤箱\n\n## fresh from\n+  fresh from oven\n刚出，新鲜出\n\n## bread rolls\nn. 圆面包\n\n## $20.50\n20 dollars and 50 cents\n\n## a slice of\n切一片\n\n## heavy drinker\nn. 大酒量的人\n\n## lightweight\nn.酒量不好的人\n\n## blow\nv. 吹\n\n## steam\nn. 蒸汽\n\n## blow off some steam\n舒缓压力\n\n## brew\n+ I brew some coffee. \nn.酿的啤酒/咖啡 v.酿\n\n## beer\nn.啤酒\n\n## on the rocks\n+ This whiskey on the rocks is fantastic.\nn.破产，酒加冰\n\n## neat\n+ They like to drink their whiskey neet.\nn. 原汁原味\n\n\n## hard stuff\nn.烈酒， 难搞的东西\n\n## stiff \n+ I could handle a stiff drink, but I'd still rather order sweeter cocktails.\nadj.烈性的，严厉的，呆板的\n\n## hangover\nbe hangover /  have a hangover\nI don't like being hangover the next day.\nn.宿醉， 遗物\n\n## hammered\n+ I got hammered last night.\n+ We can get you home if you hammered.\nadj.醉酒的\n\n## nagging\nn.唠叨、\n\n## drink someone under the table\nn.把某人喝倒\n\n## soda\nn.苏打\n\n## buzzed\nadj. 头有点晕\n\n## watered down\n渗水\n\n## shots\n+ take the shot. 一口喝完\n+ we have a lots of shots.\nn. 喝酒的小杯子\n\n## chug\nAre you chugging it?\nn. beer的杯子\n\n## tequila\nn. 龙舌兰酒\n\n## bartender\nn.调酒师\n\n## beer gut\nn.啤酒肚\n\n## beer belly\nn.啤酒肚\n\n## go for a jog\nn.运动，慢跑\n\n## carbonated drink/beverage\nn. 碳酸饮料\n\n## snack\nn. 小吃\n\n## cuisine\nn.烹饪","slug":"常用单词学习","published":1,"date":"2019-11-25T03:25:48.245Z","updated":"2019-11-25T03:25:48.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs8i001dekuw1jyxelzm","content":"<h2 id=\"colon\"><a href=\"#colon\" class=\"headerlink\" title=\"colon\"></a>colon</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30Anbf371a598eda69b4ccf46d35c7add5fc.mp3?t=colon\">\n      </audio>\n\n<ul>\n<li>英 /ˈkəʊlən; ˈkəʊlɒn/  美 /ˈkoʊlən/  全球(美国)<br>n. [解剖] 结肠；<strong>冒号</strong>（用于引语、说明、例证等之前）；科郎（哥斯达黎加货币单位）</li>\n</ul>\n<h2 id=\"quote\"><a href=\"#quote\" class=\"headerlink\" title=\"quote\"></a>quote</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30AQ4bbc942967962574bc81e020b01e1ba5.mp3?t=quote\">\n      </audio>\n\n<ul>\n<li>英 /kwəʊt/  美 /kwoʊt/  全球(加拿大)<br>vt. 引述；引用；举例说明；报价；以……为证；为（企业的股份）上市<br>vi. 引述；引用<br>n. 引文；语录；开价；（股票）牌价；<strong>引号</strong>；（建筑或维修的）报价单<br>n. (Quote) （美、俄、澳、马、荷）克奥特（人名）</li>\n</ul>\n<h2 id=\"apostrophe\"><a href=\"#apostrophe\" class=\"headerlink\" title=\"apostrophe\"></a>apostrophe</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30SK8385e1c12f88cd501bf9c8ecfdef0800.mp3?t=apostrophe\">\n      </audio>\n\n<ul>\n<li>英 /əˈpɒstrəfi/  美 /əˈpɑːstrəfi/  全球(英国)<br>n. 省略符号，撇号；呼语，顿呼</li>\n</ul>\n<h2 id=\"curly-braces\"><a href=\"#curly-braces\" class=\"headerlink\" title=\"curly braces\"></a>curly braces</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd309Bd6d78ac827a8d1b86b3bf601e93b4aaf.mp3?t=curly\">\n      </audio>\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30VP32b434afefd5946ee0ffb398b9d27f54.mp3?t=braces\">\n      </audio>\n\n<p>花括号</p>\n<h2 id=\"forward-slash\"><a href=\"#forward-slash\" class=\"headerlink\" title=\"forward slash\"></a>forward slash</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30eR83f990e90451dafef5a412ccdb12bd5b.mp3?t=slash\">\n      </audio>\n\n<p>斜杠（分隔号“/”）</p>\n<h2 id=\"back-slash\"><a href=\"#back-slash\" class=\"headerlink\" title=\"back slash\"></a>back slash</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30eR83f990e90451dafef5a412ccdb12bd5b.mp3?t=slash\">\n      </audio>\n\n<p>正斜杠（分隔“\\”）</p>\n<h2 id=\"modulus\"><a href=\"#modulus\" class=\"headerlink\" title=\"modulus\"></a>modulus</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30Ac9556257c524e8be83626de5de312dc40.mp3?t=modulus\">\n      </audio>\n\n<ul>\n<li>/‘mɑdʒə,lai/<br>n. 模数；模（modulis 是复数）</li>\n</ul>\n<h2 id=\"asterisks\"><a href=\"#asterisks\" class=\"headerlink\" title=\"asterisks\"></a>asterisks</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30hw37be14616938459174674dfbc8e99d58.mp3?t=asterisk\">\n      </audio>\n\n<ul>\n<li>英 /ˈæstərɪsk/  美 /ˈæstərɪsk/  全球(美国)<br>n. 星号；星号键<br>vt. 注上星号；用星号标出</li>\n</ul>\n<h2 id=\"exponentiation\"><a href=\"#exponentiation\" class=\"headerlink\" title=\"exponentiation\"></a>exponentiation</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30Bt28530849f681345db3701ff6ce7a6bc0.mp3?t=exponentiation\">\n      </audio>\n\n<ul>\n<li>英 /,ekspənenʃɪ’eɪʃ(ə)n/  美 /,ɛkspo,nɛnʃɪ’eʃən/  全球(美国)<br>n. [数] 取幂，求幂；乘方</li>\n</ul>\n<h2 id=\"multiplication\"><a href=\"#multiplication\" class=\"headerlink\" title=\"multiplication\"></a>multiplication</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30PS0d4e8cd35271884d6f6a01965ff6139c.mp3?t=multiplication\">\n      </audio>\n\n<ul>\n<li>英 /ˌmʌltɪplɪˈkeɪʃn/  美 /ˌmʌltɪplɪˈkeɪʃn/  全球(美国)<br>n. [数] 乘法；增加</li>\n</ul>\n<h2 id=\"parenthesis\"><a href=\"#parenthesis\" class=\"headerlink\" title=\"parenthesis\"></a>parenthesis</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30z4458c07e8c85323c67609468b15e1bc7b.mp3?t=parenthesis\">\n      </audio>\n\n<ul>\n<li>英 /pəˈrenθəsɪs/  美 /pəˈrenθəsɪs/  全球(美国)<br>n. 插入语,插入成分<br>n. <strong>圆括号</strong><br>n. 间歇，插曲</li>\n</ul>\n<h2 id=\"mammal\"><a href=\"#mammal\" class=\"headerlink\" title=\"mammal\"></a>mammal</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30UHa4f52b3cda24670558fd591e13eb700f.mp3?t=mammal\">\n      </audio>\n\n<ul>\n<li>英 /ˈmæml/  美 /ˈmæml/  全球(美国)<br>n. [脊椎] 哺乳动物</li>\n</ul>\n<h2 id=\"loaves\"><a href=\"#loaves\" class=\"headerlink\" title=\"loaves\"></a>loaves</h2><ul>\n<li>I’d love two loaves of breads fresh from ovan.<br>n. loaf 多数，多条面包</li>\n</ul>\n<h2 id=\"wheat\"><a href=\"#wheat\" class=\"headerlink\" title=\"wheat\"></a>wheat</h2><p>n. 小麦</p>\n<h2 id=\"cereal\"><a href=\"#cereal\" class=\"headerlink\" title=\"cereal\"></a>cereal</h2><p>n.谷物</p>\n<h2 id=\"muffins\"><a href=\"#muffins\" class=\"headerlink\" title=\"muffins\"></a>muffins</h2><p>n.松饼</p>\n<h2 id=\"oven\"><a href=\"#oven\" class=\"headerlink\" title=\"oven\"></a>oven</h2><p>n.烤箱</p>\n<h2 id=\"fresh-from\"><a href=\"#fresh-from\" class=\"headerlink\" title=\"fresh from\"></a>fresh from</h2><ul>\n<li>fresh from oven<br>刚出，新鲜出</li>\n</ul>\n<h2 id=\"bread-rolls\"><a href=\"#bread-rolls\" class=\"headerlink\" title=\"bread rolls\"></a>bread rolls</h2><p>n. 圆面包</p>\n<h2 id=\"20-50\"><a href=\"#20-50\" class=\"headerlink\" title=\"$20.50\"></a>$20.50</h2><p>20 dollars and 50 cents</p>\n<h2 id=\"a-slice-of\"><a href=\"#a-slice-of\" class=\"headerlink\" title=\"a slice of\"></a>a slice of</h2><p>切一片</p>\n<h2 id=\"heavy-drinker\"><a href=\"#heavy-drinker\" class=\"headerlink\" title=\"heavy drinker\"></a>heavy drinker</h2><p>n. 大酒量的人</p>\n<h2 id=\"lightweight\"><a href=\"#lightweight\" class=\"headerlink\" title=\"lightweight\"></a>lightweight</h2><p>n.酒量不好的人</p>\n<h2 id=\"blow\"><a href=\"#blow\" class=\"headerlink\" title=\"blow\"></a>blow</h2><p>v. 吹</p>\n<h2 id=\"steam\"><a href=\"#steam\" class=\"headerlink\" title=\"steam\"></a>steam</h2><p>n. 蒸汽</p>\n<h2 id=\"blow-off-some-steam\"><a href=\"#blow-off-some-steam\" class=\"headerlink\" title=\"blow off some steam\"></a>blow off some steam</h2><p>舒缓压力</p>\n<h2 id=\"brew\"><a href=\"#brew\" class=\"headerlink\" title=\"brew\"></a>brew</h2><ul>\n<li>I brew some coffee.<br>n.酿的啤酒/咖啡 v.酿</li>\n</ul>\n<h2 id=\"beer\"><a href=\"#beer\" class=\"headerlink\" title=\"beer\"></a>beer</h2><p>n.啤酒</p>\n<h2 id=\"on-the-rocks\"><a href=\"#on-the-rocks\" class=\"headerlink\" title=\"on the rocks\"></a>on the rocks</h2><ul>\n<li>This whiskey on the rocks is fantastic.<br>n.破产，酒加冰</li>\n</ul>\n<h2 id=\"neat\"><a href=\"#neat\" class=\"headerlink\" title=\"neat\"></a>neat</h2><ul>\n<li>They like to drink their whiskey neet.<br>n. 原汁原味</li>\n</ul>\n<h2 id=\"hard-stuff\"><a href=\"#hard-stuff\" class=\"headerlink\" title=\"hard stuff\"></a>hard stuff</h2><p>n.烈酒， 难搞的东西</p>\n<h2 id=\"stiff\"><a href=\"#stiff\" class=\"headerlink\" title=\"stiff\"></a>stiff</h2><ul>\n<li>I could handle a stiff drink, but I’d still rather order sweeter cocktails.<br>adj.烈性的，严厉的，呆板的</li>\n</ul>\n<h2 id=\"hangover\"><a href=\"#hangover\" class=\"headerlink\" title=\"hangover\"></a>hangover</h2><p>be hangover /  have a hangover<br>I don’t like being hangover the next day.<br>n.宿醉， 遗物</p>\n<h2 id=\"hammered\"><a href=\"#hammered\" class=\"headerlink\" title=\"hammered\"></a>hammered</h2><ul>\n<li>I got hammered last night.</li>\n<li>We can get you home if you hammered.<br>adj.醉酒的</li>\n</ul>\n<h2 id=\"nagging\"><a href=\"#nagging\" class=\"headerlink\" title=\"nagging\"></a>nagging</h2><p>n.唠叨、</p>\n<h2 id=\"drink-someone-under-the-table\"><a href=\"#drink-someone-under-the-table\" class=\"headerlink\" title=\"drink someone under the table\"></a>drink someone under the table</h2><p>n.把某人喝倒</p>\n<h2 id=\"soda\"><a href=\"#soda\" class=\"headerlink\" title=\"soda\"></a>soda</h2><p>n.苏打</p>\n<h2 id=\"buzzed\"><a href=\"#buzzed\" class=\"headerlink\" title=\"buzzed\"></a>buzzed</h2><p>adj. 头有点晕</p>\n<h2 id=\"watered-down\"><a href=\"#watered-down\" class=\"headerlink\" title=\"watered down\"></a>watered down</h2><p>渗水</p>\n<h2 id=\"shots\"><a href=\"#shots\" class=\"headerlink\" title=\"shots\"></a>shots</h2><ul>\n<li>take the shot. 一口喝完</li>\n<li>we have a lots of shots.<br>n. 喝酒的小杯子</li>\n</ul>\n<h2 id=\"chug\"><a href=\"#chug\" class=\"headerlink\" title=\"chug\"></a>chug</h2><p>Are you chugging it?<br>n. beer的杯子</p>\n<h2 id=\"tequila\"><a href=\"#tequila\" class=\"headerlink\" title=\"tequila\"></a>tequila</h2><p>n. 龙舌兰酒</p>\n<h2 id=\"bartender\"><a href=\"#bartender\" class=\"headerlink\" title=\"bartender\"></a>bartender</h2><p>n.调酒师</p>\n<h2 id=\"beer-gut\"><a href=\"#beer-gut\" class=\"headerlink\" title=\"beer gut\"></a>beer gut</h2><p>n.啤酒肚</p>\n<h2 id=\"beer-belly\"><a href=\"#beer-belly\" class=\"headerlink\" title=\"beer belly\"></a>beer belly</h2><p>n.啤酒肚</p>\n<h2 id=\"go-for-a-jog\"><a href=\"#go-for-a-jog\" class=\"headerlink\" title=\"go for a jog\"></a>go for a jog</h2><p>n.运动，慢跑</p>\n<h2 id=\"carbonated-drink-beverage\"><a href=\"#carbonated-drink-beverage\" class=\"headerlink\" title=\"carbonated drink/beverage\"></a>carbonated drink/beverage</h2><p>n. 碳酸饮料</p>\n<h2 id=\"snack\"><a href=\"#snack\" class=\"headerlink\" title=\"snack\"></a>snack</h2><p>n. 小吃</p>\n<h2 id=\"cuisine\"><a href=\"#cuisine\" class=\"headerlink\" title=\"cuisine\"></a>cuisine</h2><p>n.烹饪</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"colon\"><a href=\"#colon\" class=\"headerlink\" title=\"colon\"></a>colon</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30Anbf371a598eda69b4ccf46d35c7add5fc.mp3?t=colon\">\n      </audio>\n\n<ul>\n<li>英 /ˈkəʊlən; ˈkəʊlɒn/  美 /ˈkoʊlən/  全球(美国)<br>n. [解剖] 结肠；<strong>冒号</strong>（用于引语、说明、例证等之前）；科郎（哥斯达黎加货币单位）</li>\n</ul>\n<h2 id=\"quote\"><a href=\"#quote\" class=\"headerlink\" title=\"quote\"></a>quote</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30AQ4bbc942967962574bc81e020b01e1ba5.mp3?t=quote\">\n      </audio>\n\n<ul>\n<li>英 /kwəʊt/  美 /kwoʊt/  全球(加拿大)<br>vt. 引述；引用；举例说明；报价；以……为证；为（企业的股份）上市<br>vi. 引述；引用<br>n. 引文；语录；开价；（股票）牌价；<strong>引号</strong>；（建筑或维修的）报价单<br>n. (Quote) （美、俄、澳、马、荷）克奥特（人名）</li>\n</ul>\n<h2 id=\"apostrophe\"><a href=\"#apostrophe\" class=\"headerlink\" title=\"apostrophe\"></a>apostrophe</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30SK8385e1c12f88cd501bf9c8ecfdef0800.mp3?t=apostrophe\">\n      </audio>\n\n<ul>\n<li>英 /əˈpɒstrəfi/  美 /əˈpɑːstrəfi/  全球(英国)<br>n. 省略符号，撇号；呼语，顿呼</li>\n</ul>\n<h2 id=\"curly-braces\"><a href=\"#curly-braces\" class=\"headerlink\" title=\"curly braces\"></a>curly braces</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd309Bd6d78ac827a8d1b86b3bf601e93b4aaf.mp3?t=curly\">\n      </audio>\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30VP32b434afefd5946ee0ffb398b9d27f54.mp3?t=braces\">\n      </audio>\n\n<p>花括号</p>\n<h2 id=\"forward-slash\"><a href=\"#forward-slash\" class=\"headerlink\" title=\"forward slash\"></a>forward slash</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30eR83f990e90451dafef5a412ccdb12bd5b.mp3?t=slash\">\n      </audio>\n\n<p>斜杠（分隔号“/”）</p>\n<h2 id=\"back-slash\"><a href=\"#back-slash\" class=\"headerlink\" title=\"back slash\"></a>back slash</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30eR83f990e90451dafef5a412ccdb12bd5b.mp3?t=slash\">\n      </audio>\n\n<p>正斜杠（分隔“\\”）</p>\n<h2 id=\"modulus\"><a href=\"#modulus\" class=\"headerlink\" title=\"modulus\"></a>modulus</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30Ac9556257c524e8be83626de5de312dc40.mp3?t=modulus\">\n      </audio>\n\n<ul>\n<li>/‘mɑdʒə,lai/<br>n. 模数；模（modulis 是复数）</li>\n</ul>\n<h2 id=\"asterisks\"><a href=\"#asterisks\" class=\"headerlink\" title=\"asterisks\"></a>asterisks</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30hw37be14616938459174674dfbc8e99d58.mp3?t=asterisk\">\n      </audio>\n\n<ul>\n<li>英 /ˈæstərɪsk/  美 /ˈæstərɪsk/  全球(美国)<br>n. 星号；星号键<br>vt. 注上星号；用星号标出</li>\n</ul>\n<h2 id=\"exponentiation\"><a href=\"#exponentiation\" class=\"headerlink\" title=\"exponentiation\"></a>exponentiation</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30Bt28530849f681345db3701ff6ce7a6bc0.mp3?t=exponentiation\">\n      </audio>\n\n<ul>\n<li>英 /,ekspənenʃɪ’eɪʃ(ə)n/  美 /,ɛkspo,nɛnʃɪ’eʃən/  全球(美国)<br>n. [数] 取幂，求幂；乘方</li>\n</ul>\n<h2 id=\"multiplication\"><a href=\"#multiplication\" class=\"headerlink\" title=\"multiplication\"></a>multiplication</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30PS0d4e8cd35271884d6f6a01965ff6139c.mp3?t=multiplication\">\n      </audio>\n\n<ul>\n<li>英 /ˌmʌltɪplɪˈkeɪʃn/  美 /ˌmʌltɪplɪˈkeɪʃn/  全球(美国)<br>n. [数] 乘法；增加</li>\n</ul>\n<h2 id=\"parenthesis\"><a href=\"#parenthesis\" class=\"headerlink\" title=\"parenthesis\"></a>parenthesis</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30z4458c07e8c85323c67609468b15e1bc7b.mp3?t=parenthesis\">\n      </audio>\n\n<ul>\n<li>英 /pəˈrenθəsɪs/  美 /pəˈrenθəsɪs/  全球(美国)<br>n. 插入语,插入成分<br>n. <strong>圆括号</strong><br>n. 间歇，插曲</li>\n</ul>\n<h2 id=\"mammal\"><a href=\"#mammal\" class=\"headerlink\" title=\"mammal\"></a>mammal</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30UHa4f52b3cda24670558fd591e13eb700f.mp3?t=mammal\">\n      </audio>\n\n<ul>\n<li>英 /ˈmæml/  美 /ˈmæml/  全球(美国)<br>n. [脊椎] 哺乳动物</li>\n</ul>\n<h2 id=\"loaves\"><a href=\"#loaves\" class=\"headerlink\" title=\"loaves\"></a>loaves</h2><ul>\n<li>I’d love two loaves of breads fresh from ovan.<br>n. loaf 多数，多条面包</li>\n</ul>\n<h2 id=\"wheat\"><a href=\"#wheat\" class=\"headerlink\" title=\"wheat\"></a>wheat</h2><p>n. 小麦</p>\n<h2 id=\"cereal\"><a href=\"#cereal\" class=\"headerlink\" title=\"cereal\"></a>cereal</h2><p>n.谷物</p>\n<h2 id=\"muffins\"><a href=\"#muffins\" class=\"headerlink\" title=\"muffins\"></a>muffins</h2><p>n.松饼</p>\n<h2 id=\"oven\"><a href=\"#oven\" class=\"headerlink\" title=\"oven\"></a>oven</h2><p>n.烤箱</p>\n<h2 id=\"fresh-from\"><a href=\"#fresh-from\" class=\"headerlink\" title=\"fresh from\"></a>fresh from</h2><ul>\n<li>fresh from oven<br>刚出，新鲜出</li>\n</ul>\n<h2 id=\"bread-rolls\"><a href=\"#bread-rolls\" class=\"headerlink\" title=\"bread rolls\"></a>bread rolls</h2><p>n. 圆面包</p>\n<h2 id=\"20-50\"><a href=\"#20-50\" class=\"headerlink\" title=\"$20.50\"></a>$20.50</h2><p>20 dollars and 50 cents</p>\n<h2 id=\"a-slice-of\"><a href=\"#a-slice-of\" class=\"headerlink\" title=\"a slice of\"></a>a slice of</h2><p>切一片</p>\n<h2 id=\"heavy-drinker\"><a href=\"#heavy-drinker\" class=\"headerlink\" title=\"heavy drinker\"></a>heavy drinker</h2><p>n. 大酒量的人</p>\n<h2 id=\"lightweight\"><a href=\"#lightweight\" class=\"headerlink\" title=\"lightweight\"></a>lightweight</h2><p>n.酒量不好的人</p>\n<h2 id=\"blow\"><a href=\"#blow\" class=\"headerlink\" title=\"blow\"></a>blow</h2><p>v. 吹</p>\n<h2 id=\"steam\"><a href=\"#steam\" class=\"headerlink\" title=\"steam\"></a>steam</h2><p>n. 蒸汽</p>\n<h2 id=\"blow-off-some-steam\"><a href=\"#blow-off-some-steam\" class=\"headerlink\" title=\"blow off some steam\"></a>blow off some steam</h2><p>舒缓压力</p>\n<h2 id=\"brew\"><a href=\"#brew\" class=\"headerlink\" title=\"brew\"></a>brew</h2><ul>\n<li>I brew some coffee.<br>n.酿的啤酒/咖啡 v.酿</li>\n</ul>\n<h2 id=\"beer\"><a href=\"#beer\" class=\"headerlink\" title=\"beer\"></a>beer</h2><p>n.啤酒</p>\n<h2 id=\"on-the-rocks\"><a href=\"#on-the-rocks\" class=\"headerlink\" title=\"on the rocks\"></a>on the rocks</h2><ul>\n<li>This whiskey on the rocks is fantastic.<br>n.破产，酒加冰</li>\n</ul>\n<h2 id=\"neat\"><a href=\"#neat\" class=\"headerlink\" title=\"neat\"></a>neat</h2><ul>\n<li>They like to drink their whiskey neet.<br>n. 原汁原味</li>\n</ul>\n<h2 id=\"hard-stuff\"><a href=\"#hard-stuff\" class=\"headerlink\" title=\"hard stuff\"></a>hard stuff</h2><p>n.烈酒， 难搞的东西</p>\n<h2 id=\"stiff\"><a href=\"#stiff\" class=\"headerlink\" title=\"stiff\"></a>stiff</h2><ul>\n<li>I could handle a stiff drink, but I’d still rather order sweeter cocktails.<br>adj.烈性的，严厉的，呆板的</li>\n</ul>\n<h2 id=\"hangover\"><a href=\"#hangover\" class=\"headerlink\" title=\"hangover\"></a>hangover</h2><p>be hangover /  have a hangover<br>I don’t like being hangover the next day.<br>n.宿醉， 遗物</p>\n<h2 id=\"hammered\"><a href=\"#hammered\" class=\"headerlink\" title=\"hammered\"></a>hammered</h2><ul>\n<li>I got hammered last night.</li>\n<li>We can get you home if you hammered.<br>adj.醉酒的</li>\n</ul>\n<h2 id=\"nagging\"><a href=\"#nagging\" class=\"headerlink\" title=\"nagging\"></a>nagging</h2><p>n.唠叨、</p>\n<h2 id=\"drink-someone-under-the-table\"><a href=\"#drink-someone-under-the-table\" class=\"headerlink\" title=\"drink someone under the table\"></a>drink someone under the table</h2><p>n.把某人喝倒</p>\n<h2 id=\"soda\"><a href=\"#soda\" class=\"headerlink\" title=\"soda\"></a>soda</h2><p>n.苏打</p>\n<h2 id=\"buzzed\"><a href=\"#buzzed\" class=\"headerlink\" title=\"buzzed\"></a>buzzed</h2><p>adj. 头有点晕</p>\n<h2 id=\"watered-down\"><a href=\"#watered-down\" class=\"headerlink\" title=\"watered down\"></a>watered down</h2><p>渗水</p>\n<h2 id=\"shots\"><a href=\"#shots\" class=\"headerlink\" title=\"shots\"></a>shots</h2><ul>\n<li>take the shot. 一口喝完</li>\n<li>we have a lots of shots.<br>n. 喝酒的小杯子</li>\n</ul>\n<h2 id=\"chug\"><a href=\"#chug\" class=\"headerlink\" title=\"chug\"></a>chug</h2><p>Are you chugging it?<br>n. beer的杯子</p>\n<h2 id=\"tequila\"><a href=\"#tequila\" class=\"headerlink\" title=\"tequila\"></a>tequila</h2><p>n. 龙舌兰酒</p>\n<h2 id=\"bartender\"><a href=\"#bartender\" class=\"headerlink\" title=\"bartender\"></a>bartender</h2><p>n.调酒师</p>\n<h2 id=\"beer-gut\"><a href=\"#beer-gut\" class=\"headerlink\" title=\"beer gut\"></a>beer gut</h2><p>n.啤酒肚</p>\n<h2 id=\"beer-belly\"><a href=\"#beer-belly\" class=\"headerlink\" title=\"beer belly\"></a>beer belly</h2><p>n.啤酒肚</p>\n<h2 id=\"go-for-a-jog\"><a href=\"#go-for-a-jog\" class=\"headerlink\" title=\"go for a jog\"></a>go for a jog</h2><p>n.运动，慢跑</p>\n<h2 id=\"carbonated-drink-beverage\"><a href=\"#carbonated-drink-beverage\" class=\"headerlink\" title=\"carbonated drink/beverage\"></a>carbonated drink/beverage</h2><p>n. 碳酸饮料</p>\n<h2 id=\"snack\"><a href=\"#snack\" class=\"headerlink\" title=\"snack\"></a>snack</h2><p>n. 小吃</p>\n<h2 id=\"cuisine\"><a href=\"#cuisine\" class=\"headerlink\" title=\"cuisine\"></a>cuisine</h2><p>n.烹饪</p>\n"},{"title":"客户端更换Git指南","_content":"\n## 登录公司Gitlab注册账号\nhttp://172.16.100.8:8081\n注册完后将账号名发送给各小组负责人。\n\n## 安装Git\n\n以下网站里选择自己电脑平台，下载安装即可\nhttps://git-scm.com/downloads\n注：安装过程选择默认选项\n\n## 安装Git工具\n\n推荐使用乌龟工具，界面与之前的SVN近似，而且可以结合window文件系统。\nhttps://tortoisegit.org/download/\n\n注：安装过程选择默认选项\n\n## 装好之后设置账号信息\n\n![enter description here](./images/1573879504277.png)\n\n\n## 克隆服务端的项目代码\n>1.右键选择git clone. \n2.输入项目地址：http://172.16.100.8:8081/x1client/client.git \n\n![enter description here](./images/1573881914065.png)\n\n## 切换到自己所在的分支\n> 美术： art \n> 策划和程序： feature\n\n![enter description here](./images/1573883470572.png)\n\n## 【可选】用旧项目的library\n>复制原SVN的UNITY目录下的library文件夹，粘贴到已经拉下来的unity目录下。这样重打开项目不用等待太多。\n\n## 如何拉取\n![enter description here](./images/1573881886011.png)\n\n## 如何提交\n![enter description here](./images/1573880787198.png)\n\n## 日常工作流推荐\n本地更改用一个新分支，提交之前可以去主工作分支rebase一个最新版，然后再提交本地，再切到主工作分支merge.\n\n```\ngit branch 'my'\ngit checkout 'my'\n# do some work\ngit add .\ngit commit -m 'my work done!'\ngit rebase -i feature #get latest feature branch commits\n#fix conflict if needed\ngit checkout feature\ngit merge my #take care! use merge here\ngit push\n```\n\n\n\n注： 一定不要在主工作分支上执行rebase，这样会要求push --force的操作，这种操作将直接覆盖所有的其他人的提交，导致历史树的变更。","source":"_posts/客户端更换Git指南.md","raw":"---\ntitle: 客户端更换Git指南\ncategories:\n- 公司\ntags: \n- Git\n---\n\n## 登录公司Gitlab注册账号\nhttp://172.16.100.8:8081\n注册完后将账号名发送给各小组负责人。\n\n## 安装Git\n\n以下网站里选择自己电脑平台，下载安装即可\nhttps://git-scm.com/downloads\n注：安装过程选择默认选项\n\n## 安装Git工具\n\n推荐使用乌龟工具，界面与之前的SVN近似，而且可以结合window文件系统。\nhttps://tortoisegit.org/download/\n\n注：安装过程选择默认选项\n\n## 装好之后设置账号信息\n\n![enter description here](./images/1573879504277.png)\n\n\n## 克隆服务端的项目代码\n>1.右键选择git clone. \n2.输入项目地址：http://172.16.100.8:8081/x1client/client.git \n\n![enter description here](./images/1573881914065.png)\n\n## 切换到自己所在的分支\n> 美术： art \n> 策划和程序： feature\n\n![enter description here](./images/1573883470572.png)\n\n## 【可选】用旧项目的library\n>复制原SVN的UNITY目录下的library文件夹，粘贴到已经拉下来的unity目录下。这样重打开项目不用等待太多。\n\n## 如何拉取\n![enter description here](./images/1573881886011.png)\n\n## 如何提交\n![enter description here](./images/1573880787198.png)\n\n## 日常工作流推荐\n本地更改用一个新分支，提交之前可以去主工作分支rebase一个最新版，然后再提交本地，再切到主工作分支merge.\n\n```\ngit branch 'my'\ngit checkout 'my'\n# do some work\ngit add .\ngit commit -m 'my work done!'\ngit rebase -i feature #get latest feature branch commits\n#fix conflict if needed\ngit checkout feature\ngit merge my #take care! use merge here\ngit push\n```\n\n\n\n注： 一定不要在主工作分支上执行rebase，这样会要求push --force的操作，这种操作将直接覆盖所有的其他人的提交，导致历史树的变更。","slug":"客户端更换Git指南","published":1,"date":"2019-11-25T03:25:48.245Z","updated":"2019-11-25T03:25:48.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs8k001gekuwrmnqllu9","content":"<h2 id=\"登录公司Gitlab注册账号\"><a href=\"#登录公司Gitlab注册账号\" class=\"headerlink\" title=\"登录公司Gitlab注册账号\"></a>登录公司Gitlab注册账号</h2><p><a href=\"http://172.16.100.8:8081\">http://172.16.100.8:8081</a><br>注册完后将账号名发送给各小组负责人。</p>\n<h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><p>以下网站里选择自己电脑平台，下载安装即可<br><a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a><br>注：安装过程选择默认选项</p>\n<h2 id=\"安装Git工具\"><a href=\"#安装Git工具\" class=\"headerlink\" title=\"安装Git工具\"></a>安装Git工具</h2><p>推荐使用乌龟工具，界面与之前的SVN近似，而且可以结合window文件系统。<br><a href=\"https://tortoisegit.org/download/\">https://tortoisegit.org/download/</a></p>\n<p>注：安装过程选择默认选项</p>\n<h2 id=\"装好之后设置账号信息\"><a href=\"#装好之后设置账号信息\" class=\"headerlink\" title=\"装好之后设置账号信息\"></a>装好之后设置账号信息</h2><p><img src=\"./images/1573879504277.png\" alt=\"enter description here\"></p>\n<h2 id=\"克隆服务端的项目代码\"><a href=\"#克隆服务端的项目代码\" class=\"headerlink\" title=\"克隆服务端的项目代码\"></a>克隆服务端的项目代码</h2><blockquote>\n<p>1.右键选择git clone.<br>2.输入项目地址：<a href=\"http://172.16.100.8:8081/x1client/client.git\">http://172.16.100.8:8081/x1client/client.git</a> </p>\n</blockquote>\n<p><img src=\"./images/1573881914065.png\" alt=\"enter description here\"></p>\n<h2 id=\"切换到自己所在的分支\"><a href=\"#切换到自己所在的分支\" class=\"headerlink\" title=\"切换到自己所在的分支\"></a>切换到自己所在的分支</h2><blockquote>\n<p>美术： art<br>策划和程序： feature</p>\n</blockquote>\n<p><img src=\"./images/1573883470572.png\" alt=\"enter description here\"></p>\n<h2 id=\"【可选】用旧项目的library\"><a href=\"#【可选】用旧项目的library\" class=\"headerlink\" title=\"【可选】用旧项目的library\"></a>【可选】用旧项目的library</h2><blockquote>\n<p>复制原SVN的UNITY目录下的library文件夹，粘贴到已经拉下来的unity目录下。这样重打开项目不用等待太多。</p>\n</blockquote>\n<h2 id=\"如何拉取\"><a href=\"#如何拉取\" class=\"headerlink\" title=\"如何拉取\"></a>如何拉取</h2><p><img src=\"./images/1573881886011.png\" alt=\"enter description here\"></p>\n<h2 id=\"如何提交\"><a href=\"#如何提交\" class=\"headerlink\" title=\"如何提交\"></a>如何提交</h2><p><img src=\"./images/1573880787198.png\" alt=\"enter description here\"></p>\n<h2 id=\"日常工作流推荐\"><a href=\"#日常工作流推荐\" class=\"headerlink\" title=\"日常工作流推荐\"></a>日常工作流推荐</h2><p>本地更改用一个新分支，提交之前可以去主工作分支rebase一个最新版，然后再提交本地，再切到主工作分支merge.</p>\n<pre><code>git branch &#39;my&#39;\ngit checkout &#39;my&#39;\n# do some work\ngit add .\ngit commit -m &#39;my work done!&#39;\ngit rebase -i feature #get latest feature branch commits\n#fix conflict if needed\ngit checkout feature\ngit merge my #take care! use merge here\ngit push</code></pre><p>注： 一定不要在主工作分支上执行rebase，这样会要求push –force的操作，这种操作将直接覆盖所有的其他人的提交，导致历史树的变更。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"登录公司Gitlab注册账号\"><a href=\"#登录公司Gitlab注册账号\" class=\"headerlink\" title=\"登录公司Gitlab注册账号\"></a>登录公司Gitlab注册账号</h2><p><a href=\"http://172.16.100.8:8081\">http://172.16.100.8:8081</a><br>注册完后将账号名发送给各小组负责人。</p>\n<h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><p>以下网站里选择自己电脑平台，下载安装即可<br><a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a><br>注：安装过程选择默认选项</p>\n<h2 id=\"安装Git工具\"><a href=\"#安装Git工具\" class=\"headerlink\" title=\"安装Git工具\"></a>安装Git工具</h2><p>推荐使用乌龟工具，界面与之前的SVN近似，而且可以结合window文件系统。<br><a href=\"https://tortoisegit.org/download/\">https://tortoisegit.org/download/</a></p>\n<p>注：安装过程选择默认选项</p>\n<h2 id=\"装好之后设置账号信息\"><a href=\"#装好之后设置账号信息\" class=\"headerlink\" title=\"装好之后设置账号信息\"></a>装好之后设置账号信息</h2><p><img src=\"./images/1573879504277.png\" alt=\"enter description here\"></p>\n<h2 id=\"克隆服务端的项目代码\"><a href=\"#克隆服务端的项目代码\" class=\"headerlink\" title=\"克隆服务端的项目代码\"></a>克隆服务端的项目代码</h2><blockquote>\n<p>1.右键选择git clone.<br>2.输入项目地址：<a href=\"http://172.16.100.8:8081/x1client/client.git\">http://172.16.100.8:8081/x1client/client.git</a> </p>\n</blockquote>\n<p><img src=\"./images/1573881914065.png\" alt=\"enter description here\"></p>\n<h2 id=\"切换到自己所在的分支\"><a href=\"#切换到自己所在的分支\" class=\"headerlink\" title=\"切换到自己所在的分支\"></a>切换到自己所在的分支</h2><blockquote>\n<p>美术： art<br>策划和程序： feature</p>\n</blockquote>\n<p><img src=\"./images/1573883470572.png\" alt=\"enter description here\"></p>\n<h2 id=\"【可选】用旧项目的library\"><a href=\"#【可选】用旧项目的library\" class=\"headerlink\" title=\"【可选】用旧项目的library\"></a>【可选】用旧项目的library</h2><blockquote>\n<p>复制原SVN的UNITY目录下的library文件夹，粘贴到已经拉下来的unity目录下。这样重打开项目不用等待太多。</p>\n</blockquote>\n<h2 id=\"如何拉取\"><a href=\"#如何拉取\" class=\"headerlink\" title=\"如何拉取\"></a>如何拉取</h2><p><img src=\"./images/1573881886011.png\" alt=\"enter description here\"></p>\n<h2 id=\"如何提交\"><a href=\"#如何提交\" class=\"headerlink\" title=\"如何提交\"></a>如何提交</h2><p><img src=\"./images/1573880787198.png\" alt=\"enter description here\"></p>\n<h2 id=\"日常工作流推荐\"><a href=\"#日常工作流推荐\" class=\"headerlink\" title=\"日常工作流推荐\"></a>日常工作流推荐</h2><p>本地更改用一个新分支，提交之前可以去主工作分支rebase一个最新版，然后再提交本地，再切到主工作分支merge.</p>\n<pre><code>git branch &#39;my&#39;\ngit checkout &#39;my&#39;\n# do some work\ngit add .\ngit commit -m &#39;my work done!&#39;\ngit rebase -i feature #get latest feature branch commits\n#fix conflict if needed\ngit checkout feature\ngit merge my #take care! use merge here\ngit push</code></pre><p>注： 一定不要在主工作分支上执行rebase，这样会要求push –force的操作，这种操作将直接覆盖所有的其他人的提交，导致历史树的变更。</p>\n"},{"title":"开言","_content":"\n\n### 预习\n1. do you have a miniute\n2. been meaning to\n\tI've been meaning to go to the store to by milk.\n\t//Haven't dont it yet but you're doing it.\n3. MacDonald  - fastfood chains.\n4. \n\n\n### Dialog\n\n### Dialog study","source":"_posts/开言- To tip or not to tip.md","raw":"---\ntitle: 开言\ncategories:\n- 英语学习\ntags: \n- English\n- Note\n---\n\n\n### 预习\n1. do you have a miniute\n2. been meaning to\n\tI've been meaning to go to the store to by milk.\n\t//Haven't dont it yet but you're doing it.\n3. MacDonald  - fastfood chains.\n4. \n\n\n### Dialog\n\n### Dialog study","slug":"开言- To tip or not to tip","published":1,"date":"2019-11-25T03:25:48.246Z","updated":"2019-11-25T03:25:48.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs8n001kekuw3a2ab8f6","content":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>do you have a miniute</li>\n<li>been meaning to<br> I’ve been meaning to go to the store to by milk.<br> //Haven’t dont it yet but you’re doing it.</li>\n<li>MacDonald  - fastfood chains.</li>\n<li></li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>do you have a miniute</li>\n<li>been meaning to<br> I’ve been meaning to go to the store to by milk.<br> //Haven’t dont it yet but you’re doing it.</li>\n<li>MacDonald  - fastfood chains.</li>\n<li></li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>"},{"title":"开言体验营 - Day1","_content":"\n### 预习\n1. pull up\nv. 拿出来\n\n2. QR code\nn.二维码\n\n3. Scanning\nv. 扫描\n\n4. Professionals\nn. 专业人士\n\n5. keeping up\nv. 跟上，追踪\n\n6. public accounts\nn. 公众号\n\n7. networking\nn. 建立人脉\n\n### Dialog\n> A: It was great meeting you.\n> B: Likewise. Let's keep in touch. Could I have you wechat?\n> A: Sure. Just a sec, let me pull up my QR code. Here you go.\n> B: Great. Opps, that didn't work, let me try scanning you again, here we go.\n> A: Wonderful. I just accepted your contact request.\n> B: Great! Now we are connected. I'm in a great Wechat Group for marketting professionals. Would you like to join?\n> A: Sure, I'd love to.\n> B: I'll send you a invite right away. I find it great for networking, keeping up with industry news and local events.The people in the group is very helpful. I'll recommend a few great public account for you to follow, too.\n> A: That's excellent! I really appreciate it.\n> B: No problem, anytime!\n\n\n### Dialog study\n1. likewise\n* means 'the same'\n* almost anything where you would need to say blah blah blah **too**..\neg. : > Spencer, you are very handsome.\n\t\t> Ah, likewise.\n\t\t> Thank you. \n2.  Could I have you wechat?\n    more polite: > may I add you on wechat?\n\tor  > do you have wechat?\n\t\n3. pull up \n This is always about computers or phones, or things like that you can open something.\n e.g.: Let me pull up my QR code.\n \n 4. QR code\n quick response\n \n 5. contact request\n \n 6. here you go <=> give something.\nI'm giving you something.\n \n 7. here we go <=> start\n It's starting now. let do this..\n \n 8. professional\n n. someone who get paid to do something.\n \n 9.invite\nn. I'll send you an invite.\n \n 10. networking\n n. meeting people that could, related to you professionally.\n \n 11. keeping up\n e.g.: I keep up with fashion. keeping up with industry news.\n \n 12. local events\n this dialogue is probably a networking event.\n \n ","source":"_posts/开言体验营 - Day1.md","raw":"---\ntitle: 开言体验营 - Day1\ncategories:\n- 英语学习\ntags: \n- English\n- Note\n---\n\n### 预习\n1. pull up\nv. 拿出来\n\n2. QR code\nn.二维码\n\n3. Scanning\nv. 扫描\n\n4. Professionals\nn. 专业人士\n\n5. keeping up\nv. 跟上，追踪\n\n6. public accounts\nn. 公众号\n\n7. networking\nn. 建立人脉\n\n### Dialog\n> A: It was great meeting you.\n> B: Likewise. Let's keep in touch. Could I have you wechat?\n> A: Sure. Just a sec, let me pull up my QR code. Here you go.\n> B: Great. Opps, that didn't work, let me try scanning you again, here we go.\n> A: Wonderful. I just accepted your contact request.\n> B: Great! Now we are connected. I'm in a great Wechat Group for marketting professionals. Would you like to join?\n> A: Sure, I'd love to.\n> B: I'll send you a invite right away. I find it great for networking, keeping up with industry news and local events.The people in the group is very helpful. I'll recommend a few great public account for you to follow, too.\n> A: That's excellent! I really appreciate it.\n> B: No problem, anytime!\n\n\n### Dialog study\n1. likewise\n* means 'the same'\n* almost anything where you would need to say blah blah blah **too**..\neg. : > Spencer, you are very handsome.\n\t\t> Ah, likewise.\n\t\t> Thank you. \n2.  Could I have you wechat?\n    more polite: > may I add you on wechat?\n\tor  > do you have wechat?\n\t\n3. pull up \n This is always about computers or phones, or things like that you can open something.\n e.g.: Let me pull up my QR code.\n \n 4. QR code\n quick response\n \n 5. contact request\n \n 6. here you go <=> give something.\nI'm giving you something.\n \n 7. here we go <=> start\n It's starting now. let do this..\n \n 8. professional\n n. someone who get paid to do something.\n \n 9.invite\nn. I'll send you an invite.\n \n 10. networking\n n. meeting people that could, related to you professionally.\n \n 11. keeping up\n e.g.: I keep up with fashion. keeping up with industry news.\n \n 12. local events\n this dialogue is probably a networking event.\n \n ","slug":"开言体验营 - Day1","published":1,"date":"2019-11-25T03:25:48.247Z","updated":"2019-11-25T03:25:48.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs8o001mekuwliln732y","content":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li><p>pull up<br>v. 拿出来</p>\n</li>\n<li><p>QR code<br>n.二维码</p>\n</li>\n<li><p>Scanning<br>v. 扫描</p>\n</li>\n<li><p>Professionals<br>n. 专业人士</p>\n</li>\n<li><p>keeping up<br>v. 跟上，追踪</p>\n</li>\n<li><p>public accounts<br>n. 公众号</p>\n</li>\n<li><p>networking<br>n. 建立人脉</p>\n</li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><blockquote>\n<p>A: It was great meeting you.<br>B: Likewise. Let’s keep in touch. Could I have you wechat?<br>A: Sure. Just a sec, let me pull up my QR code. Here you go.<br>B: Great. Opps, that didn’t work, let me try scanning you again, here we go.<br>A: Wonderful. I just accepted your contact request.<br>B: Great! Now we are connected. I’m in a great Wechat Group for marketting professionals. Would you like to join?<br>A: Sure, I’d love to.<br>B: I’ll send you a invite right away. I find it great for networking, keeping up with industry news and local events.The people in the group is very helpful. I’ll recommend a few great public account for you to follow, too.<br>A: That’s excellent! I really appreciate it.<br>B: No problem, anytime!</p>\n</blockquote>\n<h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3><ol>\n<li>likewise</li>\n</ol>\n<ul>\n<li>means ‘the same’</li>\n<li>almost anything where you would need to say blah blah blah <strong>too</strong>..<br>eg. : &gt; Spencer, you are very handsome.<pre><code>  &gt; Ah, likewise.\n  &gt; Thank you. </code></pre></li>\n</ul>\n<ol start=\"2\">\n<li><p>Could I have you wechat?<br>more polite: &gt; may I add you on wechat?<br>or  &gt; do you have wechat?</p>\n</li>\n<li><p>pull up<br>This is always about computers or phones, or things like that you can open something.<br>e.g.: Let me pull up my QR code.</p>\n<ol start=\"4\">\n<li><p>QR code<br>quick response</p>\n</li>\n<li><p>contact request</p>\n</li>\n<li><p>here you go &lt;=&gt; give something.<br>I’m giving you something.</p>\n</li>\n<li><p>here we go &lt;=&gt; start<br>It’s starting now. let do this..</p>\n</li>\n<li><p>professional<br>n. someone who get paid to do something.</p>\n</li>\n</ol>\n<p>9.invite<br>n. I’ll send you an invite.</p>\n<ol start=\"10\">\n<li><p>networking<br>n. meeting people that could, related to you professionally.</p>\n</li>\n<li><p>keeping up<br>e.g.: I keep up with fashion. keeping up with industry news.</p>\n</li>\n<li><p>local events<br>this dialogue is probably a networking event.</p>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li><p>pull up<br>v. 拿出来</p>\n</li>\n<li><p>QR code<br>n.二维码</p>\n</li>\n<li><p>Scanning<br>v. 扫描</p>\n</li>\n<li><p>Professionals<br>n. 专业人士</p>\n</li>\n<li><p>keeping up<br>v. 跟上，追踪</p>\n</li>\n<li><p>public accounts<br>n. 公众号</p>\n</li>\n<li><p>networking<br>n. 建立人脉</p>\n</li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><blockquote>\n<p>A: It was great meeting you.<br>B: Likewise. Let’s keep in touch. Could I have you wechat?<br>A: Sure. Just a sec, let me pull up my QR code. Here you go.<br>B: Great. Opps, that didn’t work, let me try scanning you again, here we go.<br>A: Wonderful. I just accepted your contact request.<br>B: Great! Now we are connected. I’m in a great Wechat Group for marketting professionals. Would you like to join?<br>A: Sure, I’d love to.<br>B: I’ll send you a invite right away. I find it great for networking, keeping up with industry news and local events.The people in the group is very helpful. I’ll recommend a few great public account for you to follow, too.<br>A: That’s excellent! I really appreciate it.<br>B: No problem, anytime!</p>\n</blockquote>\n<h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3><ol>\n<li>likewise</li>\n</ol>\n<ul>\n<li>means ‘the same’</li>\n<li>almost anything where you would need to say blah blah blah <strong>too</strong>..<br>eg. : &gt; Spencer, you are very handsome.<pre><code>  &gt; Ah, likewise.\n  &gt; Thank you. </code></pre></li>\n</ul>\n<ol start=\"2\">\n<li><p>Could I have you wechat?<br>more polite: &gt; may I add you on wechat?<br>or  &gt; do you have wechat?</p>\n</li>\n<li><p>pull up<br>This is always about computers or phones, or things like that you can open something.<br>e.g.: Let me pull up my QR code.</p>\n<ol start=\"4\">\n<li><p>QR code<br>quick response</p>\n</li>\n<li><p>contact request</p>\n</li>\n<li><p>here you go &lt;=&gt; give something.<br>I’m giving you something.</p>\n</li>\n<li><p>here we go &lt;=&gt; start<br>It’s starting now. let do this..</p>\n</li>\n<li><p>professional<br>n. someone who get paid to do something.</p>\n</li>\n</ol>\n<p>9.invite<br>n. I’ll send you an invite.</p>\n<ol start=\"10\">\n<li><p>networking<br>n. meeting people that could, related to you professionally.</p>\n</li>\n<li><p>keeping up<br>e.g.: I keep up with fashion. keeping up with industry news.</p>\n</li>\n<li><p>local events<br>this dialogue is probably a networking event.</p>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"开言_Bargaining in the market","_content":"\n\n### 预习\n1. souvenior\n+ 纪念品\n2. jeez\n+ 叹词\n3. no can do\n无能为力。\n\n\n### Dialog\n\n> Excuse me sir, how much is this souvenior?\n> Oh, that one there is $30.\n> Jeez! That's a lot! is that the best price you can give me?\n> I don't go bargaining. $25 is the cheapest I can go.\n> I see ,are you sure you can't go any lower?\n> Sorry , I can't, and you won't find a better price in the market.\n> How about two for 40?\n> No can do. But I can do three for 60.\n> Thanks, but no thanks.\n> Ok, ok! Two for 40!\n> Deal! You take credit?\n> Cash only , sir!\n\n\n### Dialog study","source":"_posts/开言_Bargaining in the market.md","raw":"---\ntitle: 开言_Bargaining in the market\ncategories:\n- 英语学习\ntags: \n- English\n- Note\n---\n\n\n### 预习\n1. souvenior\n+ 纪念品\n2. jeez\n+ 叹词\n3. no can do\n无能为力。\n\n\n### Dialog\n\n> Excuse me sir, how much is this souvenior?\n> Oh, that one there is $30.\n> Jeez! That's a lot! is that the best price you can give me?\n> I don't go bargaining. $25 is the cheapest I can go.\n> I see ,are you sure you can't go any lower?\n> Sorry , I can't, and you won't find a better price in the market.\n> How about two for 40?\n> No can do. But I can do three for 60.\n> Thanks, but no thanks.\n> Ok, ok! Two for 40!\n> Deal! You take credit?\n> Cash only , sir!\n\n\n### Dialog study","slug":"开言_Bargaining in the market","published":1,"date":"2019-11-25T03:25:48.246Z","updated":"2019-11-25T03:25:48.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs8s001rekuwpi92bah2","content":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>souvenior</li>\n</ol>\n<ul>\n<li>纪念品</li>\n</ul>\n<ol start=\"2\">\n<li>jeez</li>\n</ol>\n<ul>\n<li>叹词</li>\n</ul>\n<ol start=\"3\">\n<li>no can do<br>无能为力。</li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><blockquote>\n<p>Excuse me sir, how much is this souvenior?<br>Oh, that one there is $30.<br>Jeez! That’s a lot! is that the best price you can give me?<br>I don’t go bargaining. $25 is the cheapest I can go.<br>I see ,are you sure you can’t go any lower?<br>Sorry , I can’t, and you won’t find a better price in the market.<br>How about two for 40?<br>No can do. But I can do three for 60.<br>Thanks, but no thanks.<br>Ok, ok! Two for 40!<br>Deal! You take credit?<br>Cash only , sir!</p>\n</blockquote>\n<h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>souvenior</li>\n</ol>\n<ul>\n<li>纪念品</li>\n</ul>\n<ol start=\"2\">\n<li>jeez</li>\n</ol>\n<ul>\n<li>叹词</li>\n</ul>\n<ol start=\"3\">\n<li>no can do<br>无能为力。</li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><blockquote>\n<p>Excuse me sir, how much is this souvenior?<br>Oh, that one there is $30.<br>Jeez! That’s a lot! is that the best price you can give me?<br>I don’t go bargaining. $25 is the cheapest I can go.<br>I see ,are you sure you can’t go any lower?<br>Sorry , I can’t, and you won’t find a better price in the market.<br>How about two for 40?<br>No can do. But I can do three for 60.<br>Thanks, but no thanks.<br>Ok, ok! Two for 40!<br>Deal! You take credit?<br>Cash only , sir!</p>\n</blockquote>\n<h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>"},{"title":"开言_Happy Hour Drinks with Coworks","_content":"\n\n### 预习\n1. six-pack\n2. all-time\n3. brand-new\n+ just bought.. very very new\n4. ex-wife\n+ wife\n5. buy one, get one\n\n\n### Dialog\n\n\n\n### Dialog study","source":"_posts/开言_Happy Hour Drinks with Coworks.md","raw":"---\ntitle: 开言_Happy Hour Drinks with Coworks\ncategories:\n- 英语学习\ntags: \n- English\n- Note\n---\n\n\n### 预习\n1. six-pack\n2. all-time\n3. brand-new\n+ just bought.. very very new\n4. ex-wife\n+ wife\n5. buy one, get one\n\n\n### Dialog\n\n\n\n### Dialog study","slug":"开言_Happy Hour Drinks with Coworks","published":1,"date":"2019-11-25T03:25:48.247Z","updated":"2019-11-25T03:25:48.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs8u001uekuwx19x20ny","content":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>six-pack</li>\n<li>all-time</li>\n<li>brand-new</li>\n</ol>\n<ul>\n<li>just bought.. very very new</li>\n</ul>\n<ol start=\"4\">\n<li>ex-wife</li>\n</ol>\n<ul>\n<li>wife</li>\n</ul>\n<ol start=\"5\">\n<li>buy one, get one</li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>six-pack</li>\n<li>all-time</li>\n<li>brand-new</li>\n</ol>\n<ul>\n<li>just bought.. very very new</li>\n</ul>\n<ol start=\"4\">\n<li>ex-wife</li>\n</ol>\n<ul>\n<li>wife</li>\n</ul>\n<ol start=\"5\">\n<li>buy one, get one</li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>"},{"title":"开言体验营 - Day2","_content":"\n\n### 预习\n1. Espresso\n2. Americano\n3. Latte\n4. Cappuccino\n5. Mocha\n6. Macchiato\n\ne.g. I'd like to order a latte.\n### Dialog\n\n### Dialog study\n","source":"_posts/开言体验营 - Day2.md","raw":"---\ntitle: 开言体验营 - Day2\ncategories:\n- 英语学习\ntags: \n- English\n- Note\n---\n\n\n### 预习\n1. Espresso\n2. Americano\n3. Latte\n4. Cappuccino\n5. Mocha\n6. Macchiato\n\ne.g. I'd like to order a latte.\n### Dialog\n\n### Dialog study\n","slug":"开言体验营 - Day2","published":1,"date":"2019-11-25T03:25:48.247Z","updated":"2019-11-25T03:25:48.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs8x001zekuwd32znfi5","content":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>Espresso</li>\n<li>Americano</li>\n<li>Latte</li>\n<li>Cappuccino</li>\n<li>Mocha</li>\n<li>Macchiato</li>\n</ol>\n<p>e.g. I’d like to order a latte.</p>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>Espresso</li>\n<li>Americano</li>\n<li>Latte</li>\n<li>Cappuccino</li>\n<li>Mocha</li>\n<li>Macchiato</li>\n</ol>\n<p>e.g. I’d like to order a latte.</p>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>"},{"title":"开言体验营 - Day5","_content":"\n\n### 预习\n1.put you up \n提供住宿，容忍\nBosses have a lot to put up with like you for instance!\nAll women search for beauty. Maybe you will feel better after you put on make-up.\n\n2. layover\n转机\n\n### Dialog\n\n### Dialog study","source":"_posts/开言体验营 - Day5.md","raw":"---\ntitle: 开言体验营 - Day5\ncategories:\n- 英语学习\ntags: \n- English\n- Note\n---\n\n\n### 预习\n1.put you up \n提供住宿，容忍\nBosses have a lot to put up with like you for instance!\nAll women search for beauty. Maybe you will feel better after you put on make-up.\n\n2. layover\n转机\n\n### Dialog\n\n### Dialog study","slug":"开言体验营 - Day5","published":1,"date":"2019-11-25T03:25:48.248Z","updated":"2019-11-25T03:25:48.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs8y0021ekuwnksg9uvn","content":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><p>1.put you up<br>提供住宿，容忍<br>Bosses have a lot to put up with like you for instance!<br>All women search for beauty. Maybe you will feel better after you put on make-up.</p>\n<ol start=\"2\">\n<li>layover<br>转机</li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><p>1.put you up<br>提供住宿，容忍<br>Bosses have a lot to put up with like you for instance!<br>All women search for beauty. Maybe you will feel better after you put on make-up.</p>\n<ol start=\"2\">\n<li>layover<br>转机</li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>"},{"title":"开言体验营 - Day4","_content":"\n\n### 预习\n1. Chinese zodiac 生肖\n2. literal translation\n3. tons \n4. beer \n\te.g. I had tons of beer last night.\n5. wacky -> weird\n6. silly \n### Dialog\n\n### Dialog study","source":"_posts/开言体验营 - Day4.md","raw":"---\ntitle: 开言体验营 - Day4\ncategories:\n- 英语学习\ntags: \n- English\n- Note\n---\n\n\n### 预习\n1. Chinese zodiac 生肖\n2. literal translation\n3. tons \n4. beer \n\te.g. I had tons of beer last night.\n5. wacky -> weird\n6. silly \n### Dialog\n\n### Dialog study","slug":"开言体验营 - Day4","published":1,"date":"2019-11-25T03:25:48.248Z","updated":"2019-11-25T03:25:48.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjs910025ekuwxw98cb6y","content":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>Chinese zodiac 生肖</li>\n<li>literal translation</li>\n<li>tons </li>\n<li>beer<br> e.g. I had tons of beer last night.</li>\n<li>wacky -&gt; weird</li>\n<li>silly <h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3></li>\n</ol>\n<h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>Chinese zodiac 生肖</li>\n<li>literal translation</li>\n<li>tons </li>\n<li>beer<br> e.g. I had tons of beer last night.</li>\n<li>wacky -&gt; weird</li>\n<li>silly <h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3></li>\n</ol>\n<h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>"},{"title":"Python Note 2","_content":"# Python Note 2\n\n+ ### Function definition\n+ As python recommended, left two blank lines after function\n\n```python\ndef greet_user():\n    print(\"GO\")\n    print(\"Hi THERE!\")\n\n\ngreet_user()\n```\n\n+ ### Function parameters\n\n```python\ndef greet_user(name):\n    print(f\"GO:{name}\")\n    print(\"Hi THERE!\")\n\n\ngreet_user(\"John\")\ngreet_user() #Error, no parameter\n\ndef greet_user2(first_name,second_name):\n    print(f\"GO:{first_name} {second_name}\")\n    print(\"Hi THERE!\")\n\n\ngreet_user2(\"John\",\"Smith\")\ngreet_user2(second_name=\"John\",first_name=\"Smith\") #使用keyword形式作为参数，\ngreet_user2(second_name=\"John\",\"Smith\") #错误，混合情况必须先用position形式再用keyword形式\n```\n\n+ ### Funtion Returns\n+ By default, python return none.\n\n```python\ndef square(number):\n\treturn number * number\n\n\nresult = square(3)\nprint(result)\n```\n\n+ ### Error Handling\n+ try except\n\n```python\ntry:\n\tday = int(input(\"input day:\"))\n\tincome = 2000 / day\n\tprint(day)\nexcept ZeroDivisionError:\n\tprint(\"day can't be zero\")\nexcept ValueError:\n\tprint(\"Invalid input\")\n```\n\n+ ### Comments\n+ User comment to explain why and how, not what!","source":"_posts/python_2.md","raw":"---\ntitle: Python Note 2\ncategories:\n- Python笔记\ntags: \n- Python\n- Note\n---\n# Python Note 2\n\n+ ### Function definition\n+ As python recommended, left two blank lines after function\n\n```python\ndef greet_user():\n    print(\"GO\")\n    print(\"Hi THERE!\")\n\n\ngreet_user()\n```\n\n+ ### Function parameters\n\n```python\ndef greet_user(name):\n    print(f\"GO:{name}\")\n    print(\"Hi THERE!\")\n\n\ngreet_user(\"John\")\ngreet_user() #Error, no parameter\n\ndef greet_user2(first_name,second_name):\n    print(f\"GO:{first_name} {second_name}\")\n    print(\"Hi THERE!\")\n\n\ngreet_user2(\"John\",\"Smith\")\ngreet_user2(second_name=\"John\",first_name=\"Smith\") #使用keyword形式作为参数，\ngreet_user2(second_name=\"John\",\"Smith\") #错误，混合情况必须先用position形式再用keyword形式\n```\n\n+ ### Funtion Returns\n+ By default, python return none.\n\n```python\ndef square(number):\n\treturn number * number\n\n\nresult = square(3)\nprint(result)\n```\n\n+ ### Error Handling\n+ try except\n\n```python\ntry:\n\tday = int(input(\"input day:\"))\n\tincome = 2000 / day\n\tprint(day)\nexcept ZeroDivisionError:\n\tprint(\"day can't be zero\")\nexcept ValueError:\n\tprint(\"Invalid input\")\n```\n\n+ ### Comments\n+ User comment to explain why and how, not what!","slug":"python_2","published":1,"date":"2019-10-12T10:01:26.500Z","updated":"2019-10-12T10:01:26.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjsag004uekuwsabtrrfu","content":"<h1 id=\"Python-Note-2\"><a href=\"#Python-Note-2\" class=\"headerlink\" title=\"Python Note 2\"></a>Python Note 2</h1><ul>\n<li><h3 id=\"Function-definition\"><a href=\"#Function-definition\" class=\"headerlink\" title=\"Function definition\"></a>Function definition</h3></li>\n<li>As python recommended, left two blank lines after function</li>\n</ul>\n<pre><code class=\"python\">def greet_user():\n    print(&quot;GO&quot;)\n    print(&quot;Hi THERE!&quot;)\n\n\ngreet_user()</code></pre>\n<ul>\n<li><h3 id=\"Function-parameters\"><a href=\"#Function-parameters\" class=\"headerlink\" title=\"Function parameters\"></a>Function parameters</h3></li>\n</ul>\n<pre><code class=\"python\">def greet_user(name):\n    print(f&quot;GO:{name}&quot;)\n    print(&quot;Hi THERE!&quot;)\n\n\ngreet_user(&quot;John&quot;)\ngreet_user() #Error, no parameter\n\ndef greet_user2(first_name,second_name):\n    print(f&quot;GO:{first_name} {second_name}&quot;)\n    print(&quot;Hi THERE!&quot;)\n\n\ngreet_user2(&quot;John&quot;,&quot;Smith&quot;)\ngreet_user2(second_name=&quot;John&quot;,first_name=&quot;Smith&quot;) #使用keyword形式作为参数，\ngreet_user2(second_name=&quot;John&quot;,&quot;Smith&quot;) #错误，混合情况必须先用position形式再用keyword形式</code></pre>\n<ul>\n<li><h3 id=\"Funtion-Returns\"><a href=\"#Funtion-Returns\" class=\"headerlink\" title=\"Funtion Returns\"></a>Funtion Returns</h3></li>\n<li>By default, python return none.</li>\n</ul>\n<pre><code class=\"python\">def square(number):\n    return number * number\n\n\nresult = square(3)\nprint(result)</code></pre>\n<ul>\n<li><h3 id=\"Error-Handling\"><a href=\"#Error-Handling\" class=\"headerlink\" title=\"Error Handling\"></a>Error Handling</h3></li>\n<li>try except</li>\n</ul>\n<pre><code class=\"python\">try:\n    day = int(input(&quot;input day:&quot;))\n    income = 2000 / day\n    print(day)\nexcept ZeroDivisionError:\n    print(&quot;day can&#39;t be zero&quot;)\nexcept ValueError:\n    print(&quot;Invalid input&quot;)</code></pre>\n<ul>\n<li><h3 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h3></li>\n<li>User comment to explain why and how, not what!</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Python-Note-2\"><a href=\"#Python-Note-2\" class=\"headerlink\" title=\"Python Note 2\"></a>Python Note 2</h1><ul>\n<li><h3 id=\"Function-definition\"><a href=\"#Function-definition\" class=\"headerlink\" title=\"Function definition\"></a>Function definition</h3></li>\n<li>As python recommended, left two blank lines after function</li>\n</ul>\n<pre><code class=\"python\">def greet_user():\n    print(&quot;GO&quot;)\n    print(&quot;Hi THERE!&quot;)\n\n\ngreet_user()</code></pre>\n<ul>\n<li><h3 id=\"Function-parameters\"><a href=\"#Function-parameters\" class=\"headerlink\" title=\"Function parameters\"></a>Function parameters</h3></li>\n</ul>\n<pre><code class=\"python\">def greet_user(name):\n    print(f&quot;GO:{name}&quot;)\n    print(&quot;Hi THERE!&quot;)\n\n\ngreet_user(&quot;John&quot;)\ngreet_user() #Error, no parameter\n\ndef greet_user2(first_name,second_name):\n    print(f&quot;GO:{first_name} {second_name}&quot;)\n    print(&quot;Hi THERE!&quot;)\n\n\ngreet_user2(&quot;John&quot;,&quot;Smith&quot;)\ngreet_user2(second_name=&quot;John&quot;,first_name=&quot;Smith&quot;) #使用keyword形式作为参数，\ngreet_user2(second_name=&quot;John&quot;,&quot;Smith&quot;) #错误，混合情况必须先用position形式再用keyword形式</code></pre>\n<ul>\n<li><h3 id=\"Funtion-Returns\"><a href=\"#Funtion-Returns\" class=\"headerlink\" title=\"Funtion Returns\"></a>Funtion Returns</h3></li>\n<li>By default, python return none.</li>\n</ul>\n<pre><code class=\"python\">def square(number):\n    return number * number\n\n\nresult = square(3)\nprint(result)</code></pre>\n<ul>\n<li><h3 id=\"Error-Handling\"><a href=\"#Error-Handling\" class=\"headerlink\" title=\"Error Handling\"></a>Error Handling</h3></li>\n<li>try except</li>\n</ul>\n<pre><code class=\"python\">try:\n    day = int(input(&quot;input day:&quot;))\n    income = 2000 / day\n    print(day)\nexcept ZeroDivisionError:\n    print(&quot;day can&#39;t be zero&quot;)\nexcept ValueError:\n    print(&quot;Invalid input&quot;)</code></pre>\n<ul>\n<li><h3 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h3></li>\n<li>User comment to explain why and how, not what!</li>\n</ul>\n"},{"title":"Python Core Programming Note 3","_content":"\n## Multi-thread \n\n### Python 的 threading 模块\nPython 提供了多个模块来支持多线程编程，包括 thread、 threading 和 Queue 模块等。程\n序是可以使用 thread 和 threading 模块来创建与管理线程。 thread 模块提供了基本的线程和锁\n定支持；而 threading 模块提供了更高级别、功能更全面的线程管理。使用 Queue 模块，用户\n可以创建一个队列数据结构，用于在多线程之间进行共享。\n\n> **核心提示：避免使用 thread 模块**\n推荐使用更高级别的 threading 模块，而不使用 thread 模块有很多原因。 threading 模\n块更加先进，有更好的线程支持，并且 thread 模块中的一些属性会和 threading 模块有冲突。\n另一个原因是低级别的 thread 模块拥有的同步原语很少（实际上只有一个），而 threading\n模块则有很多。\n不过，出于对 Python 和线程学习的兴趣，我们将给出使用 thread 模块的一些代码。\n给出这些代码只是出于学习目的，希望它能够让你更好地领悟为什么应该避免使用\nthread 模块。我们还将展示如何使用更加合适的工具，如 threading 和 Queue 模块中的那\n些方法。\n避免使用 thread 模块的另一个原因是它对于进程何时退出没有控制。当主线程结束\n时，所有其他线程也都强制结束，不会发出警告或者进行适当的清理。如前所述，至少\nthreading 模块能确保重要的子线程在进程退出前结束。\n我们只建议那些想访问线程的更底层级别的专家使用 thread 模块。为了强调这一点，\n在 Python3 中该模块被重命名为_thread。你创建的任何多线程应用都应该使用 threading 模\n块或其他更高级别的模块。\n\n> **核心提示：守护线程**\n避免使用 thread 模块的另一个原因是该模块不支持守护线程这个概念。当主线程退出\n时，所有子线程都将终止，不管它们是否仍在工作。如果你不希望发生这种行为，就要引\n入守护线程的概念了。\nthreading 模块支持守护线程，其工作方式是：守护线程一般是一个等待客户端请\n求服务的服务器。如果没有客户端请求，守护线程就是空闲的。如果把一个线程设置\n为守护线程，就表示这个线程是不重要的，进程退出时不需要等待这个线程执行完成。\n如同在第 2 章中看到的那样，服务器线程远行在一个无限循环里，并且在正常情况下\n不会退出。\n如果主线程准备退出时，不需要等待某些子线程完成，就可以为这些子线程设置守护\n线程标记。该标记值为真时，表示该线程是不重要的，或者说该线程只是用来等待客户端\n请求而不做任何其他事情。\n要将一个线程设置为守护线程，需要在启动线程之前执行如下赋值语句：\nthread.daemon = True（调用 thread.setDaemon(True)的旧方法已经弃用了）。同样，要检\n查线程的守护状态，也只需要检查这个值即可（对比过去调用 thread.isDaemon()的方\n法）。一个新的子线程会继承父线程的守护标记。整个 Python 程序（可以解读为：主线\n程）将在所有非守护线程退出之后才退出，换句话说，就是没有剩下存活的非守护线\n程时。\n\n>当所有线程都分配完成之后，通过调用每个线程的 start()方法让它们开始执行，而不是\n在这之前就会执行。相比于管理一组锁（分配、获取、释放、检查锁状态等）而言，这里只\n需要为每个线程调用 join()方法即可。 join()方法将等待线程结束，或者在提供了超时时间的\n情况下，达到超时时间。使用 join()方法要比等待锁释放的无限循环更加清晰（这也是这种锁\n又称为自旋锁的原因）。136 第 1 部分 通用应用主题\n对于 join()方法而言，其另一个重要方面是其实它根本不需要调用。一旦线程启动，它们\n就会一直执行，直到给定的函数完成后退出。如果主线程还有其他事情要去做，而不是等待\n这些线程完成（例如其他处理或者等待新的客户端请求），就可以不调用 join()。 join()方法只\n有在你需要等待线程完成的时候才是有用的。\n\n\n>使用 Thread 类，可以有很多方法来创建线程。我们将介绍其中比较相似的三种方法。选\n择你觉得最舒服的，或者是最适合你的应用和未来扩展的方法（我们更倾向于最后一种方案）。\n• 创建 Thread 的实例，传给它一个函数。\n• 创建 Thread 的实例，传给它一个可调用的类实例。\n• 派生 Thread 的子类，并创建子类的实例。\n你会发现你将选择第一个或第三个方案。当你需要一个更加符合面向对象的接口时，\n会选择后者；否则会选择前者。老实说，你会发现第二种方案显得有些尴尬并且稍微难以\n阅读，以下示例详细介绍：\n\n> 函数形式创建\n\n```python\nimport threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\ndef loop(nloop, nsec):\n    print(\"thread start! :\",nloop , ctime())\n    sleep(nsec)\n    print(\"thread end! :\",nloop , ctime())\n\n\ndef main():\n    print(f\"starting at :{ctime()}\")\n    threads = []\n    for i in range(len(loops)):\n        t = thread.Thread(target=loop, args=(i, loops[i]))\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n    \n    print(\"all done\")\n\nmain()\n```\n\n> 类形式创建\n\n```python\nimport threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\n\nclass MyThread():\n    def __init__(self, func, args, name=''):\n        self.func = func\n        self.args = args\n        self.name = name\n    def __call__(self):\n        self.func(*self.args)\n        \n\ndef loop(nloop, nsec):\n    print(\"thread start! :\",nloop , ctime())\n    sleep(nsec)\n    print(\"thread end! :\",nloop , ctime())\n\n\ndef main():\n    print(f\"starting at :{ctime()}\")\n    threads = []\n    for i in range(len(loops)):\n        t = thread.Thread(target=MyThread(loop,(i,loops[i]),loop.__name__))\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n    \n    print(\"all done\")\n\nmain()\n```\n\n\n> 子类形式创建\n\n```python\nimport threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\n\nclass MyThread(thread.Thread):\n    def __init__(self, func, args, name=''):\n        thread.Thread.__init__(self) #Changed: need to inherit and call parent's init\n        self.func = func\n        self.args = args\n        self.name = name\n\n    def get_result(self):\n        return self.res\n\n    def run(self):\n        print('starting', self.name, 'at: ', ctime())\n        self.res = self.func(*self.args)\n        print('finished', self.name, 'at: ', ctime())\n        \n\ndef loop(nloop, nsec):\n    sleep(nsec)\n\n\ndef main():\n    threads = []\n    for i in range(len(loops)):\n        t = MyThread(loop, (i, loops[i]), loop.__name__+str(i)) #Changed:no need to use threading.Thread() method\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n    \n    print(\"all done\")\n\nmain()\n\n```\n\n> 实例：\n\n```python\n#my_thread.py\nimport threading as thread\nfrom time import ctime\n\nclass MyThread(thread.Thread):\n    def __init__(self, func, args, name=''):\n        thread.Thread.__init__(self)  # Changed: need to inherit and call parent's init\n        self.func = func\n        self.args = args\n        self.name = name\n\n    def get_result(self):\n        return self.res\n\n    def run(self):\n        print('starting', self.name, 'at: ', ctime())\n        self.res = self.func(*self.args)\n        print('finished', self.name, 'at: ', ctime())\n\n```\n\n\n ```python\n #main.py\n from my_thread import MyThread\nfrom time import ctime, sleep\n\n\ndef fib(x):\n    sleep(0.002)\n    if x < 2: return 1\n    return fib(x-2) + fib(x-1)\n\n\ndef fac(x):\n    sleep(0.1)\n    if x < 2: return 1\n    return x * fac(x-1)\n\n\ndef sum(x):\n    sleep(0.2)\n    if x < 2: return 1\n    return x + sum(x-1)\n\n\nfuncs = [fib, fac, sum]\nn = 12\n\ndef main():\n    print(\"****** Single THREAD ********\")\n    for i in range(len(funcs)):\n        print(\"start function %s\" % funcs[i].__name__)\n        print(funcs[i](n))\n        print(\"end function %s\" % funcs[i].__name__)\n\n    threads = []\n    print(\"****** Multi THREAD ********\")\n    for i in range(len(funcs)):\n        t = MyThread(funcs[i], (n,), funcs[i].__name__)\n        threads.append(t)\n\n    for i in range(len(funcs)):\n        threads[i].start()\n\n    for i in range(len(funcs)):\n        threads[i].join()\n        print(threads[i].get_result())\n\n    print(\"all done\")\nmain()\n\n ```\n\n\n","source":"_posts/Python Core Programming Note 3.md","raw":"---\ntitle: Python Core Programming Note 3\ncategories:\n- Python笔记\ntags: \n- Python\n- Core Programming\n- Note\n---\n\n## Multi-thread \n\n### Python 的 threading 模块\nPython 提供了多个模块来支持多线程编程，包括 thread、 threading 和 Queue 模块等。程\n序是可以使用 thread 和 threading 模块来创建与管理线程。 thread 模块提供了基本的线程和锁\n定支持；而 threading 模块提供了更高级别、功能更全面的线程管理。使用 Queue 模块，用户\n可以创建一个队列数据结构，用于在多线程之间进行共享。\n\n> **核心提示：避免使用 thread 模块**\n推荐使用更高级别的 threading 模块，而不使用 thread 模块有很多原因。 threading 模\n块更加先进，有更好的线程支持，并且 thread 模块中的一些属性会和 threading 模块有冲突。\n另一个原因是低级别的 thread 模块拥有的同步原语很少（实际上只有一个），而 threading\n模块则有很多。\n不过，出于对 Python 和线程学习的兴趣，我们将给出使用 thread 模块的一些代码。\n给出这些代码只是出于学习目的，希望它能够让你更好地领悟为什么应该避免使用\nthread 模块。我们还将展示如何使用更加合适的工具，如 threading 和 Queue 模块中的那\n些方法。\n避免使用 thread 模块的另一个原因是它对于进程何时退出没有控制。当主线程结束\n时，所有其他线程也都强制结束，不会发出警告或者进行适当的清理。如前所述，至少\nthreading 模块能确保重要的子线程在进程退出前结束。\n我们只建议那些想访问线程的更底层级别的专家使用 thread 模块。为了强调这一点，\n在 Python3 中该模块被重命名为_thread。你创建的任何多线程应用都应该使用 threading 模\n块或其他更高级别的模块。\n\n> **核心提示：守护线程**\n避免使用 thread 模块的另一个原因是该模块不支持守护线程这个概念。当主线程退出\n时，所有子线程都将终止，不管它们是否仍在工作。如果你不希望发生这种行为，就要引\n入守护线程的概念了。\nthreading 模块支持守护线程，其工作方式是：守护线程一般是一个等待客户端请\n求服务的服务器。如果没有客户端请求，守护线程就是空闲的。如果把一个线程设置\n为守护线程，就表示这个线程是不重要的，进程退出时不需要等待这个线程执行完成。\n如同在第 2 章中看到的那样，服务器线程远行在一个无限循环里，并且在正常情况下\n不会退出。\n如果主线程准备退出时，不需要等待某些子线程完成，就可以为这些子线程设置守护\n线程标记。该标记值为真时，表示该线程是不重要的，或者说该线程只是用来等待客户端\n请求而不做任何其他事情。\n要将一个线程设置为守护线程，需要在启动线程之前执行如下赋值语句：\nthread.daemon = True（调用 thread.setDaemon(True)的旧方法已经弃用了）。同样，要检\n查线程的守护状态，也只需要检查这个值即可（对比过去调用 thread.isDaemon()的方\n法）。一个新的子线程会继承父线程的守护标记。整个 Python 程序（可以解读为：主线\n程）将在所有非守护线程退出之后才退出，换句话说，就是没有剩下存活的非守护线\n程时。\n\n>当所有线程都分配完成之后，通过调用每个线程的 start()方法让它们开始执行，而不是\n在这之前就会执行。相比于管理一组锁（分配、获取、释放、检查锁状态等）而言，这里只\n需要为每个线程调用 join()方法即可。 join()方法将等待线程结束，或者在提供了超时时间的\n情况下，达到超时时间。使用 join()方法要比等待锁释放的无限循环更加清晰（这也是这种锁\n又称为自旋锁的原因）。136 第 1 部分 通用应用主题\n对于 join()方法而言，其另一个重要方面是其实它根本不需要调用。一旦线程启动，它们\n就会一直执行，直到给定的函数完成后退出。如果主线程还有其他事情要去做，而不是等待\n这些线程完成（例如其他处理或者等待新的客户端请求），就可以不调用 join()。 join()方法只\n有在你需要等待线程完成的时候才是有用的。\n\n\n>使用 Thread 类，可以有很多方法来创建线程。我们将介绍其中比较相似的三种方法。选\n择你觉得最舒服的，或者是最适合你的应用和未来扩展的方法（我们更倾向于最后一种方案）。\n• 创建 Thread 的实例，传给它一个函数。\n• 创建 Thread 的实例，传给它一个可调用的类实例。\n• 派生 Thread 的子类，并创建子类的实例。\n你会发现你将选择第一个或第三个方案。当你需要一个更加符合面向对象的接口时，\n会选择后者；否则会选择前者。老实说，你会发现第二种方案显得有些尴尬并且稍微难以\n阅读，以下示例详细介绍：\n\n> 函数形式创建\n\n```python\nimport threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\ndef loop(nloop, nsec):\n    print(\"thread start! :\",nloop , ctime())\n    sleep(nsec)\n    print(\"thread end! :\",nloop , ctime())\n\n\ndef main():\n    print(f\"starting at :{ctime()}\")\n    threads = []\n    for i in range(len(loops)):\n        t = thread.Thread(target=loop, args=(i, loops[i]))\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n    \n    print(\"all done\")\n\nmain()\n```\n\n> 类形式创建\n\n```python\nimport threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\n\nclass MyThread():\n    def __init__(self, func, args, name=''):\n        self.func = func\n        self.args = args\n        self.name = name\n    def __call__(self):\n        self.func(*self.args)\n        \n\ndef loop(nloop, nsec):\n    print(\"thread start! :\",nloop , ctime())\n    sleep(nsec)\n    print(\"thread end! :\",nloop , ctime())\n\n\ndef main():\n    print(f\"starting at :{ctime()}\")\n    threads = []\n    for i in range(len(loops)):\n        t = thread.Thread(target=MyThread(loop,(i,loops[i]),loop.__name__))\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n    \n    print(\"all done\")\n\nmain()\n```\n\n\n> 子类形式创建\n\n```python\nimport threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\n\nclass MyThread(thread.Thread):\n    def __init__(self, func, args, name=''):\n        thread.Thread.__init__(self) #Changed: need to inherit and call parent's init\n        self.func = func\n        self.args = args\n        self.name = name\n\n    def get_result(self):\n        return self.res\n\n    def run(self):\n        print('starting', self.name, 'at: ', ctime())\n        self.res = self.func(*self.args)\n        print('finished', self.name, 'at: ', ctime())\n        \n\ndef loop(nloop, nsec):\n    sleep(nsec)\n\n\ndef main():\n    threads = []\n    for i in range(len(loops)):\n        t = MyThread(loop, (i, loops[i]), loop.__name__+str(i)) #Changed:no need to use threading.Thread() method\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n    \n    print(\"all done\")\n\nmain()\n\n```\n\n> 实例：\n\n```python\n#my_thread.py\nimport threading as thread\nfrom time import ctime\n\nclass MyThread(thread.Thread):\n    def __init__(self, func, args, name=''):\n        thread.Thread.__init__(self)  # Changed: need to inherit and call parent's init\n        self.func = func\n        self.args = args\n        self.name = name\n\n    def get_result(self):\n        return self.res\n\n    def run(self):\n        print('starting', self.name, 'at: ', ctime())\n        self.res = self.func(*self.args)\n        print('finished', self.name, 'at: ', ctime())\n\n```\n\n\n ```python\n #main.py\n from my_thread import MyThread\nfrom time import ctime, sleep\n\n\ndef fib(x):\n    sleep(0.002)\n    if x < 2: return 1\n    return fib(x-2) + fib(x-1)\n\n\ndef fac(x):\n    sleep(0.1)\n    if x < 2: return 1\n    return x * fac(x-1)\n\n\ndef sum(x):\n    sleep(0.2)\n    if x < 2: return 1\n    return x + sum(x-1)\n\n\nfuncs = [fib, fac, sum]\nn = 12\n\ndef main():\n    print(\"****** Single THREAD ********\")\n    for i in range(len(funcs)):\n        print(\"start function %s\" % funcs[i].__name__)\n        print(funcs[i](n))\n        print(\"end function %s\" % funcs[i].__name__)\n\n    threads = []\n    print(\"****** Multi THREAD ********\")\n    for i in range(len(funcs)):\n        t = MyThread(funcs[i], (n,), funcs[i].__name__)\n        threads.append(t)\n\n    for i in range(len(funcs)):\n        threads[i].start()\n\n    for i in range(len(funcs)):\n        threads[i].join()\n        print(threads[i].get_result())\n\n    print(\"all done\")\nmain()\n\n ```\n\n\n","slug":"Python Core Programming Note 3","published":1,"date":"2019-11-25T03:25:48.221Z","updated":"2019-11-25T03:25:48.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjsah004vekuw7tkv1axn","content":"<h2 id=\"Multi-thread\"><a href=\"#Multi-thread\" class=\"headerlink\" title=\"Multi-thread\"></a>Multi-thread</h2><h3 id=\"Python-的-threading-模块\"><a href=\"#Python-的-threading-模块\" class=\"headerlink\" title=\"Python 的 threading 模块\"></a>Python 的 threading 模块</h3><p>Python 提供了多个模块来支持多线程编程，包括 thread、 threading 和 Queue 模块等。程<br>序是可以使用 thread 和 threading 模块来创建与管理线程。 thread 模块提供了基本的线程和锁<br>定支持；而 threading 模块提供了更高级别、功能更全面的线程管理。使用 Queue 模块，用户<br>可以创建一个队列数据结构，用于在多线程之间进行共享。</p>\n<blockquote>\n<p><strong>核心提示：避免使用 thread 模块</strong><br>推荐使用更高级别的 threading 模块，而不使用 thread 模块有很多原因。 threading 模<br>块更加先进，有更好的线程支持，并且 thread 模块中的一些属性会和 threading 模块有冲突。<br>另一个原因是低级别的 thread 模块拥有的同步原语很少（实际上只有一个），而 threading<br>模块则有很多。<br>不过，出于对 Python 和线程学习的兴趣，我们将给出使用 thread 模块的一些代码。<br>给出这些代码只是出于学习目的，希望它能够让你更好地领悟为什么应该避免使用<br>thread 模块。我们还将展示如何使用更加合适的工具，如 threading 和 Queue 模块中的那<br>些方法。<br>避免使用 thread 模块的另一个原因是它对于进程何时退出没有控制。当主线程结束<br>时，所有其他线程也都强制结束，不会发出警告或者进行适当的清理。如前所述，至少<br>threading 模块能确保重要的子线程在进程退出前结束。<br>我们只建议那些想访问线程的更底层级别的专家使用 thread 模块。为了强调这一点，<br>在 Python3 中该模块被重命名为_thread。你创建的任何多线程应用都应该使用 threading 模<br>块或其他更高级别的模块。</p>\n</blockquote>\n<blockquote>\n<p><strong>核心提示：守护线程</strong><br>避免使用 thread 模块的另一个原因是该模块不支持守护线程这个概念。当主线程退出<br>时，所有子线程都将终止，不管它们是否仍在工作。如果你不希望发生这种行为，就要引<br>入守护线程的概念了。<br>threading 模块支持守护线程，其工作方式是：守护线程一般是一个等待客户端请<br>求服务的服务器。如果没有客户端请求，守护线程就是空闲的。如果把一个线程设置<br>为守护线程，就表示这个线程是不重要的，进程退出时不需要等待这个线程执行完成。<br>如同在第 2 章中看到的那样，服务器线程远行在一个无限循环里，并且在正常情况下<br>不会退出。<br>如果主线程准备退出时，不需要等待某些子线程完成，就可以为这些子线程设置守护<br>线程标记。该标记值为真时，表示该线程是不重要的，或者说该线程只是用来等待客户端<br>请求而不做任何其他事情。<br>要将一个线程设置为守护线程，需要在启动线程之前执行如下赋值语句：<br>thread.daemon = True（调用 thread.setDaemon(True)的旧方法已经弃用了）。同样，要检<br>查线程的守护状态，也只需要检查这个值即可（对比过去调用 thread.isDaemon()的方<br>法）。一个新的子线程会继承父线程的守护标记。整个 Python 程序（可以解读为：主线<br>程）将在所有非守护线程退出之后才退出，换句话说，就是没有剩下存活的非守护线<br>程时。</p>\n</blockquote>\n<blockquote>\n<p>当所有线程都分配完成之后，通过调用每个线程的 start()方法让它们开始执行，而不是<br>在这之前就会执行。相比于管理一组锁（分配、获取、释放、检查锁状态等）而言，这里只<br>需要为每个线程调用 join()方法即可。 join()方法将等待线程结束，或者在提供了超时时间的<br>情况下，达到超时时间。使用 join()方法要比等待锁释放的无限循环更加清晰（这也是这种锁<br>又称为自旋锁的原因）。136 第 1 部分 通用应用主题<br>对于 join()方法而言，其另一个重要方面是其实它根本不需要调用。一旦线程启动，它们<br>就会一直执行，直到给定的函数完成后退出。如果主线程还有其他事情要去做，而不是等待<br>这些线程完成（例如其他处理或者等待新的客户端请求），就可以不调用 join()。 join()方法只<br>有在你需要等待线程完成的时候才是有用的。</p>\n</blockquote>\n<blockquote>\n<p>使用 Thread 类，可以有很多方法来创建线程。我们将介绍其中比较相似的三种方法。选<br>择你觉得最舒服的，或者是最适合你的应用和未来扩展的方法（我们更倾向于最后一种方案）。<br>• 创建 Thread 的实例，传给它一个函数。<br>• 创建 Thread 的实例，传给它一个可调用的类实例。<br>• 派生 Thread 的子类，并创建子类的实例。<br>你会发现你将选择第一个或第三个方案。当你需要一个更加符合面向对象的接口时，<br>会选择后者；否则会选择前者。老实说，你会发现第二种方案显得有些尴尬并且稍微难以<br>阅读，以下示例详细介绍：</p>\n</blockquote>\n<blockquote>\n<p>函数形式创建</p>\n</blockquote>\n<pre><code class=\"python\">import threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\ndef loop(nloop, nsec):\n    print(&quot;thread start! :&quot;,nloop , ctime())\n    sleep(nsec)\n    print(&quot;thread end! :&quot;,nloop , ctime())\n\n\ndef main():\n    print(f&quot;starting at :{ctime()}&quot;)\n    threads = []\n    for i in range(len(loops)):\n        t = thread.Thread(target=loop, args=(i, loops[i]))\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n\n    print(&quot;all done&quot;)\n\nmain()</code></pre>\n<blockquote>\n<p>类形式创建</p>\n</blockquote>\n<pre><code class=\"python\">import threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\n\nclass MyThread():\n    def __init__(self, func, args, name=&#39;&#39;):\n        self.func = func\n        self.args = args\n        self.name = name\n    def __call__(self):\n        self.func(*self.args)\n\n\ndef loop(nloop, nsec):\n    print(&quot;thread start! :&quot;,nloop , ctime())\n    sleep(nsec)\n    print(&quot;thread end! :&quot;,nloop , ctime())\n\n\ndef main():\n    print(f&quot;starting at :{ctime()}&quot;)\n    threads = []\n    for i in range(len(loops)):\n        t = thread.Thread(target=MyThread(loop,(i,loops[i]),loop.__name__))\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n\n    print(&quot;all done&quot;)\n\nmain()</code></pre>\n<blockquote>\n<p>子类形式创建</p>\n</blockquote>\n<pre><code class=\"python\">import threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\n\nclass MyThread(thread.Thread):\n    def __init__(self, func, args, name=&#39;&#39;):\n        thread.Thread.__init__(self) #Changed: need to inherit and call parent&#39;s init\n        self.func = func\n        self.args = args\n        self.name = name\n\n    def get_result(self):\n        return self.res\n\n    def run(self):\n        print(&#39;starting&#39;, self.name, &#39;at: &#39;, ctime())\n        self.res = self.func(*self.args)\n        print(&#39;finished&#39;, self.name, &#39;at: &#39;, ctime())\n\n\ndef loop(nloop, nsec):\n    sleep(nsec)\n\n\ndef main():\n    threads = []\n    for i in range(len(loops)):\n        t = MyThread(loop, (i, loops[i]), loop.__name__+str(i)) #Changed:no need to use threading.Thread() method\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n\n    print(&quot;all done&quot;)\n\nmain()\n</code></pre>\n<blockquote>\n<p>实例：</p>\n</blockquote>\n<pre><code class=\"python\">#my_thread.py\nimport threading as thread\nfrom time import ctime\n\nclass MyThread(thread.Thread):\n    def __init__(self, func, args, name=&#39;&#39;):\n        thread.Thread.__init__(self)  # Changed: need to inherit and call parent&#39;s init\n        self.func = func\n        self.args = args\n        self.name = name\n\n    def get_result(self):\n        return self.res\n\n    def run(self):\n        print(&#39;starting&#39;, self.name, &#39;at: &#39;, ctime())\n        self.res = self.func(*self.args)\n        print(&#39;finished&#39;, self.name, &#39;at: &#39;, ctime())\n</code></pre>\n<pre><code class=\"python\"> #main.py\n from my_thread import MyThread\nfrom time import ctime, sleep\n\n\ndef fib(x):\n    sleep(0.002)\n    if x &lt; 2: return 1\n    return fib(x-2) + fib(x-1)\n\n\ndef fac(x):\n    sleep(0.1)\n    if x &lt; 2: return 1\n    return x * fac(x-1)\n\n\ndef sum(x):\n    sleep(0.2)\n    if x &lt; 2: return 1\n    return x + sum(x-1)\n\n\nfuncs = [fib, fac, sum]\nn = 12\n\ndef main():\n    print(&quot;****** Single THREAD ********&quot;)\n    for i in range(len(funcs)):\n        print(&quot;start function %s&quot; % funcs[i].__name__)\n        print(funcs[i](n))\n        print(&quot;end function %s&quot; % funcs[i].__name__)\n\n    threads = []\n    print(&quot;****** Multi THREAD ********&quot;)\n    for i in range(len(funcs)):\n        t = MyThread(funcs[i], (n,), funcs[i].__name__)\n        threads.append(t)\n\n    for i in range(len(funcs)):\n        threads[i].start()\n\n    for i in range(len(funcs)):\n        threads[i].join()\n        print(threads[i].get_result())\n\n    print(&quot;all done&quot;)\nmain()\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Multi-thread\"><a href=\"#Multi-thread\" class=\"headerlink\" title=\"Multi-thread\"></a>Multi-thread</h2><h3 id=\"Python-的-threading-模块\"><a href=\"#Python-的-threading-模块\" class=\"headerlink\" title=\"Python 的 threading 模块\"></a>Python 的 threading 模块</h3><p>Python 提供了多个模块来支持多线程编程，包括 thread、 threading 和 Queue 模块等。程<br>序是可以使用 thread 和 threading 模块来创建与管理线程。 thread 模块提供了基本的线程和锁<br>定支持；而 threading 模块提供了更高级别、功能更全面的线程管理。使用 Queue 模块，用户<br>可以创建一个队列数据结构，用于在多线程之间进行共享。</p>\n<blockquote>\n<p><strong>核心提示：避免使用 thread 模块</strong><br>推荐使用更高级别的 threading 模块，而不使用 thread 模块有很多原因。 threading 模<br>块更加先进，有更好的线程支持，并且 thread 模块中的一些属性会和 threading 模块有冲突。<br>另一个原因是低级别的 thread 模块拥有的同步原语很少（实际上只有一个），而 threading<br>模块则有很多。<br>不过，出于对 Python 和线程学习的兴趣，我们将给出使用 thread 模块的一些代码。<br>给出这些代码只是出于学习目的，希望它能够让你更好地领悟为什么应该避免使用<br>thread 模块。我们还将展示如何使用更加合适的工具，如 threading 和 Queue 模块中的那<br>些方法。<br>避免使用 thread 模块的另一个原因是它对于进程何时退出没有控制。当主线程结束<br>时，所有其他线程也都强制结束，不会发出警告或者进行适当的清理。如前所述，至少<br>threading 模块能确保重要的子线程在进程退出前结束。<br>我们只建议那些想访问线程的更底层级别的专家使用 thread 模块。为了强调这一点，<br>在 Python3 中该模块被重命名为_thread。你创建的任何多线程应用都应该使用 threading 模<br>块或其他更高级别的模块。</p>\n</blockquote>\n<blockquote>\n<p><strong>核心提示：守护线程</strong><br>避免使用 thread 模块的另一个原因是该模块不支持守护线程这个概念。当主线程退出<br>时，所有子线程都将终止，不管它们是否仍在工作。如果你不希望发生这种行为，就要引<br>入守护线程的概念了。<br>threading 模块支持守护线程，其工作方式是：守护线程一般是一个等待客户端请<br>求服务的服务器。如果没有客户端请求，守护线程就是空闲的。如果把一个线程设置<br>为守护线程，就表示这个线程是不重要的，进程退出时不需要等待这个线程执行完成。<br>如同在第 2 章中看到的那样，服务器线程远行在一个无限循环里，并且在正常情况下<br>不会退出。<br>如果主线程准备退出时，不需要等待某些子线程完成，就可以为这些子线程设置守护<br>线程标记。该标记值为真时，表示该线程是不重要的，或者说该线程只是用来等待客户端<br>请求而不做任何其他事情。<br>要将一个线程设置为守护线程，需要在启动线程之前执行如下赋值语句：<br>thread.daemon = True（调用 thread.setDaemon(True)的旧方法已经弃用了）。同样，要检<br>查线程的守护状态，也只需要检查这个值即可（对比过去调用 thread.isDaemon()的方<br>法）。一个新的子线程会继承父线程的守护标记。整个 Python 程序（可以解读为：主线<br>程）将在所有非守护线程退出之后才退出，换句话说，就是没有剩下存活的非守护线<br>程时。</p>\n</blockquote>\n<blockquote>\n<p>当所有线程都分配完成之后，通过调用每个线程的 start()方法让它们开始执行，而不是<br>在这之前就会执行。相比于管理一组锁（分配、获取、释放、检查锁状态等）而言，这里只<br>需要为每个线程调用 join()方法即可。 join()方法将等待线程结束，或者在提供了超时时间的<br>情况下，达到超时时间。使用 join()方法要比等待锁释放的无限循环更加清晰（这也是这种锁<br>又称为自旋锁的原因）。136 第 1 部分 通用应用主题<br>对于 join()方法而言，其另一个重要方面是其实它根本不需要调用。一旦线程启动，它们<br>就会一直执行，直到给定的函数完成后退出。如果主线程还有其他事情要去做，而不是等待<br>这些线程完成（例如其他处理或者等待新的客户端请求），就可以不调用 join()。 join()方法只<br>有在你需要等待线程完成的时候才是有用的。</p>\n</blockquote>\n<blockquote>\n<p>使用 Thread 类，可以有很多方法来创建线程。我们将介绍其中比较相似的三种方法。选<br>择你觉得最舒服的，或者是最适合你的应用和未来扩展的方法（我们更倾向于最后一种方案）。<br>• 创建 Thread 的实例，传给它一个函数。<br>• 创建 Thread 的实例，传给它一个可调用的类实例。<br>• 派生 Thread 的子类，并创建子类的实例。<br>你会发现你将选择第一个或第三个方案。当你需要一个更加符合面向对象的接口时，<br>会选择后者；否则会选择前者。老实说，你会发现第二种方案显得有些尴尬并且稍微难以<br>阅读，以下示例详细介绍：</p>\n</blockquote>\n<blockquote>\n<p>函数形式创建</p>\n</blockquote>\n<pre><code class=\"python\">import threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\ndef loop(nloop, nsec):\n    print(&quot;thread start! :&quot;,nloop , ctime())\n    sleep(nsec)\n    print(&quot;thread end! :&quot;,nloop , ctime())\n\n\ndef main():\n    print(f&quot;starting at :{ctime()}&quot;)\n    threads = []\n    for i in range(len(loops)):\n        t = thread.Thread(target=loop, args=(i, loops[i]))\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n\n    print(&quot;all done&quot;)\n\nmain()</code></pre>\n<blockquote>\n<p>类形式创建</p>\n</blockquote>\n<pre><code class=\"python\">import threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\n\nclass MyThread():\n    def __init__(self, func, args, name=&#39;&#39;):\n        self.func = func\n        self.args = args\n        self.name = name\n    def __call__(self):\n        self.func(*self.args)\n\n\ndef loop(nloop, nsec):\n    print(&quot;thread start! :&quot;,nloop , ctime())\n    sleep(nsec)\n    print(&quot;thread end! :&quot;,nloop , ctime())\n\n\ndef main():\n    print(f&quot;starting at :{ctime()}&quot;)\n    threads = []\n    for i in range(len(loops)):\n        t = thread.Thread(target=MyThread(loop,(i,loops[i]),loop.__name__))\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n\n    print(&quot;all done&quot;)\n\nmain()</code></pre>\n<blockquote>\n<p>子类形式创建</p>\n</blockquote>\n<pre><code class=\"python\">import threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\n\nclass MyThread(thread.Thread):\n    def __init__(self, func, args, name=&#39;&#39;):\n        thread.Thread.__init__(self) #Changed: need to inherit and call parent&#39;s init\n        self.func = func\n        self.args = args\n        self.name = name\n\n    def get_result(self):\n        return self.res\n\n    def run(self):\n        print(&#39;starting&#39;, self.name, &#39;at: &#39;, ctime())\n        self.res = self.func(*self.args)\n        print(&#39;finished&#39;, self.name, &#39;at: &#39;, ctime())\n\n\ndef loop(nloop, nsec):\n    sleep(nsec)\n\n\ndef main():\n    threads = []\n    for i in range(len(loops)):\n        t = MyThread(loop, (i, loops[i]), loop.__name__+str(i)) #Changed:no need to use threading.Thread() method\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n\n    print(&quot;all done&quot;)\n\nmain()\n</code></pre>\n<blockquote>\n<p>实例：</p>\n</blockquote>\n<pre><code class=\"python\">#my_thread.py\nimport threading as thread\nfrom time import ctime\n\nclass MyThread(thread.Thread):\n    def __init__(self, func, args, name=&#39;&#39;):\n        thread.Thread.__init__(self)  # Changed: need to inherit and call parent&#39;s init\n        self.func = func\n        self.args = args\n        self.name = name\n\n    def get_result(self):\n        return self.res\n\n    def run(self):\n        print(&#39;starting&#39;, self.name, &#39;at: &#39;, ctime())\n        self.res = self.func(*self.args)\n        print(&#39;finished&#39;, self.name, &#39;at: &#39;, ctime())\n</code></pre>\n<pre><code class=\"python\"> #main.py\n from my_thread import MyThread\nfrom time import ctime, sleep\n\n\ndef fib(x):\n    sleep(0.002)\n    if x &lt; 2: return 1\n    return fib(x-2) + fib(x-1)\n\n\ndef fac(x):\n    sleep(0.1)\n    if x &lt; 2: return 1\n    return x * fac(x-1)\n\n\ndef sum(x):\n    sleep(0.2)\n    if x &lt; 2: return 1\n    return x + sum(x-1)\n\n\nfuncs = [fib, fac, sum]\nn = 12\n\ndef main():\n    print(&quot;****** Single THREAD ********&quot;)\n    for i in range(len(funcs)):\n        print(&quot;start function %s&quot; % funcs[i].__name__)\n        print(funcs[i](n))\n        print(&quot;end function %s&quot; % funcs[i].__name__)\n\n    threads = []\n    print(&quot;****** Multi THREAD ********&quot;)\n    for i in range(len(funcs)):\n        t = MyThread(funcs[i], (n,), funcs[i].__name__)\n        threads.append(t)\n\n    for i in range(len(funcs)):\n        threads[i].start()\n\n    for i in range(len(funcs)):\n        threads[i].join()\n        print(threads[i].get_result())\n\n    print(&quot;all done&quot;)\nmain()\n</code></pre>\n"},{"title":"天天生鲜项目实例","_content":"\n## 相关背景概念\n\n> B2B, O2O, B2C, C2C..\n\n## 数据库设计\n![enter description here](./images/1573441070020.png)\n\n> 对数据库进行授权\n> ![enter description here](./images/1573442010455.png)\n\n> 使用后台管理\n>![enter description here](./images/1573442404015.png)\n\n\n## 项目搭建\n\n**1.一个模块对应一个APP**\n**2.将所有app归类到一个apps文件夹**\n**3.\\[可选\\]  设置一个系统路径，这样就不用注册APP时添加前缀文件夹**\n\t\n``` python\nsys.path.insert(0, os.path.join(BASE_DIR, 'apps'))\n```\n\n**4.添加templates包和static包**\n>TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')\n>TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [TEMPLATES_DIR],\n\t\t...\n> STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n\n**5.添加templates和static路径到setting**\n\n**6.配置数据库为Mysql**\n\n>   'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'dailyfresh',\n        'USER': 'root',\n        'PASSWORD':'bk102435',\n        'HOST':'39.97.170.176',\n        'PORT':3306,\n\t\n**7.设置语言**\n\n```python\nLANGUAGE_CODE = 'zh-hans'\nTIME_ZONE = 'Asia/Shanghai'\n```\n\n**8.配置项目总的urls**\n**9.为各应用创建urls**\n\n**10.数据层准备，创建db包，创建basemodel.py**\n\n**11.\\[可选\\]创建各models 或 链接现有数据库**\n\n> Inpectdb 也可针对某张表：\n> python manage.py inspectdb TableName > output.py\n> 链接： https://www.jianshu.com/p/037bd7e20a7a\n\n**12.指定django认证系统的模型**\n这样superuser的模型表就被指定到自己的user表\n> settings.py中加入 \n> AUTH_USER_MODEL = ‘user.User’\n\n###  13.  可能出现的问题\n不确定是不是使用pymysql导致的，这里会有两个问题\n*  1.现在django使用mysqlclient，而且恶心的是会在启动时自动验证版本号，pymysql最高只到0.9.3。这里根据报错直接那代码注释即可！\n*  2.makemigration出错，提示在django代码里的operations.py中的last_executed_query函数，由于python3与Python2的decode与encode函数区别，这里也需要把.decode..去掉。\n\n\n\n\n## User模块 - 注册\n\n**1.准备views函数**\n* views.py添加相应函数\nregister函数为接收跳转网页, register_handler函数接收处理及逻辑\n\n```python\ndef register():\n\tpass\ndef register_handle():\n\tpass\n```\n\n* urls.py配置对应view函数路径\n\n```python\npath('register',views.register,name='register')\npath('register_handle',views.register_handle,name='register_handle')\n```\n\n\n**2.templates里放入html信息**\n\n* 编辑表单\\<form\\>\n\t添加method,action.\n\t写法升级：\n\n```python\naction=\"{% url 'user:detail' %}\" \n```\n\n旧的写法:\n\n```python\naction = \"/user/register_handle\"\n```\n\n> 注意事项：\n> 1. 网页使用跳转，需要在urls.py中指定name:\n> 如下：所对应的地址段需要设置不同的正则\n> \n> ```python\n> path('add/', calc_views.add, name='add'),  # new\n> path('add/<int:a>/<int:b>/', calc_views.old_add2_redirect,name='add'),\n> ```\n> 2.使用shell, 用reverse测试\n> 地址反射的机制：django.urls reverse\n> 3.定义一个跳转函数来做：\n> \n> ```python\n> urls.py中加入如下：\n>  path('add/<int:a>/<int:b>/', calc_views.old_add2_redirect,name='add'),\n> path('new_add/<int:a>/<int:b>/', calc_views.add2, name='add2'),\n>\n> views.py中加入如下：\n> def old_add2_redirect(request):\n> return HttpResponseRedirect(\n>        reverse('add2', args=(a, b))\n>    )\n> 测试网址： http://127.0.0.1:8000/add/5/6/ \n> 这时最终就将跳到美术http://127.0.0.1:8000/new_add/5/6/\n> ```\n\n\n\t\n**3.使用类视图**\n\n> 1.优化去register_handle函数，使用get/post判断实现不同的跳转类型\n> 2.基于1的优化，使用类视图方式加载\n\n```python\nfrom django.views.generic import View\n\nclass RegisterView(View):\n\n    def get(self, request):\n        pass\n\n    def post(self, request):\n\t\tpass\n```\n\n**3.激活用户**\n\n1. 使用itsdangerous为网址进行加密签名\n2. 调用django.core.mail 的send_mail来发送邮件，把链接成文本发送过去\n\n```python\nfrom django.conf import settings\nfrom django.core.mail import send_mail\nimport time\n\ndef send_register_active_email(to_email, username, token):\n    '''send active email'''\n    subject = \"天天生鲜欢迎消息\"\n    message = \"\"\n    sender = settings.DEFAULT_FROM_EMAIL\n    receiver = [to_email]\n    html_message = \"<h1>%s, 欢迎你</h1>请点击下面链接激活<br/><a href=\\\"http://127.0.0.1:8000/user/active/%s\\\">http://127.0.0.1:8000/user/active/%s</a>\" % (\n    username, token, token)\n    send_mail(subject, message, sender, receiver, html_message=html_message)\n    time.sleep(5)\n```\n>也可使用Python的发email库\n\n>```python\n>  def active_email(self, email_addr, active_code):\n>      # 第三方 SMTP 服务 # 授权码：cmatkgceuuxcbddc\n>      mail_host = \"smtp.qq.com\"  # 设置服务器\n>      mail_user = \"1024037035@qq.com\"  # 用户名\n>      mail_pass = \"cmatkgceuuxcbddc\"  # 口令\n>      sender = '1024037035@qq.com'\n>      receivers = [email_addr]  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n >       # 三个参数：第一个为文本内容，第二个 plain 设置文本格式，第三个 utf-8 设置编码\n>      try:\n>          smtp_obj = smtplib.SMTP()\n>          smtp_obj.connect(mail_host, 25)  # 25 为 SMTP 端口号\n>          smtp_obj.login(mail_user, mail_pass)\n>          smtp_obj.sendmail(sender, receivers, message.as_string())\n>          return True\n>          \"邮件发送成功\"\n>      except smtplib.SMTPException:\n >           return False\n>            \"Error: 无法发送邮件\"\n>```\n\n3. 在Url中配置激活的功能\n\n```python\npath('active/<token>',ActiveView.as_view(), name='active'),\n```\n\n4. 在views.py中写一个ActiveView的视图来处理激活\n \n```python\nclass ActiveView(View):\n    def get(self, request, token):\n        try:\n            serializer = Serializer(settings.SECRET_KEY, 3600)\n            # print(type(token))\n            token = token.encode()\n            info = serializer.loads(token)\n            user_id = info['confirm']\n            user = User.objects.get(id=user_id)\n            user.is_active = 1\n            user.save()\n\n            # 跳转到登陆页面\n            return redirect(reverse('user:login'))\n        except SignatureExpired as e:\n            # 激活链接过期\n            return HttpResponse('激活链接已过期')\n```\n\n\n**4.使用celery做为异步处理**\n\n![enter description here](./images/1574171584470.png)\n\n1.配置一个项目目录为：celery_tasks/tasks.py的文件\n2.在tasks.py写入配置如 \n\n```python\n# use celery\nfrom celery import Celery\n# create celery instance\napp = Celery('celery_tasks.tasks', broker='redis://:pwd@39.97.170.176:6379/8')\n\n# define task function\n@app.task\ndef send_register_active_email(to_email, username, token):\n\tpass\n```\n3.执行的脚本函数里写入：\n\n```python\n        # 发送邮件1\n        send_register_active_email.delay(email, username, secret_info)\n```\n\n4.在有redis的电脑上\n\n* 复制项目代码\n* 在tasks.py中加入初始化django的代码\n* \n```python\nimport os\nimport django\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dailyfresh.settings')\ndjango.setup()\n```\n* 启动worker\n\n```\ncelery -A celery_tasks.tasks worker -l info\n```\n* 启动redis , 大功告成，测试\n\n> 可能出现的问题\n> 在windows系统中：\n>  使用这种方式来启动worker: pip install eventlet -> celery -A your_app_name worker --pool=eventlet\n>  或： celery -A your_app_name worker --pool=solo -l info\n>  或：\n>  at worker side:\nset FORKED_BY_MULTIPROCESSING = 1\nthen\ncelery -A myworker worker --loglevel=info\n\n## User模块 - 登录\n\n**LoginView，使用自带的授权**\n\n授权，如果成功则会返回user对象：：\n\n```\nuser = authenticate(username=username, password=pwd)\n```\n\n登录：\n\n```python\nlogin(request, user)\n```\n\n添加URL及表单部分，参考注册流程\n\n**为减少数据库操作，使用redis存储**\n\n1.安装 django-redis\n2.settings加入如下配置即可：\n\n```python\n#Django 缓存配置\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": \"redis://127.0.0.1:6379/9\", #服务器地址\n        \"OPTIONS\": {\n            \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n            \"CONNECTION_POOL_KWARGS\": {\"max_connections\": 100}, # 最大连接数\n            \"PASSWORD\": \"bk102435\",\n        }\n    }\n}\n#配置session存储\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'\nSESSION_CACHE_ALIAS = 'default'\n```\n\n**把用户名记在cookie**\n\n1.登录成功时，把username字段存在cookie中\n\n```python\nresponse = redirect(reverse('goods:index'))\nremember = request.POST.get('remember')\n\nif remember == 'on':\n\tresponse.set_cookie('username', username, max_age=7*24*3600)\nelse:\n\tresponse.delete_cookie('username')\n```\n\n2.get方法中取出cookie数据\n\n```\nif 'username' in request.COOKIES:\n\tusername = request.COOKIES.get('username')\n\tchecked = 'checked'\nelse:\n\tusername = ''\n\tchecked = ''\nreturn render(request, 'login.html', {'username':username, 'checked':checked})\n```\n","source":"_posts/天天生鲜项目实例.md","raw":"---\ntitle: 天天生鲜项目实例\ncategories:\n- Python Web\ntags: \n- Python\n- Note\n- Django\n- 实例\n---\n\n## 相关背景概念\n\n> B2B, O2O, B2C, C2C..\n\n## 数据库设计\n![enter description here](./images/1573441070020.png)\n\n> 对数据库进行授权\n> ![enter description here](./images/1573442010455.png)\n\n> 使用后台管理\n>![enter description here](./images/1573442404015.png)\n\n\n## 项目搭建\n\n**1.一个模块对应一个APP**\n**2.将所有app归类到一个apps文件夹**\n**3.\\[可选\\]  设置一个系统路径，这样就不用注册APP时添加前缀文件夹**\n\t\n``` python\nsys.path.insert(0, os.path.join(BASE_DIR, 'apps'))\n```\n\n**4.添加templates包和static包**\n>TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')\n>TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [TEMPLATES_DIR],\n\t\t...\n> STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n\n**5.添加templates和static路径到setting**\n\n**6.配置数据库为Mysql**\n\n>   'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'dailyfresh',\n        'USER': 'root',\n        'PASSWORD':'bk102435',\n        'HOST':'39.97.170.176',\n        'PORT':3306,\n\t\n**7.设置语言**\n\n```python\nLANGUAGE_CODE = 'zh-hans'\nTIME_ZONE = 'Asia/Shanghai'\n```\n\n**8.配置项目总的urls**\n**9.为各应用创建urls**\n\n**10.数据层准备，创建db包，创建basemodel.py**\n\n**11.\\[可选\\]创建各models 或 链接现有数据库**\n\n> Inpectdb 也可针对某张表：\n> python manage.py inspectdb TableName > output.py\n> 链接： https://www.jianshu.com/p/037bd7e20a7a\n\n**12.指定django认证系统的模型**\n这样superuser的模型表就被指定到自己的user表\n> settings.py中加入 \n> AUTH_USER_MODEL = ‘user.User’\n\n###  13.  可能出现的问题\n不确定是不是使用pymysql导致的，这里会有两个问题\n*  1.现在django使用mysqlclient，而且恶心的是会在启动时自动验证版本号，pymysql最高只到0.9.3。这里根据报错直接那代码注释即可！\n*  2.makemigration出错，提示在django代码里的operations.py中的last_executed_query函数，由于python3与Python2的decode与encode函数区别，这里也需要把.decode..去掉。\n\n\n\n\n## User模块 - 注册\n\n**1.准备views函数**\n* views.py添加相应函数\nregister函数为接收跳转网页, register_handler函数接收处理及逻辑\n\n```python\ndef register():\n\tpass\ndef register_handle():\n\tpass\n```\n\n* urls.py配置对应view函数路径\n\n```python\npath('register',views.register,name='register')\npath('register_handle',views.register_handle,name='register_handle')\n```\n\n\n**2.templates里放入html信息**\n\n* 编辑表单\\<form\\>\n\t添加method,action.\n\t写法升级：\n\n```python\naction=\"{% url 'user:detail' %}\" \n```\n\n旧的写法:\n\n```python\naction = \"/user/register_handle\"\n```\n\n> 注意事项：\n> 1. 网页使用跳转，需要在urls.py中指定name:\n> 如下：所对应的地址段需要设置不同的正则\n> \n> ```python\n> path('add/', calc_views.add, name='add'),  # new\n> path('add/<int:a>/<int:b>/', calc_views.old_add2_redirect,name='add'),\n> ```\n> 2.使用shell, 用reverse测试\n> 地址反射的机制：django.urls reverse\n> 3.定义一个跳转函数来做：\n> \n> ```python\n> urls.py中加入如下：\n>  path('add/<int:a>/<int:b>/', calc_views.old_add2_redirect,name='add'),\n> path('new_add/<int:a>/<int:b>/', calc_views.add2, name='add2'),\n>\n> views.py中加入如下：\n> def old_add2_redirect(request):\n> return HttpResponseRedirect(\n>        reverse('add2', args=(a, b))\n>    )\n> 测试网址： http://127.0.0.1:8000/add/5/6/ \n> 这时最终就将跳到美术http://127.0.0.1:8000/new_add/5/6/\n> ```\n\n\n\t\n**3.使用类视图**\n\n> 1.优化去register_handle函数，使用get/post判断实现不同的跳转类型\n> 2.基于1的优化，使用类视图方式加载\n\n```python\nfrom django.views.generic import View\n\nclass RegisterView(View):\n\n    def get(self, request):\n        pass\n\n    def post(self, request):\n\t\tpass\n```\n\n**3.激活用户**\n\n1. 使用itsdangerous为网址进行加密签名\n2. 调用django.core.mail 的send_mail来发送邮件，把链接成文本发送过去\n\n```python\nfrom django.conf import settings\nfrom django.core.mail import send_mail\nimport time\n\ndef send_register_active_email(to_email, username, token):\n    '''send active email'''\n    subject = \"天天生鲜欢迎消息\"\n    message = \"\"\n    sender = settings.DEFAULT_FROM_EMAIL\n    receiver = [to_email]\n    html_message = \"<h1>%s, 欢迎你</h1>请点击下面链接激活<br/><a href=\\\"http://127.0.0.1:8000/user/active/%s\\\">http://127.0.0.1:8000/user/active/%s</a>\" % (\n    username, token, token)\n    send_mail(subject, message, sender, receiver, html_message=html_message)\n    time.sleep(5)\n```\n>也可使用Python的发email库\n\n>```python\n>  def active_email(self, email_addr, active_code):\n>      # 第三方 SMTP 服务 # 授权码：cmatkgceuuxcbddc\n>      mail_host = \"smtp.qq.com\"  # 设置服务器\n>      mail_user = \"1024037035@qq.com\"  # 用户名\n>      mail_pass = \"cmatkgceuuxcbddc\"  # 口令\n>      sender = '1024037035@qq.com'\n>      receivers = [email_addr]  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n >       # 三个参数：第一个为文本内容，第二个 plain 设置文本格式，第三个 utf-8 设置编码\n>      try:\n>          smtp_obj = smtplib.SMTP()\n>          smtp_obj.connect(mail_host, 25)  # 25 为 SMTP 端口号\n>          smtp_obj.login(mail_user, mail_pass)\n>          smtp_obj.sendmail(sender, receivers, message.as_string())\n>          return True\n>          \"邮件发送成功\"\n>      except smtplib.SMTPException:\n >           return False\n>            \"Error: 无法发送邮件\"\n>```\n\n3. 在Url中配置激活的功能\n\n```python\npath('active/<token>',ActiveView.as_view(), name='active'),\n```\n\n4. 在views.py中写一个ActiveView的视图来处理激活\n \n```python\nclass ActiveView(View):\n    def get(self, request, token):\n        try:\n            serializer = Serializer(settings.SECRET_KEY, 3600)\n            # print(type(token))\n            token = token.encode()\n            info = serializer.loads(token)\n            user_id = info['confirm']\n            user = User.objects.get(id=user_id)\n            user.is_active = 1\n            user.save()\n\n            # 跳转到登陆页面\n            return redirect(reverse('user:login'))\n        except SignatureExpired as e:\n            # 激活链接过期\n            return HttpResponse('激活链接已过期')\n```\n\n\n**4.使用celery做为异步处理**\n\n![enter description here](./images/1574171584470.png)\n\n1.配置一个项目目录为：celery_tasks/tasks.py的文件\n2.在tasks.py写入配置如 \n\n```python\n# use celery\nfrom celery import Celery\n# create celery instance\napp = Celery('celery_tasks.tasks', broker='redis://:pwd@39.97.170.176:6379/8')\n\n# define task function\n@app.task\ndef send_register_active_email(to_email, username, token):\n\tpass\n```\n3.执行的脚本函数里写入：\n\n```python\n        # 发送邮件1\n        send_register_active_email.delay(email, username, secret_info)\n```\n\n4.在有redis的电脑上\n\n* 复制项目代码\n* 在tasks.py中加入初始化django的代码\n* \n```python\nimport os\nimport django\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dailyfresh.settings')\ndjango.setup()\n```\n* 启动worker\n\n```\ncelery -A celery_tasks.tasks worker -l info\n```\n* 启动redis , 大功告成，测试\n\n> 可能出现的问题\n> 在windows系统中：\n>  使用这种方式来启动worker: pip install eventlet -> celery -A your_app_name worker --pool=eventlet\n>  或： celery -A your_app_name worker --pool=solo -l info\n>  或：\n>  at worker side:\nset FORKED_BY_MULTIPROCESSING = 1\nthen\ncelery -A myworker worker --loglevel=info\n\n## User模块 - 登录\n\n**LoginView，使用自带的授权**\n\n授权，如果成功则会返回user对象：：\n\n```\nuser = authenticate(username=username, password=pwd)\n```\n\n登录：\n\n```python\nlogin(request, user)\n```\n\n添加URL及表单部分，参考注册流程\n\n**为减少数据库操作，使用redis存储**\n\n1.安装 django-redis\n2.settings加入如下配置即可：\n\n```python\n#Django 缓存配置\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": \"redis://127.0.0.1:6379/9\", #服务器地址\n        \"OPTIONS\": {\n            \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n            \"CONNECTION_POOL_KWARGS\": {\"max_connections\": 100}, # 最大连接数\n            \"PASSWORD\": \"bk102435\",\n        }\n    }\n}\n#配置session存储\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'\nSESSION_CACHE_ALIAS = 'default'\n```\n\n**把用户名记在cookie**\n\n1.登录成功时，把username字段存在cookie中\n\n```python\nresponse = redirect(reverse('goods:index'))\nremember = request.POST.get('remember')\n\nif remember == 'on':\n\tresponse.set_cookie('username', username, max_age=7*24*3600)\nelse:\n\tresponse.delete_cookie('username')\n```\n\n2.get方法中取出cookie数据\n\n```\nif 'username' in request.COOKIES:\n\tusername = request.COOKIES.get('username')\n\tchecked = 'checked'\nelse:\n\tusername = ''\n\tchecked = ''\nreturn render(request, 'login.html', {'username':username, 'checked':checked})\n```\n","slug":"天天生鲜项目实例","published":1,"date":"2019-11-25T03:25:48.244Z","updated":"2019-11-25T03:25:48.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjsaj004xekuw6iudg6pf","content":"<h2 id=\"相关背景概念\"><a href=\"#相关背景概念\" class=\"headerlink\" title=\"相关背景概念\"></a>相关背景概念</h2><blockquote>\n<p>B2B, O2O, B2C, C2C..</p>\n</blockquote>\n<h2 id=\"数据库设计\"><a href=\"#数据库设计\" class=\"headerlink\" title=\"数据库设计\"></a>数据库设计</h2><p><img src=\"./images/1573441070020.png\" alt=\"enter description here\"></p>\n<blockquote>\n<p>对数据库进行授权<br><img src=\"./images/1573442010455.png\" alt=\"enter description here\"></p>\n</blockquote>\n<blockquote>\n<p>使用后台管理<br><img src=\"./images/1573442404015.png\" alt=\"enter description here\"></p>\n</blockquote>\n<h2 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h2><p><strong>1.一个模块对应一个APP</strong><br><strong>2.将所有app归类到一个apps文件夹</strong><br><strong>3.[可选]  设置一个系统路径，这样就不用注册APP时添加前缀文件夹</strong></p>\n<pre><code class=\"python\">sys.path.insert(0, os.path.join(BASE_DIR, &#39;apps&#39;))</code></pre>\n<p><strong>4.添加templates包和static包</strong></p>\n<blockquote>\n<p>TEMPLATES_DIR = os.path.join(BASE_DIR, ‘templates’)<br>TEMPLATES = [<br>    {<br>        ‘BACKEND’: ‘django.template.backends.django.DjangoTemplates’,<br>        ‘DIRS’: [TEMPLATES_DIR],<br>        …<br>STATICFILES_DIRS = [os.path.join(BASE_DIR, ‘static’)]</p>\n</blockquote>\n<p><strong>5.添加templates和static路径到setting</strong></p>\n<p><strong>6.配置数据库为Mysql</strong></p>\n<blockquote>\n<p>  ‘ENGINE’: ‘django.db.backends.mysql’,<br>        ‘NAME’: ‘dailyfresh’,<br>        ‘USER’: ‘root’,<br>        ‘PASSWORD’:’bk102435’,<br>        ‘HOST’:’39.97.170.176’,<br>        ‘PORT’:3306,</p>\n</blockquote>\n<p><strong>7.设置语言</strong></p>\n<pre><code class=\"python\">LANGUAGE_CODE = &#39;zh-hans&#39;\nTIME_ZONE = &#39;Asia/Shanghai&#39;</code></pre>\n<p><strong>8.配置项目总的urls</strong><br><strong>9.为各应用创建urls</strong></p>\n<p><strong>10.数据层准备，创建db包，创建basemodel.py</strong></p>\n<p><strong>11.[可选]创建各models 或 链接现有数据库</strong></p>\n<blockquote>\n<p>Inpectdb 也可针对某张表：<br>python manage.py inspectdb TableName &gt; output.py<br>链接： <a href=\"https://www.jianshu.com/p/037bd7e20a7a\">https://www.jianshu.com/p/037bd7e20a7a</a></p>\n</blockquote>\n<p><strong>12.指定django认证系统的模型</strong><br>这样superuser的模型表就被指定到自己的user表</p>\n<blockquote>\n<p>settings.py中加入<br>AUTH_USER_MODEL = ‘user.User’</p>\n</blockquote>\n<h3 id=\"13-可能出现的问题\"><a href=\"#13-可能出现的问题\" class=\"headerlink\" title=\"13.  可能出现的问题\"></a>13.  可能出现的问题</h3><p>不确定是不是使用pymysql导致的，这里会有两个问题</p>\n<ul>\n<li>1.现在django使用mysqlclient，而且恶心的是会在启动时自动验证版本号，pymysql最高只到0.9.3。这里根据报错直接那代码注释即可！</li>\n<li>2.makemigration出错，提示在django代码里的operations.py中的last_executed_query函数，由于python3与Python2的decode与encode函数区别，这里也需要把.decode..去掉。</li>\n</ul>\n<h2 id=\"User模块-注册\"><a href=\"#User模块-注册\" class=\"headerlink\" title=\"User模块 - 注册\"></a>User模块 - 注册</h2><p><strong>1.准备views函数</strong></p>\n<ul>\n<li>views.py添加相应函数<br>register函数为接收跳转网页, register_handler函数接收处理及逻辑</li>\n</ul>\n<pre><code class=\"python\">def register():\n    pass\ndef register_handle():\n    pass</code></pre>\n<ul>\n<li>urls.py配置对应view函数路径</li>\n</ul>\n<pre><code class=\"python\">path(&#39;register&#39;,views.register,name=&#39;register&#39;)\npath(&#39;register_handle&#39;,views.register_handle,name=&#39;register_handle&#39;)</code></pre>\n<p><strong>2.templates里放入html信息</strong></p>\n<ul>\n<li>编辑表单&lt;form&gt;<br>  添加method,action.<br>  写法升级：</li>\n</ul>\n<pre><code class=\"python\">action=&quot;{% url 'user:detail' %}&quot; </code></pre>\n<p>旧的写法:</p>\n<pre><code class=\"python\">action = &quot;/user/register_handle&quot;</code></pre>\n<blockquote>\n<p>注意事项：</p>\n<ol>\n<li>网页使用跳转，需要在urls.py中指定name:<br>如下：所对应的地址段需要设置不同的正则</li>\n</ol>\n<pre><code class=\"python\">path(&#39;add/&#39;, calc_views.add, name=&#39;add&#39;),  # new\npath(&#39;add/&lt;int:a&gt;/&lt;int:b&gt;/&#39;, calc_views.old_add2_redirect,name=&#39;add&#39;),</code></pre>\n<p>2.使用shell, 用reverse测试<br>地址反射的机制：django.urls reverse<br>3.定义一个跳转函数来做：</p>\n<pre><code class=\"python\">urls.py中加入如下：\n path(&#39;add/&lt;int:a&gt;/&lt;int:b&gt;/&#39;, calc_views.old_add2_redirect,name=&#39;add&#39;),\npath(&#39;new_add/&lt;int:a&gt;/&lt;int:b&gt;/&#39;, calc_views.add2, name=&#39;add2&#39;),\n\nviews.py中加入如下：\ndef old_add2_redirect(request):\nreturn HttpResponseRedirect(\n       reverse(&#39;add2&#39;, args=(a, b))\n   )\n测试网址： http://127.0.0.1:8000/add/5/6/ \n这时最终就将跳到美术http://127.0.0.1:8000/new_add/5/6/</code></pre>\n</blockquote>\n<p><strong>3.使用类视图</strong></p>\n<blockquote>\n<p>1.优化去register_handle函数，使用get/post判断实现不同的跳转类型<br>2.基于1的优化，使用类视图方式加载</p>\n</blockquote>\n<pre><code class=\"python\">from django.views.generic import View\n\nclass RegisterView(View):\n\n    def get(self, request):\n        pass\n\n    def post(self, request):\n        pass</code></pre>\n<p><strong>3.激活用户</strong></p>\n<ol>\n<li>使用itsdangerous为网址进行加密签名</li>\n<li>调用django.core.mail 的send_mail来发送邮件，把链接成文本发送过去</li>\n</ol>\n<pre><code class=\"python\">from django.conf import settings\nfrom django.core.mail import send_mail\nimport time\n\ndef send_register_active_email(to_email, username, token):\n    &#39;&#39;&#39;send active email&#39;&#39;&#39;\n    subject = &quot;天天生鲜欢迎消息&quot;\n    message = &quot;&quot;\n    sender = settings.DEFAULT_FROM_EMAIL\n    receiver = [to_email]\n    html_message = &quot;&lt;h1&gt;%s, 欢迎你&lt;/h1&gt;请点击下面链接激活&lt;br/&gt;&lt;a href=\\&quot;http://127.0.0.1:8000/user/active/%s\\&quot;&gt;http://127.0.0.1:8000/user/active/%s&lt;/a&gt;&quot; % (\n    username, token, token)\n    send_mail(subject, message, sender, receiver, html_message=html_message)\n    time.sleep(5)</code></pre>\n<blockquote>\n<p>也可使用Python的发email库</p>\n</blockquote>\n<blockquote>\n<pre><code class=\"python\"> def active_email(self, email_addr, active_code):\n     # 第三方 SMTP 服务 # 授权码：cmatkgceuuxcbddc\n     mail_host = &quot;smtp.qq.com&quot;  # 设置服务器\n     mail_user = &quot;1024037035@qq.com&quot;  # 用户名\n     mail_pass = &quot;cmatkgceuuxcbddc&quot;  # 口令\n     sender = &#39;1024037035@qq.com&#39;\n     receivers = [email_addr]  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n      # 三个参数：第一个为文本内容，第二个 plain 设置文本格式，第三个 utf-8 设置编码\n     try:\n         smtp_obj = smtplib.SMTP()\n         smtp_obj.connect(mail_host, 25)  # 25 为 SMTP 端口号\n         smtp_obj.login(mail_user, mail_pass)\n         smtp_obj.sendmail(sender, receivers, message.as_string())\n         return True\n         &quot;邮件发送成功&quot;\n     except smtplib.SMTPException:\n          return False\n           &quot;Error: 无法发送邮件&quot;</code></pre>\n</blockquote>\n<ol start=\"3\">\n<li>在Url中配置激活的功能</li>\n</ol>\n<pre><code class=\"python\">path(&#39;active/&lt;token&gt;&#39;,ActiveView.as_view(), name=&#39;active&#39;),</code></pre>\n<ol start=\"4\">\n<li>在views.py中写一个ActiveView的视图来处理激活</li>\n</ol>\n<pre><code class=\"python\">class ActiveView(View):\n    def get(self, request, token):\n        try:\n            serializer = Serializer(settings.SECRET_KEY, 3600)\n            # print(type(token))\n            token = token.encode()\n            info = serializer.loads(token)\n            user_id = info[&#39;confirm&#39;]\n            user = User.objects.get(id=user_id)\n            user.is_active = 1\n            user.save()\n\n            # 跳转到登陆页面\n            return redirect(reverse(&#39;user:login&#39;))\n        except SignatureExpired as e:\n            # 激活链接过期\n            return HttpResponse(&#39;激活链接已过期&#39;)</code></pre>\n<p><strong>4.使用celery做为异步处理</strong></p>\n<p><img src=\"./images/1574171584470.png\" alt=\"enter description here\"></p>\n<p>1.配置一个项目目录为：celery_tasks/tasks.py的文件<br>2.在tasks.py写入配置如 </p>\n<pre><code class=\"python\"># use celery\nfrom celery import Celery\n# create celery instance\napp = Celery(&#39;celery_tasks.tasks&#39;, broker=&#39;redis://:pwd@39.97.170.176:6379/8&#39;)\n\n# define task function\n@app.task\ndef send_register_active_email(to_email, username, token):\n    pass</code></pre>\n<p>3.执行的脚本函数里写入：</p>\n<pre><code class=\"python\">        # 发送邮件1\n        send_register_active_email.delay(email, username, secret_info)</code></pre>\n<p>4.在有redis的电脑上</p>\n<ul>\n<li>复制项目代码</li>\n<li>在tasks.py中加入初始化django的代码</li>\n<li><pre><code class=\"python\">import os\nimport django\nfrom django.core.wsgi import get_wsgi_application\n</code></pre>\n</li>\n</ul>\n<p>os.environ.setdefault(‘DJANGO_SETTINGS_MODULE’, ‘dailyfresh.settings’)<br>django.setup()</p>\n<pre><code>* 启动worker\n</code></pre><p>celery -A celery_tasks.tasks worker -l info</p>\n<pre><code>* 启动redis , 大功告成，测试\n\n&gt; 可能出现的问题\n&gt; 在windows系统中：\n&gt;  使用这种方式来启动worker: pip install eventlet -&gt; celery -A your_app_name worker --pool=eventlet\n&gt;  或： celery -A your_app_name worker --pool=solo -l info\n&gt;  或：\n&gt;  at worker side:\nset FORKED_BY_MULTIPROCESSING = 1\nthen\ncelery -A myworker worker --loglevel=info\n\n## User模块 - 登录\n\n**LoginView，使用自带的授权**\n\n授权，如果成功则会返回user对象：：\n</code></pre><p>user = authenticate(username=username, password=pwd)</p>\n<pre><code>\n登录：\n\n```python\nlogin(request, user)</code></pre><p>添加URL及表单部分，参考注册流程</p>\n<p><strong>为减少数据库操作，使用redis存储</strong></p>\n<p>1.安装 django-redis<br>2.settings加入如下配置即可：</p>\n<pre><code class=\"python\">#Django 缓存配置\nCACHES = {\n    &quot;default&quot;: {\n        &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,\n        &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/9&quot;, #服务器地址\n        &quot;OPTIONS&quot;: {\n            &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,\n            &quot;CONNECTION_POOL_KWARGS&quot;: {&quot;max_connections&quot;: 100}, # 最大连接数\n            &quot;PASSWORD&quot;: &quot;bk102435&quot;,\n        }\n    }\n}\n#配置session存储\nSESSION_ENGINE = &#39;django.contrib.sessions.backends.cache&#39;\nSESSION_CACHE_ALIAS = &#39;default&#39;</code></pre>\n<p><strong>把用户名记在cookie</strong></p>\n<p>1.登录成功时，把username字段存在cookie中</p>\n<pre><code class=\"python\">response = redirect(reverse(&#39;goods:index&#39;))\nremember = request.POST.get(&#39;remember&#39;)\n\nif remember == &#39;on&#39;:\n    response.set_cookie(&#39;username&#39;, username, max_age=7*24*3600)\nelse:\n    response.delete_cookie(&#39;username&#39;)</code></pre>\n<p>2.get方法中取出cookie数据</p>\n<pre><code>if &#39;username&#39; in request.COOKIES:\n    username = request.COOKIES.get(&#39;username&#39;)\n    checked = &#39;checked&#39;\nelse:\n    username = &#39;&#39;\n    checked = &#39;&#39;\nreturn render(request, &#39;login.html&#39;, {&#39;username&#39;:username, &#39;checked&#39;:checked})</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"相关背景概念\"><a href=\"#相关背景概念\" class=\"headerlink\" title=\"相关背景概念\"></a>相关背景概念</h2><blockquote>\n<p>B2B, O2O, B2C, C2C..</p>\n</blockquote>\n<h2 id=\"数据库设计\"><a href=\"#数据库设计\" class=\"headerlink\" title=\"数据库设计\"></a>数据库设计</h2><p><img src=\"./images/1573441070020.png\" alt=\"enter description here\"></p>\n<blockquote>\n<p>对数据库进行授权<br><img src=\"./images/1573442010455.png\" alt=\"enter description here\"></p>\n</blockquote>\n<blockquote>\n<p>使用后台管理<br><img src=\"./images/1573442404015.png\" alt=\"enter description here\"></p>\n</blockquote>\n<h2 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h2><p><strong>1.一个模块对应一个APP</strong><br><strong>2.将所有app归类到一个apps文件夹</strong><br><strong>3.[可选]  设置一个系统路径，这样就不用注册APP时添加前缀文件夹</strong></p>\n<pre><code class=\"python\">sys.path.insert(0, os.path.join(BASE_DIR, &#39;apps&#39;))</code></pre>\n<p><strong>4.添加templates包和static包</strong></p>\n<blockquote>\n<p>TEMPLATES_DIR = os.path.join(BASE_DIR, ‘templates’)<br>TEMPLATES = [<br>    {<br>        ‘BACKEND’: ‘django.template.backends.django.DjangoTemplates’,<br>        ‘DIRS’: [TEMPLATES_DIR],<br>        …<br>STATICFILES_DIRS = [os.path.join(BASE_DIR, ‘static’)]</p>\n</blockquote>\n<p><strong>5.添加templates和static路径到setting</strong></p>\n<p><strong>6.配置数据库为Mysql</strong></p>\n<blockquote>\n<p>  ‘ENGINE’: ‘django.db.backends.mysql’,<br>        ‘NAME’: ‘dailyfresh’,<br>        ‘USER’: ‘root’,<br>        ‘PASSWORD’:’bk102435’,<br>        ‘HOST’:’39.97.170.176’,<br>        ‘PORT’:3306,</p>\n</blockquote>\n<p><strong>7.设置语言</strong></p>\n<pre><code class=\"python\">LANGUAGE_CODE = &#39;zh-hans&#39;\nTIME_ZONE = &#39;Asia/Shanghai&#39;</code></pre>\n<p><strong>8.配置项目总的urls</strong><br><strong>9.为各应用创建urls</strong></p>\n<p><strong>10.数据层准备，创建db包，创建basemodel.py</strong></p>\n<p><strong>11.[可选]创建各models 或 链接现有数据库</strong></p>\n<blockquote>\n<p>Inpectdb 也可针对某张表：<br>python manage.py inspectdb TableName &gt; output.py<br>链接： <a href=\"https://www.jianshu.com/p/037bd7e20a7a\">https://www.jianshu.com/p/037bd7e20a7a</a></p>\n</blockquote>\n<p><strong>12.指定django认证系统的模型</strong><br>这样superuser的模型表就被指定到自己的user表</p>\n<blockquote>\n<p>settings.py中加入<br>AUTH_USER_MODEL = ‘user.User’</p>\n</blockquote>\n<h3 id=\"13-可能出现的问题\"><a href=\"#13-可能出现的问题\" class=\"headerlink\" title=\"13.  可能出现的问题\"></a>13.  可能出现的问题</h3><p>不确定是不是使用pymysql导致的，这里会有两个问题</p>\n<ul>\n<li>1.现在django使用mysqlclient，而且恶心的是会在启动时自动验证版本号，pymysql最高只到0.9.3。这里根据报错直接那代码注释即可！</li>\n<li>2.makemigration出错，提示在django代码里的operations.py中的last_executed_query函数，由于python3与Python2的decode与encode函数区别，这里也需要把.decode..去掉。</li>\n</ul>\n<h2 id=\"User模块-注册\"><a href=\"#User模块-注册\" class=\"headerlink\" title=\"User模块 - 注册\"></a>User模块 - 注册</h2><p><strong>1.准备views函数</strong></p>\n<ul>\n<li>views.py添加相应函数<br>register函数为接收跳转网页, register_handler函数接收处理及逻辑</li>\n</ul>\n<pre><code class=\"python\">def register():\n    pass\ndef register_handle():\n    pass</code></pre>\n<ul>\n<li>urls.py配置对应view函数路径</li>\n</ul>\n<pre><code class=\"python\">path(&#39;register&#39;,views.register,name=&#39;register&#39;)\npath(&#39;register_handle&#39;,views.register_handle,name=&#39;register_handle&#39;)</code></pre>\n<p><strong>2.templates里放入html信息</strong></p>\n<ul>\n<li>编辑表单&lt;form&gt;<br>  添加method,action.<br>  写法升级：</li>\n</ul>\n<pre><code class=\"python\">action=&quot;{% url 'user:detail' %}&quot; </code></pre>\n<p>旧的写法:</p>\n<pre><code class=\"python\">action = &quot;/user/register_handle&quot;</code></pre>\n<blockquote>\n<p>注意事项：</p>\n<ol>\n<li>网页使用跳转，需要在urls.py中指定name:<br>如下：所对应的地址段需要设置不同的正则</li>\n</ol>\n<pre><code class=\"python\">path(&#39;add/&#39;, calc_views.add, name=&#39;add&#39;),  # new\npath(&#39;add/&lt;int:a&gt;/&lt;int:b&gt;/&#39;, calc_views.old_add2_redirect,name=&#39;add&#39;),</code></pre>\n<p>2.使用shell, 用reverse测试<br>地址反射的机制：django.urls reverse<br>3.定义一个跳转函数来做：</p>\n<pre><code class=\"python\">urls.py中加入如下：\n path(&#39;add/&lt;int:a&gt;/&lt;int:b&gt;/&#39;, calc_views.old_add2_redirect,name=&#39;add&#39;),\npath(&#39;new_add/&lt;int:a&gt;/&lt;int:b&gt;/&#39;, calc_views.add2, name=&#39;add2&#39;),\n\nviews.py中加入如下：\ndef old_add2_redirect(request):\nreturn HttpResponseRedirect(\n       reverse(&#39;add2&#39;, args=(a, b))\n   )\n测试网址： http://127.0.0.1:8000/add/5/6/ \n这时最终就将跳到美术http://127.0.0.1:8000/new_add/5/6/</code></pre>\n</blockquote>\n<p><strong>3.使用类视图</strong></p>\n<blockquote>\n<p>1.优化去register_handle函数，使用get/post判断实现不同的跳转类型<br>2.基于1的优化，使用类视图方式加载</p>\n</blockquote>\n<pre><code class=\"python\">from django.views.generic import View\n\nclass RegisterView(View):\n\n    def get(self, request):\n        pass\n\n    def post(self, request):\n        pass</code></pre>\n<p><strong>3.激活用户</strong></p>\n<ol>\n<li>使用itsdangerous为网址进行加密签名</li>\n<li>调用django.core.mail 的send_mail来发送邮件，把链接成文本发送过去</li>\n</ol>\n<pre><code class=\"python\">from django.conf import settings\nfrom django.core.mail import send_mail\nimport time\n\ndef send_register_active_email(to_email, username, token):\n    &#39;&#39;&#39;send active email&#39;&#39;&#39;\n    subject = &quot;天天生鲜欢迎消息&quot;\n    message = &quot;&quot;\n    sender = settings.DEFAULT_FROM_EMAIL\n    receiver = [to_email]\n    html_message = &quot;&lt;h1&gt;%s, 欢迎你&lt;/h1&gt;请点击下面链接激活&lt;br/&gt;&lt;a href=\\&quot;http://127.0.0.1:8000/user/active/%s\\&quot;&gt;http://127.0.0.1:8000/user/active/%s&lt;/a&gt;&quot; % (\n    username, token, token)\n    send_mail(subject, message, sender, receiver, html_message=html_message)\n    time.sleep(5)</code></pre>\n<blockquote>\n<p>也可使用Python的发email库</p>\n</blockquote>\n<blockquote>\n<pre><code class=\"python\"> def active_email(self, email_addr, active_code):\n     # 第三方 SMTP 服务 # 授权码：cmatkgceuuxcbddc\n     mail_host = &quot;smtp.qq.com&quot;  # 设置服务器\n     mail_user = &quot;1024037035@qq.com&quot;  # 用户名\n     mail_pass = &quot;cmatkgceuuxcbddc&quot;  # 口令\n     sender = &#39;1024037035@qq.com&#39;\n     receivers = [email_addr]  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n      # 三个参数：第一个为文本内容，第二个 plain 设置文本格式，第三个 utf-8 设置编码\n     try:\n         smtp_obj = smtplib.SMTP()\n         smtp_obj.connect(mail_host, 25)  # 25 为 SMTP 端口号\n         smtp_obj.login(mail_user, mail_pass)\n         smtp_obj.sendmail(sender, receivers, message.as_string())\n         return True\n         &quot;邮件发送成功&quot;\n     except smtplib.SMTPException:\n          return False\n           &quot;Error: 无法发送邮件&quot;</code></pre>\n</blockquote>\n<ol start=\"3\">\n<li>在Url中配置激活的功能</li>\n</ol>\n<pre><code class=\"python\">path(&#39;active/&lt;token&gt;&#39;,ActiveView.as_view(), name=&#39;active&#39;),</code></pre>\n<ol start=\"4\">\n<li>在views.py中写一个ActiveView的视图来处理激活</li>\n</ol>\n<pre><code class=\"python\">class ActiveView(View):\n    def get(self, request, token):\n        try:\n            serializer = Serializer(settings.SECRET_KEY, 3600)\n            # print(type(token))\n            token = token.encode()\n            info = serializer.loads(token)\n            user_id = info[&#39;confirm&#39;]\n            user = User.objects.get(id=user_id)\n            user.is_active = 1\n            user.save()\n\n            # 跳转到登陆页面\n            return redirect(reverse(&#39;user:login&#39;))\n        except SignatureExpired as e:\n            # 激活链接过期\n            return HttpResponse(&#39;激活链接已过期&#39;)</code></pre>\n<p><strong>4.使用celery做为异步处理</strong></p>\n<p><img src=\"./images/1574171584470.png\" alt=\"enter description here\"></p>\n<p>1.配置一个项目目录为：celery_tasks/tasks.py的文件<br>2.在tasks.py写入配置如 </p>\n<pre><code class=\"python\"># use celery\nfrom celery import Celery\n# create celery instance\napp = Celery(&#39;celery_tasks.tasks&#39;, broker=&#39;redis://:pwd@39.97.170.176:6379/8&#39;)\n\n# define task function\n@app.task\ndef send_register_active_email(to_email, username, token):\n    pass</code></pre>\n<p>3.执行的脚本函数里写入：</p>\n<pre><code class=\"python\">        # 发送邮件1\n        send_register_active_email.delay(email, username, secret_info)</code></pre>\n<p>4.在有redis的电脑上</p>\n<ul>\n<li>复制项目代码</li>\n<li>在tasks.py中加入初始化django的代码</li>\n<li><pre><code class=\"python\">import os\nimport django\nfrom django.core.wsgi import get_wsgi_application\n</code></pre>\n</li>\n</ul>\n<p>os.environ.setdefault(‘DJANGO_SETTINGS_MODULE’, ‘dailyfresh.settings’)<br>django.setup()</p>\n<pre><code>* 启动worker\n</code></pre><p>celery -A celery_tasks.tasks worker -l info</p>\n<pre><code>* 启动redis , 大功告成，测试\n\n&gt; 可能出现的问题\n&gt; 在windows系统中：\n&gt;  使用这种方式来启动worker: pip install eventlet -&gt; celery -A your_app_name worker --pool=eventlet\n&gt;  或： celery -A your_app_name worker --pool=solo -l info\n&gt;  或：\n&gt;  at worker side:\nset FORKED_BY_MULTIPROCESSING = 1\nthen\ncelery -A myworker worker --loglevel=info\n\n## User模块 - 登录\n\n**LoginView，使用自带的授权**\n\n授权，如果成功则会返回user对象：：\n</code></pre><p>user = authenticate(username=username, password=pwd)</p>\n<pre><code>\n登录：\n\n```python\nlogin(request, user)</code></pre><p>添加URL及表单部分，参考注册流程</p>\n<p><strong>为减少数据库操作，使用redis存储</strong></p>\n<p>1.安装 django-redis<br>2.settings加入如下配置即可：</p>\n<pre><code class=\"python\">#Django 缓存配置\nCACHES = {\n    &quot;default&quot;: {\n        &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,\n        &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/9&quot;, #服务器地址\n        &quot;OPTIONS&quot;: {\n            &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,\n            &quot;CONNECTION_POOL_KWARGS&quot;: {&quot;max_connections&quot;: 100}, # 最大连接数\n            &quot;PASSWORD&quot;: &quot;bk102435&quot;,\n        }\n    }\n}\n#配置session存储\nSESSION_ENGINE = &#39;django.contrib.sessions.backends.cache&#39;\nSESSION_CACHE_ALIAS = &#39;default&#39;</code></pre>\n<p><strong>把用户名记在cookie</strong></p>\n<p>1.登录成功时，把username字段存在cookie中</p>\n<pre><code class=\"python\">response = redirect(reverse(&#39;goods:index&#39;))\nremember = request.POST.get(&#39;remember&#39;)\n\nif remember == &#39;on&#39;:\n    response.set_cookie(&#39;username&#39;, username, max_age=7*24*3600)\nelse:\n    response.delete_cookie(&#39;username&#39;)</code></pre>\n<p>2.get方法中取出cookie数据</p>\n<pre><code>if &#39;username&#39; in request.COOKIES:\n    username = request.COOKIES.get(&#39;username&#39;)\n    checked = &#39;checked&#39;\nelse:\n    username = &#39;&#39;\n    checked = &#39;&#39;\nreturn render(request, &#39;login.html&#39;, {&#39;username&#39;:username, &#39;checked&#39;:checked})</code></pre>"},{"title":"Twisted  介绍","_content":"\n## Twisted\n\n\n### Python Twisted介绍\nTwisted是用Python实现的基于事件驱动的网络引擎框架。Twisted诞生于2000年初，在当时的网络游戏开发者看来，无论他们使用哪种语言，手中都鲜有可兼顾扩展性及跨平台的网络库。Twisted的作者试图在当时现有的环境下开发游戏，这一步走的非常艰难，他们迫切地需要一个可扩展性高、基于事件驱动、跨平台的网络开发框架，为此他们决定自己实现一个，并从那些之前的游戏和网络应用程序的开发者中学习，汲取他们的经验教训。\n\nTwisted支持许多常见的传输及应用层协议，包括TCP、UDP、SSL/TLS、HTTP、IMAP、SSH、IRC以及FTP。就像python一样，Twisted也具有“内置电池”（batteries-included）的特点。Twisted对于其支持的所有协议都带有客户端和服务器实现，同时附带有基于命令行的工具，使得配置和部署产品级的Twisted应用变得非常方便。\n\n### 为什么需要Twisted\n2000年时，Twisted的作者Glyph正在开发一个名为Twisted Reality的基于文本方式的多人在线游戏。这个游戏采用Java开发，里面尽是一堆线程——每个连接就有3个线程处理。处理输入的线程会在读操作上阻塞，处理输出的线程将在一些写操作上阻塞，还有一个“逻辑”线程将在等待定时器超时或者事件入队列时休眠。随着玩家们在虚拟世界中移动并交互时，线程出现死锁，缓存被污染，程序中的加锁逻辑几乎从来就没对过——采用多线程使得整个软件变得复杂、漏洞百出而且极难扩展。\n\n为了寻求其他的解决方案，作者发现了Python，特别是Python中用于对流式对象比如socket和pipe进行多路I/O复用的select模块（UNIX规范第3版（SUSv3）描述了select）。那时，Java并没有提供操作系统的select接口或者任何其他的异步I/O API（针对非阻塞式I/O的包java.nio已经在J2SE 1.4中加入了，2002年发布）。通过用Python中的select模块快速搭建起游戏的原型，这迅速降低了程序的复杂度，并且比多线程版本要更加可靠。\n\nGlyph迅速转向了Python、select以及基于事件驱动的编程。他使用Python的select模块为游戏编写了客户端和服务器。但他想要的还不止于此。从根本上说，他希望能将网络行为转变为对游戏中的对象的方法调用。如果你能在游戏中收取邮件会怎样，就像Nethack mailer这种守护进程一样？如果游戏中的每位玩家都拥有一个主页呢？Glyph发现他需要优秀的IMAP以及HTTP客户端和服务器的Python实现，而这些都要采用select。\n\n他首先转向了Medusa，这是一个在90年代中期开发的平台，在这里可以采用Python中的asyncore模块来编写网络服务。asyncore是一个异步化处理socket的模块，在操作系统的select API之上构建了一个调度器和回调接口。\n\n这对于Glyph来说是个激动人心的发现，但Medusa有两个缺点：\n1. 这个项目到2001年就不再维护了，那正是glyph开发Twisted Reality的时候。\n2. asyncore只是对socket的一个薄封装层，应用程序的编写者仍然需要直接操作socket。这意味着程序可移植性的担子仍然落在程序员自己身上。此外，那时asyncore对Windows的支持还有问题，Glyph希望能在Windows上运行一个带有图形用户界面的客户端。\nGlyph需要自己实现一个网络引擎平台，而且他意识到Twisted Reality已经打开了问题的大门，这和他的游戏一样有趣。\n\n随着时间的推移，Twisted Reality这个游戏就演化成了Twisted网络引擎平台。它可以做到当时Python中已有的网络平台所无法做到的事情：\n+ 使用基于事件驱动的编程模型，而不是多线程模型。\n+ 跨平台：为主流操作系统平台暴露出的事件通知系统提供统一的接口。\n+ “内置电池”的能力：提供流行的应用层协议实现，因此Twisted马上就可为开发人员所用。\n+ 符合RFC规范，已经通过健壮的测试套件证明了其一致性。\n+ 能很容易的配合多个网络协议一起使用。\n+ 可扩展。\n\n### Twisted架构概览\nTwisted是一个事件驱动型的网络引擎。由于事件驱动编程模型在Twisted的设计哲学中占有重要的地位，因此这里有必要花点时间来回顾一下究竟事件驱动意味着什么。\n\n事件驱动编程是一种编程范式，这里程序的执行流由外部事件来决定。它的特点是包含一个事件循环，当外部事件发生时使用回调机制来触发相应的处理。另外两种常见的编程范式是（单线程）同步以及多线程编程。\n\n在单线程同步模型中，任务按照顺序执行。如果某个任务因为I/O而阻塞，其他所有的任务都必须等待，直到它完成之后它们才能依次执行。这种明确的执行顺序和串行化处理的行为是很容易推断得出的。如果任务之间并没有互相依赖的关系，但仍然需要互相等待的话这就使得程序不必要的降低了运行速度。\n\n在多线程版本中，这3个任务分别在独立的线程中执行。这些线程由操作系统来管理，在多处理器系统上可以并行处理，或者在单处理器系统上交错执行。这使得当某个线程阻塞在某个资源的同时其他线程得以继续执行。与完成类似功能的同步程序相比，这种方式更有效率，但程序员必须写代码来保护共享资源，防止其被多个线程同时访问。多线程程序更加难以推断，因为这类程序不得不通过线程同步机制如锁、可重入函数、线程局部存储或者其他机制来处理线程安全问题，如果实现不当就会导致出现微妙且令人痛不欲生的bug。\n\n在事件驱动版本的程序中，3个任务**交错执行**，但仍然在一个单独的线程控制中。当处理I/O或者其他昂贵的操作时，注册一个回调到事件循环中，然后当I/O操作完成时继续执行。回调描述了该如何处理某个事件。事件循环轮询所有的事件，当事件到来时将它们分配给等待处理事件的回调函数。这种方式让程序尽可能的得以执行而不需要用到额外的线程。事件驱动型程序比多线程程序更容易推断出行为，因为程序员不需要关心线程安全问题。\n\n当我们面对如下的环境时，事件驱动模型通常是一个好的选择：\n\n程序中有许多任务，而且…\n1. 任务之间高度独立（因此它们不需要互相通信，或者等待彼此）而且…\n2. 在等待事件到来时，某些任务会阻塞。\n3. 当应用程序需要在任务间共享可变的数据时，这也是一个不错的选择，因为这里不需要采用同步处理。\n\n网络应用程序通常都有上述这些特点，这使得它们能够很好的契合事件驱动编程模型。\n\n###### **重用已有的应用**\n在Twisted创建之前就已经有了许多针对多种流行的网络协议的客户端和服务器实现了。为什么Glyph不直接用Apache、IRCd、BIND、OpenSSH或者任何其他已有的应用，而要为Twisted从头开始重新实现各个协议的客户端和服务器呢？\n\n问题在于所有这些已有的实现都存在有从头写起的网络层代码，通常都是C代码。而应用层代码直接同网络层耦合在一起，这使得它们非常难以以库的形式来复用。当要一起使用这些组件时，如果希望在多个协议中暴露相同的数据，则它们必须以黑盒的形式来看待，这使得开发者根本没机会重用代码。此外，服务器和客户端的实现通常是分离的，彼此之间不共享代码。要扩展这些应用，维护跨平台的客户端-服务器兼容性的难度本不至于这么大。\n\nTwisted中的客户端和服务器是用Python开发的，采用了一致性的接口。这使得开发新的客户端和服务器变得很容易实现，可以在客户端和服务器之间共享代码，在协议之间共享应用逻辑，以及对某个实现的代码做测试。\n\n###### **React模式**\nTwisted实现了设计模式中的反应堆（reactor）模式，这种模式在单线程环境中调度多个事件源产生的事件到它们各自的事件处理例程中去。\n\nTwisted的核心就是reactor事件循环。Reactor可以感知网络、文件系统以及定时器事件。它等待然后处理这些事件，从特定于平台的行为中抽象出来，并提供统一的接口，使得在网络协议栈的任何位置对事件做出响应都变得简单。\n\n基本上reactor完成的任务就是：\n\n```python\nwhile True:\n    timeout = time_until_next_timed_event()\n    events = wait_for_events(timeout)\n    events += timed_events_until(now())\n    for event in events:\n        event.process()\n```\n\nTwisted目前在所有平台上的默认reactor都是基于poll API的（UNIX规范第3版（SUSv3）中描述）。此外，Twisted还支持一些特定于平台的高容量多路复用API。这些reactor包括基于FreeBSD中kqueue机制的KQueue reactor，支持epoll接口的系统（目前是Linux 2.6）中的epoll reactor，以及基于Windows下的输入输出完成端口的IOCP reactor。\n\n在实现轮询的相关细节中，Twisted需要考虑的包括：\n\n+ 网络和文件系统的限制\n+ 缓冲行为\n+ 如何检测连接丢失\n+ 出现错误时的返回值\n\nTwisted的reactor实现同时也考虑了正确使用底层的非阻塞式API，并正确处理各种边界情况。由于Python中没有暴露出IOCP API，因此Twisted需要维护自己的实现。\n\n###### **管理回调链**\n\n回调是事件驱动编程模型中的基础，也是reactor通知应用程序事件已经处理完成的方式。随着程序规模不断扩大，基于事件驱动的程序需要同时处理事件处理成功和出错的情况，这使得程序变得越来越复杂。若没有注册一个合适的回调，程序就会阻塞，因为这个事件处理的过程绝不会发生。出现错误时需要通过应用程序的不同层次从网络栈向上传递回调链。\n\n下面是两段Python伪码，分别是同步和异步模式下获取URL的玩具代码。让我们相互比较一下这两个版本，看看基于事件驱动的程序有什么缺陷：\n\n以同步的方式获取URL：\n\n```python\nimport getPage\n\ndef processPage(page):\n    print page\n\ndef logError(error):\n    print error\n\ndef finishProcessing(value):\n    print \"Shutting down...\"\n    exit(0)\n\nurl = \"http://google.com\"\ntry:\n    page = getPage(url)\n    processPage(page)\nexcept Error, e:\n    logError(error)\nfinally:\n    finishProcessing()\n```\n以异步的方式获取URL：\n\n```python\nfrom twisted.internet import reactor\nimport getPage\n\ndef processPage(page):\n    print page\n    finishProcessing()\n\ndef logError(error):\n    print error\n    finishProcessing()\n\ndef finishProcessing(value):\n    print \"Shutting down...\"\n    reactor.stop()\n\nurl = \"http://google.com\"\n# getPage takes: url, \n# success callback, error callback\ngetPage(url, processPage, logError)\n\nreactor.run()\n```\n\n在异步版的URL获取器中，reactor.run()启动reactor事件循环。在同步和异步版程序中，我们假定getPage函数处理获取页面的工作。如果获取成功就调用processPage，如果尝试获取页面时出现了Exception（异常），logError就得到调用。无论哪种情况，最后都要调用finishProcessing。\n\n异步版中的logError回调正对应于同步版中的try/except块。对processPage的回调对应于else块，无条件回调的finishProcessing就对应于finally块。\n\n在同步版中，代码结构直接显示出有一个try/except块，logError和processPage这两者间只会取其一调用一次，而finishProcessing总是会被调用一次。在异步版中需要由程序员自己负责正确调用成功和失败情况下的回调链。如果由于编程错误，在processPage或者logError的回调链之后没有调用finishProcessing，reactor事件循环将永远不会停止，程序就会卡住。\n\n这个玩具式的例子告诉我们在开发Twisted的头几年里这种复杂性令程序员感到非常沮丧。而Twisted应对这种复杂性的方式是新增一个称为Deferred（延迟）的对象。\n\n###### Deferreds\nDeferred对象以抽象化的方式表达了一种思想，即结果还尚不存在。它同样能够帮助管理产生这个结果所需要的回调链。当从函数中返回时，Deferred对象承诺在某个时刻函数将产生一个结果。返回的Deferred对象中包含所有注册到事件上的回调引用，因此在函数间只需要传递这一个对象即可，跟踪这个对象比单独管理所有的回调要简单的多。\n\nDeferred对象包含一对回调链，一个是针对操作成功的回调，一个是针对操作失败的回调。初始状态下Deferred对象的两条链都为空。在事件处理的过程中，每个阶段都为其添加处理成功的回调和处理失败的回调。当一个异步结果到来时，Deferred对象就被“激活”，那么处理成功的回调和处理失败的回调就可以以合适的方式按照它们添加进来的顺序依次得到调用。\n\n异步版URL获取器采用Deferred对象后的代码如下：\n\n```python\nfrom twisted.internet import reactor\nimport getPage\n\ndef processPage(page):\n    print page\n\ndef logError(error):\n    print error\n\ndef finishProcessing(value):\n    print \"Shutting down...\"\n    reactor.stop()\n\nurl = \"http://google.com\"\ndeferred = getPage(url) # getPage returns a Deferred\ndeferred.addCallbacks(success, failure)\ndeferred.addBoth(stop)\n\nreactor.run()\n```\n\n在这个版本中调用的事件处理函数与之前相同，但它们都注册到了一个单独的Deferred对象上，而不是分散在代码各处再以参数形式传递给getPage。\n\nDeferred对象创建时包含两个添加回调的阶段。第一阶段，addCallbacks将 processPage和logError添加到它们各自归属的回调链中。然后addBoth再将finishProcessing同时添加到这两个回调链上。用图解的方式来看，回调链应该如图所示：\n![Deferred 流程示例](/img/1570783134086.png)\n\nDeferred对象只能被激活一次，如果试图重复激活将引发一个异常。这使得Deferred对象的语义相当接近于同步版中的try/except块。从而让异步事件的处理能更容易推断，避免由于针对单个事件的回调调用多了一个或少了一个而产生微妙的bug。\n\n理解Deferred对象对于理解Twisted程序的执行流是非常重要的。然而当使用Twisted为我们提供的针对网络协议的高层抽象时，通常情况下我们完全不需要直接使用Deferred对象。\n\nDeferred对象所包含的抽象概念是非常强大的，这种思想已经被许多其他的事件驱动平台所借用，包括jQuery、Dojo和Mochikit。\n\n\n###### Transports\nTransports代表网络中两个通信结点之间的连接。Transports负责描述连接的细节，比如连接是面向流式的还是面向数据报的，流控以及可靠性。TCP、UDP和Unix套接字可作为transports的例子。它们被设计为“满足最小功能单元，同时具有最大程度的可复用性”，而且从协议实现中分离出来，这让许多协议可以采用相同类型的传输。Transports实现了ITransports接口，它包含如下的方法：\n\n>write                   以非阻塞的方式按顺序依次将数据写到物理连接上\nwriteSequence           将一个字符串列表写到物理连接上\nloseConnection          将所有挂起的数据写入，然后关闭连接\ngetPeer                 取得连接中对端的地址信息\ngetHost                 取得连接中本端的地址信息\n\n将transports从协议中分离出来也使得对这两个层次的测试变得更加简单。可以通过简单地写入一个字符串来模拟传输，用这种方式来检查。\n\n###### Protocols\n\nProtocols描述了如何以异步的方式处理网络中的事件。HTTP、DNS以及IMAP是应用层协议中的例子。Protocols实现了IProtocol接口，它包含如下的方法：\n>makeConnection               在transport对象和服务器之间建立一条连接\nconnectionMade               连接建立起来后调用\ndataReceived                 接收数据时调用\nconnectionLost               关闭连接时调用\n\n我们最好以一个例子来说明reactor、protocols以及transports这三者之间的关系。以下是完整的echo服务器和客户端的实现，首先来看看服务器部分：\n\n```python\nfrom twisted.internet import protocol, reactor\n\nclass Echo(protocol.Protocol):\n    def dataReceived(self, data):\n        # As soon as any data is received, write it back\n        self.transport.write(data)\n\nclass EchoFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return Echo()\n\nreactor.listenTCP(8000, EchoFactory())\nreactor.run()\n```\n接着是客户端部分：\n\n```python\nfrom twisted.internet import reactor, protocol\n\nclass EchoClient(protocol.Protocol):\n    def connectionMade(self):\n        self.transport.write(\"hello, world!\")\n\ndef dataReceived(self, data):\n    print \"Server said:\", data\n        self.transport.loseConnection()\n\ndef connectionLost(self, reason):\n    print \"connection lost\"\n\nclass EchoFactory(protocol.ClientFactory):\n    def buildProtocol(self, addr):\n        return EchoClient()\n\ndef clientConnectionFailed(self, connector, reason):\n    print \"Connection failed - goodbye!\"\n        reactor.stop()\n\ndef clientConnectionLost(self, connector, reason):\n    print \"Connection lost - goodbye!\"\n        reactor.stop()\n\nreactor.connectTCP(\"localhost\", 8000, EchoFactory())\nreactor.run()\n```\n运行服务器端脚本将启动一个TCP服务器，监听端口8000上的连接。服务器采用的是Echo协议，数据经TCP transport对象写出。运行客户端脚本将对服务器发起一个TCP连接，回显服务器端的回应然后终止连接并停止reactor事件循环。这里的Factory用来对连接的双方生成protocol对象实例。两端的通信是异步的，connectTCP负责注册回调函数到reactor事件循环中，当socket上有数据可读时通知回调处理。\n\n###### Applications\nTwisted是用来创建具有可扩展性、跨平台的网络服务器和客户端的引擎。在生产环境中，以标准化的方式简化部署这些应用的过程对于Twisted这种被广泛采用的平台来说是非常重要的一环。为此，Twisted开发了一套应用程序基础组件，采用可重用、可配置的方式来部署Twisted应用。这种方式使程序员避免堆砌千篇一律的代码来将应用程序同已有的工具整合在一起，这包括精灵化进程（daemonization）、日志处理、使用自定义的reactor循环、对代码做性能剖析等。\n\n应用程序基础组件包含4个主要部分：服务（Service）、应用（Application）、配置管理（通过TAC文件和插件）以及twistd命令行程序。为了说明这个基础组件，我们将上一节的Echo服务器转变成一个应用。\n\n+ **Service**\nService就是IService接口下实现的可以启动和停止的组件。Twisted自带有TCP、FTP、HTTP、SSH、DNS等服务以及其他协议的实现。其中许多Service都可以注册到单独的应用中。IService接口的核心是：\n>startService    启动服务。可能包含加载配置数据，设定数据库连接或者监听某个端口\nstopService     关闭服务。可能包含将状态保存到磁盘，关闭数据库连接或者停止监听端口\n\n我们的Echo服务使用TCP协议，因此我们可以使用Twisted中IService接口下默认的TCPServer实现。\n\n+ **Application**\nApplication是处于最顶层的Service，代表了整个Twisted应用程序。Service需要将其自身同Application注册，然后就可以用下面我们将介绍的部署工具twistd搜索并运行应用程序。我们将创建一个可以同Echo Service注册的Echo应用。\n+ **TAC文件**\n当在一个普通的Python文件中管理Twisted应用程序时，需要由开发者负责编写启动和停止reactor事件循环以及配置应用程序的代码。在Twisted的基础组件中，协议的实现都是在一个模块中完成的，需要使用到这些协议的Service可以注册到一个Twisted应用程序配置文件中（TAC文件）去，这样reactor事件循环和程序配置就可以由外部组件来进行管理。\n\n要将我们的Echo服务器转变成一个Echo应用，我们可以按照以下几个简单的步骤来完成：\n\n1. 将Echo服务器的Protocol部分移到它们自己所归属的模块中去。\n\n2. 在TAC文件中：\n\n\t1. 创建一个Echo应用。\n\t2. 创建一个TCPServer的Service实例，它将使用我们的EchoFactory，然后同前面创建的应用完成注册。\n\t\n管理reactor事件循环的代码将由twistd来负责，我们下面会对此进行讨论。这样，应用程序的代码就变成这样了：\necho.py文件：\n\n```python\nfrom twisted.internet import protocol, reactor\n\nclass Echo(protocol.Protocol):\n    def dataReceived(self, data):\n        self.transport.write(data)\n\nclass EchoFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return Echo()\n```\n\n+ **twistd**\ntwistd（读作“twist-dee”）是一个跨平台的用来部署Twisted应用程序的工具。它执行TAC文件并负责处理启动和停止应用程序。作为Twisted在网络编程中具有“内置电池”能力的一部分，twistd自带有一些非常有用的配置标志，包括将应用程序转变为守护进程、定义日志文件的路径、设定特权级别、在chroot下运行、使用非默认的reactor，甚至是在profiler下运行应用程序。\n\n我们可以像这样运行这个Echo服务应用：\n\n```python\n$ twistd –y echo_server.tac\n```\n\n在这个简单的例子里，twistd将这个应用程序作为守护进程来启动，日志记录在twistd.log文件中。启动和停止应用后，日志文件内容如下：\n\n```python\n2011-11-19 22:23:07-0500 [-] Log opened.\n2011-11-19 22:23:07-0500 [-] twistd 11.0.0 (/usr/bin/python 2.7.1) starting up.\n2011-11-19 22:23:07-0500 [-] reactor class: twisted.internet.selectreactor.SelectReactor.\n2011-11-19 22:23:07-0500 [-] echo.EchoFactory starting on 8000\n2011-11-19 22:23:07-0500 [-] Starting factory <echo.EchoFactory instance at 0x12d8670>\n2011-11-19 22:23:20-0500 [-] Received SIGTERM, shutting down.\n2011-11-19 22:23:20-0500 [-] (TCP Port 8000 Closed)\n2011-11-19 22:23:20-0500 [-] Stopping factory <echo.EchoFactory instance at 0x12d8670>\n2011-11-19 22:23:20-0500 [-] Main loop terminated.\n2011-11-19 22:23:20-0500 [-] Server Shut Down.\n```\n\n通过使用Twisted框架中的基础组件来运行服务，这么做使得开发人员能够不用再编写类似守护进程和记录日志这样的冗余代码了。这同样也为部署应用程序建立了一个标准的命令行接口。\n\n###### Plugins\n\n对于运行Twisted应用程序的方法，除了基于TAC文件外还有一种可选的方法，这就是插件系统。TAC系统可以很方便的将Twisted预定义的服务同应用程序配置文件注册，而插件系统能够方便的将用户自定义的服务注册为twistd工具的子命令，然后扩展应用程序的命令行接口。\n\n在使用插件系统时：\n\n1. 由于只有plugin API需要保持稳定，这使得第三方开发者能很容易地扩展软件。\n\n2. 插件发现能力已经集成到系统中了。插件可以在程序首次运行时加载并保存，每次程序启动时会重新触发插件发现过程，或者也可以在程序运行期间反复轮询新插件，这使得在程序已经启动后我们还可以判断是否有新的插件安装上了。\n\n当使用Twisted插件系统来扩展软件时，我们要做的就是创建IPlugin接口下实现的对象并将它们放到一个特定的位置中，这里插件系统知道该如何去找到它们。\n\n我们已经将Echo服务转换为一个Twisted应用程序了，而将其转换为一个Twisted插件也是非常简单直接的。在我们之前的Echo模块中，除了包含有Echo协议和EchoFactory的定义之外，现在我们还要添加一个名为twistd的目录，其中还包含着一个名为plugins的子目录，这里正是我们需要定义echo插件的地方。通过这个插件，我们可以启动一个echo服务，并将需要使用的端口号作为参数指定给twistd工具。\n\n```python\nfrom zope.interface import implements\n\nfrom twisted.python import usage\nfrom twisted.plugin import IPlugin\nfrom twisted.application.service import IServiceMaker\nfrom twisted.application import internet\n\nfrom echo import EchoFactory\n\nclass Options(usage.Options):\n    optParameters = [[\"port\", \"p\", 8000, \"The port number to listen on.\"]]\n\nclass EchoServiceMaker(object):\n    implements(IServiceMaker, IPlugin)\n    tapname = \"echo\"\n    description = \"A TCP-based echo server.\"\n    options = Options\n\ndef makeService(self, options):\n    \"\"\"\n    Construct a TCPServer from a factory defined in myproject.\n    \"\"\"\n    return internet.TCPServer(int(options[\"port\"]), EchoFactory())\n\nserviceMaker = EchoServiceMaker()\n```\n\n现在，我们的Echo服务器将作为一个服务选项出现在twistd –help的输出中。运行twistd echo –port=1235将在端口1235上启动一个Echo服务器。\n\nTwisted还带有一个可拔插的针对服务器端认证的模块twisted.cred，插件系统常见的用途就是为应用程序添加一个认证模式。我们可以使用twisted.cred中现成的AuthOptionMixin类来添加针对各种认证的命令行支持，或者是添加新的认证类型。比如，我们可以使用插件系统来添加基于本地Unix密码数据库或者是基于LDAP服务器的认证方式。\n\ntwistd工具中附带有许多Twisted所支持的协议插件，只用一条单独的命令就可以完成启动服务器的工作了。这里有一些通过twistd启动服务器的例子：\n\n```python\ntwistd web –port 8080 –path .\n```\n\n这条命令将在8080端口启动一个HTTP服务器，在当前目录中负责处理静态和动态页面请求。\n\n```python\ntwistd dns –p 5553 –hosts-file=hosts\n```\n\n\n这条命令在端口5553上启动一个DNS服务器，解析指定的文件hosts中的域名，这个文件的内容格式同/etc/hosts一样。\n\n```python\nsudo twistd conch –p tcp:2222\n```\n\n这条命令在端口2222上启动一个SSH服务器。ssh的密钥必须独立设定。\n\n```python\ntwistd mail –E –H localhost –d localhost=emails\n```\n\n这条命令启动一个ESMTP POP3服务器，为本地主机接收邮件并保存到指定的emails目录下。\n\n我们可以方便的通过twistd来搭建一个用于测试客户端功能的服务器，但它同样是可装载的、产品级的服务器实现。\n\n在部署应用程序的方式上，Twisted通过TAC文件、插件以及命令行工具twistd的部署方式已经获得了成功。但是有趣的是，对于大多数大型Twisted应用程序来说，部署它们仍然需要重写一些这类管理和监控组件；Twisted的架构并没有对系统管理员的需求呈现出太多的友好性。这也反映了一个事实，那就是对于系统管理员来说Twisted历来就没有太多架构可言，而这些系统管理员才是部署和维护应用程序的专家。在这方面，Twisted在未来架构设计的决策上需要更积极的征求这类专家级用户的反馈意见。\n\n[本文内容引用自此处](https://www.cnblogs.com/xianguang/p/7027661.html)","source":"_posts/Twisted  介绍.md","raw":"---\ntitle: Twisted  介绍\ncategories:\n- Python笔记\ntags: \n- Python\n- Core Programming\n- Note\n---\n\n## Twisted\n\n\n### Python Twisted介绍\nTwisted是用Python实现的基于事件驱动的网络引擎框架。Twisted诞生于2000年初，在当时的网络游戏开发者看来，无论他们使用哪种语言，手中都鲜有可兼顾扩展性及跨平台的网络库。Twisted的作者试图在当时现有的环境下开发游戏，这一步走的非常艰难，他们迫切地需要一个可扩展性高、基于事件驱动、跨平台的网络开发框架，为此他们决定自己实现一个，并从那些之前的游戏和网络应用程序的开发者中学习，汲取他们的经验教训。\n\nTwisted支持许多常见的传输及应用层协议，包括TCP、UDP、SSL/TLS、HTTP、IMAP、SSH、IRC以及FTP。就像python一样，Twisted也具有“内置电池”（batteries-included）的特点。Twisted对于其支持的所有协议都带有客户端和服务器实现，同时附带有基于命令行的工具，使得配置和部署产品级的Twisted应用变得非常方便。\n\n### 为什么需要Twisted\n2000年时，Twisted的作者Glyph正在开发一个名为Twisted Reality的基于文本方式的多人在线游戏。这个游戏采用Java开发，里面尽是一堆线程——每个连接就有3个线程处理。处理输入的线程会在读操作上阻塞，处理输出的线程将在一些写操作上阻塞，还有一个“逻辑”线程将在等待定时器超时或者事件入队列时休眠。随着玩家们在虚拟世界中移动并交互时，线程出现死锁，缓存被污染，程序中的加锁逻辑几乎从来就没对过——采用多线程使得整个软件变得复杂、漏洞百出而且极难扩展。\n\n为了寻求其他的解决方案，作者发现了Python，特别是Python中用于对流式对象比如socket和pipe进行多路I/O复用的select模块（UNIX规范第3版（SUSv3）描述了select）。那时，Java并没有提供操作系统的select接口或者任何其他的异步I/O API（针对非阻塞式I/O的包java.nio已经在J2SE 1.4中加入了，2002年发布）。通过用Python中的select模块快速搭建起游戏的原型，这迅速降低了程序的复杂度，并且比多线程版本要更加可靠。\n\nGlyph迅速转向了Python、select以及基于事件驱动的编程。他使用Python的select模块为游戏编写了客户端和服务器。但他想要的还不止于此。从根本上说，他希望能将网络行为转变为对游戏中的对象的方法调用。如果你能在游戏中收取邮件会怎样，就像Nethack mailer这种守护进程一样？如果游戏中的每位玩家都拥有一个主页呢？Glyph发现他需要优秀的IMAP以及HTTP客户端和服务器的Python实现，而这些都要采用select。\n\n他首先转向了Medusa，这是一个在90年代中期开发的平台，在这里可以采用Python中的asyncore模块来编写网络服务。asyncore是一个异步化处理socket的模块，在操作系统的select API之上构建了一个调度器和回调接口。\n\n这对于Glyph来说是个激动人心的发现，但Medusa有两个缺点：\n1. 这个项目到2001年就不再维护了，那正是glyph开发Twisted Reality的时候。\n2. asyncore只是对socket的一个薄封装层，应用程序的编写者仍然需要直接操作socket。这意味着程序可移植性的担子仍然落在程序员自己身上。此外，那时asyncore对Windows的支持还有问题，Glyph希望能在Windows上运行一个带有图形用户界面的客户端。\nGlyph需要自己实现一个网络引擎平台，而且他意识到Twisted Reality已经打开了问题的大门，这和他的游戏一样有趣。\n\n随着时间的推移，Twisted Reality这个游戏就演化成了Twisted网络引擎平台。它可以做到当时Python中已有的网络平台所无法做到的事情：\n+ 使用基于事件驱动的编程模型，而不是多线程模型。\n+ 跨平台：为主流操作系统平台暴露出的事件通知系统提供统一的接口。\n+ “内置电池”的能力：提供流行的应用层协议实现，因此Twisted马上就可为开发人员所用。\n+ 符合RFC规范，已经通过健壮的测试套件证明了其一致性。\n+ 能很容易的配合多个网络协议一起使用。\n+ 可扩展。\n\n### Twisted架构概览\nTwisted是一个事件驱动型的网络引擎。由于事件驱动编程模型在Twisted的设计哲学中占有重要的地位，因此这里有必要花点时间来回顾一下究竟事件驱动意味着什么。\n\n事件驱动编程是一种编程范式，这里程序的执行流由外部事件来决定。它的特点是包含一个事件循环，当外部事件发生时使用回调机制来触发相应的处理。另外两种常见的编程范式是（单线程）同步以及多线程编程。\n\n在单线程同步模型中，任务按照顺序执行。如果某个任务因为I/O而阻塞，其他所有的任务都必须等待，直到它完成之后它们才能依次执行。这种明确的执行顺序和串行化处理的行为是很容易推断得出的。如果任务之间并没有互相依赖的关系，但仍然需要互相等待的话这就使得程序不必要的降低了运行速度。\n\n在多线程版本中，这3个任务分别在独立的线程中执行。这些线程由操作系统来管理，在多处理器系统上可以并行处理，或者在单处理器系统上交错执行。这使得当某个线程阻塞在某个资源的同时其他线程得以继续执行。与完成类似功能的同步程序相比，这种方式更有效率，但程序员必须写代码来保护共享资源，防止其被多个线程同时访问。多线程程序更加难以推断，因为这类程序不得不通过线程同步机制如锁、可重入函数、线程局部存储或者其他机制来处理线程安全问题，如果实现不当就会导致出现微妙且令人痛不欲生的bug。\n\n在事件驱动版本的程序中，3个任务**交错执行**，但仍然在一个单独的线程控制中。当处理I/O或者其他昂贵的操作时，注册一个回调到事件循环中，然后当I/O操作完成时继续执行。回调描述了该如何处理某个事件。事件循环轮询所有的事件，当事件到来时将它们分配给等待处理事件的回调函数。这种方式让程序尽可能的得以执行而不需要用到额外的线程。事件驱动型程序比多线程程序更容易推断出行为，因为程序员不需要关心线程安全问题。\n\n当我们面对如下的环境时，事件驱动模型通常是一个好的选择：\n\n程序中有许多任务，而且…\n1. 任务之间高度独立（因此它们不需要互相通信，或者等待彼此）而且…\n2. 在等待事件到来时，某些任务会阻塞。\n3. 当应用程序需要在任务间共享可变的数据时，这也是一个不错的选择，因为这里不需要采用同步处理。\n\n网络应用程序通常都有上述这些特点，这使得它们能够很好的契合事件驱动编程模型。\n\n###### **重用已有的应用**\n在Twisted创建之前就已经有了许多针对多种流行的网络协议的客户端和服务器实现了。为什么Glyph不直接用Apache、IRCd、BIND、OpenSSH或者任何其他已有的应用，而要为Twisted从头开始重新实现各个协议的客户端和服务器呢？\n\n问题在于所有这些已有的实现都存在有从头写起的网络层代码，通常都是C代码。而应用层代码直接同网络层耦合在一起，这使得它们非常难以以库的形式来复用。当要一起使用这些组件时，如果希望在多个协议中暴露相同的数据，则它们必须以黑盒的形式来看待，这使得开发者根本没机会重用代码。此外，服务器和客户端的实现通常是分离的，彼此之间不共享代码。要扩展这些应用，维护跨平台的客户端-服务器兼容性的难度本不至于这么大。\n\nTwisted中的客户端和服务器是用Python开发的，采用了一致性的接口。这使得开发新的客户端和服务器变得很容易实现，可以在客户端和服务器之间共享代码，在协议之间共享应用逻辑，以及对某个实现的代码做测试。\n\n###### **React模式**\nTwisted实现了设计模式中的反应堆（reactor）模式，这种模式在单线程环境中调度多个事件源产生的事件到它们各自的事件处理例程中去。\n\nTwisted的核心就是reactor事件循环。Reactor可以感知网络、文件系统以及定时器事件。它等待然后处理这些事件，从特定于平台的行为中抽象出来，并提供统一的接口，使得在网络协议栈的任何位置对事件做出响应都变得简单。\n\n基本上reactor完成的任务就是：\n\n```python\nwhile True:\n    timeout = time_until_next_timed_event()\n    events = wait_for_events(timeout)\n    events += timed_events_until(now())\n    for event in events:\n        event.process()\n```\n\nTwisted目前在所有平台上的默认reactor都是基于poll API的（UNIX规范第3版（SUSv3）中描述）。此外，Twisted还支持一些特定于平台的高容量多路复用API。这些reactor包括基于FreeBSD中kqueue机制的KQueue reactor，支持epoll接口的系统（目前是Linux 2.6）中的epoll reactor，以及基于Windows下的输入输出完成端口的IOCP reactor。\n\n在实现轮询的相关细节中，Twisted需要考虑的包括：\n\n+ 网络和文件系统的限制\n+ 缓冲行为\n+ 如何检测连接丢失\n+ 出现错误时的返回值\n\nTwisted的reactor实现同时也考虑了正确使用底层的非阻塞式API，并正确处理各种边界情况。由于Python中没有暴露出IOCP API，因此Twisted需要维护自己的实现。\n\n###### **管理回调链**\n\n回调是事件驱动编程模型中的基础，也是reactor通知应用程序事件已经处理完成的方式。随着程序规模不断扩大，基于事件驱动的程序需要同时处理事件处理成功和出错的情况，这使得程序变得越来越复杂。若没有注册一个合适的回调，程序就会阻塞，因为这个事件处理的过程绝不会发生。出现错误时需要通过应用程序的不同层次从网络栈向上传递回调链。\n\n下面是两段Python伪码，分别是同步和异步模式下获取URL的玩具代码。让我们相互比较一下这两个版本，看看基于事件驱动的程序有什么缺陷：\n\n以同步的方式获取URL：\n\n```python\nimport getPage\n\ndef processPage(page):\n    print page\n\ndef logError(error):\n    print error\n\ndef finishProcessing(value):\n    print \"Shutting down...\"\n    exit(0)\n\nurl = \"http://google.com\"\ntry:\n    page = getPage(url)\n    processPage(page)\nexcept Error, e:\n    logError(error)\nfinally:\n    finishProcessing()\n```\n以异步的方式获取URL：\n\n```python\nfrom twisted.internet import reactor\nimport getPage\n\ndef processPage(page):\n    print page\n    finishProcessing()\n\ndef logError(error):\n    print error\n    finishProcessing()\n\ndef finishProcessing(value):\n    print \"Shutting down...\"\n    reactor.stop()\n\nurl = \"http://google.com\"\n# getPage takes: url, \n# success callback, error callback\ngetPage(url, processPage, logError)\n\nreactor.run()\n```\n\n在异步版的URL获取器中，reactor.run()启动reactor事件循环。在同步和异步版程序中，我们假定getPage函数处理获取页面的工作。如果获取成功就调用processPage，如果尝试获取页面时出现了Exception（异常），logError就得到调用。无论哪种情况，最后都要调用finishProcessing。\n\n异步版中的logError回调正对应于同步版中的try/except块。对processPage的回调对应于else块，无条件回调的finishProcessing就对应于finally块。\n\n在同步版中，代码结构直接显示出有一个try/except块，logError和processPage这两者间只会取其一调用一次，而finishProcessing总是会被调用一次。在异步版中需要由程序员自己负责正确调用成功和失败情况下的回调链。如果由于编程错误，在processPage或者logError的回调链之后没有调用finishProcessing，reactor事件循环将永远不会停止，程序就会卡住。\n\n这个玩具式的例子告诉我们在开发Twisted的头几年里这种复杂性令程序员感到非常沮丧。而Twisted应对这种复杂性的方式是新增一个称为Deferred（延迟）的对象。\n\n###### Deferreds\nDeferred对象以抽象化的方式表达了一种思想，即结果还尚不存在。它同样能够帮助管理产生这个结果所需要的回调链。当从函数中返回时，Deferred对象承诺在某个时刻函数将产生一个结果。返回的Deferred对象中包含所有注册到事件上的回调引用，因此在函数间只需要传递这一个对象即可，跟踪这个对象比单独管理所有的回调要简单的多。\n\nDeferred对象包含一对回调链，一个是针对操作成功的回调，一个是针对操作失败的回调。初始状态下Deferred对象的两条链都为空。在事件处理的过程中，每个阶段都为其添加处理成功的回调和处理失败的回调。当一个异步结果到来时，Deferred对象就被“激活”，那么处理成功的回调和处理失败的回调就可以以合适的方式按照它们添加进来的顺序依次得到调用。\n\n异步版URL获取器采用Deferred对象后的代码如下：\n\n```python\nfrom twisted.internet import reactor\nimport getPage\n\ndef processPage(page):\n    print page\n\ndef logError(error):\n    print error\n\ndef finishProcessing(value):\n    print \"Shutting down...\"\n    reactor.stop()\n\nurl = \"http://google.com\"\ndeferred = getPage(url) # getPage returns a Deferred\ndeferred.addCallbacks(success, failure)\ndeferred.addBoth(stop)\n\nreactor.run()\n```\n\n在这个版本中调用的事件处理函数与之前相同，但它们都注册到了一个单独的Deferred对象上，而不是分散在代码各处再以参数形式传递给getPage。\n\nDeferred对象创建时包含两个添加回调的阶段。第一阶段，addCallbacks将 processPage和logError添加到它们各自归属的回调链中。然后addBoth再将finishProcessing同时添加到这两个回调链上。用图解的方式来看，回调链应该如图所示：\n![Deferred 流程示例](/img/1570783134086.png)\n\nDeferred对象只能被激活一次，如果试图重复激活将引发一个异常。这使得Deferred对象的语义相当接近于同步版中的try/except块。从而让异步事件的处理能更容易推断，避免由于针对单个事件的回调调用多了一个或少了一个而产生微妙的bug。\n\n理解Deferred对象对于理解Twisted程序的执行流是非常重要的。然而当使用Twisted为我们提供的针对网络协议的高层抽象时，通常情况下我们完全不需要直接使用Deferred对象。\n\nDeferred对象所包含的抽象概念是非常强大的，这种思想已经被许多其他的事件驱动平台所借用，包括jQuery、Dojo和Mochikit。\n\n\n###### Transports\nTransports代表网络中两个通信结点之间的连接。Transports负责描述连接的细节，比如连接是面向流式的还是面向数据报的，流控以及可靠性。TCP、UDP和Unix套接字可作为transports的例子。它们被设计为“满足最小功能单元，同时具有最大程度的可复用性”，而且从协议实现中分离出来，这让许多协议可以采用相同类型的传输。Transports实现了ITransports接口，它包含如下的方法：\n\n>write                   以非阻塞的方式按顺序依次将数据写到物理连接上\nwriteSequence           将一个字符串列表写到物理连接上\nloseConnection          将所有挂起的数据写入，然后关闭连接\ngetPeer                 取得连接中对端的地址信息\ngetHost                 取得连接中本端的地址信息\n\n将transports从协议中分离出来也使得对这两个层次的测试变得更加简单。可以通过简单地写入一个字符串来模拟传输，用这种方式来检查。\n\n###### Protocols\n\nProtocols描述了如何以异步的方式处理网络中的事件。HTTP、DNS以及IMAP是应用层协议中的例子。Protocols实现了IProtocol接口，它包含如下的方法：\n>makeConnection               在transport对象和服务器之间建立一条连接\nconnectionMade               连接建立起来后调用\ndataReceived                 接收数据时调用\nconnectionLost               关闭连接时调用\n\n我们最好以一个例子来说明reactor、protocols以及transports这三者之间的关系。以下是完整的echo服务器和客户端的实现，首先来看看服务器部分：\n\n```python\nfrom twisted.internet import protocol, reactor\n\nclass Echo(protocol.Protocol):\n    def dataReceived(self, data):\n        # As soon as any data is received, write it back\n        self.transport.write(data)\n\nclass EchoFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return Echo()\n\nreactor.listenTCP(8000, EchoFactory())\nreactor.run()\n```\n接着是客户端部分：\n\n```python\nfrom twisted.internet import reactor, protocol\n\nclass EchoClient(protocol.Protocol):\n    def connectionMade(self):\n        self.transport.write(\"hello, world!\")\n\ndef dataReceived(self, data):\n    print \"Server said:\", data\n        self.transport.loseConnection()\n\ndef connectionLost(self, reason):\n    print \"connection lost\"\n\nclass EchoFactory(protocol.ClientFactory):\n    def buildProtocol(self, addr):\n        return EchoClient()\n\ndef clientConnectionFailed(self, connector, reason):\n    print \"Connection failed - goodbye!\"\n        reactor.stop()\n\ndef clientConnectionLost(self, connector, reason):\n    print \"Connection lost - goodbye!\"\n        reactor.stop()\n\nreactor.connectTCP(\"localhost\", 8000, EchoFactory())\nreactor.run()\n```\n运行服务器端脚本将启动一个TCP服务器，监听端口8000上的连接。服务器采用的是Echo协议，数据经TCP transport对象写出。运行客户端脚本将对服务器发起一个TCP连接，回显服务器端的回应然后终止连接并停止reactor事件循环。这里的Factory用来对连接的双方生成protocol对象实例。两端的通信是异步的，connectTCP负责注册回调函数到reactor事件循环中，当socket上有数据可读时通知回调处理。\n\n###### Applications\nTwisted是用来创建具有可扩展性、跨平台的网络服务器和客户端的引擎。在生产环境中，以标准化的方式简化部署这些应用的过程对于Twisted这种被广泛采用的平台来说是非常重要的一环。为此，Twisted开发了一套应用程序基础组件，采用可重用、可配置的方式来部署Twisted应用。这种方式使程序员避免堆砌千篇一律的代码来将应用程序同已有的工具整合在一起，这包括精灵化进程（daemonization）、日志处理、使用自定义的reactor循环、对代码做性能剖析等。\n\n应用程序基础组件包含4个主要部分：服务（Service）、应用（Application）、配置管理（通过TAC文件和插件）以及twistd命令行程序。为了说明这个基础组件，我们将上一节的Echo服务器转变成一个应用。\n\n+ **Service**\nService就是IService接口下实现的可以启动和停止的组件。Twisted自带有TCP、FTP、HTTP、SSH、DNS等服务以及其他协议的实现。其中许多Service都可以注册到单独的应用中。IService接口的核心是：\n>startService    启动服务。可能包含加载配置数据，设定数据库连接或者监听某个端口\nstopService     关闭服务。可能包含将状态保存到磁盘，关闭数据库连接或者停止监听端口\n\n我们的Echo服务使用TCP协议，因此我们可以使用Twisted中IService接口下默认的TCPServer实现。\n\n+ **Application**\nApplication是处于最顶层的Service，代表了整个Twisted应用程序。Service需要将其自身同Application注册，然后就可以用下面我们将介绍的部署工具twistd搜索并运行应用程序。我们将创建一个可以同Echo Service注册的Echo应用。\n+ **TAC文件**\n当在一个普通的Python文件中管理Twisted应用程序时，需要由开发者负责编写启动和停止reactor事件循环以及配置应用程序的代码。在Twisted的基础组件中，协议的实现都是在一个模块中完成的，需要使用到这些协议的Service可以注册到一个Twisted应用程序配置文件中（TAC文件）去，这样reactor事件循环和程序配置就可以由外部组件来进行管理。\n\n要将我们的Echo服务器转变成一个Echo应用，我们可以按照以下几个简单的步骤来完成：\n\n1. 将Echo服务器的Protocol部分移到它们自己所归属的模块中去。\n\n2. 在TAC文件中：\n\n\t1. 创建一个Echo应用。\n\t2. 创建一个TCPServer的Service实例，它将使用我们的EchoFactory，然后同前面创建的应用完成注册。\n\t\n管理reactor事件循环的代码将由twistd来负责，我们下面会对此进行讨论。这样，应用程序的代码就变成这样了：\necho.py文件：\n\n```python\nfrom twisted.internet import protocol, reactor\n\nclass Echo(protocol.Protocol):\n    def dataReceived(self, data):\n        self.transport.write(data)\n\nclass EchoFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return Echo()\n```\n\n+ **twistd**\ntwistd（读作“twist-dee”）是一个跨平台的用来部署Twisted应用程序的工具。它执行TAC文件并负责处理启动和停止应用程序。作为Twisted在网络编程中具有“内置电池”能力的一部分，twistd自带有一些非常有用的配置标志，包括将应用程序转变为守护进程、定义日志文件的路径、设定特权级别、在chroot下运行、使用非默认的reactor，甚至是在profiler下运行应用程序。\n\n我们可以像这样运行这个Echo服务应用：\n\n```python\n$ twistd –y echo_server.tac\n```\n\n在这个简单的例子里，twistd将这个应用程序作为守护进程来启动，日志记录在twistd.log文件中。启动和停止应用后，日志文件内容如下：\n\n```python\n2011-11-19 22:23:07-0500 [-] Log opened.\n2011-11-19 22:23:07-0500 [-] twistd 11.0.0 (/usr/bin/python 2.7.1) starting up.\n2011-11-19 22:23:07-0500 [-] reactor class: twisted.internet.selectreactor.SelectReactor.\n2011-11-19 22:23:07-0500 [-] echo.EchoFactory starting on 8000\n2011-11-19 22:23:07-0500 [-] Starting factory <echo.EchoFactory instance at 0x12d8670>\n2011-11-19 22:23:20-0500 [-] Received SIGTERM, shutting down.\n2011-11-19 22:23:20-0500 [-] (TCP Port 8000 Closed)\n2011-11-19 22:23:20-0500 [-] Stopping factory <echo.EchoFactory instance at 0x12d8670>\n2011-11-19 22:23:20-0500 [-] Main loop terminated.\n2011-11-19 22:23:20-0500 [-] Server Shut Down.\n```\n\n通过使用Twisted框架中的基础组件来运行服务，这么做使得开发人员能够不用再编写类似守护进程和记录日志这样的冗余代码了。这同样也为部署应用程序建立了一个标准的命令行接口。\n\n###### Plugins\n\n对于运行Twisted应用程序的方法，除了基于TAC文件外还有一种可选的方法，这就是插件系统。TAC系统可以很方便的将Twisted预定义的服务同应用程序配置文件注册，而插件系统能够方便的将用户自定义的服务注册为twistd工具的子命令，然后扩展应用程序的命令行接口。\n\n在使用插件系统时：\n\n1. 由于只有plugin API需要保持稳定，这使得第三方开发者能很容易地扩展软件。\n\n2. 插件发现能力已经集成到系统中了。插件可以在程序首次运行时加载并保存，每次程序启动时会重新触发插件发现过程，或者也可以在程序运行期间反复轮询新插件，这使得在程序已经启动后我们还可以判断是否有新的插件安装上了。\n\n当使用Twisted插件系统来扩展软件时，我们要做的就是创建IPlugin接口下实现的对象并将它们放到一个特定的位置中，这里插件系统知道该如何去找到它们。\n\n我们已经将Echo服务转换为一个Twisted应用程序了，而将其转换为一个Twisted插件也是非常简单直接的。在我们之前的Echo模块中，除了包含有Echo协议和EchoFactory的定义之外，现在我们还要添加一个名为twistd的目录，其中还包含着一个名为plugins的子目录，这里正是我们需要定义echo插件的地方。通过这个插件，我们可以启动一个echo服务，并将需要使用的端口号作为参数指定给twistd工具。\n\n```python\nfrom zope.interface import implements\n\nfrom twisted.python import usage\nfrom twisted.plugin import IPlugin\nfrom twisted.application.service import IServiceMaker\nfrom twisted.application import internet\n\nfrom echo import EchoFactory\n\nclass Options(usage.Options):\n    optParameters = [[\"port\", \"p\", 8000, \"The port number to listen on.\"]]\n\nclass EchoServiceMaker(object):\n    implements(IServiceMaker, IPlugin)\n    tapname = \"echo\"\n    description = \"A TCP-based echo server.\"\n    options = Options\n\ndef makeService(self, options):\n    \"\"\"\n    Construct a TCPServer from a factory defined in myproject.\n    \"\"\"\n    return internet.TCPServer(int(options[\"port\"]), EchoFactory())\n\nserviceMaker = EchoServiceMaker()\n```\n\n现在，我们的Echo服务器将作为一个服务选项出现在twistd –help的输出中。运行twistd echo –port=1235将在端口1235上启动一个Echo服务器。\n\nTwisted还带有一个可拔插的针对服务器端认证的模块twisted.cred，插件系统常见的用途就是为应用程序添加一个认证模式。我们可以使用twisted.cred中现成的AuthOptionMixin类来添加针对各种认证的命令行支持，或者是添加新的认证类型。比如，我们可以使用插件系统来添加基于本地Unix密码数据库或者是基于LDAP服务器的认证方式。\n\ntwistd工具中附带有许多Twisted所支持的协议插件，只用一条单独的命令就可以完成启动服务器的工作了。这里有一些通过twistd启动服务器的例子：\n\n```python\ntwistd web –port 8080 –path .\n```\n\n这条命令将在8080端口启动一个HTTP服务器，在当前目录中负责处理静态和动态页面请求。\n\n```python\ntwistd dns –p 5553 –hosts-file=hosts\n```\n\n\n这条命令在端口5553上启动一个DNS服务器，解析指定的文件hosts中的域名，这个文件的内容格式同/etc/hosts一样。\n\n```python\nsudo twistd conch –p tcp:2222\n```\n\n这条命令在端口2222上启动一个SSH服务器。ssh的密钥必须独立设定。\n\n```python\ntwistd mail –E –H localhost –d localhost=emails\n```\n\n这条命令启动一个ESMTP POP3服务器，为本地主机接收邮件并保存到指定的emails目录下。\n\n我们可以方便的通过twistd来搭建一个用于测试客户端功能的服务器，但它同样是可装载的、产品级的服务器实现。\n\n在部署应用程序的方式上，Twisted通过TAC文件、插件以及命令行工具twistd的部署方式已经获得了成功。但是有趣的是，对于大多数大型Twisted应用程序来说，部署它们仍然需要重写一些这类管理和监控组件；Twisted的架构并没有对系统管理员的需求呈现出太多的友好性。这也反映了一个事实，那就是对于系统管理员来说Twisted历来就没有太多架构可言，而这些系统管理员才是部署和维护应用程序的专家。在这方面，Twisted在未来架构设计的决策上需要更积极的征求这类专家级用户的反馈意见。\n\n[本文内容引用自此处](https://www.cnblogs.com/xianguang/p/7027661.html)","slug":"Twisted  介绍","published":1,"date":"2019-10-12T10:01:26.493Z","updated":"2019-10-12T10:01:26.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3dwjsb50059ekuw267a3v4n","content":"<h2 id=\"Twisted\"><a href=\"#Twisted\" class=\"headerlink\" title=\"Twisted\"></a>Twisted</h2><h3 id=\"Python-Twisted介绍\"><a href=\"#Python-Twisted介绍\" class=\"headerlink\" title=\"Python Twisted介绍\"></a>Python Twisted介绍</h3><p>Twisted是用Python实现的基于事件驱动的网络引擎框架。Twisted诞生于2000年初，在当时的网络游戏开发者看来，无论他们使用哪种语言，手中都鲜有可兼顾扩展性及跨平台的网络库。Twisted的作者试图在当时现有的环境下开发游戏，这一步走的非常艰难，他们迫切地需要一个可扩展性高、基于事件驱动、跨平台的网络开发框架，为此他们决定自己实现一个，并从那些之前的游戏和网络应用程序的开发者中学习，汲取他们的经验教训。</p>\n<p>Twisted支持许多常见的传输及应用层协议，包括TCP、UDP、SSL/TLS、HTTP、IMAP、SSH、IRC以及FTP。就像python一样，Twisted也具有“内置电池”（batteries-included）的特点。Twisted对于其支持的所有协议都带有客户端和服务器实现，同时附带有基于命令行的工具，使得配置和部署产品级的Twisted应用变得非常方便。</p>\n<h3 id=\"为什么需要Twisted\"><a href=\"#为什么需要Twisted\" class=\"headerlink\" title=\"为什么需要Twisted\"></a>为什么需要Twisted</h3><p>2000年时，Twisted的作者Glyph正在开发一个名为Twisted Reality的基于文本方式的多人在线游戏。这个游戏采用Java开发，里面尽是一堆线程——每个连接就有3个线程处理。处理输入的线程会在读操作上阻塞，处理输出的线程将在一些写操作上阻塞，还有一个“逻辑”线程将在等待定时器超时或者事件入队列时休眠。随着玩家们在虚拟世界中移动并交互时，线程出现死锁，缓存被污染，程序中的加锁逻辑几乎从来就没对过——采用多线程使得整个软件变得复杂、漏洞百出而且极难扩展。</p>\n<p>为了寻求其他的解决方案，作者发现了Python，特别是Python中用于对流式对象比如socket和pipe进行多路I/O复用的select模块（UNIX规范第3版（SUSv3）描述了select）。那时，Java并没有提供操作系统的select接口或者任何其他的异步I/O API（针对非阻塞式I/O的包java.nio已经在J2SE 1.4中加入了，2002年发布）。通过用Python中的select模块快速搭建起游戏的原型，这迅速降低了程序的复杂度，并且比多线程版本要更加可靠。</p>\n<p>Glyph迅速转向了Python、select以及基于事件驱动的编程。他使用Python的select模块为游戏编写了客户端和服务器。但他想要的还不止于此。从根本上说，他希望能将网络行为转变为对游戏中的对象的方法调用。如果你能在游戏中收取邮件会怎样，就像Nethack mailer这种守护进程一样？如果游戏中的每位玩家都拥有一个主页呢？Glyph发现他需要优秀的IMAP以及HTTP客户端和服务器的Python实现，而这些都要采用select。</p>\n<p>他首先转向了Medusa，这是一个在90年代中期开发的平台，在这里可以采用Python中的asyncore模块来编写网络服务。asyncore是一个异步化处理socket的模块，在操作系统的select API之上构建了一个调度器和回调接口。</p>\n<p>这对于Glyph来说是个激动人心的发现，但Medusa有两个缺点：</p>\n<ol>\n<li>这个项目到2001年就不再维护了，那正是glyph开发Twisted Reality的时候。</li>\n<li>asyncore只是对socket的一个薄封装层，应用程序的编写者仍然需要直接操作socket。这意味着程序可移植性的担子仍然落在程序员自己身上。此外，那时asyncore对Windows的支持还有问题，Glyph希望能在Windows上运行一个带有图形用户界面的客户端。<br>Glyph需要自己实现一个网络引擎平台，而且他意识到Twisted Reality已经打开了问题的大门，这和他的游戏一样有趣。</li>\n</ol>\n<p>随着时间的推移，Twisted Reality这个游戏就演化成了Twisted网络引擎平台。它可以做到当时Python中已有的网络平台所无法做到的事情：</p>\n<ul>\n<li>使用基于事件驱动的编程模型，而不是多线程模型。</li>\n<li>跨平台：为主流操作系统平台暴露出的事件通知系统提供统一的接口。</li>\n<li>“内置电池”的能力：提供流行的应用层协议实现，因此Twisted马上就可为开发人员所用。</li>\n<li>符合RFC规范，已经通过健壮的测试套件证明了其一致性。</li>\n<li>能很容易的配合多个网络协议一起使用。</li>\n<li>可扩展。</li>\n</ul>\n<h3 id=\"Twisted架构概览\"><a href=\"#Twisted架构概览\" class=\"headerlink\" title=\"Twisted架构概览\"></a>Twisted架构概览</h3><p>Twisted是一个事件驱动型的网络引擎。由于事件驱动编程模型在Twisted的设计哲学中占有重要的地位，因此这里有必要花点时间来回顾一下究竟事件驱动意味着什么。</p>\n<p>事件驱动编程是一种编程范式，这里程序的执行流由外部事件来决定。它的特点是包含一个事件循环，当外部事件发生时使用回调机制来触发相应的处理。另外两种常见的编程范式是（单线程）同步以及多线程编程。</p>\n<p>在单线程同步模型中，任务按照顺序执行。如果某个任务因为I/O而阻塞，其他所有的任务都必须等待，直到它完成之后它们才能依次执行。这种明确的执行顺序和串行化处理的行为是很容易推断得出的。如果任务之间并没有互相依赖的关系，但仍然需要互相等待的话这就使得程序不必要的降低了运行速度。</p>\n<p>在多线程版本中，这3个任务分别在独立的线程中执行。这些线程由操作系统来管理，在多处理器系统上可以并行处理，或者在单处理器系统上交错执行。这使得当某个线程阻塞在某个资源的同时其他线程得以继续执行。与完成类似功能的同步程序相比，这种方式更有效率，但程序员必须写代码来保护共享资源，防止其被多个线程同时访问。多线程程序更加难以推断，因为这类程序不得不通过线程同步机制如锁、可重入函数、线程局部存储或者其他机制来处理线程安全问题，如果实现不当就会导致出现微妙且令人痛不欲生的bug。</p>\n<p>在事件驱动版本的程序中，3个任务<strong>交错执行</strong>，但仍然在一个单独的线程控制中。当处理I/O或者其他昂贵的操作时，注册一个回调到事件循环中，然后当I/O操作完成时继续执行。回调描述了该如何处理某个事件。事件循环轮询所有的事件，当事件到来时将它们分配给等待处理事件的回调函数。这种方式让程序尽可能的得以执行而不需要用到额外的线程。事件驱动型程序比多线程程序更容易推断出行为，因为程序员不需要关心线程安全问题。</p>\n<p>当我们面对如下的环境时，事件驱动模型通常是一个好的选择：</p>\n<p>程序中有许多任务，而且…</p>\n<ol>\n<li>任务之间高度独立（因此它们不需要互相通信，或者等待彼此）而且…</li>\n<li>在等待事件到来时，某些任务会阻塞。</li>\n<li>当应用程序需要在任务间共享可变的数据时，这也是一个不错的选择，因为这里不需要采用同步处理。</li>\n</ol>\n<p>网络应用程序通常都有上述这些特点，这使得它们能够很好的契合事件驱动编程模型。</p>\n<h6 id=\"重用已有的应用\"><a href=\"#重用已有的应用\" class=\"headerlink\" title=\"重用已有的应用\"></a><strong>重用已有的应用</strong></h6><p>在Twisted创建之前就已经有了许多针对多种流行的网络协议的客户端和服务器实现了。为什么Glyph不直接用Apache、IRCd、BIND、OpenSSH或者任何其他已有的应用，而要为Twisted从头开始重新实现各个协议的客户端和服务器呢？</p>\n<p>问题在于所有这些已有的实现都存在有从头写起的网络层代码，通常都是C代码。而应用层代码直接同网络层耦合在一起，这使得它们非常难以以库的形式来复用。当要一起使用这些组件时，如果希望在多个协议中暴露相同的数据，则它们必须以黑盒的形式来看待，这使得开发者根本没机会重用代码。此外，服务器和客户端的实现通常是分离的，彼此之间不共享代码。要扩展这些应用，维护跨平台的客户端-服务器兼容性的难度本不至于这么大。</p>\n<p>Twisted中的客户端和服务器是用Python开发的，采用了一致性的接口。这使得开发新的客户端和服务器变得很容易实现，可以在客户端和服务器之间共享代码，在协议之间共享应用逻辑，以及对某个实现的代码做测试。</p>\n<h6 id=\"React模式\"><a href=\"#React模式\" class=\"headerlink\" title=\"React模式\"></a><strong>React模式</strong></h6><p>Twisted实现了设计模式中的反应堆（reactor）模式，这种模式在单线程环境中调度多个事件源产生的事件到它们各自的事件处理例程中去。</p>\n<p>Twisted的核心就是reactor事件循环。Reactor可以感知网络、文件系统以及定时器事件。它等待然后处理这些事件，从特定于平台的行为中抽象出来，并提供统一的接口，使得在网络协议栈的任何位置对事件做出响应都变得简单。</p>\n<p>基本上reactor完成的任务就是：</p>\n<pre><code class=\"python\">while True:\n    timeout = time_until_next_timed_event()\n    events = wait_for_events(timeout)\n    events += timed_events_until(now())\n    for event in events:\n        event.process()</code></pre>\n<p>Twisted目前在所有平台上的默认reactor都是基于poll API的（UNIX规范第3版（SUSv3）中描述）。此外，Twisted还支持一些特定于平台的高容量多路复用API。这些reactor包括基于FreeBSD中kqueue机制的KQueue reactor，支持epoll接口的系统（目前是Linux 2.6）中的epoll reactor，以及基于Windows下的输入输出完成端口的IOCP reactor。</p>\n<p>在实现轮询的相关细节中，Twisted需要考虑的包括：</p>\n<ul>\n<li>网络和文件系统的限制</li>\n<li>缓冲行为</li>\n<li>如何检测连接丢失</li>\n<li>出现错误时的返回值</li>\n</ul>\n<p>Twisted的reactor实现同时也考虑了正确使用底层的非阻塞式API，并正确处理各种边界情况。由于Python中没有暴露出IOCP API，因此Twisted需要维护自己的实现。</p>\n<h6 id=\"管理回调链\"><a href=\"#管理回调链\" class=\"headerlink\" title=\"管理回调链\"></a><strong>管理回调链</strong></h6><p>回调是事件驱动编程模型中的基础，也是reactor通知应用程序事件已经处理完成的方式。随着程序规模不断扩大，基于事件驱动的程序需要同时处理事件处理成功和出错的情况，这使得程序变得越来越复杂。若没有注册一个合适的回调，程序就会阻塞，因为这个事件处理的过程绝不会发生。出现错误时需要通过应用程序的不同层次从网络栈向上传递回调链。</p>\n<p>下面是两段Python伪码，分别是同步和异步模式下获取URL的玩具代码。让我们相互比较一下这两个版本，看看基于事件驱动的程序有什么缺陷：</p>\n<p>以同步的方式获取URL：</p>\n<pre><code class=\"python\">import getPage\n\ndef processPage(page):\n    print page\n\ndef logError(error):\n    print error\n\ndef finishProcessing(value):\n    print &quot;Shutting down...&quot;\n    exit(0)\n\nurl = &quot;http://google.com&quot;\ntry:\n    page = getPage(url)\n    processPage(page)\nexcept Error, e:\n    logError(error)\nfinally:\n    finishProcessing()</code></pre>\n<p>以异步的方式获取URL：</p>\n<pre><code class=\"python\">from twisted.internet import reactor\nimport getPage\n\ndef processPage(page):\n    print page\n    finishProcessing()\n\ndef logError(error):\n    print error\n    finishProcessing()\n\ndef finishProcessing(value):\n    print &quot;Shutting down...&quot;\n    reactor.stop()\n\nurl = &quot;http://google.com&quot;\n# getPage takes: url, \n# success callback, error callback\ngetPage(url, processPage, logError)\n\nreactor.run()</code></pre>\n<p>在异步版的URL获取器中，reactor.run()启动reactor事件循环。在同步和异步版程序中，我们假定getPage函数处理获取页面的工作。如果获取成功就调用processPage，如果尝试获取页面时出现了Exception（异常），logError就得到调用。无论哪种情况，最后都要调用finishProcessing。</p>\n<p>异步版中的logError回调正对应于同步版中的try/except块。对processPage的回调对应于else块，无条件回调的finishProcessing就对应于finally块。</p>\n<p>在同步版中，代码结构直接显示出有一个try/except块，logError和processPage这两者间只会取其一调用一次，而finishProcessing总是会被调用一次。在异步版中需要由程序员自己负责正确调用成功和失败情况下的回调链。如果由于编程错误，在processPage或者logError的回调链之后没有调用finishProcessing，reactor事件循环将永远不会停止，程序就会卡住。</p>\n<p>这个玩具式的例子告诉我们在开发Twisted的头几年里这种复杂性令程序员感到非常沮丧。而Twisted应对这种复杂性的方式是新增一个称为Deferred（延迟）的对象。</p>\n<h6 id=\"Deferreds\"><a href=\"#Deferreds\" class=\"headerlink\" title=\"Deferreds\"></a>Deferreds</h6><p>Deferred对象以抽象化的方式表达了一种思想，即结果还尚不存在。它同样能够帮助管理产生这个结果所需要的回调链。当从函数中返回时，Deferred对象承诺在某个时刻函数将产生一个结果。返回的Deferred对象中包含所有注册到事件上的回调引用，因此在函数间只需要传递这一个对象即可，跟踪这个对象比单独管理所有的回调要简单的多。</p>\n<p>Deferred对象包含一对回调链，一个是针对操作成功的回调，一个是针对操作失败的回调。初始状态下Deferred对象的两条链都为空。在事件处理的过程中，每个阶段都为其添加处理成功的回调和处理失败的回调。当一个异步结果到来时，Deferred对象就被“激活”，那么处理成功的回调和处理失败的回调就可以以合适的方式按照它们添加进来的顺序依次得到调用。</p>\n<p>异步版URL获取器采用Deferred对象后的代码如下：</p>\n<pre><code class=\"python\">from twisted.internet import reactor\nimport getPage\n\ndef processPage(page):\n    print page\n\ndef logError(error):\n    print error\n\ndef finishProcessing(value):\n    print &quot;Shutting down...&quot;\n    reactor.stop()\n\nurl = &quot;http://google.com&quot;\ndeferred = getPage(url) # getPage returns a Deferred\ndeferred.addCallbacks(success, failure)\ndeferred.addBoth(stop)\n\nreactor.run()</code></pre>\n<p>在这个版本中调用的事件处理函数与之前相同，但它们都注册到了一个单独的Deferred对象上，而不是分散在代码各处再以参数形式传递给getPage。</p>\n<p>Deferred对象创建时包含两个添加回调的阶段。第一阶段，addCallbacks将 processPage和logError添加到它们各自归属的回调链中。然后addBoth再将finishProcessing同时添加到这两个回调链上。用图解的方式来看，回调链应该如图所示：<br><img src=\"/img/1570783134086.png\" alt=\"Deferred 流程示例\"></p>\n<p>Deferred对象只能被激活一次，如果试图重复激活将引发一个异常。这使得Deferred对象的语义相当接近于同步版中的try/except块。从而让异步事件的处理能更容易推断，避免由于针对单个事件的回调调用多了一个或少了一个而产生微妙的bug。</p>\n<p>理解Deferred对象对于理解Twisted程序的执行流是非常重要的。然而当使用Twisted为我们提供的针对网络协议的高层抽象时，通常情况下我们完全不需要直接使用Deferred对象。</p>\n<p>Deferred对象所包含的抽象概念是非常强大的，这种思想已经被许多其他的事件驱动平台所借用，包括jQuery、Dojo和Mochikit。</p>\n<h6 id=\"Transports\"><a href=\"#Transports\" class=\"headerlink\" title=\"Transports\"></a>Transports</h6><p>Transports代表网络中两个通信结点之间的连接。Transports负责描述连接的细节，比如连接是面向流式的还是面向数据报的，流控以及可靠性。TCP、UDP和Unix套接字可作为transports的例子。它们被设计为“满足最小功能单元，同时具有最大程度的可复用性”，而且从协议实现中分离出来，这让许多协议可以采用相同类型的传输。Transports实现了ITransports接口，它包含如下的方法：</p>\n<blockquote>\n<p>write                   以非阻塞的方式按顺序依次将数据写到物理连接上<br>writeSequence           将一个字符串列表写到物理连接上<br>loseConnection          将所有挂起的数据写入，然后关闭连接<br>getPeer                 取得连接中对端的地址信息<br>getHost                 取得连接中本端的地址信息</p>\n</blockquote>\n<p>将transports从协议中分离出来也使得对这两个层次的测试变得更加简单。可以通过简单地写入一个字符串来模拟传输，用这种方式来检查。</p>\n<h6 id=\"Protocols\"><a href=\"#Protocols\" class=\"headerlink\" title=\"Protocols\"></a>Protocols</h6><p>Protocols描述了如何以异步的方式处理网络中的事件。HTTP、DNS以及IMAP是应用层协议中的例子。Protocols实现了IProtocol接口，它包含如下的方法：</p>\n<blockquote>\n<p>makeConnection               在transport对象和服务器之间建立一条连接<br>connectionMade               连接建立起来后调用<br>dataReceived                 接收数据时调用<br>connectionLost               关闭连接时调用</p>\n</blockquote>\n<p>我们最好以一个例子来说明reactor、protocols以及transports这三者之间的关系。以下是完整的echo服务器和客户端的实现，首先来看看服务器部分：</p>\n<pre><code class=\"python\">from twisted.internet import protocol, reactor\n\nclass Echo(protocol.Protocol):\n    def dataReceived(self, data):\n        # As soon as any data is received, write it back\n        self.transport.write(data)\n\nclass EchoFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return Echo()\n\nreactor.listenTCP(8000, EchoFactory())\nreactor.run()</code></pre>\n<p>接着是客户端部分：</p>\n<pre><code class=\"python\">from twisted.internet import reactor, protocol\n\nclass EchoClient(protocol.Protocol):\n    def connectionMade(self):\n        self.transport.write(&quot;hello, world!&quot;)\n\ndef dataReceived(self, data):\n    print &quot;Server said:&quot;, data\n        self.transport.loseConnection()\n\ndef connectionLost(self, reason):\n    print &quot;connection lost&quot;\n\nclass EchoFactory(protocol.ClientFactory):\n    def buildProtocol(self, addr):\n        return EchoClient()\n\ndef clientConnectionFailed(self, connector, reason):\n    print &quot;Connection failed - goodbye!&quot;\n        reactor.stop()\n\ndef clientConnectionLost(self, connector, reason):\n    print &quot;Connection lost - goodbye!&quot;\n        reactor.stop()\n\nreactor.connectTCP(&quot;localhost&quot;, 8000, EchoFactory())\nreactor.run()</code></pre>\n<p>运行服务器端脚本将启动一个TCP服务器，监听端口8000上的连接。服务器采用的是Echo协议，数据经TCP transport对象写出。运行客户端脚本将对服务器发起一个TCP连接，回显服务器端的回应然后终止连接并停止reactor事件循环。这里的Factory用来对连接的双方生成protocol对象实例。两端的通信是异步的，connectTCP负责注册回调函数到reactor事件循环中，当socket上有数据可读时通知回调处理。</p>\n<h6 id=\"Applications\"><a href=\"#Applications\" class=\"headerlink\" title=\"Applications\"></a>Applications</h6><p>Twisted是用来创建具有可扩展性、跨平台的网络服务器和客户端的引擎。在生产环境中，以标准化的方式简化部署这些应用的过程对于Twisted这种被广泛采用的平台来说是非常重要的一环。为此，Twisted开发了一套应用程序基础组件，采用可重用、可配置的方式来部署Twisted应用。这种方式使程序员避免堆砌千篇一律的代码来将应用程序同已有的工具整合在一起，这包括精灵化进程（daemonization）、日志处理、使用自定义的reactor循环、对代码做性能剖析等。</p>\n<p>应用程序基础组件包含4个主要部分：服务（Service）、应用（Application）、配置管理（通过TAC文件和插件）以及twistd命令行程序。为了说明这个基础组件，我们将上一节的Echo服务器转变成一个应用。</p>\n<ul>\n<li><strong>Service</strong><br>Service就是IService接口下实现的可以启动和停止的组件。Twisted自带有TCP、FTP、HTTP、SSH、DNS等服务以及其他协议的实现。其中许多Service都可以注册到单独的应用中。IService接口的核心是：<blockquote>\n<p>startService    启动服务。可能包含加载配置数据，设定数据库连接或者监听某个端口<br>stopService     关闭服务。可能包含将状态保存到磁盘，关闭数据库连接或者停止监听端口</p>\n</blockquote>\n</li>\n</ul>\n<p>我们的Echo服务使用TCP协议，因此我们可以使用Twisted中IService接口下默认的TCPServer实现。</p>\n<ul>\n<li><strong>Application</strong><br>Application是处于最顶层的Service，代表了整个Twisted应用程序。Service需要将其自身同Application注册，然后就可以用下面我们将介绍的部署工具twistd搜索并运行应用程序。我们将创建一个可以同Echo Service注册的Echo应用。</li>\n<li><strong>TAC文件</strong><br>当在一个普通的Python文件中管理Twisted应用程序时，需要由开发者负责编写启动和停止reactor事件循环以及配置应用程序的代码。在Twisted的基础组件中，协议的实现都是在一个模块中完成的，需要使用到这些协议的Service可以注册到一个Twisted应用程序配置文件中（TAC文件）去，这样reactor事件循环和程序配置就可以由外部组件来进行管理。</li>\n</ul>\n<p>要将我们的Echo服务器转变成一个Echo应用，我们可以按照以下几个简单的步骤来完成：</p>\n<ol>\n<li><p>将Echo服务器的Protocol部分移到它们自己所归属的模块中去。</p>\n</li>\n<li><p>在TAC文件中：</p>\n<ol>\n<li>创建一个Echo应用。</li>\n<li>创建一个TCPServer的Service实例，它将使用我们的EchoFactory，然后同前面创建的应用完成注册。</li>\n</ol>\n</li>\n</ol>\n<p>管理reactor事件循环的代码将由twistd来负责，我们下面会对此进行讨论。这样，应用程序的代码就变成这样了：<br>echo.py文件：</p>\n<pre><code class=\"python\">from twisted.internet import protocol, reactor\n\nclass Echo(protocol.Protocol):\n    def dataReceived(self, data):\n        self.transport.write(data)\n\nclass EchoFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return Echo()</code></pre>\n<ul>\n<li><strong>twistd</strong><br>twistd（读作“twist-dee”）是一个跨平台的用来部署Twisted应用程序的工具。它执行TAC文件并负责处理启动和停止应用程序。作为Twisted在网络编程中具有“内置电池”能力的一部分，twistd自带有一些非常有用的配置标志，包括将应用程序转变为守护进程、定义日志文件的路径、设定特权级别、在chroot下运行、使用非默认的reactor，甚至是在profiler下运行应用程序。</li>\n</ul>\n<p>我们可以像这样运行这个Echo服务应用：</p>\n<pre><code class=\"python\">$ twistd –y echo_server.tac</code></pre>\n<p>在这个简单的例子里，twistd将这个应用程序作为守护进程来启动，日志记录在twistd.log文件中。启动和停止应用后，日志文件内容如下：</p>\n<pre><code class=\"python\">2011-11-19 22:23:07-0500 [-] Log opened.\n2011-11-19 22:23:07-0500 [-] twistd 11.0.0 (/usr/bin/python 2.7.1) starting up.\n2011-11-19 22:23:07-0500 [-] reactor class: twisted.internet.selectreactor.SelectReactor.\n2011-11-19 22:23:07-0500 [-] echo.EchoFactory starting on 8000\n2011-11-19 22:23:07-0500 [-] Starting factory &lt;echo.EchoFactory instance at 0x12d8670&gt;\n2011-11-19 22:23:20-0500 [-] Received SIGTERM, shutting down.\n2011-11-19 22:23:20-0500 [-] (TCP Port 8000 Closed)\n2011-11-19 22:23:20-0500 [-] Stopping factory &lt;echo.EchoFactory instance at 0x12d8670&gt;\n2011-11-19 22:23:20-0500 [-] Main loop terminated.\n2011-11-19 22:23:20-0500 [-] Server Shut Down.</code></pre>\n<p>通过使用Twisted框架中的基础组件来运行服务，这么做使得开发人员能够不用再编写类似守护进程和记录日志这样的冗余代码了。这同样也为部署应用程序建立了一个标准的命令行接口。</p>\n<h6 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h6><p>对于运行Twisted应用程序的方法，除了基于TAC文件外还有一种可选的方法，这就是插件系统。TAC系统可以很方便的将Twisted预定义的服务同应用程序配置文件注册，而插件系统能够方便的将用户自定义的服务注册为twistd工具的子命令，然后扩展应用程序的命令行接口。</p>\n<p>在使用插件系统时：</p>\n<ol>\n<li><p>由于只有plugin API需要保持稳定，这使得第三方开发者能很容易地扩展软件。</p>\n</li>\n<li><p>插件发现能力已经集成到系统中了。插件可以在程序首次运行时加载并保存，每次程序启动时会重新触发插件发现过程，或者也可以在程序运行期间反复轮询新插件，这使得在程序已经启动后我们还可以判断是否有新的插件安装上了。</p>\n</li>\n</ol>\n<p>当使用Twisted插件系统来扩展软件时，我们要做的就是创建IPlugin接口下实现的对象并将它们放到一个特定的位置中，这里插件系统知道该如何去找到它们。</p>\n<p>我们已经将Echo服务转换为一个Twisted应用程序了，而将其转换为一个Twisted插件也是非常简单直接的。在我们之前的Echo模块中，除了包含有Echo协议和EchoFactory的定义之外，现在我们还要添加一个名为twistd的目录，其中还包含着一个名为plugins的子目录，这里正是我们需要定义echo插件的地方。通过这个插件，我们可以启动一个echo服务，并将需要使用的端口号作为参数指定给twistd工具。</p>\n<pre><code class=\"python\">from zope.interface import implements\n\nfrom twisted.python import usage\nfrom twisted.plugin import IPlugin\nfrom twisted.application.service import IServiceMaker\nfrom twisted.application import internet\n\nfrom echo import EchoFactory\n\nclass Options(usage.Options):\n    optParameters = [[&quot;port&quot;, &quot;p&quot;, 8000, &quot;The port number to listen on.&quot;]]\n\nclass EchoServiceMaker(object):\n    implements(IServiceMaker, IPlugin)\n    tapname = &quot;echo&quot;\n    description = &quot;A TCP-based echo server.&quot;\n    options = Options\n\ndef makeService(self, options):\n    &quot;&quot;&quot;\n    Construct a TCPServer from a factory defined in myproject.\n    &quot;&quot;&quot;\n    return internet.TCPServer(int(options[&quot;port&quot;]), EchoFactory())\n\nserviceMaker = EchoServiceMaker()</code></pre>\n<p>现在，我们的Echo服务器将作为一个服务选项出现在twistd –help的输出中。运行twistd echo –port=1235将在端口1235上启动一个Echo服务器。</p>\n<p>Twisted还带有一个可拔插的针对服务器端认证的模块twisted.cred，插件系统常见的用途就是为应用程序添加一个认证模式。我们可以使用twisted.cred中现成的AuthOptionMixin类来添加针对各种认证的命令行支持，或者是添加新的认证类型。比如，我们可以使用插件系统来添加基于本地Unix密码数据库或者是基于LDAP服务器的认证方式。</p>\n<p>twistd工具中附带有许多Twisted所支持的协议插件，只用一条单独的命令就可以完成启动服务器的工作了。这里有一些通过twistd启动服务器的例子：</p>\n<pre><code class=\"python\">twistd web –port 8080 –path .</code></pre>\n<p>这条命令将在8080端口启动一个HTTP服务器，在当前目录中负责处理静态和动态页面请求。</p>\n<pre><code class=\"python\">twistd dns –p 5553 –hosts-file=hosts</code></pre>\n<p>这条命令在端口5553上启动一个DNS服务器，解析指定的文件hosts中的域名，这个文件的内容格式同/etc/hosts一样。</p>\n<pre><code class=\"python\">sudo twistd conch –p tcp:2222</code></pre>\n<p>这条命令在端口2222上启动一个SSH服务器。ssh的密钥必须独立设定。</p>\n<pre><code class=\"python\">twistd mail –E –H localhost –d localhost=emails</code></pre>\n<p>这条命令启动一个ESMTP POP3服务器，为本地主机接收邮件并保存到指定的emails目录下。</p>\n<p>我们可以方便的通过twistd来搭建一个用于测试客户端功能的服务器，但它同样是可装载的、产品级的服务器实现。</p>\n<p>在部署应用程序的方式上，Twisted通过TAC文件、插件以及命令行工具twistd的部署方式已经获得了成功。但是有趣的是，对于大多数大型Twisted应用程序来说，部署它们仍然需要重写一些这类管理和监控组件；Twisted的架构并没有对系统管理员的需求呈现出太多的友好性。这也反映了一个事实，那就是对于系统管理员来说Twisted历来就没有太多架构可言，而这些系统管理员才是部署和维护应用程序的专家。在这方面，Twisted在未来架构设计的决策上需要更积极的征求这类专家级用户的反馈意见。</p>\n<p><a href=\"https://www.cnblogs.com/xianguang/p/7027661.html\">本文内容引用自此处</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Twisted\"><a href=\"#Twisted\" class=\"headerlink\" title=\"Twisted\"></a>Twisted</h2><h3 id=\"Python-Twisted介绍\"><a href=\"#Python-Twisted介绍\" class=\"headerlink\" title=\"Python Twisted介绍\"></a>Python Twisted介绍</h3><p>Twisted是用Python实现的基于事件驱动的网络引擎框架。Twisted诞生于2000年初，在当时的网络游戏开发者看来，无论他们使用哪种语言，手中都鲜有可兼顾扩展性及跨平台的网络库。Twisted的作者试图在当时现有的环境下开发游戏，这一步走的非常艰难，他们迫切地需要一个可扩展性高、基于事件驱动、跨平台的网络开发框架，为此他们决定自己实现一个，并从那些之前的游戏和网络应用程序的开发者中学习，汲取他们的经验教训。</p>\n<p>Twisted支持许多常见的传输及应用层协议，包括TCP、UDP、SSL/TLS、HTTP、IMAP、SSH、IRC以及FTP。就像python一样，Twisted也具有“内置电池”（batteries-included）的特点。Twisted对于其支持的所有协议都带有客户端和服务器实现，同时附带有基于命令行的工具，使得配置和部署产品级的Twisted应用变得非常方便。</p>\n<h3 id=\"为什么需要Twisted\"><a href=\"#为什么需要Twisted\" class=\"headerlink\" title=\"为什么需要Twisted\"></a>为什么需要Twisted</h3><p>2000年时，Twisted的作者Glyph正在开发一个名为Twisted Reality的基于文本方式的多人在线游戏。这个游戏采用Java开发，里面尽是一堆线程——每个连接就有3个线程处理。处理输入的线程会在读操作上阻塞，处理输出的线程将在一些写操作上阻塞，还有一个“逻辑”线程将在等待定时器超时或者事件入队列时休眠。随着玩家们在虚拟世界中移动并交互时，线程出现死锁，缓存被污染，程序中的加锁逻辑几乎从来就没对过——采用多线程使得整个软件变得复杂、漏洞百出而且极难扩展。</p>\n<p>为了寻求其他的解决方案，作者发现了Python，特别是Python中用于对流式对象比如socket和pipe进行多路I/O复用的select模块（UNIX规范第3版（SUSv3）描述了select）。那时，Java并没有提供操作系统的select接口或者任何其他的异步I/O API（针对非阻塞式I/O的包java.nio已经在J2SE 1.4中加入了，2002年发布）。通过用Python中的select模块快速搭建起游戏的原型，这迅速降低了程序的复杂度，并且比多线程版本要更加可靠。</p>\n<p>Glyph迅速转向了Python、select以及基于事件驱动的编程。他使用Python的select模块为游戏编写了客户端和服务器。但他想要的还不止于此。从根本上说，他希望能将网络行为转变为对游戏中的对象的方法调用。如果你能在游戏中收取邮件会怎样，就像Nethack mailer这种守护进程一样？如果游戏中的每位玩家都拥有一个主页呢？Glyph发现他需要优秀的IMAP以及HTTP客户端和服务器的Python实现，而这些都要采用select。</p>\n<p>他首先转向了Medusa，这是一个在90年代中期开发的平台，在这里可以采用Python中的asyncore模块来编写网络服务。asyncore是一个异步化处理socket的模块，在操作系统的select API之上构建了一个调度器和回调接口。</p>\n<p>这对于Glyph来说是个激动人心的发现，但Medusa有两个缺点：</p>\n<ol>\n<li>这个项目到2001年就不再维护了，那正是glyph开发Twisted Reality的时候。</li>\n<li>asyncore只是对socket的一个薄封装层，应用程序的编写者仍然需要直接操作socket。这意味着程序可移植性的担子仍然落在程序员自己身上。此外，那时asyncore对Windows的支持还有问题，Glyph希望能在Windows上运行一个带有图形用户界面的客户端。<br>Glyph需要自己实现一个网络引擎平台，而且他意识到Twisted Reality已经打开了问题的大门，这和他的游戏一样有趣。</li>\n</ol>\n<p>随着时间的推移，Twisted Reality这个游戏就演化成了Twisted网络引擎平台。它可以做到当时Python中已有的网络平台所无法做到的事情：</p>\n<ul>\n<li>使用基于事件驱动的编程模型，而不是多线程模型。</li>\n<li>跨平台：为主流操作系统平台暴露出的事件通知系统提供统一的接口。</li>\n<li>“内置电池”的能力：提供流行的应用层协议实现，因此Twisted马上就可为开发人员所用。</li>\n<li>符合RFC规范，已经通过健壮的测试套件证明了其一致性。</li>\n<li>能很容易的配合多个网络协议一起使用。</li>\n<li>可扩展。</li>\n</ul>\n<h3 id=\"Twisted架构概览\"><a href=\"#Twisted架构概览\" class=\"headerlink\" title=\"Twisted架构概览\"></a>Twisted架构概览</h3><p>Twisted是一个事件驱动型的网络引擎。由于事件驱动编程模型在Twisted的设计哲学中占有重要的地位，因此这里有必要花点时间来回顾一下究竟事件驱动意味着什么。</p>\n<p>事件驱动编程是一种编程范式，这里程序的执行流由外部事件来决定。它的特点是包含一个事件循环，当外部事件发生时使用回调机制来触发相应的处理。另外两种常见的编程范式是（单线程）同步以及多线程编程。</p>\n<p>在单线程同步模型中，任务按照顺序执行。如果某个任务因为I/O而阻塞，其他所有的任务都必须等待，直到它完成之后它们才能依次执行。这种明确的执行顺序和串行化处理的行为是很容易推断得出的。如果任务之间并没有互相依赖的关系，但仍然需要互相等待的话这就使得程序不必要的降低了运行速度。</p>\n<p>在多线程版本中，这3个任务分别在独立的线程中执行。这些线程由操作系统来管理，在多处理器系统上可以并行处理，或者在单处理器系统上交错执行。这使得当某个线程阻塞在某个资源的同时其他线程得以继续执行。与完成类似功能的同步程序相比，这种方式更有效率，但程序员必须写代码来保护共享资源，防止其被多个线程同时访问。多线程程序更加难以推断，因为这类程序不得不通过线程同步机制如锁、可重入函数、线程局部存储或者其他机制来处理线程安全问题，如果实现不当就会导致出现微妙且令人痛不欲生的bug。</p>\n<p>在事件驱动版本的程序中，3个任务<strong>交错执行</strong>，但仍然在一个单独的线程控制中。当处理I/O或者其他昂贵的操作时，注册一个回调到事件循环中，然后当I/O操作完成时继续执行。回调描述了该如何处理某个事件。事件循环轮询所有的事件，当事件到来时将它们分配给等待处理事件的回调函数。这种方式让程序尽可能的得以执行而不需要用到额外的线程。事件驱动型程序比多线程程序更容易推断出行为，因为程序员不需要关心线程安全问题。</p>\n<p>当我们面对如下的环境时，事件驱动模型通常是一个好的选择：</p>\n<p>程序中有许多任务，而且…</p>\n<ol>\n<li>任务之间高度独立（因此它们不需要互相通信，或者等待彼此）而且…</li>\n<li>在等待事件到来时，某些任务会阻塞。</li>\n<li>当应用程序需要在任务间共享可变的数据时，这也是一个不错的选择，因为这里不需要采用同步处理。</li>\n</ol>\n<p>网络应用程序通常都有上述这些特点，这使得它们能够很好的契合事件驱动编程模型。</p>\n<h6 id=\"重用已有的应用\"><a href=\"#重用已有的应用\" class=\"headerlink\" title=\"重用已有的应用\"></a><strong>重用已有的应用</strong></h6><p>在Twisted创建之前就已经有了许多针对多种流行的网络协议的客户端和服务器实现了。为什么Glyph不直接用Apache、IRCd、BIND、OpenSSH或者任何其他已有的应用，而要为Twisted从头开始重新实现各个协议的客户端和服务器呢？</p>\n<p>问题在于所有这些已有的实现都存在有从头写起的网络层代码，通常都是C代码。而应用层代码直接同网络层耦合在一起，这使得它们非常难以以库的形式来复用。当要一起使用这些组件时，如果希望在多个协议中暴露相同的数据，则它们必须以黑盒的形式来看待，这使得开发者根本没机会重用代码。此外，服务器和客户端的实现通常是分离的，彼此之间不共享代码。要扩展这些应用，维护跨平台的客户端-服务器兼容性的难度本不至于这么大。</p>\n<p>Twisted中的客户端和服务器是用Python开发的，采用了一致性的接口。这使得开发新的客户端和服务器变得很容易实现，可以在客户端和服务器之间共享代码，在协议之间共享应用逻辑，以及对某个实现的代码做测试。</p>\n<h6 id=\"React模式\"><a href=\"#React模式\" class=\"headerlink\" title=\"React模式\"></a><strong>React模式</strong></h6><p>Twisted实现了设计模式中的反应堆（reactor）模式，这种模式在单线程环境中调度多个事件源产生的事件到它们各自的事件处理例程中去。</p>\n<p>Twisted的核心就是reactor事件循环。Reactor可以感知网络、文件系统以及定时器事件。它等待然后处理这些事件，从特定于平台的行为中抽象出来，并提供统一的接口，使得在网络协议栈的任何位置对事件做出响应都变得简单。</p>\n<p>基本上reactor完成的任务就是：</p>\n<pre><code class=\"python\">while True:\n    timeout = time_until_next_timed_event()\n    events = wait_for_events(timeout)\n    events += timed_events_until(now())\n    for event in events:\n        event.process()</code></pre>\n<p>Twisted目前在所有平台上的默认reactor都是基于poll API的（UNIX规范第3版（SUSv3）中描述）。此外，Twisted还支持一些特定于平台的高容量多路复用API。这些reactor包括基于FreeBSD中kqueue机制的KQueue reactor，支持epoll接口的系统（目前是Linux 2.6）中的epoll reactor，以及基于Windows下的输入输出完成端口的IOCP reactor。</p>\n<p>在实现轮询的相关细节中，Twisted需要考虑的包括：</p>\n<ul>\n<li>网络和文件系统的限制</li>\n<li>缓冲行为</li>\n<li>如何检测连接丢失</li>\n<li>出现错误时的返回值</li>\n</ul>\n<p>Twisted的reactor实现同时也考虑了正确使用底层的非阻塞式API，并正确处理各种边界情况。由于Python中没有暴露出IOCP API，因此Twisted需要维护自己的实现。</p>\n<h6 id=\"管理回调链\"><a href=\"#管理回调链\" class=\"headerlink\" title=\"管理回调链\"></a><strong>管理回调链</strong></h6><p>回调是事件驱动编程模型中的基础，也是reactor通知应用程序事件已经处理完成的方式。随着程序规模不断扩大，基于事件驱动的程序需要同时处理事件处理成功和出错的情况，这使得程序变得越来越复杂。若没有注册一个合适的回调，程序就会阻塞，因为这个事件处理的过程绝不会发生。出现错误时需要通过应用程序的不同层次从网络栈向上传递回调链。</p>\n<p>下面是两段Python伪码，分别是同步和异步模式下获取URL的玩具代码。让我们相互比较一下这两个版本，看看基于事件驱动的程序有什么缺陷：</p>\n<p>以同步的方式获取URL：</p>\n<pre><code class=\"python\">import getPage\n\ndef processPage(page):\n    print page\n\ndef logError(error):\n    print error\n\ndef finishProcessing(value):\n    print &quot;Shutting down...&quot;\n    exit(0)\n\nurl = &quot;http://google.com&quot;\ntry:\n    page = getPage(url)\n    processPage(page)\nexcept Error, e:\n    logError(error)\nfinally:\n    finishProcessing()</code></pre>\n<p>以异步的方式获取URL：</p>\n<pre><code class=\"python\">from twisted.internet import reactor\nimport getPage\n\ndef processPage(page):\n    print page\n    finishProcessing()\n\ndef logError(error):\n    print error\n    finishProcessing()\n\ndef finishProcessing(value):\n    print &quot;Shutting down...&quot;\n    reactor.stop()\n\nurl = &quot;http://google.com&quot;\n# getPage takes: url, \n# success callback, error callback\ngetPage(url, processPage, logError)\n\nreactor.run()</code></pre>\n<p>在异步版的URL获取器中，reactor.run()启动reactor事件循环。在同步和异步版程序中，我们假定getPage函数处理获取页面的工作。如果获取成功就调用processPage，如果尝试获取页面时出现了Exception（异常），logError就得到调用。无论哪种情况，最后都要调用finishProcessing。</p>\n<p>异步版中的logError回调正对应于同步版中的try/except块。对processPage的回调对应于else块，无条件回调的finishProcessing就对应于finally块。</p>\n<p>在同步版中，代码结构直接显示出有一个try/except块，logError和processPage这两者间只会取其一调用一次，而finishProcessing总是会被调用一次。在异步版中需要由程序员自己负责正确调用成功和失败情况下的回调链。如果由于编程错误，在processPage或者logError的回调链之后没有调用finishProcessing，reactor事件循环将永远不会停止，程序就会卡住。</p>\n<p>这个玩具式的例子告诉我们在开发Twisted的头几年里这种复杂性令程序员感到非常沮丧。而Twisted应对这种复杂性的方式是新增一个称为Deferred（延迟）的对象。</p>\n<h6 id=\"Deferreds\"><a href=\"#Deferreds\" class=\"headerlink\" title=\"Deferreds\"></a>Deferreds</h6><p>Deferred对象以抽象化的方式表达了一种思想，即结果还尚不存在。它同样能够帮助管理产生这个结果所需要的回调链。当从函数中返回时，Deferred对象承诺在某个时刻函数将产生一个结果。返回的Deferred对象中包含所有注册到事件上的回调引用，因此在函数间只需要传递这一个对象即可，跟踪这个对象比单独管理所有的回调要简单的多。</p>\n<p>Deferred对象包含一对回调链，一个是针对操作成功的回调，一个是针对操作失败的回调。初始状态下Deferred对象的两条链都为空。在事件处理的过程中，每个阶段都为其添加处理成功的回调和处理失败的回调。当一个异步结果到来时，Deferred对象就被“激活”，那么处理成功的回调和处理失败的回调就可以以合适的方式按照它们添加进来的顺序依次得到调用。</p>\n<p>异步版URL获取器采用Deferred对象后的代码如下：</p>\n<pre><code class=\"python\">from twisted.internet import reactor\nimport getPage\n\ndef processPage(page):\n    print page\n\ndef logError(error):\n    print error\n\ndef finishProcessing(value):\n    print &quot;Shutting down...&quot;\n    reactor.stop()\n\nurl = &quot;http://google.com&quot;\ndeferred = getPage(url) # getPage returns a Deferred\ndeferred.addCallbacks(success, failure)\ndeferred.addBoth(stop)\n\nreactor.run()</code></pre>\n<p>在这个版本中调用的事件处理函数与之前相同，但它们都注册到了一个单独的Deferred对象上，而不是分散在代码各处再以参数形式传递给getPage。</p>\n<p>Deferred对象创建时包含两个添加回调的阶段。第一阶段，addCallbacks将 processPage和logError添加到它们各自归属的回调链中。然后addBoth再将finishProcessing同时添加到这两个回调链上。用图解的方式来看，回调链应该如图所示：<br><img src=\"/img/1570783134086.png\" alt=\"Deferred 流程示例\"></p>\n<p>Deferred对象只能被激活一次，如果试图重复激活将引发一个异常。这使得Deferred对象的语义相当接近于同步版中的try/except块。从而让异步事件的处理能更容易推断，避免由于针对单个事件的回调调用多了一个或少了一个而产生微妙的bug。</p>\n<p>理解Deferred对象对于理解Twisted程序的执行流是非常重要的。然而当使用Twisted为我们提供的针对网络协议的高层抽象时，通常情况下我们完全不需要直接使用Deferred对象。</p>\n<p>Deferred对象所包含的抽象概念是非常强大的，这种思想已经被许多其他的事件驱动平台所借用，包括jQuery、Dojo和Mochikit。</p>\n<h6 id=\"Transports\"><a href=\"#Transports\" class=\"headerlink\" title=\"Transports\"></a>Transports</h6><p>Transports代表网络中两个通信结点之间的连接。Transports负责描述连接的细节，比如连接是面向流式的还是面向数据报的，流控以及可靠性。TCP、UDP和Unix套接字可作为transports的例子。它们被设计为“满足最小功能单元，同时具有最大程度的可复用性”，而且从协议实现中分离出来，这让许多协议可以采用相同类型的传输。Transports实现了ITransports接口，它包含如下的方法：</p>\n<blockquote>\n<p>write                   以非阻塞的方式按顺序依次将数据写到物理连接上<br>writeSequence           将一个字符串列表写到物理连接上<br>loseConnection          将所有挂起的数据写入，然后关闭连接<br>getPeer                 取得连接中对端的地址信息<br>getHost                 取得连接中本端的地址信息</p>\n</blockquote>\n<p>将transports从协议中分离出来也使得对这两个层次的测试变得更加简单。可以通过简单地写入一个字符串来模拟传输，用这种方式来检查。</p>\n<h6 id=\"Protocols\"><a href=\"#Protocols\" class=\"headerlink\" title=\"Protocols\"></a>Protocols</h6><p>Protocols描述了如何以异步的方式处理网络中的事件。HTTP、DNS以及IMAP是应用层协议中的例子。Protocols实现了IProtocol接口，它包含如下的方法：</p>\n<blockquote>\n<p>makeConnection               在transport对象和服务器之间建立一条连接<br>connectionMade               连接建立起来后调用<br>dataReceived                 接收数据时调用<br>connectionLost               关闭连接时调用</p>\n</blockquote>\n<p>我们最好以一个例子来说明reactor、protocols以及transports这三者之间的关系。以下是完整的echo服务器和客户端的实现，首先来看看服务器部分：</p>\n<pre><code class=\"python\">from twisted.internet import protocol, reactor\n\nclass Echo(protocol.Protocol):\n    def dataReceived(self, data):\n        # As soon as any data is received, write it back\n        self.transport.write(data)\n\nclass EchoFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return Echo()\n\nreactor.listenTCP(8000, EchoFactory())\nreactor.run()</code></pre>\n<p>接着是客户端部分：</p>\n<pre><code class=\"python\">from twisted.internet import reactor, protocol\n\nclass EchoClient(protocol.Protocol):\n    def connectionMade(self):\n        self.transport.write(&quot;hello, world!&quot;)\n\ndef dataReceived(self, data):\n    print &quot;Server said:&quot;, data\n        self.transport.loseConnection()\n\ndef connectionLost(self, reason):\n    print &quot;connection lost&quot;\n\nclass EchoFactory(protocol.ClientFactory):\n    def buildProtocol(self, addr):\n        return EchoClient()\n\ndef clientConnectionFailed(self, connector, reason):\n    print &quot;Connection failed - goodbye!&quot;\n        reactor.stop()\n\ndef clientConnectionLost(self, connector, reason):\n    print &quot;Connection lost - goodbye!&quot;\n        reactor.stop()\n\nreactor.connectTCP(&quot;localhost&quot;, 8000, EchoFactory())\nreactor.run()</code></pre>\n<p>运行服务器端脚本将启动一个TCP服务器，监听端口8000上的连接。服务器采用的是Echo协议，数据经TCP transport对象写出。运行客户端脚本将对服务器发起一个TCP连接，回显服务器端的回应然后终止连接并停止reactor事件循环。这里的Factory用来对连接的双方生成protocol对象实例。两端的通信是异步的，connectTCP负责注册回调函数到reactor事件循环中，当socket上有数据可读时通知回调处理。</p>\n<h6 id=\"Applications\"><a href=\"#Applications\" class=\"headerlink\" title=\"Applications\"></a>Applications</h6><p>Twisted是用来创建具有可扩展性、跨平台的网络服务器和客户端的引擎。在生产环境中，以标准化的方式简化部署这些应用的过程对于Twisted这种被广泛采用的平台来说是非常重要的一环。为此，Twisted开发了一套应用程序基础组件，采用可重用、可配置的方式来部署Twisted应用。这种方式使程序员避免堆砌千篇一律的代码来将应用程序同已有的工具整合在一起，这包括精灵化进程（daemonization）、日志处理、使用自定义的reactor循环、对代码做性能剖析等。</p>\n<p>应用程序基础组件包含4个主要部分：服务（Service）、应用（Application）、配置管理（通过TAC文件和插件）以及twistd命令行程序。为了说明这个基础组件，我们将上一节的Echo服务器转变成一个应用。</p>\n<ul>\n<li><strong>Service</strong><br>Service就是IService接口下实现的可以启动和停止的组件。Twisted自带有TCP、FTP、HTTP、SSH、DNS等服务以及其他协议的实现。其中许多Service都可以注册到单独的应用中。IService接口的核心是：<blockquote>\n<p>startService    启动服务。可能包含加载配置数据，设定数据库连接或者监听某个端口<br>stopService     关闭服务。可能包含将状态保存到磁盘，关闭数据库连接或者停止监听端口</p>\n</blockquote>\n</li>\n</ul>\n<p>我们的Echo服务使用TCP协议，因此我们可以使用Twisted中IService接口下默认的TCPServer实现。</p>\n<ul>\n<li><strong>Application</strong><br>Application是处于最顶层的Service，代表了整个Twisted应用程序。Service需要将其自身同Application注册，然后就可以用下面我们将介绍的部署工具twistd搜索并运行应用程序。我们将创建一个可以同Echo Service注册的Echo应用。</li>\n<li><strong>TAC文件</strong><br>当在一个普通的Python文件中管理Twisted应用程序时，需要由开发者负责编写启动和停止reactor事件循环以及配置应用程序的代码。在Twisted的基础组件中，协议的实现都是在一个模块中完成的，需要使用到这些协议的Service可以注册到一个Twisted应用程序配置文件中（TAC文件）去，这样reactor事件循环和程序配置就可以由外部组件来进行管理。</li>\n</ul>\n<p>要将我们的Echo服务器转变成一个Echo应用，我们可以按照以下几个简单的步骤来完成：</p>\n<ol>\n<li><p>将Echo服务器的Protocol部分移到它们自己所归属的模块中去。</p>\n</li>\n<li><p>在TAC文件中：</p>\n<ol>\n<li>创建一个Echo应用。</li>\n<li>创建一个TCPServer的Service实例，它将使用我们的EchoFactory，然后同前面创建的应用完成注册。</li>\n</ol>\n</li>\n</ol>\n<p>管理reactor事件循环的代码将由twistd来负责，我们下面会对此进行讨论。这样，应用程序的代码就变成这样了：<br>echo.py文件：</p>\n<pre><code class=\"python\">from twisted.internet import protocol, reactor\n\nclass Echo(protocol.Protocol):\n    def dataReceived(self, data):\n        self.transport.write(data)\n\nclass EchoFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return Echo()</code></pre>\n<ul>\n<li><strong>twistd</strong><br>twistd（读作“twist-dee”）是一个跨平台的用来部署Twisted应用程序的工具。它执行TAC文件并负责处理启动和停止应用程序。作为Twisted在网络编程中具有“内置电池”能力的一部分，twistd自带有一些非常有用的配置标志，包括将应用程序转变为守护进程、定义日志文件的路径、设定特权级别、在chroot下运行、使用非默认的reactor，甚至是在profiler下运行应用程序。</li>\n</ul>\n<p>我们可以像这样运行这个Echo服务应用：</p>\n<pre><code class=\"python\">$ twistd –y echo_server.tac</code></pre>\n<p>在这个简单的例子里，twistd将这个应用程序作为守护进程来启动，日志记录在twistd.log文件中。启动和停止应用后，日志文件内容如下：</p>\n<pre><code class=\"python\">2011-11-19 22:23:07-0500 [-] Log opened.\n2011-11-19 22:23:07-0500 [-] twistd 11.0.0 (/usr/bin/python 2.7.1) starting up.\n2011-11-19 22:23:07-0500 [-] reactor class: twisted.internet.selectreactor.SelectReactor.\n2011-11-19 22:23:07-0500 [-] echo.EchoFactory starting on 8000\n2011-11-19 22:23:07-0500 [-] Starting factory &lt;echo.EchoFactory instance at 0x12d8670&gt;\n2011-11-19 22:23:20-0500 [-] Received SIGTERM, shutting down.\n2011-11-19 22:23:20-0500 [-] (TCP Port 8000 Closed)\n2011-11-19 22:23:20-0500 [-] Stopping factory &lt;echo.EchoFactory instance at 0x12d8670&gt;\n2011-11-19 22:23:20-0500 [-] Main loop terminated.\n2011-11-19 22:23:20-0500 [-] Server Shut Down.</code></pre>\n<p>通过使用Twisted框架中的基础组件来运行服务，这么做使得开发人员能够不用再编写类似守护进程和记录日志这样的冗余代码了。这同样也为部署应用程序建立了一个标准的命令行接口。</p>\n<h6 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h6><p>对于运行Twisted应用程序的方法，除了基于TAC文件外还有一种可选的方法，这就是插件系统。TAC系统可以很方便的将Twisted预定义的服务同应用程序配置文件注册，而插件系统能够方便的将用户自定义的服务注册为twistd工具的子命令，然后扩展应用程序的命令行接口。</p>\n<p>在使用插件系统时：</p>\n<ol>\n<li><p>由于只有plugin API需要保持稳定，这使得第三方开发者能很容易地扩展软件。</p>\n</li>\n<li><p>插件发现能力已经集成到系统中了。插件可以在程序首次运行时加载并保存，每次程序启动时会重新触发插件发现过程，或者也可以在程序运行期间反复轮询新插件，这使得在程序已经启动后我们还可以判断是否有新的插件安装上了。</p>\n</li>\n</ol>\n<p>当使用Twisted插件系统来扩展软件时，我们要做的就是创建IPlugin接口下实现的对象并将它们放到一个特定的位置中，这里插件系统知道该如何去找到它们。</p>\n<p>我们已经将Echo服务转换为一个Twisted应用程序了，而将其转换为一个Twisted插件也是非常简单直接的。在我们之前的Echo模块中，除了包含有Echo协议和EchoFactory的定义之外，现在我们还要添加一个名为twistd的目录，其中还包含着一个名为plugins的子目录，这里正是我们需要定义echo插件的地方。通过这个插件，我们可以启动一个echo服务，并将需要使用的端口号作为参数指定给twistd工具。</p>\n<pre><code class=\"python\">from zope.interface import implements\n\nfrom twisted.python import usage\nfrom twisted.plugin import IPlugin\nfrom twisted.application.service import IServiceMaker\nfrom twisted.application import internet\n\nfrom echo import EchoFactory\n\nclass Options(usage.Options):\n    optParameters = [[&quot;port&quot;, &quot;p&quot;, 8000, &quot;The port number to listen on.&quot;]]\n\nclass EchoServiceMaker(object):\n    implements(IServiceMaker, IPlugin)\n    tapname = &quot;echo&quot;\n    description = &quot;A TCP-based echo server.&quot;\n    options = Options\n\ndef makeService(self, options):\n    &quot;&quot;&quot;\n    Construct a TCPServer from a factory defined in myproject.\n    &quot;&quot;&quot;\n    return internet.TCPServer(int(options[&quot;port&quot;]), EchoFactory())\n\nserviceMaker = EchoServiceMaker()</code></pre>\n<p>现在，我们的Echo服务器将作为一个服务选项出现在twistd –help的输出中。运行twistd echo –port=1235将在端口1235上启动一个Echo服务器。</p>\n<p>Twisted还带有一个可拔插的针对服务器端认证的模块twisted.cred，插件系统常见的用途就是为应用程序添加一个认证模式。我们可以使用twisted.cred中现成的AuthOptionMixin类来添加针对各种认证的命令行支持，或者是添加新的认证类型。比如，我们可以使用插件系统来添加基于本地Unix密码数据库或者是基于LDAP服务器的认证方式。</p>\n<p>twistd工具中附带有许多Twisted所支持的协议插件，只用一条单独的命令就可以完成启动服务器的工作了。这里有一些通过twistd启动服务器的例子：</p>\n<pre><code class=\"python\">twistd web –port 8080 –path .</code></pre>\n<p>这条命令将在8080端口启动一个HTTP服务器，在当前目录中负责处理静态和动态页面请求。</p>\n<pre><code class=\"python\">twistd dns –p 5553 –hosts-file=hosts</code></pre>\n<p>这条命令在端口5553上启动一个DNS服务器，解析指定的文件hosts中的域名，这个文件的内容格式同/etc/hosts一样。</p>\n<pre><code class=\"python\">sudo twistd conch –p tcp:2222</code></pre>\n<p>这条命令在端口2222上启动一个SSH服务器。ssh的密钥必须独立设定。</p>\n<pre><code class=\"python\">twistd mail –E –H localhost –d localhost=emails</code></pre>\n<p>这条命令启动一个ESMTP POP3服务器，为本地主机接收邮件并保存到指定的emails目录下。</p>\n<p>我们可以方便的通过twistd来搭建一个用于测试客户端功能的服务器，但它同样是可装载的、产品级的服务器实现。</p>\n<p>在部署应用程序的方式上，Twisted通过TAC文件、插件以及命令行工具twistd的部署方式已经获得了成功。但是有趣的是，对于大多数大型Twisted应用程序来说，部署它们仍然需要重写一些这类管理和监控组件；Twisted的架构并没有对系统管理员的需求呈现出太多的友好性。这也反映了一个事实，那就是对于系统管理员来说Twisted历来就没有太多架构可言，而这些系统管理员才是部署和维护应用程序的专家。在这方面，Twisted在未来架构设计的决策上需要更积极的征求这类专家级用户的反馈意见。</p>\n<p><a href=\"https://www.cnblogs.com/xianguang/p/7027661.html\">本文内容引用自此处</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck3dwjs7m0006ekuwfnddyrnv","category_id":"ck3dwjs7i0003ekuwkazq8n5m","_id":"ck3dwjs7u000cekuwc7rkgwss"},{"post_id":"ck3dwjs790000ekuwwapuut6h","category_id":"ck3dwjs7i0003ekuwkazq8n5m","_id":"ck3dwjs7x000gekuw93rzfpa1"},{"post_id":"ck3dwjs7g0002ekuw65hudre3","category_id":"ck3dwjs7i0003ekuwkazq8n5m","_id":"ck3dwjs80000jekuw41rt3j51"},{"post_id":"ck3dwjs7l0005ekuwgr7a46fm","category_id":"ck3dwjs7i0003ekuwkazq8n5m","_id":"ck3dwjs83000oekuwn2feohoh"},{"post_id":"ck3dwjs81000lekuw63ixp84j","category_id":"ck3dwjs7z000iekuwjdrluc6p","_id":"ck3dwjs87000vekuw209o74vk"},{"post_id":"ck3dwjs7n0007ekuwjh4s0eoi","category_id":"ck3dwjs7z000iekuwjdrluc6p","_id":"ck3dwjs8a0010ekuwkqjnoru3"},{"post_id":"ck3dwjs7w000fekuws5ybuiuu","category_id":"ck3dwjs8c0012ekuw16mes5tm","_id":"ck3dwjs8k001fekuwe3q3vkqd"},{"post_id":"ck3dwjs82000nekuwi7n1zydg","category_id":"ck3dwjs8g0019ekuw38s7nclj","_id":"ck3dwjs8p001nekuwccf2vgbz"},{"post_id":"ck3dwjs8k001gekuwrmnqllu9","category_id":"ck3dwjs8g0019ekuw38s7nclj","_id":"ck3dwjs8t001sekuwx82bmr5m"},{"post_id":"ck3dwjs85000sekuwzrqxaduy","category_id":"ck3dwjs8l001hekuwjk1pahie","_id":"ck3dwjs8v001wekuwkwd21ewy"},{"post_id":"ck3dwjs86000uekuwmhp09uou","category_id":"ck3dwjs8l001hekuwjk1pahie","_id":"ck3dwjs940029ekuwy5j66ruc"},{"post_id":"ck3dwjs89000zekuwy6fc3e2s","category_id":"ck3dwjs8l001hekuwjk1pahie","_id":"ck3dwjs96002eekuwhs0fyrhi"},{"post_id":"ck3dwjs8b0011ekuwlf98umqn","category_id":"ck3dwjs8l001hekuwjk1pahie","_id":"ck3dwjs9b002mekuw6cfnt1pk"},{"post_id":"ck3dwjs8f0017ekuw15q296ah","category_id":"ck3dwjs8l001hekuwjk1pahie","_id":"ck3dwjs9e002rekuwc8iq1o3s"},{"post_id":"ck3dwjs8h001bekuwz3n4n6ty","category_id":"ck3dwjs8l001hekuwjk1pahie","_id":"ck3dwjs9f002tekuwi1hp8m59"},{"post_id":"ck3dwjs8i001dekuw1jyxelzm","category_id":"ck3dwjs9e002qekuwqmburm0k","_id":"ck3dwjs9i002yekuw17q4n2oi"},{"post_id":"ck3dwjs8n001kekuw3a2ab8f6","category_id":"ck3dwjs9e002qekuwqmburm0k","_id":"ck3dwjs9l0032ekuwhoj1600h"},{"post_id":"ck3dwjs8o001mekuwliln732y","category_id":"ck3dwjs9e002qekuwqmburm0k","_id":"ck3dwjs9n0036ekuwsazy27wg"},{"post_id":"ck3dwjs8s001rekuwpi92bah2","category_id":"ck3dwjs9e002qekuwqmburm0k","_id":"ck3dwjs9p003aekuwf48ccom5"},{"post_id":"ck3dwjs8u001uekuwx19x20ny","category_id":"ck3dwjs9e002qekuwqmburm0k","_id":"ck3dwjs9t003kekuwwqxagzse"},{"post_id":"ck3dwjs8x001zekuwd32znfi5","category_id":"ck3dwjs9e002qekuwqmburm0k","_id":"ck3dwjs9w003pekuw5zo2p0oh"},{"post_id":"ck3dwjs8y0021ekuwnksg9uvn","category_id":"ck3dwjs9e002qekuwqmburm0k","_id":"ck3dwjs9y003uekuwjub6swl2"},{"post_id":"ck3dwjs910025ekuwxw98cb6y","category_id":"ck3dwjs9e002qekuwqmburm0k","_id":"ck3dwjsa1003zekuwwlmnbrxy"},{"post_id":"ck3dwjs7s000bekuwr3xokshw","category_id":"ck3dwjs84000pekuw1pb1p0mj","_id":"ck3dwjsa30043ekuw1klc8ys1"},{"post_id":"ck3dwjs7s000bekuwr3xokshw","category_id":"ck3dwjs8q001pekuw02kk4w4t","_id":"ck3dwjsa30045ekuwgwah88o3"},{"post_id":"ck3dwjs7s000bekuwr3xokshw","category_id":"ck3dwjs9n0035ekuw2w5h4ykz","_id":"ck3dwjsa50048ekuw9c830ri4"},{"post_id":"ck3dwjs7q000aekuwrhdntjnj","category_id":"ck3dwjs84000pekuw1pb1p0mj","_id":"ck3dwjsa5004aekuwrcszx1b2"},{"post_id":"ck3dwjs7q000aekuwrhdntjnj","category_id":"ck3dwjs8q001pekuw02kk4w4t","_id":"ck3dwjsa7004dekuw6k7ilmx7"},{"post_id":"ck3dwjs7q000aekuwrhdntjnj","category_id":"ck3dwjs9n0035ekuw2w5h4ykz","_id":"ck3dwjsa8004fekuwh2fabong"},{"post_id":"ck3dwjs7q000aekuwrhdntjnj","category_id":"ck3dwjsa0003yekuwqadtedmo","_id":"ck3dwjsa9004iekuwkh1x4rur"},{"post_id":"ck3dwjsag004uekuwsabtrrfu","category_id":"ck3dwjs8l001hekuwjk1pahie","_id":"ck3dwjsak004zekuwlkif1cgq"},{"post_id":"ck3dwjsah004vekuw7tkv1axn","category_id":"ck3dwjs8l001hekuwjk1pahie","_id":"ck3dwjsal0051ekuwrycnym76"},{"post_id":"ck3dwjsaj004xekuw6iudg6pf","category_id":"ck3dwjs7z000iekuwjdrluc6p","_id":"ck3dwjsam0053ekuwfxpfz03x"},{"post_id":"ck3dwjsb50059ekuw267a3v4n","category_id":"ck3dwjs8l001hekuwjk1pahie","_id":"ck3dwjsb9005cekuwiqbqbbsy"}],"PostTag":[{"post_id":"ck3dwjs790000ekuwwapuut6h","tag_id":"ck3dwjs7k0004ekuw7voswugq","_id":"ck3dwjs82000mekuwtmy1heoe"},{"post_id":"ck3dwjs790000ekuwwapuut6h","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjs84000qekuw7jd6f0mn"},{"post_id":"ck3dwjs790000ekuwwapuut6h","tag_id":"ck3dwjs7v000eekuw7i1kx3z7","_id":"ck3dwjs86000tekuw56w2wkh1"},{"post_id":"ck3dwjs7g0002ekuw65hudre3","tag_id":"ck3dwjs80000kekuw5rrik08y","_id":"ck3dwjs88000wekuwxtvjuxos"},{"post_id":"ck3dwjs89000zekuwy6fc3e2s","tag_id":"ck3dwjs7k0004ekuw7voswugq","_id":"ck3dwjs8c0013ekuw6irg2ko3"},{"post_id":"ck3dwjs89000zekuwy6fc3e2s","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjs8f0016ekuwn932c394"},{"post_id":"ck3dwjs8b0011ekuwlf98umqn","tag_id":"ck3dwjs7k0004ekuw7voswugq","_id":"ck3dwjs8g0018ekuw1dbdw0zo"},{"post_id":"ck3dwjs8b0011ekuwlf98umqn","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjs8i001cekuw6mjf1g57"},{"post_id":"ck3dwjs8f0017ekuw15q296ah","tag_id":"ck3dwjs7k0004ekuw7voswugq","_id":"ck3dwjs8j001eekuw1f8w2q6s"},{"post_id":"ck3dwjs8f0017ekuw15q296ah","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjs8m001jekuwvldt6mh3"},{"post_id":"ck3dwjs8h001bekuwz3n4n6ty","tag_id":"ck3dwjs7k0004ekuw7voswugq","_id":"ck3dwjs8o001lekuw7tqcdfu0"},{"post_id":"ck3dwjs8h001bekuwz3n4n6ty","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjs8r001qekuwnfbju79e"},{"post_id":"ck3dwjs7l0005ekuwgr7a46fm","tag_id":"ck3dwjs7k0004ekuw7voswugq","_id":"ck3dwjs8t001tekuwfc43z2j9"},{"post_id":"ck3dwjs7l0005ekuwgr7a46fm","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjs8w001yekuw9wq8tufv"},{"post_id":"ck3dwjs7l0005ekuwgr7a46fm","tag_id":"ck3dwjs7v000eekuw7i1kx3z7","_id":"ck3dwjs8y0020ekuwtwltdxox"},{"post_id":"ck3dwjs7l0005ekuwgr7a46fm","tag_id":"ck3dwjs8h001aekuwr63249wy","_id":"ck3dwjs900024ekuw3rhx6r3w"},{"post_id":"ck3dwjs7m0006ekuwfnddyrnv","tag_id":"ck3dwjs7k0004ekuw7voswugq","_id":"ck3dwjs920026ekuwv1ckbjyh"},{"post_id":"ck3dwjs7m0006ekuwfnddyrnv","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjs94002aekuwodz37gmp"},{"post_id":"ck3dwjs7m0006ekuwfnddyrnv","tag_id":"ck3dwjs7v000eekuw7i1kx3z7","_id":"ck3dwjs95002bekuw1pyywnq7"},{"post_id":"ck3dwjs7n0007ekuwjh4s0eoi","tag_id":"ck3dwjs7k0004ekuw7voswugq","_id":"ck3dwjs97002fekuwp83vj1fm"},{"post_id":"ck3dwjs7n0007ekuwjh4s0eoi","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjs98002gekuwzd6w3g76"},{"post_id":"ck3dwjs7n0007ekuwjh4s0eoi","tag_id":"ck3dwjs7v000eekuw7i1kx3z7","_id":"ck3dwjs99002jekuwrhs2xmws"},{"post_id":"ck3dwjs7q000aekuwrhdntjnj","tag_id":"ck3dwjs930027ekuw5mhv2dsz","_id":"ck3dwjs9a002kekuwdursi2kj"},{"post_id":"ck3dwjs7q000aekuwrhdntjnj","tag_id":"ck3dwjs95002cekuwpqksxg92","_id":"ck3dwjs9c002oekuw6et7mfye"},{"post_id":"ck3dwjs7s000bekuwr3xokshw","tag_id":"ck3dwjs930027ekuw5mhv2dsz","_id":"ck3dwjs9d002pekuwu6ldx8x7"},{"post_id":"ck3dwjs7w000fekuws5ybuiuu","tag_id":"ck3dwjs9b002nekuwb9w9jcbg","_id":"ck3dwjs9h002wekuw5x9j5i1j"},{"post_id":"ck3dwjs7w000fekuws5ybuiuu","tag_id":"ck3dwjs9e002sekuwfuoczunu","_id":"ck3dwjs9i002zekuwcdnx8obn"},{"post_id":"ck3dwjs7y000hekuw5ty6r8mc","tag_id":"ck3dwjs9h002vekuw4rgpcw8u","_id":"ck3dwjs9m0034ekuwqvwwfxho"},{"post_id":"ck3dwjs7y000hekuw5ty6r8mc","tag_id":"ck3dwjs9j0030ekuw5ii7tbup","_id":"ck3dwjs9n0037ekuwksphumw2"},{"post_id":"ck3dwjs81000lekuw63ixp84j","tag_id":"ck3dwjs7k0004ekuw7voswugq","_id":"ck3dwjs9o0039ekuwswsga6sk"},{"post_id":"ck3dwjs81000lekuw63ixp84j","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjs9p003cekuw28w1dtee"},{"post_id":"ck3dwjs81000lekuw63ixp84j","tag_id":"ck3dwjs7v000eekuw7i1kx3z7","_id":"ck3dwjs9q003eekuwpdpp1vwu"},{"post_id":"ck3dwjs81000lekuw63ixp84j","tag_id":"ck3dwjs9m0033ekuwuhzam2hp","_id":"ck3dwjs9r003gekuw4toeuv64"},{"post_id":"ck3dwjs82000nekuwi7n1zydg","tag_id":"ck3dwjs9o0038ekuw2g0v3bti","_id":"ck3dwjs9t003iekuw3oslcere"},{"post_id":"ck3dwjs85000sekuwzrqxaduy","tag_id":"ck3dwjs7k0004ekuw7voswugq","_id":"ck3dwjs9u003lekuwmjyk3s2w"},{"post_id":"ck3dwjs85000sekuwzrqxaduy","tag_id":"ck3dwjs9q003dekuwz1243dsp","_id":"ck3dwjs9v003nekuw6iitt1kk"},{"post_id":"ck3dwjs85000sekuwzrqxaduy","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjs9w003qekuwyxulmkca"},{"post_id":"ck3dwjs86000uekuwmhp09uou","tag_id":"ck3dwjs7k0004ekuw7voswugq","_id":"ck3dwjs9y003sekuw2f068kbl"},{"post_id":"ck3dwjs86000uekuwmhp09uou","tag_id":"ck3dwjs9q003dekuwz1243dsp","_id":"ck3dwjs9z003vekuwz42ldcn8"},{"post_id":"ck3dwjs86000uekuwmhp09uou","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjsa0003xekuwft2falc8"},{"post_id":"ck3dwjs8i001dekuw1jyxelzm","tag_id":"ck3dwjs95002cekuwpqksxg92","_id":"ck3dwjsa10040ekuwf9ag0ff6"},{"post_id":"ck3dwjs8i001dekuw1jyxelzm","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjsa20042ekuwrtdfx9ks"},{"post_id":"ck3dwjs8k001gekuwrmnqllu9","tag_id":"ck3dwjs9o0038ekuw2g0v3bti","_id":"ck3dwjsa30044ekuwtgkauubz"},{"post_id":"ck3dwjs8n001kekuw3a2ab8f6","tag_id":"ck3dwjs95002cekuwpqksxg92","_id":"ck3dwjsa40047ekuwe91fmuki"},{"post_id":"ck3dwjs8n001kekuw3a2ab8f6","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjsa50049ekuwzedxqm49"},{"post_id":"ck3dwjs8o001mekuwliln732y","tag_id":"ck3dwjs95002cekuwpqksxg92","_id":"ck3dwjsa7004cekuw9akuxqsw"},{"post_id":"ck3dwjs8o001mekuwliln732y","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjsa7004eekuwkj7r5sbw"},{"post_id":"ck3dwjs8s001rekuwpi92bah2","tag_id":"ck3dwjs95002cekuwpqksxg92","_id":"ck3dwjsa9004hekuwwo2edqyi"},{"post_id":"ck3dwjs8s001rekuwpi92bah2","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjsa9004jekuwrfu5xq3p"},{"post_id":"ck3dwjs8u001uekuwx19x20ny","tag_id":"ck3dwjs95002cekuwpqksxg92","_id":"ck3dwjsaa004lekuwzxtetrpz"},{"post_id":"ck3dwjs8u001uekuwx19x20ny","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjsab004mekuw28aquuwd"},{"post_id":"ck3dwjs8x001zekuwd32znfi5","tag_id":"ck3dwjs95002cekuwpqksxg92","_id":"ck3dwjsab004oekuw3lwyckif"},{"post_id":"ck3dwjs8x001zekuwd32znfi5","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjsac004pekuwxgvr1b5j"},{"post_id":"ck3dwjs8y0021ekuwnksg9uvn","tag_id":"ck3dwjs95002cekuwpqksxg92","_id":"ck3dwjsac004qekuwcs5wzyn9"},{"post_id":"ck3dwjs8y0021ekuwnksg9uvn","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjsac004rekuwro1tupf0"},{"post_id":"ck3dwjs910025ekuwxw98cb6y","tag_id":"ck3dwjs95002cekuwpqksxg92","_id":"ck3dwjsad004sekuwnkqva56x"},{"post_id":"ck3dwjs910025ekuwxw98cb6y","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjsad004tekuwaeo3ekbw"},{"post_id":"ck3dwjsag004uekuwsabtrrfu","tag_id":"ck3dwjs7k0004ekuw7voswugq","_id":"ck3dwjsai004wekuwddiv2vms"},{"post_id":"ck3dwjsag004uekuwsabtrrfu","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjsak004yekuwvf47jbka"},{"post_id":"ck3dwjsah004vekuw7tkv1axn","tag_id":"ck3dwjs7k0004ekuw7voswugq","_id":"ck3dwjsal0050ekuwvocs8xix"},{"post_id":"ck3dwjsah004vekuw7tkv1axn","tag_id":"ck3dwjs9q003dekuwz1243dsp","_id":"ck3dwjsal0052ekuws85zbjb5"},{"post_id":"ck3dwjsah004vekuw7tkv1axn","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjsam0054ekuw8tyf670v"},{"post_id":"ck3dwjsaj004xekuw6iudg6pf","tag_id":"ck3dwjs7k0004ekuw7voswugq","_id":"ck3dwjsam0055ekuwrxdsqp6x"},{"post_id":"ck3dwjsaj004xekuw6iudg6pf","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjsam0056ekuw32tcc8qt"},{"post_id":"ck3dwjsaj004xekuw6iudg6pf","tag_id":"ck3dwjs7v000eekuw7i1kx3z7","_id":"ck3dwjsan0057ekuw6ge22pjw"},{"post_id":"ck3dwjsaj004xekuw6iudg6pf","tag_id":"ck3dwjs9m0033ekuwuhzam2hp","_id":"ck3dwjsan0058ekuwivjkom0z"},{"post_id":"ck3dwjsb50059ekuw267a3v4n","tag_id":"ck3dwjs7k0004ekuw7voswugq","_id":"ck3dwjsb8005aekuwda95sdqj"},{"post_id":"ck3dwjsb50059ekuw267a3v4n","tag_id":"ck3dwjs9q003dekuwz1243dsp","_id":"ck3dwjsb9005bekuwjy5kvy49"},{"post_id":"ck3dwjsb50059ekuw267a3v4n","tag_id":"ck3dwjs7p0009ekuwu0jpkafo","_id":"ck3dwjsb9005dekuwrjf0iw1u"}],"Tag":[{"name":"Python","_id":"ck3dwjs7k0004ekuw7voswugq"},{"name":"Note","_id":"ck3dwjs7p0009ekuwu0jpkafo"},{"name":"Django","_id":"ck3dwjs7v000eekuw7i1kx3z7"},{"name":"CAD","_id":"ck3dwjs80000kekuw5rrik08y"},{"name":"Conda","_id":"ck3dwjs8h001aekuwr63249wy"},{"name":"Game","_id":"ck3dwjs930027ekuw5mhv2dsz"},{"name":"English","_id":"ck3dwjs95002cekuwpqksxg92"},{"name":"Jenkins","_id":"ck3dwjs9b002nekuwb9w9jcbg"},{"name":"CI","_id":"ck3dwjs9e002sekuwfuoczunu"},{"name":"linux","_id":"ck3dwjs9h002vekuw4rgpcw8u"},{"name":"指令","_id":"ck3dwjs9j0030ekuw5ii7tbup"},{"name":"实例","_id":"ck3dwjs9m0033ekuwuhzam2hp"},{"name":"Git","_id":"ck3dwjs9o0038ekuw2g0v3bti"},{"name":"Core Programming","_id":"ck3dwjs9q003dekuwz1243dsp"}]}}