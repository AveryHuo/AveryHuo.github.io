{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","path":"img/article-list-background.jpeg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.autocomplete.min.js","path":"js/jquery.autocomplete.min.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"4df03d7ea4128af9fa2a6fcf09400677314490b7","modified":1597111180418},{"_id":"themes/3-hexo/.DS_Store","hash":"0770f9d42bfdd8d420de48fed463015e001cf579","modified":1597114100311},{"_id":"themes/3-hexo/.git","hash":"fe2a0a3908ae1bdd926c9b286e67f07073f5be2a","modified":1597114066668},{"_id":"themes/3-hexo/.gitignore","hash":"5e85fe97e87211619c1db29fd3f3b0dbf16be4a7","modified":1599536178922},{"_id":"themes/3-hexo/README.md","hash":"d828af269e0c287e86e7754988466e6f323e3b92","modified":1599536178922},{"_id":"themes/3-hexo/_config.yml","hash":"7762b3b00ed27f8878bf3e0f18fac23b02a8b198","modified":1599536178922},{"_id":"source/_posts/.DS_Store","hash":"998d695f6df497b3659af2eb20f24dedfbcb0092","modified":1597111180419},{"_id":"source/_posts/Addressable 研究.md","hash":"50c4209d20cd79335167b614fd5f6949c5433e0c","modified":1599548281687},{"_id":"source/_posts/Centos 部署 Django.md","hash":"e8c46ce6234d76e52923fce98d692f6750f58285","modified":1599535400714},{"_id":"source/_posts/Conda 常用操作.md","hash":"90e4edcb024845f1104e3d115462d6a8a37146c7","modified":1599535400714},{"_id":"source/_posts/C++ 复习1.md","hash":"7359e9c85aa935fa8933a1e66ab0d127d930a9f2","modified":1599535400714},{"_id":"source/_posts/C与C++开源项目学习.md","hash":"d3d8116068b72a9a5ecfb90f567b1dfe6487df65","modified":1599535400714},{"_id":"source/_posts/Django  初始测试.md","hash":"f00809844dec1c95feec4941273829d962c93135","modified":1599535400714},{"_id":"source/_posts/DOTS-事件.md","hash":"75a7149d36188d3bef5a34034a0fa4f703fab899","modified":1599535400714},{"_id":"source/_posts/Django  初步构建.md","hash":"109fb189f65aa74e16896b43d50943f05f8610a5","modified":1599535400714},{"_id":"source/_posts/Django 实例 Web Application.md","hash":"2b8723ed3e0f41dfad6dd7eb850af9e85c306c33","modified":1599535400714},{"_id":"source/_posts/DrawCall优化.md","hash":"857f767b5c825eee2ea6e13e01fdb14759079ec1","modified":1599535400714},{"_id":"source/_posts/ECS-研究学习.md","hash":"88637cc56847711148b699bf58fb82913bdb496c","modified":1599535400714},{"_id":"source/_posts/ECS框架的思考.md","hash":"4bfe8d1dbbe97659bf62631bba1345575cd61d58","modified":1599535400714},{"_id":"source/_posts/Effective C++学习记录.md","hash":"40bd8a8d0d64d9ac42b51aa1aa93aff845077a34","modified":1599535400714},{"_id":"source/_posts/Game Engine Architecture - English.md","hash":"102d8b43f3ff4b91cd5d8a13674aa377ddd29aad","modified":1599616013614},{"_id":"source/_posts/Game Engine Architecture - Foundations Part1.md","hash":"989de6301d0fc513b933dc36fd2f28af95663ed3","modified":1599535400715},{"_id":"source/_posts/Game Engine Architecture - Foundations Part2.md","hash":"e719f98746bdb93d0bf91e6d784f29fc52a53aed","modified":1599535400715},{"_id":"source/_posts/Game Engine Architecture - Foundations Part3.md","hash":"bb93cf1eb1e895013edfd0789e7a1af1432b3d4b","modified":1599535400715},{"_id":"source/_posts/Jenkins打包事项.md","hash":"5f3c3ff8b62ab7398f815ffef48a60a422eed556","modified":1599535400715},{"_id":"source/_posts/LWRP官方说明.md","hash":"3873bcb87864ed2815c1ea19fb93a3c2f954b6d5","modified":1599535400715},{"_id":"source/_posts/Linux与window常用指令.md","hash":"643a75530edca84c7c8b39a9f71ce909ddc17f65","modified":1599535400715},{"_id":"source/_posts/Python Core Programming Note 1.md","hash":"780a75d1c219b7a13615572bf09ba7e109c5a409","modified":1597111180424},{"_id":"source/_posts/Python Core Programming Note 2.md","hash":"c4c708fdb65ebbccae483f494524304c5246112d","modified":1597111180424},{"_id":"source/_posts/Python Core Programming Note 3.md","hash":"c9e5ec95d1d6c71c239ae2aba093e4a684f8c6d5","modified":1599535400715},{"_id":"source/_posts/Python 杂项.md","hash":"c5f16de024d1cd361de3852dec3b5568d89121de","modified":1597111180425},{"_id":"source/_posts/Python_3.md","hash":"ac55bfc95b9812dd94662d1bee6a503cee373d07","modified":1599535400715},{"_id":"source/_posts/Shader Variant.md","hash":"64cbe4962855d89b00cfc3a87470473c40a937b7","modified":1599535400715},{"_id":"source/_posts/Smargit  简单使用说明.md","hash":"f2ff1388e7d52157acf4a2ca7384e2af8e32bf2a","modified":1599535400715},{"_id":"source/_posts/Twisted  介绍.md","hash":"d9ba779079f03ca0a778a78dbb24a22ca6dddf47","modified":1597111180427},{"_id":"source/_posts/UI系统制作流程.md","hash":"5381112546fc613d148b8632ae5ddaad627c7555","modified":1599535400716},{"_id":"source/_posts/VS Code最佳插件.md","hash":"e1a6801eecd7e181a1d4e7b5bc9726069ce5b888","modified":1599535400716},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1599535400716},{"_id":"source/_posts/python_1.md","hash":"1180f967868175857ec01b7fc4b991bc330be91d","modified":1599535400889},{"_id":"source/_posts/python_2.md","hash":"b3ac2ce6d4ab552f22acff5fa26ecfd26cc78286","modified":1599535400889},{"_id":"source/_posts/python_4.md","hash":"4c28360b976146adfaf1d2f1320aff80d715313d","modified":1597111180741},{"_id":"source/_posts/内存管理.md","hash":"d910ff678bb7486a04160906bc8488bd6c4f9202","modified":1599535400889},{"_id":"source/_posts/力扣刷题顺序.md","hash":"2bb7e9261af77afa627a19854e0eba438c7e29ca","modified":1599535400889},{"_id":"source/_posts/动态规划.md","hash":"a4dc849e17654b7c6cb0c0280fc8afa09d0ec9db","modified":1599535400889},{"_id":"source/_posts/天天生鲜项目实例.md","hash":"57edfb0b5b0b3f1d2f7df2db63a24f16eb64b113","modified":1599535400890},{"_id":"source/_posts/天天生鲜项目实例P2.md","hash":"1b9befb1b2f6ff044bc6d9f814312658139636df","modified":1599535400890},{"_id":"source/_posts/四元数旋转函数学习.md","hash":"6709e1d8681429ee7b328745fd65210f5d83e227","modified":1599535400889},{"_id":"source/_posts/客户端更换Git指南.md","hash":"28061582f49db5ab9b8526d2fd8bf7ff31ccce38","modified":1599535400890},{"_id":"source/_posts/常用单词学习.md","hash":"6e5888491336d6f589c17f42fe1963d971bcdda7","modified":1599535400890},{"_id":"source/_posts/开言- To tip or not to tip.md","hash":"a36c89afc5a62a9cb8fc1593c44616af989249e7","modified":1599535400890},{"_id":"source/_posts/开言_Bargaining in the market.md","hash":"59c6c683efcfb779743c2a3fe61c0bfc7c2554cd","modified":1599535400890},{"_id":"source/_posts/开言_Happy Hour Drinks with Coworks.md","hash":"9ffa0dc44c43ab4647d854220d93689adc3456aa","modified":1599535400890},{"_id":"source/_posts/开言体验营 - Day1.md","hash":"88c2f68b7dea55a680936a80022ed85b2b84a737","modified":1599535400890},{"_id":"source/_posts/开言体验营 - Day2.md","hash":"869ffb6f3b04801479684d7de7f7464ec8845420","modified":1599535400890},{"_id":"source/_posts/开言体验营 - Day4.md","hash":"a4710221f4830911ab1f42feaa7bd7f96d7065fe","modified":1599535400890},{"_id":"source/_posts/开言体验营 - Day5.md","hash":"7e9203c3db5d3cbe7f8af572c5652ec2539a0586","modified":1599535400890},{"_id":"source/_posts/开言学习笔记1.md","hash":"2ae1e411a1fd05beb7ae867c12fb15f4eaeed020","modified":1599535400890},{"_id":"source/_posts/性能优化相关.md","hash":"c3f46f4630ae87768a378e741a94bfa78a2fb4eb","modified":1599535400891},{"_id":"source/_posts/排序算法.md","hash":"99f1e1a2fc7bfbc6bd193ba00abd14ab47975cff","modified":1599535400891},{"_id":"source/_posts/数据结构-数组链表结构.md","hash":"b2bd4b202dd9b339258a426813495d6518895ae6","modified":1599535400891},{"_id":"source/_posts/数据结构-笔记1.md","hash":"9c4dd36a3d9f89badc6af6e7369e47cbb90e577c","modified":1599535400891},{"_id":"source/_posts/数据结构在Charp.md","hash":"95d709fec3a1c8ee730c22ae884fb3912215a340","modified":1599535400891},{"_id":"source/_posts/深度优先与广度优先算法.md","hash":"976d89809ba9b83fbb83d7b55b5684831d7e2db7","modified":1599535400891},{"_id":"source/_posts/线性代数-笔记1.md","hash":"bb7dec88a668b5a0664384885ae1d793239a6d54","modified":1599535400891},{"_id":"source/_posts/计算机图形学编程笔记1.md","hash":"e741a047e601c1dcbf731695e0e0525ffa8102ce","modified":1599535400891},{"_id":"source/_posts/最新Addressable资源打包与加载框架.md","hash":"d4daf5eef92b03889139c19eaee33a9b4046e3d3","modified":1599535400891},{"_id":"source/_posts/递归算法.md","hash":"1ace42409e33d9daad30d9f125e947986f6c110b","modified":1599535400891},{"_id":"source/about/index.md","hash":"830f712dc85e3e35fd05dd07d191bb6888a98162","modified":1599535400891},{"_id":"themes/3-hexo/layout/index.ejs","hash":"003421f9a57927aa85aa71905313badb0b47820e","modified":1599536178924},{"_id":"themes/3-hexo/layout/indexs.md","hash":"6e7a5021fb08f8d969bff1e9aae168dfd7c2e251","modified":1599536178924},{"_id":"themes/3-hexo/layout/post.ejs","hash":"810f046277fc49f523a72d1552eab1e39d3c299c","modified":1599536178924},{"_id":"themes/3-hexo/source/.DS_Store","hash":"fdcc907c46e093a14b153c5dc8c038461997ed3c","modified":1597114100318},{"_id":"source/_posts/img/1571216524617.png","hash":"9b519adac7868969a0f85cc0c5d9d3bb4c1a579c","modified":1597111180434},{"_id":"source/_posts/img/1571216524617_1.png","hash":"9b519adac7868969a0f85cc0c5d9d3bb4c1a579c","modified":1597111180434},{"_id":"source/_posts/img/1571216565243.png","hash":"d0d68f0a4f058aac5eb6f7a7967faaa62851202f","modified":1597111180435},{"_id":"source/_posts/img/1571217610540.png","hash":"0be73462800326944c1ac227a7bd3d81cae2e98a","modified":1597111180435},{"_id":"source/_posts/img/1573442010455.png","hash":"2849f7a718dd4c1bfd621f8954aec3246e303ca2","modified":1597111180440},{"_id":"source/_posts/img/1573883470572.png","hash":"0910dac317d43e2a3d48d0ba5d56eae695d9b5dd","modified":1597111180449},{"_id":"source/_posts/img/1574504169104.png","hash":"1cab6bf6fd98ffc7c458e1bccc2bf54fb5065a09","modified":1597111180450},{"_id":"source/_posts/img/1574504408755.png","hash":"cbe0fa2b2d02a0ac87f48d76e411c47e4fe37f4a","modified":1597111180452},{"_id":"source/_posts/img/1574504420111.png","hash":"bf103ec2becc01d26206a77cae33e2b611a659a3","modified":1597111180452},{"_id":"source/_posts/img/1574504426236.png","hash":"b68ef683a8c3a0cedf8098d217e6c9d15b249ef2","modified":1597111180453},{"_id":"source/_posts/img/1574504495536.png","hash":"e18be35e5c430c18fea8dbdc44d2c75dfba6852c","modified":1597111180453},{"_id":"source/_posts/img/1574504516272.png","hash":"252bd12f644d82547335c25462b0afbe6025196c","modified":1597111180453},{"_id":"source/_posts/img/1574504592931.png","hash":"8fc78a7e2e80ee10b897f7771c41a10c065205ea","modified":1597111180454},{"_id":"source/_posts/img/1574504645523.png","hash":"909de20e344326ea11c7924ea2f3b15f1ba3b7cb","modified":1597111180455},{"_id":"source/_posts/img/1574504738524.png","hash":"4903bfd82a285d0a167e9bbea13e25297539f4b3","modified":1597111180455},{"_id":"source/_posts/img/1574656656928.png","hash":"2fb643af57091a6253536f67b065514ff87c8358","modified":1597111180456},{"_id":"source/_posts/img/1574656680199.png","hash":"2fb643af57091a6253536f67b065514ff87c8358","modified":1597111180456},{"_id":"source/_posts/img/1574656713397.png","hash":"2fb643af57091a6253536f67b065514ff87c8358","modified":1597111180456},{"_id":"source/_posts/img/1574756479212.png","hash":"f9bbbd5abd6160107c684f070f2ca8c99c957aad","modified":1597111180459},{"_id":"source/_posts/img/1574759871996.png","hash":"03413fdf8c8b191e2603eb03596f24add852bbff","modified":1597111180460},{"_id":"source/_posts/img/1574826629863.png","hash":"0f73db75d7ada0a9a35f6722fd256dd15081ccb8","modified":1597111180460},{"_id":"source/_posts/img/1574937430699.png","hash":"bc9eb2ae92c68de1bb7630b3a03f1734847edf2c","modified":1597111180462},{"_id":"source/_posts/img/1574912330296.png","hash":"5d03bc141a42a8afa9671dfec516191b611cd73a","modified":1597111180461},{"_id":"source/_posts/img/1574937645193.png","hash":"4605caabd420bd2537944ea3cd357cc47113d11a","modified":1597111180463},{"_id":"source/_posts/img/1574937768754.png","hash":"d49a606066d8599ecb21b67296e869ce2e78ebae","modified":1597111180463},{"_id":"source/_posts/img/1574937788143.png","hash":"3c9c3951f086b97333ca02543bbf837e93378523","modified":1597111180463},{"_id":"source/_posts/img/1575033223646.png","hash":"7ec1598988d7bd3876c028cba664be5cda46b06a","modified":1597111180466},{"_id":"source/_posts/img/1575034858096.png","hash":"8944d6cb1e45019122eeb119eb04ef80b4dd0433","modified":1597111180470},{"_id":"source/_posts/img/1575083796324.png","hash":"7447fa4f01fc3cedd1a0b4d4536c51987ac29be4","modified":1597111180475},{"_id":"source/_posts/img/1575083811284.png","hash":"ddca8a6b2de24ec86fe81514677f862aba3f5bbd","modified":1597111180476},{"_id":"source/_posts/img/1575255482902.png","hash":"907f3724a8fb017a6d125179a44ba48af86323fa","modified":1597111180477},{"_id":"source/_posts/img/1575255814499.png","hash":"e1ca2896837e6e879d3f2b2a98bed0b04a7c103a","modified":1597111180477},{"_id":"source/_posts/img/1575290314506.png","hash":"b362346cf7073a91a94f4e15ed2061ff87a9f3ea","modified":1597111180483},{"_id":"source/_posts/img/1575634466665.png","hash":"415fdd0a4181e37c27c07574dbd7a8445e266672","modified":1597111180486},{"_id":"source/_posts/img/1575635246200.png","hash":"f6f4386b3328492d21951da3988a34da013c84ab","modified":1597111180486},{"_id":"source/_posts/img/1575635485238.png","hash":"3d36284dc1b8e8770219f2679419d4bed2219f61","modified":1597111180487},{"_id":"source/_posts/img/1575984532516.png","hash":"5dd2caff585e0d7bdf4029f66fbf82117f8c0d97","modified":1597111180488},{"_id":"source/_posts/img/1576549292557.png","hash":"79a27c6f190944f8f04fb112a8e342e9f103bbae","modified":1597111180489},{"_id":"source/_posts/img/1576551196217.png","hash":"dc39363e946367d7b6eda2485540d6a439bdbe5e","modified":1597111180489},{"_id":"source/_posts/img/1576810673369.png","hash":"56d6a40b0295761897637a1702d257d4f6f85a26","modified":1597111180493},{"_id":"source/_posts/img/1577414335373.png","hash":"598b2cc67db4c09eb5b6aab1b947a6f1374095b9","modified":1597111180501},{"_id":"source/_posts/img/1578122441016.png","hash":"2dd80c567a5697ab74c8432ffb804be96dedd974","modified":1597111180502},{"_id":"source/_posts/img/1578122530429.png","hash":"24620e2900853e9ff24bccf3ec6833f64ecd5d47","modified":1597111180503},{"_id":"source/_posts/img/1578122991267.png","hash":"8fcac9b54c912af33d9cd4f97fcdafd838d57ce7","modified":1597111180504},{"_id":"source/_posts/img/1578377646492.png","hash":"55b295677bd71cfb06d8ab963bbc6e0df90fba92","modified":1597111180507},{"_id":"source/_posts/img/1578380227603.png","hash":"36f7d05362b0f63929520b427e6dcd8b17723935","modified":1597111180514},{"_id":"source/_posts/img/1578454158486.png","hash":"fe84b70de9e75445bf5ce1980b997df527f87b26","modified":1597111180520},{"_id":"source/_posts/img/1578469710690.png","hash":"f493c0b1d6253a249fac777039afac503cb3c973","modified":1597111180528},{"_id":"source/_posts/img/1578469737158.png","hash":"2bd36a9e1eb00a17aa34b065b8ae9816fbcbe4a0","modified":1597111180528},{"_id":"source/_posts/img/1578566566815.png","hash":"b65e0c1e82f134a46c13f398b9a5edf1f4007685","modified":1597111180545},{"_id":"source/_posts/img/1578566598445.png","hash":"0055ab13603b9fbad97e43efdb782bb15a29c63f","modified":1597111180545},{"_id":"source/_posts/img/1578646594733.png","hash":"8be67b6e36c69a9149b8fe3e3b1aabe99c71207a","modified":1597111180546},{"_id":"source/_posts/img/1578646743161.png","hash":"7f0297a66abf8ae67f8ed36377bcd54d56ab3197","modified":1597111180546},{"_id":"source/_posts/img/1578647010062.png","hash":"461d2059116f6c4a67cc53a05e49976ff3d1f4ba","modified":1597111180547},{"_id":"source/_posts/img/1578651845843.png","hash":"fc73712e7a1b4f8e04da2270a54e200cb3ddbd40","modified":1597111180547},{"_id":"source/_posts/img/1578652129043.png","hash":"ed634cc790e0adc59bc5e919f2d32d12764726a1","modified":1597111180548},{"_id":"source/_posts/img/1578652955011.png","hash":"827c4d2e99ed72d78a4834b7f8e8c521648ea461","modified":1597111180549},{"_id":"source/_posts/img/1579078890824.png","hash":"8168c3f6f0f63f316ef7bf7fe619f6b1eddd6a82","modified":1597111180558},{"_id":"source/_posts/img/1585907380155.png","hash":"b04fe6070471ca5b4876b33512edeff19852f399","modified":1597111180636},{"_id":"source/_posts/img/1585908824999.png","hash":"18771705c5eaf59930ae219dee09aabe93e5ed6b","modified":1597111180637},{"_id":"source/_posts/img/1585909136108.png","hash":"a0b920358a22007b16f2215115efc43816cd0beb","modified":1597111180639},{"_id":"source/_posts/img/1585909191700.png","hash":"a68e5129594630ced04708de2726fd940d65f338","modified":1597111180639},{"_id":"source/_posts/img/1586247034757.png","hash":"8e4edfd9f2403a902bb4c1f531d44489fbfdd049","modified":1597111180640},{"_id":"source/_posts/img/1586247286704.png","hash":"9319a15e486ddb2b9613d347ef00839ce80b48f2","modified":1597111180642},{"_id":"source/_posts/img/1586247445746.png","hash":"f7ff3c22cf003ba079ac188a53e149ef72a0336c","modified":1597111180642},{"_id":"source/_posts/img/1586248831375.png","hash":"15e6552b123b340a1ab1526aaa58049b8eb1c636","modified":1597111180642},{"_id":"source/_posts/img/1586415991649.png","hash":"b6e6ce92529ab97f490b33a71e7c7486a6f0c4f4","modified":1597111180646},{"_id":"source/_posts/img/1586416029304.png","hash":"c920f95f08bbcfd49d9ba41765cf5012628e8bd3","modified":1597111180647},{"_id":"source/_posts/img/1586416055487.png","hash":"b4ae79cb84f5b39e438b0f4150e7d9eb247e4ee7","modified":1597111180647},{"_id":"source/_posts/img/1586416101201.png","hash":"367e8e209614bddafb4cac1f7f90472ae4acb158","modified":1597111180654},{"_id":"source/_posts/img/1586419084172.png","hash":"2b91290a5ba89b626ed10f57d0fb757306093132","modified":1597111180659},{"_id":"source/_posts/img/1586423672607.png","hash":"052b5667530fbe8216761cf9a452dd72345856c9","modified":1597111180660},{"_id":"source/_posts/img/1586434247273.png","hash":"84ac7d2e03545cf52fece9e5b00fe0d9019abb96","modified":1597111180693},{"_id":"source/_posts/img/1586434219909.png","hash":"908b91deaa2c87d3abeaf6819646f6c28273b5ee","modified":1597111180692},{"_id":"source/_posts/img/1586434407387.png","hash":"af5ab1966c6a411e7066a2fe7c6f2b23b4edb561","modified":1597111180702},{"_id":"source/_posts/img/1586435194085.png","hash":"07fca678821aff0e0b3d4302dc4445b5cb1720a9","modified":1597111180712},{"_id":"source/_posts/img/1586435663044.png","hash":"9751510a51a125b63aa0e566a48ce88a3b6c4f4c","modified":1597111180717},{"_id":"source/_posts/img/1587018034122.png","hash":"f27a7e34f1cd88321c9054e8b3157e0b5218a596","modified":1597111180724},{"_id":"source/_posts/img/1587018007123.png","hash":"a9d8444a3a254258fdd0792010189f542777b436","modified":1597111180724},{"_id":"source/_posts/img/1587018052146.png","hash":"d1ca6f82eb92777d05e122aa58ecfef13a0f538f","modified":1597111180725},{"_id":"source/_posts/img/1587018065979.png","hash":"57307b7e2f6678cd911ef7a42f3ae1759f90e317","modified":1597111180725},{"_id":"source/_posts/img/1587018086814.png","hash":"b6dcf06860a0756155e0c18c453930beb5fb1298","modified":1597111180733},{"_id":"source/_posts/img/1587018118278.png","hash":"6f247487fcb8eade956736f3a7ad27a0f322e414","modified":1597111180734},{"_id":"source/_posts/img/1587018132041.png","hash":"8aeaa49ea6a34bdfb427f23e4ce56fab398faf3d","modified":1597111180734},{"_id":"source/_posts/img/1587018141563.png","hash":"9ca96ecb6ca5a669ab555c42d022341c9ef6ee07","modified":1597111180735},{"_id":"themes/3-hexo/layout/_partial/article.ejs","hash":"a0a0f191faafca2aa14abd32ec1b1a385dae1af7","modified":1599536178922},{"_id":"themes/3-hexo/layout/_partial/article_copyright.ejs","hash":"7f28d7736133cc8012fbb8a5eeeb1174b862aec6","modified":1599536178922},{"_id":"themes/3-hexo/layout/_partial/comment.ejs","hash":"5507b4dfab2032345e012a0c5356f63b01395157","modified":1599536178922},{"_id":"themes/3-hexo/layout/_partial/copyright.ejs","hash":"d209ddcfd0149760a30837076be345a09e1797c5","modified":1599536178923},{"_id":"themes/3-hexo/layout/_partial/dashang.ejs","hash":"1b849749e557d2af482dc49acc93407b72c717f3","modified":1599536178923},{"_id":"themes/3-hexo/layout/_partial/footer.ejs","hash":"990003870f8c4303bfe0e52d9446265a7c1af676","modified":1599536178923},{"_id":"themes/3-hexo/layout/_partial/full-toc.ejs","hash":"f39f2ab3a67042e55cd6a51792bfd5ad697808f0","modified":1599536178923},{"_id":"themes/3-hexo/layout/_partial/friends.ejs","hash":"7a31274da81c076021692ff7c80a1be3bbf6fa4c","modified":1599536178923},{"_id":"themes/3-hexo/layout/_partial/header.ejs","hash":"30c3ab5847a18db678ffbe3fc6309ec96cb010c0","modified":1599536178923},{"_id":"themes/3-hexo/layout/_partial/mathjax.ejs","hash":"c2e5cef2377884cd79e5f686fe4f74b082744306","modified":1599536178923},{"_id":"themes/3-hexo/layout/_partial/meta.ejs","hash":"4f7e00e37783208cb350842085f1987ee854452e","modified":1599536178923},{"_id":"themes/3-hexo/layout/_partial/nav-left.ejs","hash":"2d36b810293072ce9d7cea82c8a3a987e137b117","modified":1599536178923},{"_id":"themes/3-hexo/layout/_partial/nav-right.ejs","hash":"301837aa3787004f069206440be25db32e3fb087","modified":1599536178923},{"_id":"themes/3-hexo/layout/_partial/tag.ejs","hash":"71340ddd60ea14061771463140e299204ecf7ed9","modified":1599536178924},{"_id":"themes/3-hexo/layout/_partial/toc-ref.ejs","hash":"6406251dabda66ef686d4c15edbc3061b6d828b8","modified":1599536178924},{"_id":"themes/3-hexo/source/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1599536178927},{"_id":"themes/3-hexo/source/css/mobile.styl","hash":"3934bcba5095e7e6c6b3a801a6e4fa3a35096e10","modified":1599536178927},{"_id":"themes/3-hexo/source/css/style.styl","hash":"c7285882370f522c3bb17055cdf615cf92f48cd0","modified":1599536178927},{"_id":"themes/3-hexo/source/img/alipay.jpg","hash":"0954774b67b25148c9bac76613557e6b0ed84c83","modified":1597114100331},{"_id":"themes/3-hexo/source/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1597114100332},{"_id":"themes/3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1597114100332},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1597114100331},{"_id":"themes/3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1597114100332},{"_id":"themes/3-hexo/source/img/weixin.jpg","hash":"5fe79b9fc9124a67b3f1276c04124900f1226a2c","modified":1597114100333},{"_id":"themes/3-hexo/source/js/jquery.autocomplete.min.js","hash":"7b8ac4d06c9e763963832529f44a56ad42a81e5f","modified":1599536178931},{"_id":"themes/3-hexo/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1597114100336},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1599536178932},{"_id":"themes/3-hexo/source/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1599536178932},{"_id":"source/_posts/img/1570674939333.png","hash":"a944ffb9ba0afeaad24cacc53f734a8e6c89eb01","modified":1597111180431},{"_id":"themes/3-hexo/source/js/script.js","hash":"7502191e29366a11323dc72ae365b1aed254e6f2","modified":1599536178932},{"_id":"source/_posts/img/1570783134086.png","hash":"ba31616e3183191bdc9280fd30acbaa419e69e2a","modified":1597111180433},{"_id":"source/_posts/img/1573441070020.png","hash":"66cfd013b868590ed516382e1edaf4b3ca25384c","modified":1597111180439},{"_id":"source/_posts/img/1573442404015.png","hash":"aa8517f27a4f31bd23dfa27afdccde34f87c81be","modified":1597111180440},{"_id":"source/_posts/img/1573881914065.png","hash":"d7d03ccf5160377d64e8ca2415d9adb57a6d9f1f","modified":1597111180448},{"_id":"source/_posts/img/1574171584470.png","hash":"200a42f2892059e28578993f92007846ef7ba75d","modified":1597111180449},{"_id":"source/_posts/img/1574504183153.png","hash":"07e7c21ab5b5c66c148cd756aef788b63a63f0c9","modified":1597111180451},{"_id":"source/_posts/img/1574504634973.png","hash":"fd240f6c82967a5e7fb3f3a92f868bd0b297d4b9","modified":1597111180454},{"_id":"source/_posts/img/1574757440291.png","hash":"6a381a9b0e8ee9068aed7b21d41a1e6f616344e4","modified":1597111180459},{"_id":"source/_posts/img/1574826985515.png","hash":"a821fa7110b7b786f9ac8ec3a678f3f451c1851c","modified":1597111180461},{"_id":"source/_posts/img/1575035161292.png","hash":"4df4617e563ad963e381edde37a39233de358663","modified":1597111180473},{"_id":"source/_posts/img/1575035213445.png","hash":"3665f0ba3d2f5b8e854c72241081a3c4b7291064","modified":1597111180474},{"_id":"source/_posts/img/1575035246421.png","hash":"fa59f6757af688bb3ef1327a92869d20f3513725","modified":1597111180475},{"_id":"source/_posts/img/1575603749178.png","hash":"8a572aee78a06101efc759c8856e3fdf5b9c9496","modified":1597111180484},{"_id":"source/_posts/img/1575640031870.png","hash":"ed3b2c3a73eb48ab84ec4bff189ecccc01349527","modified":1597111180487},{"_id":"source/_posts/img/1575981798051.png","hash":"8232140fdbfd9ec30899dffd31ac9506bc403442","modified":1597111180488},{"_id":"source/_posts/img/1576636756891.png","hash":"be62c1783c41229045b4a2934672ad0f1e3b1fcc","modified":1597111180491},{"_id":"source/_posts/img/1576810604102.png","hash":"282a3241200da2377501175dc2cdb89630899a2a","modified":1597111180493},{"_id":"source/_posts/img/1576722037256.png","hash":"5b5390f1f9b578c291ba610fbabae53ecc458834","modified":1597111180492},{"_id":"source/_posts/img/1577414816762.png","hash":"18b40c9eaad605eada89bf2bc20b776a5f8ae411","modified":1597111180501},{"_id":"source/_posts/img/1578122591339.png","hash":"b2ea31874b792b8f00ff44a9ee931026c8d49603","modified":1597111180503},{"_id":"source/_posts/img/1578123391128.png","hash":"4ea369ba03811b4d8967508b5a098584d03b5900","modified":1597111180505},{"_id":"source/_posts/img/1578123481409.png","hash":"38397c9eab04b442594e8e9d7f9d6f402ee886cc","modified":1597111180505},{"_id":"source/_posts/img/1578453790169.png","hash":"7b36492ff9c46d8d7e8b66d9d825ee5106e21c56","modified":1597111180519},{"_id":"source/_posts/img/1578454302221.png","hash":"c65046a8d6dbc06e61a5ab4347c15e88fe64943c","modified":1597111180521},{"_id":"source/_posts/img/1578470577651.png","hash":"e51c688f056f50634ce4adc3073a8acb32c80f3c","modified":1597111180545},{"_id":"source/_posts/img/1578652476304.png","hash":"85d2ebed8d72a034c6a3dee7bac71e04360e1624","modified":1597111180548},{"_id":"source/_posts/img/1579081015473.png","hash":"92955dc73658c8704f080bfab33c50aa7e612273","modified":1597111180559},{"_id":"source/_posts/img/1579081031342.png","hash":"d83d92b8caa4db8129c748c2f3ab9aab75446d81","modified":1597111180560},{"_id":"source/_posts/img/1584499995727.png","hash":"f003a628ea6b5f0930c2508e0a7aa0df2a426045","modified":1597111180574},{"_id":"source/_posts/img/1585708632739.png","hash":"056b00d2c4076707e33eea51c6b8fbb1ff9ecc29","modified":1597111180591},{"_id":"source/_posts/img/1585710628207.png","hash":"4e95a8df75f250870a128afdb77771e22b1250ef","modified":1597111180595},{"_id":"source/_posts/img/1585714787406.png","hash":"6a2d00b7d7d6b57f50dfe2077accb745ff1f68c1","modified":1597111180617},{"_id":"source/_posts/img/1585713033340.png","hash":"55cb859a0bf3f8945fbdd2fc26a0fa21f6d15eed","modified":1597111180612},{"_id":"source/_posts/img/1585742120344.png","hash":"1741d60b6501bb96b8f2b1125303c8833f618d34","modified":1597111180627},{"_id":"source/_posts/img/1585742361670.png","hash":"6e2d4f218fb4524741b62189368626904c24f785","modified":1597111180628},{"_id":"source/_posts/img/1585903822933.png","hash":"45396c8874dd0d82d07f355646c8d0f9c2409761","modified":1597111180634},{"_id":"source/_posts/img/1585908731720.png","hash":"70588034f6524f6d39ab1b644af0fb047be945e1","modified":1597111180636},{"_id":"source/_posts/img/1585908857419.png","hash":"7bb044d670fe31c8f0be0417b259e728195c5a38","modified":1597111180638},{"_id":"source/_posts/img/1585909201370.png","hash":"8e2af7862891d1bdb48f9b3846116978388be244","modified":1597111180640},{"_id":"source/_posts/img/1586415301619.png","hash":"bdbbcf09d2a190c7ac2806a668674276a2cda02c","modified":1597111180643},{"_id":"source/_posts/img/1586416006714.png","hash":"bf29f9922c33f6902cde715ec8728a5d2af1bf2e","modified":1597111180646},{"_id":"source/_posts/img/1586416261865.png","hash":"2e2d841a79b2af6b703002c870084adfd32e1b1f","modified":1597111180655},{"_id":"source/_posts/img/1586416480976.png","hash":"9ea65b15180a951f8c95b8d502df6cfb74d597f0","modified":1597111180655},{"_id":"source/_posts/img/1586418715552.png","hash":"2146ee0dac0d76a997032804b72f635f8eb4ac67","modified":1597111180656},{"_id":"source/_posts/img/1586423739245.png","hash":"7e46c392bc1b551352402f617b548ccba0965f88","modified":1597111180684},{"_id":"source/_posts/img/1586423782860.png","hash":"bca7f274cb84deac8d02548f6c2851f5705c00e7","modified":1597111180685},{"_id":"source/_posts/img/1586423973441.png","hash":"99d1e6be6f1284986db6681d57efea39b9db144a","modified":1597111180686},{"_id":"source/_posts/img/1586434191932.png","hash":"f27d5b1edec395e5c7d3dbca36c9c6c23927b4c5","modified":1597111180687},{"_id":"source/_posts/img/1586434361642.png","hash":"c48e7237b5cf36b8a719569abb7ce919f27bb850","modified":1597111180695},{"_id":"source/_posts/img/1586434733368.png","hash":"12a3a69dbffb0415f41603fcb9bafb51c93d5daa","modified":1597111180703},{"_id":"source/_posts/img/1586434845632.png","hash":"d9016ec4480115fe9da612bcd39e79db8fe7f07d","modified":1597111180704},{"_id":"source/_posts/img/1586434970193.png","hash":"97d09737a4f388543f2f0aa0e02edd2cbb0f0d29","modified":1597111180710},{"_id":"source/_posts/img/1586434756126.png","hash":"8915d2f018f90e10f8f34b113145b3d67079a07a","modified":1597111180703},{"_id":"source/_posts/img/1586435106444.png","hash":"6d4864e359e1646ce7da3be1e7a1cd4265742664","modified":1597111180711},{"_id":"source/_posts/img/1586435164143.png","hash":"6c68efa7ad68e846806404d06e165ce4e932f7d7","modified":1597111180712},{"_id":"source/_posts/img/1586435618505.png","hash":"beefd679c639e80da652f23dbc19196be8f92deb","modified":1597111180715},{"_id":"source/_posts/img/1586435636294.png","hash":"977b60b194294b34f105193932650206f48cd940","modified":1597111180716},{"_id":"source/_posts/img/1587018079539.png","hash":"ccd57e441bde5b710201ee0ede93319ab41cf5b9","modified":1597111180733},{"_id":"source/_posts/img/1587018151039.png","hash":"540adf367aa3124d3c2e01b2d49ed71a5336dec0","modified":1597111180736},{"_id":"source/_posts/img/1573881886011.png","hash":"da6d8be633e57115d26bb55b6d850a2984933f9c","modified":1597111180447},{"_id":"source/_posts/img/1574995793894.png","hash":"b27642512001f8f7cd108f8ea99e028d91e911db","modified":1597111180464},{"_id":"source/_posts/img/1575029000281.png","hash":"5a080b1bcfc61af9793c7b3ec3e885087f5c5075","modified":1597111180466},{"_id":"source/_posts/img/1575290159935.png","hash":"6ab04e77c43fa6bb037c1273ad37a1d23547163b","modified":1597111180478},{"_id":"source/_posts/img/1576554364999.png","hash":"ca9b05e5ebc7e9d94fd7c9d1e4b11fd5d57b8d37","modified":1597111180491},{"_id":"source/_posts/img/1576810958695.png","hash":"6be7635f04abc958fdfab34a000898df7011caeb","modified":1597111180494},{"_id":"source/_posts/img/1576811148925.png","hash":"653a4d7709285a63502cb899f6aa74e8aac74bdc","modified":1597111180495},{"_id":"source/_posts/img/1578380391307.png","hash":"dcc1e9e47301b7c90867c4f7ac1e6af0914c1a45","modified":1597111180515},{"_id":"source/_posts/img/1578454203406.png","hash":"100f20cd1ba5199c86bbc24eb0c7104a1cf0d352","modified":1597111180520},{"_id":"source/_posts/img/1584500576606.png","hash":"2e093d58fa105f0a773df5c67538275bf9078410","modified":1597111180575},{"_id":"source/_posts/img/1585742844977.png","hash":"67ba934dddacd29ed645c954fb94e31c829d60db","modified":1597111180630},{"_id":"source/_posts/img/1585743156869.png","hash":"af024fab0eea0a54835b56f8184c19df78042364","modified":1597111180631},{"_id":"source/_posts/img/1586423622273.png","hash":"fb715dfaa85eb3cc07d4ecf153830190f641276f","modified":1597111180660},{"_id":"source/_posts/img/1586434291192.png","hash":"bc71c04b1fd49241fb9e8cde110888e99c10dff4","modified":1597111180694},{"_id":"themes/3-hexo/layout/_partial/comments/click2show.ejs","hash":"fa6675230f8c313236604e26926b142f4f418bdd","modified":1599536178922},{"_id":"themes/3-hexo/layout/_partial/comments/disqus.ejs","hash":"cd0022ce7e6d6efb07a00e87477cdf791f7f6703","modified":1599536178922},{"_id":"themes/3-hexo/layout/_partial/comments/gentie.ejs","hash":"1d6eacdadeb247e3b349ca7168f797beae8ff4c5","modified":1599536178922},{"_id":"themes/3-hexo/layout/_partial/comments/gitalk.ejs","hash":"fbd3c7d72c8354d700918390c6cbfc0a11408277","modified":1599536178923},{"_id":"themes/3-hexo/layout/_partial/comments/gitment.ejs","hash":"f16442568b43d034faaa8e3507f5ae8da34c7b72","modified":1599536178923},{"_id":"themes/3-hexo/source/css/_partial/autocomplete.styl","hash":"f6847a2c6d35dbd6d06dc591bd34ed2019784048","modified":1599536178924},{"_id":"themes/3-hexo/source/css/_partial/comment.styl","hash":"cc0a862b31359a85d12579e49d2eca58d128275c","modified":1599536178924},{"_id":"themes/3-hexo/source/css/_partial/dashang.styl","hash":"f6447a2ac407228e1d53e3455db2919ac0e9f094","modified":1599536178924},{"_id":"themes/3-hexo/source/css/_partial/fade.styl","hash":"4f687cbc74caf8a0887f5e89250284a9bce8b5c1","modified":1599536178924},{"_id":"themes/3-hexo/source/css/_partial/font.styl","hash":"4d5ac149709447c5eee45f0e23dadeea94fd98ce","modified":1599536178924},{"_id":"themes/3-hexo/source/css/_partial/nav-left.styl","hash":"1bd865029ba8c11750fff83d87f69e5d7c137928","modified":1599536178924},{"_id":"themes/3-hexo/source/css/_partial/nprogress.styl","hash":"65efbddd23a264e7d1e85f4073228526770e833c","modified":1599536178924},{"_id":"themes/3-hexo/source/css/_partial/nav-right.styl","hash":"3da8fa04efccfd054a6a65f7153f197d4d68281d","modified":1599536178924},{"_id":"themes/3-hexo/source/css/_partial/full-toc.styl","hash":"0ba318911afbbbffbd2473b472aedf2d3900e978","modified":1599536178924},{"_id":"themes/3-hexo/source/css/_partial/num-load.styl","hash":"4b996440bba8ec755aa70bc6d074d7dbba55ec0c","modified":1599536178924},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1597114100322},{"_id":"themes/3-hexo/source/css/_partial/post.styl","hash":"36bcec9a271f969014e1ec6c12c16bf60921d732","modified":1599536178925},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1599536178925},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1597114100323},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1597114100323},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","hash":"3dfe8e557d9dfaf39bca088a02b76deb82dbaa3d","modified":1597114100323},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","hash":"f8ed131ccf13f4bdd3ec11fc3e997339dd7b66ba","modified":1597114100324},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","hash":"69d184a682bcaeba2b180b437dc4431bc3be38aa","modified":1597114100326},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1597114100327},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1597114100327},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1597114100327},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1597114100327},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1597114100327},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1597114100328},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1597114100328},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1597114100328},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1597114100328},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1597114100329},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1597114100329},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1597114100329},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1597114100329},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1599536178927},{"_id":"source/_posts/img/1575290266752.png","hash":"5647b1e1457fb313032fff25c4f23e9fca6447fd","modified":1597111180481},{"_id":"source/_posts/img/1575290288546.png","hash":"7e658df239a52fb818e7b69f10118fc4bdaafba6","modified":1597111180483},{"_id":"source/_posts/img/1575634128185.png","hash":"0a3a3da380a2a42a47cecba7234d188d85974db9","modified":1597111180485},{"_id":"source/_posts/img/1578365001196.png","hash":"3607f0614b71cc266e6162e8122e6c542a3a974d","modified":1597111180506},{"_id":"source/_posts/img/1578453777774.png","hash":"683befa028c8093d245db31f5c6382777b4689a1","modified":1597111180518},{"_id":"source/_posts/img/1578469925626.png","hash":"e6e2c31f4294c77056102e3d0dd1a2923eacccb2","modified":1597111180529},{"_id":"source/_posts/img/1579077588215.png","hash":"e7774c9918d58a7582579b6af9a14dd8805e06b9","modified":1597111180553},{"_id":"source/_posts/img/1583549878874.png","hash":"d2baef767403a013794217e3dbfd64597cf71e9c","modified":1597111180568},{"_id":"source/_posts/img/1584501108996.png","hash":"15f107f6f0a59871f587ebc645370df7df30eda1","modified":1597111180582},{"_id":"source/_posts/img/1585710578747.png","hash":"8c35694192006651a08e397504d87af2e07996a6","modified":1597111180593},{"_id":"source/_posts/img/1585711991004.png","hash":"5918f512f3eada676bb27f894dd72089f9d4ddd8","modified":1597111180603},{"_id":"source/_posts/img/1585710256442.png","hash":"19929e0c74f14b50d7c399754434ad555837342e","modified":1597111180593},{"_id":"source/_posts/img/1585712085363.png","hash":"d33c9638d9fdf04c35abbc3222909134b6666480","modified":1597111180609},{"_id":"source/_posts/img/1585714606930.png","hash":"e01dc317e9e8029e7f47e3928f3a77d50bc6c83e","modified":1597111180616},{"_id":"source/_posts/img/1585722630933.png","hash":"075632bed79c97dead0429bea6b7e3c44470cc22","modified":1597111180625},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","hash":"c61a31e5310430312677fffe4286097d29d10151","modified":1599536178926},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","hash":"aa087561480fb9c2cfd541e33d1e99d5ac1a56bb","modified":1597114100324},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1597114100326},{"_id":"themes/3-hexo/source/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1599536178931},{"_id":"source/_posts/img/1570674953248.png","hash":"bae9bd1b0dafbee6df631f87d77ad33e4c8fefba","modified":1597111180432},{"_id":"source/_posts/img/1573879504277.png","hash":"2b8d9bea3a8ad233bd90187e200d35fbbdc0160f","modified":1597111180442},{"_id":"source/_posts/img/1574738644796.png","hash":"fcca387d7cf8670261dc87b0602836c5eea1d95b","modified":1597111180458},{"_id":"source/_posts/img/1578379986297.png","hash":"7397670a9034c321557139473f208a3d90115e07","modified":1597111180512},{"_id":"source/_posts/img/1578380648851.png","hash":"46a273cfe495638bdcb74e80e7c260c3d644ba65","modified":1597111180517},{"_id":"source/_posts/img/1579072055300.png","hash":"4aca0090e0ae0a9ac27472dd8c187dec0346fd58","modified":1597111180550},{"_id":"source/_posts/img/1583550030862.png","hash":"e82717471d46cf90267d070f15e149790c7635f1","modified":1597111180569},{"_id":"source/_posts/img/1584501076960.png","hash":"5ae90da1801b6c57a8351f4a4142ba6fbfbd7f72","modified":1597111180581},{"_id":"source/_posts/img/1584502302892.png","hash":"0498ecb4e708d9cc45f66bc68736dc7f7f48fcda","modified":1597111180583},{"_id":"source/_posts/img/1585710777047.png","hash":"0825d194c1a4c835f1a13926614bd3c049dccf43","modified":1597111180596},{"_id":"source/_posts/img/1585712479371.png","hash":"5e90274e7d19b811edb82826d8c41f744f4d3e9f","modified":1597111180610},{"_id":"themes/3-hexo/source/css/fonts/selection.json","hash":"57c7f100019d57b512aab509185cb0a6eb9aa4c8","modified":1599536178926},{"_id":"source/_posts/img/1573880787198.png","hash":"852d7d8c483c0fa942c1afc31f5b1bdccd09d1ff","modified":1597111180446},{"_id":"source/_posts/img/1575290242736.png","hash":"f55e46aa23020bd24d9711c2591bf213b8560789","modified":1597111180479},{"_id":"source/_posts/img/1583548259212.png","hash":"192c67aab6160aa7f2647e0b1b87899a4268f415","modified":1597111180566},{"_id":"source/_posts/img/1584498872491.png","hash":"5320aa486e4d4c3cbd5f8aa2d948ea21deccc0e4","modified":1597111180573},{"_id":"source/_posts/img/1584499275880.png","hash":"7eeb37e1116e4ae6075242eb3c0f3e0d73ef94d3","modified":1597111180574},{"_id":"source/_posts/img/1585819226392.png","hash":"26a409a5de22d7ba5437ffa22eeaefae08e6f41c","modified":1597111180633},{"_id":"source/_posts/img/1578378838931.png","hash":"8ac80897da191aa37c3f63fca2fa4bd5c657a588","modified":1597111180509},{"_id":"source/_posts/img/1585709533268.png","hash":"7f2cb728e9cad73a712a991a064e494e7ae26096","modified":1597111180592},{"_id":"source/_posts/img/1585711969955.png","hash":"6839969b9cb94e7c4afbe9fc19da9367ad5f4da1","modified":1597111180602},{"_id":"source/_posts/img/1585712995976.png","hash":"2081741dd2d84c0618232b4379a404ccbca52e22","modified":1597111180612},{"_id":"source/_posts/img/1585722584708.png","hash":"d9dd0743858cb051494dda9cbc67eb30f512801d","modified":1597111180620},{"_id":"source/_posts/img/1585742087660.png","hash":"f46cc2a75c5a1a076576963a6c9ca5ddb131113f","modified":1597111180627},{"_id":"themes/3-hexo/source/js/gitalk.js","hash":"d1eb82a3280981bd652d9a8e323060e4311c547b","modified":1599536178930},{"_id":"source/_posts/img/1575033366217.png","hash":"49923905e9ab61bb5eb5852ef3c54d41ae72ddab","modified":1597111180468},{"_id":"source/_posts/img/1577068738684.png","hash":"9bc0d2bb0ba8189d7dcdcd12afc6714c0b5f5958","modified":1597111180498},{"_id":"source/_posts/img/1578378917671.png","hash":"47ea5cf408a00e137a82df58ac5cecad602c2a4d","modified":1597111180510},{"_id":"source/_posts/img/1579078623846.png","hash":"9ac9c897c7ad07029b27452da7fe3e0c70bdd549","modified":1597111180557},{"_id":"source/_posts/img/1583549163720.png","hash":"83f89ea8e6891a4fb3483d660ad65266976c834d","modified":1597111180567},{"_id":"source/_posts/img/1585714939207.png","hash":"bcbc321d9e48d8f83b3af2d19a257733c8005f1c","modified":1597111180618},{"_id":"source/_posts/img/1586423705879.png","hash":"9d16e4f2ba8b17c2fa71012b8f6706de942a883b","modified":1597111180662},{"_id":"source/_posts/img/1587017641511.png","hash":"ed3c47de91d8f354ee78510ea553d404422ce5a3","modified":1597111180719},{"_id":"source/_posts/img/1573879565628.png","hash":"c9347d343ff700a8a438e1182aa43ffd7c3bf4f6","modified":1597111180444},{"_id":"source/_posts/img/1575035108391.png","hash":"280c89f1280b5895ffe0afafad91b47028085972","modified":1597111180472},{"_id":"source/_posts/img/1584500759081.png","hash":"feccfaa23c8f26c02c2d171dd7c1aaf9ca6f0ccc","modified":1597111180580},{"_id":"source/_posts/img/1577068784300.png","hash":"af7562f9151170c52bcc0fb500436e819ee4a48a","modified":1597111180501},{"_id":"source/_posts/img/1578380200054.png","hash":"e1c426dcc2871bf101690fb2b0509ef9408e9e95","modified":1597111180514},{"_id":"source/_posts/img/1578470471751.png","hash":"9eeabd227fc9a70382a690a90e5ea4e8091a4115","modified":1597111180539},{"_id":"source/_posts/img/1570613306377.png","hash":"cbd6c68dc495c55df5010e0af487eac3a7fcbb43","modified":1597111180430},{"_id":"source/_posts/img/1575033456146.png","hash":"cff615e0a5771d7cf724f3858e5734bf198d71cd","modified":1597111180470},{"_id":"source/_posts/img/1578470183627.png","hash":"969379825bd85d91f32767d315485bbe0452a151","modified":1597111180532},{"_id":"source/_posts/img/1578470217523.png","hash":"c6d8e26c793c30f8d508ea36876f5d7ef588a727","modified":1597111180536},{"_id":"source/_posts/img/1572531014589.png","hash":"058d5e76206a1e3d486cf3067f8433be80f72cef","modified":1597111180439},{"_id":"source/_posts/img/1578470502893.png","hash":"eb566054529af469630fb7b57683a941d591ed3c","modified":1597111180543},{"_id":"source/_posts/img/1578468782581.png","hash":"258b7eb8ee60e16fc5974e9f4ee9844df3bc4c8e","modified":1597111180527},{"_id":"public/about/index.html","hash":"46a8b81c140d99d0ec5b065aafd2db38c705a945","modified":1600239276579},{"_id":"public/2020/08/11/递归算法/index.html","hash":"fe5f45ba9a017bbd3be137ca2217f8b8c412fe87","modified":1599550529142},{"_id":"public/2020/08/11/ECS框架的思考/index.html","hash":"75c24f147e1c00d340ac7bde70454b4eaf454822","modified":1599550529142},{"_id":"public/2020/08/11/线性代数-笔记1/index.html","hash":"38ac57778ebf6a9fb1621064076cef4a95a037e4","modified":1599550529142},{"_id":"public/2020/08/11/计算机图形学编程笔记1/index.html","hash":"fc23e1c060f2282b7a9a5ebadc77443baa4cbab2","modified":1599550529142},{"_id":"public/2020/08/11/深度优先与广度优先算法/index.html","hash":"092e2d3d8bf7b3105b3e8caa919678d610b9a2af","modified":1599550529142},{"_id":"public/2020/08/11/数据结构在Charp/index.html","hash":"503d2ad6ec785d740ae7365976b73be0ac6fea38","modified":1599550529142},{"_id":"public/2020/08/11/数据结构-笔记1/index.html","hash":"563a6c0b1b10630333ff8566eda9994fa2808de5","modified":1599550529143},{"_id":"public/2020/08/11/性能优化相关/index.html","hash":"885a36c7c75d2bf3f2bf1365567fd687f2dc30a9","modified":1599550529143},{"_id":"public/2020/08/11/排序算法/index.html","hash":"8d8e26046c17f2c8a0beaebee606aa5d7c92005d","modified":1599550529143},{"_id":"public/2020/08/11/最新Addressable资源打包与加载框架/index.html","hash":"fed61bcb17eaaf0f93cfef6749435a2544750dd8","modified":1599550529143},{"_id":"public/2020/08/11/数据结构-数组链表结构/index.html","hash":"ea2f19e8542293c19f5c0c3ad777f8740ab8647c","modified":1599550529143},{"_id":"public/2020/08/11/开言学习笔记1/index.html","hash":"b52fdd3518711ba99def8fcb269235a4f26d6db5","modified":1599550529143},{"_id":"public/2020/08/11/开言体验营 - Day1/index.html","hash":"90817f159fcdc59814be00e116c5a909253daf03","modified":1599550529143},{"_id":"public/2020/08/11/开言体验营 - Day2/index.html","hash":"5cf7ceb56d5cef05ee67b379c9109a04226a529b","modified":1599550529143},{"_id":"public/2020/08/11/开言体验营 - Day4/index.html","hash":"19e0ec2e6eb407e00c02691818930318b0222964","modified":1599550529143},{"_id":"public/2020/08/11/开言_Bargaining in the market/index.html","hash":"c21720c1b713f556b5108b05771bd4f183f296bc","modified":1599550529143},{"_id":"public/2020/08/11/开言体验营 - Day5/index.html","hash":"3853ff0ca3b3011090253a6fbd75a05189ce1577","modified":1599550529143},{"_id":"public/2020/08/11/开言- To tip or not to tip/index.html","hash":"acf650be82177626685b6be8eb644299e815819b","modified":1599550529143},{"_id":"public/2020/08/11/开言_Happy Hour Drinks with Coworks/index.html","hash":"a3c37d370edc9a4308dd52f3f0fa1e2a04baa67c","modified":1599550529143},{"_id":"public/2020/08/11/常用单词学习/index.html","hash":"8fcaea05319cbb643f0588e23bd2615bbe2af361","modified":1599550529143},{"_id":"public/2020/08/11/天天生鲜项目实例/index.html","hash":"6dfc74c7c942b1def940f45346e2533525aaad79","modified":1599550529144},{"_id":"public/2020/08/11/天天生鲜项目实例P2/index.html","hash":"b0165ca20f34d871d03932ddbed56bba7e86e670","modified":1599550529144},{"_id":"public/2020/08/11/客户端更换Git指南/index.html","hash":"04298e6c08126e677e168d8b95e955aa9dde28a3","modified":1599550529144},{"_id":"public/2020/08/11/四元数旋转函数学习/index.html","hash":"b1d7b43e810f0d1e4f363685ab3227ea8eef0f3d","modified":1599550529144},{"_id":"public/2020/08/11/动态规划/index.html","hash":"8826a1888b9cb986dd808d7ebaf0efab1927c65e","modified":1599550529144},{"_id":"public/2020/08/11/python_4/index.html","hash":"7cc8ce54251ad6fa81e5363c0e44d6833d5c2f1b","modified":1600239276594},{"_id":"public/2020/08/11/内存管理/index.html","hash":"1a82b7e0335e532591e65e846970a8304e42e0f3","modified":1599550529144},{"_id":"public/2020/08/11/力扣刷题顺序/index.html","hash":"f55d1ab38ac76f3c1cb937c25aae7a81cff5b970","modified":1599550529144},{"_id":"public/2020/08/11/hello-world/index.html","hash":"425a8aee93e47c43a19a7abc284d60e610e6a1cc","modified":1599550529144},{"_id":"public/2020/08/11/python_2/index.html","hash":"a04cbee822702d8e3af782ed5bbc40a0831ae5e6","modified":1599550529144},{"_id":"public/2020/08/11/python_1/index.html","hash":"41a3de992b79b9863df9c1deb5ce67b791d64e12","modified":1599550529144},{"_id":"public/2020/08/11/VS Code最佳插件/index.html","hash":"d813d01ddf82a18ac2a71ff90a276f63be85427a","modified":1599550529144},{"_id":"public/2020/08/11/Twisted  介绍/index.html","hash":"80a1c73ae6c4b0a6f2730f8e3e3a06c25b666324","modified":1600239276594},{"_id":"public/2020/08/11/UI系统制作流程/index.html","hash":"94cb97731da09d8e80073bfc8dfd2e3523cb9a7a","modified":1599550529144},{"_id":"public/2020/08/11/Shader Variant/index.html","hash":"533493286126647741189702775570aa70ffbf1e","modified":1599550529144},{"_id":"public/2020/08/11/Python_3/index.html","hash":"b8924263748e55a4f4384cc78ab2c9bb2e8b82a6","modified":1599550529145},{"_id":"public/2020/08/11/Smargit  简单使用说明/index.html","hash":"f5643112d13edf2db0a6320c9567fda3cd05aa2c","modified":1599550529145},{"_id":"public/2020/08/11/Python Core Programming Note 3/index.html","hash":"47133932d00966ce4e7925e2564c84cdae00c565","modified":1599550529145},{"_id":"public/2020/08/11/Python 杂项/index.html","hash":"c32d4d6598ff988bf5334ca917569e0e49e1bda8","modified":1600239276594},{"_id":"public/2020/08/11/LWRP官方说明/index.html","hash":"4ad5bc00b70f8d6dbe2a85c8612eb654c3f237fb","modified":1599550529145},{"_id":"public/2020/08/11/Linux与window常用指令/index.html","hash":"04b960f5fc4cdc8907f0745f0cde8cd5d3f6d979","modified":1599550529145},{"_id":"public/2020/08/11/Python Core Programming Note 1/index.html","hash":"5a8ea764762a9f2d85f9f8021ea05e4b9cf09e0d","modified":1600239276594},{"_id":"public/2020/08/11/Python Core Programming Note 2/index.html","hash":"b8da36c6edb200a36e1777c5838c744332975900","modified":1600239276594},{"_id":"public/2020/08/11/Jenkins打包事项/index.html","hash":"9d6b68a70ca843c3d7553ea4e912adcb66804feb","modified":1599550529145},{"_id":"public/2020/08/11/Game Engine Architecture - Foundations Part3/index.html","hash":"d98cf485309fae129b295b242c55280a818b0321","modified":1599550529145},{"_id":"public/2020/08/11/Game Engine Architecture - Foundations Part2/index.html","hash":"0bbd2109bdf49e079e0717abc66f89565bec7c2d","modified":1599550529145},{"_id":"public/2020/08/11/Effective C++学习记录/index.html","hash":"ff7c272a48d7071ea85bc25b212062d4f9a2e238","modified":1599550529145},{"_id":"public/2020/08/11/Game Engine Architecture - Foundations Part1/index.html","hash":"200362b2e9bbae90aa68375ee39cc3b4fae30f39","modified":1599550529146},{"_id":"public/2020/08/11/Game Engine Architecture - English/index.html","hash":"a1cf861feb39c494146bf3a3a6e04872475c1252","modified":1599550529146},{"_id":"public/2020/08/11/Django  初步构建/index.html","hash":"1790a6b3724f6d1089b2aa7fb869db58aac12264","modified":1599550529146},{"_id":"public/2020/08/11/DrawCall优化/index.html","hash":"bf0f89ed7156b43bb315c0ce2a271ffa3d9e4aa8","modified":1599550529146},{"_id":"public/2020/08/11/Django 实例 Web Application/index.html","hash":"17153d2e4fa8879ecd5408defa37dc1af668370f","modified":1599550529146},{"_id":"public/2020/08/11/ECS-研究学习/index.html","hash":"5f2c8a78813e5f09fff005f242418e1eeb672a5c","modified":1599550529146},{"_id":"public/2020/08/11/DOTS-事件/index.html","hash":"2548ea2876e72df39fddcd4316df81bc82ae1792","modified":1599550529146},{"_id":"public/2020/08/11/Conda 常用操作/index.html","hash":"2be33a124be7580c3df4748e57d0c89dcfddeaf8","modified":1599550529146},{"_id":"public/2020/08/11/C与C++开源项目学习/index.html","hash":"bf431a0c52141243324a9cc9a4424b6ae6f301ff","modified":1599550529147},{"_id":"public/2020/08/11/Django  初始测试/index.html","hash":"fc4db13e3ff6af89a98b4006589a28c9e1971099","modified":1599550529147},{"_id":"public/2020/08/11/Addressable 研究/index.html","hash":"d9d87de986092d6c6798d1cf3c1ce3a19978cf82","modified":1600239276595},{"_id":"public/2020/08/11/Centos 部署 Django/index.html","hash":"bc9e82eb32b1c01da9757a5ca68eab84384acef8","modified":1599550529147},{"_id":"public/2020/08/11/C++ 复习1/index.html","hash":"7680619b1d34c950d4df86bf99ff100b25f037e9","modified":1599550529147},{"_id":"public/archives/index.html","hash":"14b11ebf061bd38b769e71f450a69274f6d7227f","modified":1600239276595},{"_id":"public/archives/page/2/index.html","hash":"069a341f0b22c0706fece5ef93ba80ad95295fbc","modified":1600239276595},{"_id":"public/archives/page/3/index.html","hash":"2fdefe6e2f79ace59acfd86971dc8799e88a7ade","modified":1600239276595},{"_id":"public/archives/page/4/index.html","hash":"25c5dc92964b8dd9e544f2935a43f9b357c6e065","modified":1600239276595},{"_id":"public/archives/page/5/index.html","hash":"bbf06d3dbee5b7e1331cfccddfa447526079ce08","modified":1600239276595},{"_id":"public/archives/page/6/index.html","hash":"7757bd084035458118219cb1096a0d433dcb687a","modified":1600239276595},{"_id":"public/archives/2020/index.html","hash":"bfcafddf26586f94585149d9806fc656cbed0fca","modified":1600239276595},{"_id":"public/archives/2020/page/2/index.html","hash":"2e2d544aaf0bd0f5c5126a23eb3c5dc6bab16615","modified":1600239276595},{"_id":"public/archives/2020/page/3/index.html","hash":"a1070dab57ad146227f7433230b01e8c91f6fd96","modified":1600239276595},{"_id":"public/archives/2020/page/4/index.html","hash":"950ee053b46cbe0d13d50f069dc901f31dbe9246","modified":1600239276595},{"_id":"public/archives/2020/page/5/index.html","hash":"ad5c321229209a7ea63ba7f897722c158873dd0e","modified":1600239276595},{"_id":"public/archives/2020/page/6/index.html","hash":"0f2e05d9d8ae46adb6d382f1fcf8f223cc572c2c","modified":1600239276595},{"_id":"public/archives/2020/08/index.html","hash":"181d84405bfbce9a4daef64ac9a7386e05b8c59f","modified":1600239276595},{"_id":"public/archives/2020/08/page/2/index.html","hash":"231daded3e6dad0cdd3d705abe8bcf7534df22e6","modified":1599550529149},{"_id":"public/archives/2020/08/page/3/index.html","hash":"0908aca8a6ba38882484ec1b9c6bf305ea550f08","modified":1599550529149},{"_id":"public/archives/2020/08/page/4/index.html","hash":"87386581ea9d2f2d8f47675280202fe1dec494eb","modified":1599550529149},{"_id":"public/archives/2020/08/page/5/index.html","hash":"9d10cb3019c386c7041bde6d86737d87f595d939","modified":1599550529149},{"_id":"public/archives/2020/08/page/6/index.html","hash":"db02d7339f3d4c56f0905667b1dfaa7480a8c161","modified":1599550529149},{"_id":"public/index.html","hash":"f2f24f2abd4e19ef0c3f5f10948b1d88f2129aeb","modified":1600239276597},{"_id":"public/page/2/index.html","hash":"014e6cf41557bf90efc12234df005ce4b719bf12","modified":1600239276597},{"_id":"public/page/3/index.html","hash":"e23b3f0895aef952a63765af583aa6f031ced9e4","modified":1600239276597},{"_id":"public/page/4/index.html","hash":"03e1aea107847718b952f833519288f733a40725","modified":1600239276597},{"_id":"public/page/5/index.html","hash":"c7192edd1abbc38d060d92c482d76b5164648dc2","modified":1600239276597},{"_id":"public/page/6/index.html","hash":"95d5a4c7468ac5315ccf0294b5e610f3d5f32e72","modified":1600239276597},{"_id":"public/categories/Unity学习/index.html","hash":"5521f1add17d9140d0fc3280869c2144a03dafcb","modified":1600239276596},{"_id":"public/categories/Python/index.html","hash":"977a0940e1eadd5a99990f706bec1cf1a0213191","modified":1600239276596},{"_id":"public/categories/Python/page/2/index.html","hash":"414a88b0de1d8c9c286315c0d1975907206d93c8","modified":1600239276596},{"_id":"public/categories/CPlusPlus/index.html","hash":"8d854e15712f17a5d0fc6d8009d4e51f2605f5ad","modified":1600239276596},{"_id":"public/categories/Unity/index.html","hash":"18b48647c5becf13255c02e1fd143301e8826e9e","modified":1600239276596},{"_id":"public/categories/IT阅读/index.html","hash":"d1f5314c1bee8338891c16d55778993b123c6953","modified":1600239276596},{"_id":"public/categories/工作相关/index.html","hash":"24600268039ed40bc7c3cb1c33256ccdfd720460","modified":1600239276596},{"_id":"public/categories/公司/index.html","hash":"a843ffc78797a6393ef7317ac0bfdd4ef87cd9ee","modified":1600239276596},{"_id":"public/categories/杂项资料/index.html","hash":"8ac59b54f46d2f502ffd4942bb2163486763fe59","modified":1600239276596},{"_id":"public/categories/算法/index.html","hash":"27865b442d5a6524a3763bd14ea56e2763643130","modified":1600239276596},{"_id":"public/categories/英语学习/index.html","hash":"311df00e8edc6b730606188b1cb7e5425be442af","modified":1600239276597},{"_id":"public/categories/数据结构/index.html","hash":"8a271fccf1c34c46e76fb3b8b507399a0c94732f","modified":1600239276597},{"_id":"public/categories/数学/index.html","hash":"72c869b6551f6309741e4d228a39620c4c9af90f","modified":1600239276597},{"_id":"public/categories/图形学/index.html","hash":"79a4ac50412f983bc6d82d20e3532a2a4ca90a6d","modified":1600239276597},{"_id":"public/tags/Unity学习/index.html","hash":"205fd7f288e154daadba71ed3cb537a53d718db5","modified":1600239276597},{"_id":"public/tags/Python/index.html","hash":"368edc27b7b57e1df20cb410410d979f2103aa89","modified":1600239276597},{"_id":"public/tags/Python/page/2/index.html","hash":"42b7407367e57467dc11d26af0da66143de7fc7f","modified":1600239276597},{"_id":"public/tags/Note/index.html","hash":"ed441e07bdbf07757e26d3e15e332f3b7bbb3a64","modified":1600239276597},{"_id":"public/tags/Note/page/2/index.html","hash":"b8b1147dfba8c5bbe243d103e682abc3058bdb3e","modified":1600239276597},{"_id":"public/tags/Note/page/3/index.html","hash":"3a5c7e38fb802d0d237c32e6798d41100bfeaceb","modified":1600239276598},{"_id":"public/tags/Django/index.html","hash":"b879f67f69f97e51a1f6c3a64ce9fb85226d9341","modified":1600239276598},{"_id":"public/tags/C/index.html","hash":"9131c739f9960f875dae840a16c7006298e92ca1","modified":1600239276598},{"_id":"public/tags/Conda/index.html","hash":"30e832d84346a3832ee61b9d5a6f93c7c15c7add","modified":1600239276598},{"_id":"public/tags/实例/index.html","hash":"0c8320ef2b11e138a1689359966da49e532d2d00","modified":1600239276598},{"_id":"public/tags/Game/index.html","hash":"001a44cf62a473fca4243fb591ee23f3c2b2f51a","modified":1600239276598},{"_id":"public/tags/English/index.html","hash":"d92c6fa4cdab193c78366accbca378b743f1a49b","modified":1600239276598},{"_id":"public/tags/Jenkins/index.html","hash":"292bb70be4822342b7b8f99ad232d24632461e18","modified":1600239276598},{"_id":"public/tags/CI/index.html","hash":"765f3ad5a84bf1e6086844c0f76f14ff4d060b13","modified":1600239276598},{"_id":"public/tags/linux/index.html","hash":"d9591ddfdbb89f01d1f2bc3d1e54b7ac1ef8dd44","modified":1600239276598},{"_id":"public/tags/指令/index.html","hash":"a73ae3d9d2535880dd6344b42344df1f273d6dfe","modified":1600239276598},{"_id":"public/tags/Core-Programming/index.html","hash":"427edcbdcd915845bbdc6e6da668bccfa352e9f4","modified":1600239276598},{"_id":"public/tags/Git/index.html","hash":"de364ef646888db9ef6123cbf995e79ad5b660f4","modified":1600239276598},{"_id":"public/tags/图形学/index.html","hash":"eda62273eef762db4b18052a7e531017108998f1","modified":1600239276598},{"_id":"public/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1597114283637},{"_id":"public/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1597114283637},{"_id":"public/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1597114283637},{"_id":"public/img/weixin.jpg","hash":"5fe79b9fc9124a67b3f1276c04124900f1226a2c","modified":1597114283637},{"_id":"public/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1597114283637},{"_id":"public/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1597114283637},{"_id":"public/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1599537669631},{"_id":"public/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1597114283637},{"_id":"public/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1597114283637},{"_id":"public/css/fonts/iconfont.eot","hash":"3dfe8e557d9dfaf39bca088a02b76deb82dbaa3d","modified":1597114283638},{"_id":"public/css/fonts/iconfont.woff","hash":"f8ed131ccf13f4bdd3ec11fc3e997339dd7b66ba","modified":1597114283638},{"_id":"public/css/fonts/iconfont.svg","hash":"c61a31e5310430312677fffe4286097d29d10151","modified":1599537669631},{"_id":"public/css/fonts/iconfont.ttf","hash":"aa087561480fb9c2cfd541e33d1e99d5ac1a56bb","modified":1597114283638},{"_id":"public/img/alipay.jpg","hash":"0954774b67b25148c9bac76613557e6b0ed84c83","modified":1597114284199},{"_id":"public/css/mobile.css","hash":"79ab291be160e0ca753512a96c5198f7477f13be","modified":1597114284206},{"_id":"public/js/jquery.autocomplete.min.js","hash":"7b8ac4d06c9e763963832529f44a56ad42a81e5f","modified":1597114284206},{"_id":"public/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1597114284206},{"_id":"public/css/hl_theme/atom-light.css","hash":"a3c8f3ee9a655594eff7ac545cb2e6914c1abcc2","modified":1597114284207},{"_id":"public/css/hl_theme/darcula.css","hash":"4341074bae4bc9f0b86e32b623e27babc0159b6e","modified":1597114284207},{"_id":"public/css/hl_theme/brown-paper.css","hash":"500c8e750373f6656ff49a7857c871ceedcf8777","modified":1597114284207},{"_id":"public/css/hl_theme/github-gist.css","hash":"7a41c1c479d09df875f99f1f6d94aac42e9e2ad0","modified":1597114284207},{"_id":"public/css/hl_theme/github.css","hash":"e05a0806a508a26b9f3f3794b6b588ec6504ad3f","modified":1597114284207},{"_id":"public/css/hl_theme/gruvbox-dark.css","hash":"8c440d9b4ee19ac03eaee3c6af78ba52e5ba5535","modified":1597114284207},{"_id":"public/css/hl_theme/kimbie-light.css","hash":"0c61926c989163faefb031d27bce3e287d6e10f2","modified":1597114284207},{"_id":"public/css/hl_theme/railscasts.css","hash":"511f2fd2a84d426e5da5cb17880cc08f73beb002","modified":1597114284207},{"_id":"public/css/hl_theme/kimbie-dark.css","hash":"728527fcc308da454722c119b89e6da3025bd1e3","modified":1597114284207},{"_id":"public/css/hl_theme/gruvbox-light.css","hash":"30514aaa242a34647aa666cfca4fc74c595ea8f2","modified":1597114284207},{"_id":"public/css/hl_theme/sublime.css","hash":"f65c5b116d9213afb9c324384a2f3bc86cb71121","modified":1597114284207},{"_id":"public/css/hl_theme/rainbow.css","hash":"7ff4251938076ddb7e4e49413db82653e5b61321","modified":1597114284207},{"_id":"public/css/hl_theme/school-book.css","hash":"ffbbcd13a74ac2404262c50b7a43053dfd0096ff","modified":1597114284207},{"_id":"public/css/hl_theme/sunburst.css","hash":"8a135abac1512cf430d1d1ad2304b79afa1a4d6e","modified":1597114284207},{"_id":"public/css/hl_theme/zenbum.css","hash":"0a78f74a93568e20b32ca7427c719e9bae9a0b55","modified":1597114284207},{"_id":"public/css/hl_theme/atom-dark.css","hash":"88d11052a24e8100af6248eb4dbe1ce7b0e96408","modified":1597114284207},{"_id":"public/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1597114284207},{"_id":"public/css/style.css","hash":"fa10daca27f2163644aa8c14b0fca5aba9d14b06","modified":1597114284207},{"_id":"public/js/script.js","hash":"7502191e29366a11323dc72ae365b1aed254e6f2","modified":1597114284207},{"_id":"public/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1597114284207},{"_id":"public/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1597114284207},{"_id":"public/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1597114284207},{"_id":"public/js/gitalk.js","hash":"d1eb82a3280981bd652d9a8e323060e4311c547b","modified":1597114284207},{"_id":"public/css/fonts/selection.json","hash":"047b615ea32dc48dae5b964061427d41feaaafdf","modified":1597114284207},{"_id":"source/_posts/算法课程笔记1.md","hash":"33c5edf78ee186b64376bb034b0b14446f4ccd4e","modified":1598929171183},{"_id":"source/_posts/img/1598259821964.png","hash":"20b50aeb93957c87a8d992e17ecb587f9a159fac","modified":1598260675383},{"_id":"source/_posts/img/1598260018452.png","hash":"2bdc6f5c5d22e31afe96b65d95283ddea82cc3be","modified":1598260692417},{"_id":"source/_posts/img/1598273584691.png","hash":"4de4d438af46e37823c33107709ee428d4ac5272","modified":1598273584758},{"_id":"source/_posts/img/1598260733232.png","hash":"60c276f2ab0afe172a66b99b7c20250f342a8658","modified":1598260733303},{"_id":"source/_posts/img/1598273932723.png","hash":"987f0929235af72ccf91f30dcb0fd6c04d510192","modified":1598273932798},{"_id":"source/_posts/img/1598273763851.png","hash":"adc48c8e4f50b296d5ba1fd45a8808a2342d9b35","modified":1598273763937},{"_id":"source/_posts/img/1598274190104.png","hash":"78cce7503768fe28f591c407010ca7d734c5e27a","modified":1598274190196},{"_id":"source/_posts/img/1598274216079.png","hash":"ffafacde47c7b7a77676e3162dc8ee2e3295b9ab","modified":1598274216155},{"_id":"source/_posts/img/1598274276096.png","hash":"fdaf8b260a4cf1859b53245bb6a62fc60807a1b2","modified":1598274276168},{"_id":"public/2020/08/24/算法课程笔记1/index.html","hash":"c865260d0cb4f349869da441a296306dd3b8413b","modified":1600239276594},{"_id":"public/archives/page/7/index.html","hash":"0625189a21a1e2bda26da9d78d02b383d88e906c","modified":1600239276595},{"_id":"public/archives/2020/page/7/index.html","hash":"aec7c86a811a492800845b243fd7668c1ce38bd2","modified":1600239276595},{"_id":"public/archives/2020/08/page/7/index.html","hash":"c2007d4c2f41e7ef847fc286061fc0a64818b785","modified":1599550529149},{"_id":"public/page/7/index.html","hash":"0193f16fcdc80137fcd9ce2f745cd37eee355324","modified":1600239276597},{"_id":"source/_posts/img/1598516074235.png","hash":"a89a3d9dee44b375bef4e72792ad6b695c28d640","modified":1598516074343},{"_id":"source/_posts/img/1598514940240.png","hash":"de76acc11bdd97608dfe02ffb5db64b56a3a0536","modified":1598514940401},{"_id":"source/_posts/img/1598929159605.png","hash":"954f41067ef1cfcbfa8e10ec57622d3200dadf4c","modified":1598929159818},{"_id":"public/2020/09/08/性能优化相关/index.html","hash":"6283ca632489e633be07f22c976a28957c5777de","modified":1600239276585},{"_id":"public/2020/09/08/数据结构在Charp/index.html","hash":"4dd08dad892ad1f2103701237bbf45a9a9af3ce3","modified":1600239276585},{"_id":"public/2020/09/08/数据结构-笔记1/index.html","hash":"32d2c731f2d750a902b32ae26bae9f55f637d287","modified":1600239276585},{"_id":"public/2020/09/08/深度优先与广度优先算法/index.html","hash":"e23af35fe01abed0af1727d1cc758e8c58659312","modified":1600239276585},{"_id":"public/2020/09/08/线性代数-笔记1/index.html","hash":"3c888e3d512be53ae3fe25cdc17f191102b0ed78","modified":1600239276585},{"_id":"public/2020/09/08/最新Addressable资源打包与加载框架/index.html","hash":"02b57c114fa35d50b36042acc6b9933048fb14f5","modified":1600239276585},{"_id":"public/2020/09/08/计算机图形学编程笔记1/index.html","hash":"2b14c1063f48d20144610c80fe263458f1b12eb8","modified":1600239276585},{"_id":"public/2020/09/08/递归算法/index.html","hash":"832e5de810fe17586bc7459f6516a25dfc70c0fe","modified":1600239276585},{"_id":"public/2020/09/08/天天生鲜项目实例/index.html","hash":"a1e22dd09be6bb64ed07e619779a467680eec6d6","modified":1600239276586},{"_id":"public/2020/09/08/天天生鲜项目实例P2/index.html","hash":"d7540f453a909817de892d246f17908887a28c8f","modified":1600239276586},{"_id":"public/2020/09/08/客户端更换Git指南/index.html","hash":"7a552cebfd3f8a3b7bec350dc237a14bc9d7c91d","modified":1600239276586},{"_id":"public/2020/09/08/开言- To tip or not to tip/index.html","hash":"f347028ec7bb8adc303896d670cffce9e87a610e","modified":1600239276586},{"_id":"public/2020/09/08/常用单词学习/index.html","hash":"2e54560cf00a52544c0747801038fa2e53aa76ef","modified":1600239276586},{"_id":"public/2020/09/08/开言_Bargaining in the market/index.html","hash":"3e64c8e229c234d8bb521fd9d80aee73454e856f","modified":1600239276586},{"_id":"public/2020/09/08/开言_Happy Hour Drinks with Coworks/index.html","hash":"3c2933c78baa0a196ba94c52fc82c422647de934","modified":1600239276586},{"_id":"public/2020/09/08/开言体验营 - Day1/index.html","hash":"6d6d3ad70a5ae96fc1042c8cb5fa00995a148004","modified":1600239276586},{"_id":"public/2020/09/08/开言体验营 - Day2/index.html","hash":"83459d5372c91c2df501f2251598a5d3c7a26056","modified":1600239276586},{"_id":"public/2020/09/08/开言体验营 - Day4/index.html","hash":"666b3f1e81227aa6f01ca035baf66aca8b74a9be","modified":1600239276586},{"_id":"public/2020/09/08/开言体验营 - Day5/index.html","hash":"f71251376a788d0c7396649dfd5fd44818f605c0","modified":1600239276592},{"_id":"public/2020/09/08/开言学习笔记1/index.html","hash":"034b1eaa628543c76380f02ff1db536f96195284","modified":1600239276592},{"_id":"public/2020/09/08/python_1/index.html","hash":"a151a7d03125fdcde6d9fba05f41f6c10035b84f","modified":1600239276592},{"_id":"public/2020/09/08/python_2/index.html","hash":"593f383f08ef017345c4c7dbe9a266e9b31d214e","modified":1600239276592},{"_id":"public/2020/09/08/内存管理/index.html","hash":"9307bcdcde23458b4a478c15c876664a78375182","modified":1600239276592},{"_id":"public/2020/09/08/动态规划/index.html","hash":"14adaf179b67f7a655d62846e85c0fc1f2176f99","modified":1600239276592},{"_id":"public/2020/09/08/力扣刷题顺序/index.html","hash":"1be5d283a6768d9621705b2684fdbcb4a1648662","modified":1600239276592},{"_id":"public/2020/09/08/四元数旋转函数学习/index.html","hash":"edecb4224d664bb66d3e9c58930e2e9611520900","modified":1600239276593},{"_id":"public/2020/09/08/VS Code最佳插件/index.html","hash":"9ee32023b890c878d85b9a81ae10270c458ff99c","modified":1600239276593},{"_id":"public/2020/09/08/hello-world/index.html","hash":"5e90155415401e1e5f4f0ec560c80e49032ed38c","modified":1600239276593},{"_id":"public/2020/09/08/UI系统制作流程/index.html","hash":"b29c8a9e3a77e725517b3e9861afe8d31d28e339","modified":1600239276593},{"_id":"public/2020/09/08/Game Engine Architecture - Foundations Part1/index.html","hash":"f194bd585ab679e65407027c04925568b64ecec3","modified":1599616030772},{"_id":"public/2020/09/08/Game Engine Architecture - English/index.html","hash":"cf8aeb3ecd6880a4ed53841f4ba2757ab9a81f73","modified":1599537669615},{"_id":"public/2020/09/08/Jenkins打包事项/index.html","hash":"828e1766efb6092974ec1d48a262f421cca05fe5","modified":1600239276593},{"_id":"public/2020/09/08/Game Engine Architecture - Foundations Part3/index.html","hash":"41c7bc2b9d4f53e84f07a04517d73037a00c801f","modified":1599616030772},{"_id":"public/2020/09/08/Game Engine Architecture - Foundations Part2/index.html","hash":"18f67316343d3000013542f296d02d311fb2b386","modified":1599616030772},{"_id":"public/2020/09/08/LWRP官方说明/index.html","hash":"cfa377e61cc7db7b4ceb4db49f36c8d5fac5eda6","modified":1600239276593},{"_id":"public/2020/09/08/Linux与window常用指令/index.html","hash":"4c3663899d72269746b5cced67c10c320fc55426","modified":1600239276593},{"_id":"public/2020/09/08/Python Core Programming Note 3/index.html","hash":"edeb03b39286dda890d5b23565cf526568edf4d6","modified":1600239276593},{"_id":"public/2020/09/08/Shader Variant/index.html","hash":"4b3c17543a233807002ca2ad3248feff4c15d687","modified":1600239276593},{"_id":"public/2020/09/08/Python_3/index.html","hash":"d522cfff6b0443c726a8ffee67e9696e405c7966","modified":1600239276593},{"_id":"public/2020/09/08/Smargit  简单使用说明/index.html","hash":"1c1b727a801da9306632990924851bf0bfbe09e6","modified":1600239276593},{"_id":"public/2020/09/08/Centos 部署 Django/index.html","hash":"d291ee486033fadcd63ecc775e33fbafb3a5dfbe","modified":1600239276593},{"_id":"public/2020/09/08/C++ 复习1/index.html","hash":"09dc780c4c402430f4c2a7c70c58687d655f16a2","modified":1600239276593},{"_id":"public/2020/09/08/DOTS-事件/index.html","hash":"4caf1fea44da64d3a5d87ba53e94dbef570517e9","modified":1600239276593},{"_id":"public/2020/09/08/Conda 常用操作/index.html","hash":"7825d5e246262e46aca756eac3c65faaa8c2c64a","modified":1600239276593},{"_id":"public/2020/09/08/C与C++开源项目学习/index.html","hash":"e2468c9a62bb76924db89ca54efac7b5b77af3b7","modified":1600239276594},{"_id":"public/2020/09/08/Django  初始测试/index.html","hash":"f5703861acce14445ce6509bfdeb12278d48c4f4","modified":1600239276594},{"_id":"public/2020/09/08/Django  初步构建/index.html","hash":"0711847dac849a84f024b72d097886f5ccecfdc7","modified":1600239276594},{"_id":"public/2020/09/08/DrawCall优化/index.html","hash":"96552b94cfd150e9fbdddec3607f0e16456b0b9d","modified":1600239276594},{"_id":"public/2020/09/08/Django 实例 Web Application/index.html","hash":"e6f7de88d15ec761f7d044e713e4fa4e53851568","modified":1600239276594},{"_id":"public/2020/09/08/ECS-研究学习/index.html","hash":"3b6bc171f14ffec1c05424c8c52fcf4c4841f6c7","modified":1600239276594},{"_id":"public/2020/09/08/Effective C++学习记录/index.html","hash":"d56c50b84df83766c03000135a43fb0abde3baf5","modified":1600239276594},{"_id":"public/2020/09/08/ECS框架的思考/index.html","hash":"f829cced0eb815192ba4e185b163529701298a57","modified":1600239276594},{"_id":"public/2020/09/08/排序算法/index.html","hash":"4a00fa66e5166d16d7fa70730fcfba5e393d19d3","modified":1600239276585},{"_id":"public/2020/09/08/数据结构-数组链表结构/index.html","hash":"2874083b0c0efad6fd69d7047ae1c21a885e15f5","modified":1600239276585},{"_id":"public/archives/2020/09/index.html","hash":"7bb3c74d611870df3a018ecd70c4d9c81cc97b89","modified":1600239276596},{"_id":"public/archives/2020/09/page/2/index.html","hash":"407eef55e35b22fbe311712c700a7ccf61f0f295","modified":1600239276596},{"_id":"public/archives/2020/09/page/3/index.html","hash":"0895b526c3bb0613c1a9676620f57999b966dd1d","modified":1600239276596},{"_id":"public/archives/2020/09/page/4/index.html","hash":"9b86e8c13e9467143b7f127cb415fa57e00a0bcc","modified":1600239276596},{"_id":"public/archives/2020/09/page/5/index.html","hash":"c7d542942cc3e6db46eb846349279a638ea21332","modified":1600239276596},{"_id":"public/archives/2020/09/page/6/index.html","hash":"1e539176c57e03dda398dea61e5339fc71d0e63a","modified":1600239276596},{"_id":"public/2020/09/09/Game Engine Architecture - English/index.html","hash":"82dacdb51a244097dc73cc622b1973b0b1fa6de7","modified":1599616030763},{"_id":"source/_posts/GEA-P1.md","hash":"f2c28fa1d75fb75da67927a0c7087a4820bbd6b5","modified":1599619611345},{"_id":"source/_posts/GEA-P2.md","hash":"297f9c59e1090ee3a4ac0c74fa366943f5a55aa8","modified":1599619611345},{"_id":"source/_posts/GEA-P3.md","hash":"04ae33ce9c63db3fe8ea939a8e9de78a4b0dcf24","modified":1599619611346},{"_id":"source/_posts/GEA-P4.md","hash":"13d3776400e62e71de9377a09cff069611ff80ed","modified":1600239067045},{"_id":"source/_posts/IT-English.md","hash":"102d8b43f3ff4b91cd5d8a13674aa377ddd29aad","modified":1599619611346},{"_id":"public/2020/09/09/GEA-P3/index.html","hash":"b5309bb65faacc70afb48870b26c016eba6c5ef9","modified":1600239276584},{"_id":"public/2020/09/09/GEA-P4/index.html","hash":"4db3d521458a73c74ad50000b5c7d9975468c26e","modified":1599619648757},{"_id":"public/2020/09/09/IT-English/index.html","hash":"eca68df0906e3cf6ba2f30b22d80e1813a5b6792","modified":1600239276584},{"_id":"public/2020/09/09/GEA-P1/index.html","hash":"125a4e834d2912a832332acc57b690be7814e2ae","modified":1600239276585},{"_id":"public/2020/09/09/GEA-P2/index.html","hash":"d7c587f2842321736ddbe54775237b59f32747ee","modified":1600239276585},{"_id":"source/_posts/Addressable打包流程.md","hash":"f7abb5cb4eb5b349bf30b31cfe3de3ddfa0ae703","modified":1600239268023},{"_id":"source/_posts/img/1599634350864.png","hash":"29179a817ac12398357da34ea1666e53df45831a","modified":1600239067045},{"_id":"source/_posts/img/1599634811580.png","hash":"c404449efd8523521b1d350701bba371b9493509","modified":1600239067045},{"_id":"source/_posts/img/1600236947016.png","hash":"c974d09e22089467aa836310811e107e5a3e50e2","modified":1600239067047},{"_id":"source/_posts/img/1600238404872.png","hash":"3b0a86d8cead7a53cfac66ce0f97d8ac8cc202b4","modified":1600239067047},{"_id":"source/_posts/img/1600238267260.png","hash":"5543903bfa5349f49a059ddaf974d54393df4618","modified":1600239067047},{"_id":"source/_posts/img/1600233059102.png","hash":"16193a0a0a390e957b8c9c56d1ea7817c3cd7552","modified":1600239067046},{"_id":"public/2020/09/16/GEA-P4/index.html","hash":"fe4f89f166094418004f09ae88defbbe16906797","modified":1600239276584},{"_id":"public/2020/09/16/Addressable打包流程/index.html","hash":"018fa8111561a3c581ec5dd5255655731952bec5","modified":1600239276580}],"Category":[{"name":"Unity学习","_id":"ckdpclux900028sr3z2ecctll"},{"name":"Python","_id":"ckdpcluxe00078sr3cobu085b"},{"name":"CPlusPlus","_id":"ckdpcluxi000d8sr3a70cxh45"},{"name":"Unity","_id":"ckdpcluxm000i8sr3e2u7tm2j"},{"name":"IT阅读","_id":"ckdpcluy4001a8sr3swthg4ac"},{"name":"工作相关","_id":"ckdpcluyc001o8sr3pfq9xd1m"},{"name":"公司","_id":"ckdpcluyo002d8sr3dmu9u834"},{"name":"杂项资料","_id":"ckdpcluyt002m8sr3nvr2eia8"},{"name":"算法","_id":"ckdpcluz3003a8sr3g7y3fmnv"},{"name":"英语学习","_id":"ckdpcluze003x8sr3bpezgn90"},{"name":"数据结构","_id":"ckdpcluzy004y8sr35lo0n3su"},{"name":"数学","_id":"ckdpclv09005i8sr31mateiv4"},{"name":"图形学","_id":"ckdpclv0c005q8sr358l1qmt8"}],"Data":[],"Page":[{"title":"about","date":"2019-10-06T01:42:53.000Z","_content":"# 这是关于我，有空再加吧\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-10-06 09:42:53\n---\n# 这是关于我，有空再加吧\n","updated":"2020-09-08T03:23:20.891Z","path":"about/index.html","_id":"ckdpclv1100758sr334sty737","comments":1,"layout":"page","content":"<h1 id=\"这是关于我，有空再加吧\"><a href=\"#这是关于我，有空再加吧\" class=\"headerlink\" title=\"这是关于我，有空再加吧\"></a>这是关于我，有空再加吧</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"这是关于我，有空再加吧\"><a href=\"#这是关于我，有空再加吧\" class=\"headerlink\" title=\"这是关于我，有空再加吧\"></a>这是关于我，有空再加吧</h1>"}],"Post":[{"title":"Addressable 研究","_content":"\n## 什么是Addressable？\n![什么](/img/1579072055300.png)\n\n## Addressable的实例函数\n\n![实例函数](/img/1579077588215.png)\n\n## 以label形式加载\n\n![以label加载](/img/1579078623846.png)\n\n## 模式选择\n\n![模式](/img/1579078890824.png)\n\nData Builders：在Addressable窗口菜单中能够选择的在编辑器下的数据构建模式，一般来说附带的这几个已经可以满足大部分要求，你也可以新建适合自己项目的模式。\nFast Mode：加载资源不通过资源包，直接使用AssetDatabase加载。\nVirtual Mode：会形成AssetBundle布局，但是不需要打包，加载资源通过ResourcesManager加载，并且可以在RM Profiler中查看包体布局。\nPacked Mode：需要额外步骤打包AssetBundle，运行时资源也是在AssetBundle中进行加载。\n\n## 迁移指南\n\n![从自己框架移植](/img/1579081015473.png)\n\n![从Resources移植](/img/1579081031342.png)\n\n\n## 使用注意项：\n1.每调用一次Addressables.Instantiate方法，会将该Asset的引用计数加一；而Addressables.ReleaseInstance会减少这个引用计数。如果你使用Object.Destroy释放了它，则原始资源会一直存在于内存中。所以应当避免使用Object.Destroy方法了~\n2.非使用 Addresables.Instantiate 方法实例化出来的对象，如使用Unity自带的Instantiate实例出来的对象，也可以使用Addressables.ReleaseInstance来释放，这并不会对计数有影响，只是单纯的释放。\n3.任何通过Addresables.Instantiate 方法实例化出来的对象，在切换场景的时候，如果没有标记为 DontDestroyOnLoad ,则会被自动调用Addressables.ReleaseInstance来释放掉。\n\n\n## 总结：\n* 1. 出包时将自动带上catalog.json在包内，出包的时候不用带 catalogxxx.json 和catalog.hash文件\n* 2. 可使用接口随时重加载catalog文件。如：\n\n``` csharp\n//注意： 一定要先清除所有resoucelocators\nAddressables.ClearResourceLocators();\n//重加载下载好的catalog文件\nawait Addressables.LoadContentCatalogAsync(Path.Combine(ResourceConfig.GetLocalBundlePath(), \"catalog.json\"),true).Task;\n```\n\n3. 因此 ： 流程可采用如下的方式：\n > 1. 将设置好assetbundle provider，这里仍用旧的方式，对资源加载时的路径进行跳转限制，优先找SD卡资源，再找包体资源。\n > 2. 出APK包，在 catalog打完包，在资源中不需要带，直接删除掉。资源+version.txt即可\n > 3. 出资源包时，带上新名字的catalog文件作为清单。\n > 4.下载模块完全用自己实现！ 先加载SD卡的catalog文件，没有，则默认用包内的。 如果有新的，再次调用加载catalog，这样读取就是最新的。","source":"_posts/Addressable 研究.md","raw":"---\ntitle: Addressable 研究\ncategories:\n- Unity学习\ntags: \n- Unity学习\n---\n\n## 什么是Addressable？\n![什么](/img/1579072055300.png)\n\n## Addressable的实例函数\n\n![实例函数](/img/1579077588215.png)\n\n## 以label形式加载\n\n![以label加载](/img/1579078623846.png)\n\n## 模式选择\n\n![模式](/img/1579078890824.png)\n\nData Builders：在Addressable窗口菜单中能够选择的在编辑器下的数据构建模式，一般来说附带的这几个已经可以满足大部分要求，你也可以新建适合自己项目的模式。\nFast Mode：加载资源不通过资源包，直接使用AssetDatabase加载。\nVirtual Mode：会形成AssetBundle布局，但是不需要打包，加载资源通过ResourcesManager加载，并且可以在RM Profiler中查看包体布局。\nPacked Mode：需要额外步骤打包AssetBundle，运行时资源也是在AssetBundle中进行加载。\n\n## 迁移指南\n\n![从自己框架移植](/img/1579081015473.png)\n\n![从Resources移植](/img/1579081031342.png)\n\n\n## 使用注意项：\n1.每调用一次Addressables.Instantiate方法，会将该Asset的引用计数加一；而Addressables.ReleaseInstance会减少这个引用计数。如果你使用Object.Destroy释放了它，则原始资源会一直存在于内存中。所以应当避免使用Object.Destroy方法了~\n2.非使用 Addresables.Instantiate 方法实例化出来的对象，如使用Unity自带的Instantiate实例出来的对象，也可以使用Addressables.ReleaseInstance来释放，这并不会对计数有影响，只是单纯的释放。\n3.任何通过Addresables.Instantiate 方法实例化出来的对象，在切换场景的时候，如果没有标记为 DontDestroyOnLoad ,则会被自动调用Addressables.ReleaseInstance来释放掉。\n\n\n## 总结：\n* 1. 出包时将自动带上catalog.json在包内，出包的时候不用带 catalogxxx.json 和catalog.hash文件\n* 2. 可使用接口随时重加载catalog文件。如：\n\n``` csharp\n//注意： 一定要先清除所有resoucelocators\nAddressables.ClearResourceLocators();\n//重加载下载好的catalog文件\nawait Addressables.LoadContentCatalogAsync(Path.Combine(ResourceConfig.GetLocalBundlePath(), \"catalog.json\"),true).Task;\n```\n\n3. 因此 ： 流程可采用如下的方式：\n > 1. 将设置好assetbundle provider，这里仍用旧的方式，对资源加载时的路径进行跳转限制，优先找SD卡资源，再找包体资源。\n > 2. 出APK包，在 catalog打完包，在资源中不需要带，直接删除掉。资源+version.txt即可\n > 3. 出资源包时，带上新名字的catalog文件作为清单。\n > 4.下载模块完全用自己实现！ 先加载SD卡的catalog文件，没有，则默认用包内的。 如果有新的，再次调用加载catalog，这样读取就是最新的。","slug":"Addressable 研究","published":1,"date":"2020-08-11T01:59:40.419Z","updated":"2020-09-08T06:58:01.687Z","_id":"ckdpclux200008sr3whsio5q3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是Addressable？\"><a href=\"#什么是Addressable？\" class=\"headerlink\" title=\"什么是Addressable？\"></a>什么是Addressable？</h2><p><img src=\"/img/1579072055300.png\" alt=\"什么\"></p>\n<h2 id=\"Addressable的实例函数\"><a href=\"#Addressable的实例函数\" class=\"headerlink\" title=\"Addressable的实例函数\"></a>Addressable的实例函数</h2><p><img src=\"/img/1579077588215.png\" alt=\"实例函数\"></p>\n<h2 id=\"以label形式加载\"><a href=\"#以label形式加载\" class=\"headerlink\" title=\"以label形式加载\"></a>以label形式加载</h2><p><img src=\"/img/1579078623846.png\" alt=\"以label加载\"></p>\n<h2 id=\"模式选择\"><a href=\"#模式选择\" class=\"headerlink\" title=\"模式选择\"></a>模式选择</h2><p><img src=\"/img/1579078890824.png\" alt=\"模式\"></p>\n<p>Data Builders：在Addressable窗口菜单中能够选择的在编辑器下的数据构建模式，一般来说附带的这几个已经可以满足大部分要求，你也可以新建适合自己项目的模式。<br>Fast Mode：加载资源不通过资源包，直接使用AssetDatabase加载。<br>Virtual Mode：会形成AssetBundle布局，但是不需要打包，加载资源通过ResourcesManager加载，并且可以在RM Profiler中查看包体布局。<br>Packed Mode：需要额外步骤打包AssetBundle，运行时资源也是在AssetBundle中进行加载。</p>\n<h2 id=\"迁移指南\"><a href=\"#迁移指南\" class=\"headerlink\" title=\"迁移指南\"></a>迁移指南</h2><p><img src=\"/img/1579081015473.png\" alt=\"从自己框架移植\"></p>\n<p><img src=\"/img/1579081031342.png\" alt=\"从Resources移植\"></p>\n<h2 id=\"使用注意项：\"><a href=\"#使用注意项：\" class=\"headerlink\" title=\"使用注意项：\"></a>使用注意项：</h2><p>1.每调用一次Addressables.Instantiate方法，会将该Asset的引用计数加一；而Addressables.ReleaseInstance会减少这个引用计数。如果你使用Object.Destroy释放了它，则原始资源会一直存在于内存中。所以应当避免使用Object.Destroy方法了~<br>2.非使用 Addresables.Instantiate 方法实例化出来的对象，如使用Unity自带的Instantiate实例出来的对象，也可以使用Addressables.ReleaseInstance来释放，这并不会对计数有影响，只是单纯的释放。<br>3.任何通过Addresables.Instantiate 方法实例化出来的对象，在切换场景的时候，如果没有标记为 DontDestroyOnLoad ,则会被自动调用Addressables.ReleaseInstance来释放掉。</p>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><ul>\n<li><ol>\n<li>出包时将自动带上catalog.json在包内，出包的时候不用带 catalogxxx.json 和catalog.hash文件</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>可使用接口随时重加载catalog文件。如：</li>\n</ol>\n</li>\n</ul>\n<pre><code class=\"csharp\">//注意： 一定要先清除所有resoucelocators\nAddressables.ClearResourceLocators();\n//重加载下载好的catalog文件\nawait Addressables.LoadContentCatalogAsync(Path.Combine(ResourceConfig.GetLocalBundlePath(), &quot;catalog.json&quot;),true).Task;</code></pre>\n<ol start=\"3\">\n<li>因此 ： 流程可采用如下的方式：<blockquote>\n<ol>\n<li>将设置好assetbundle provider，这里仍用旧的方式，对资源加载时的路径进行跳转限制，优先找SD卡资源，再找包体资源。</li>\n<li>出APK包，在 catalog打完包，在资源中不需要带，直接删除掉。资源+version.txt即可</li>\n<li>出资源包时，带上新名字的catalog文件作为清单。</li>\n<li>下载模块完全用自己实现！ 先加载SD卡的catalog文件，没有，则默认用包内的。 如果有新的，再次调用加载catalog，这样读取就是最新的。</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是Addressable？\"><a href=\"#什么是Addressable？\" class=\"headerlink\" title=\"什么是Addressable？\"></a>什么是Addressable？</h2><p><img src=\"/img/1579072055300.png\" alt=\"什么\"></p>\n<h2 id=\"Addressable的实例函数\"><a href=\"#Addressable的实例函数\" class=\"headerlink\" title=\"Addressable的实例函数\"></a>Addressable的实例函数</h2><p><img src=\"/img/1579077588215.png\" alt=\"实例函数\"></p>\n<h2 id=\"以label形式加载\"><a href=\"#以label形式加载\" class=\"headerlink\" title=\"以label形式加载\"></a>以label形式加载</h2><p><img src=\"/img/1579078623846.png\" alt=\"以label加载\"></p>\n<h2 id=\"模式选择\"><a href=\"#模式选择\" class=\"headerlink\" title=\"模式选择\"></a>模式选择</h2><p><img src=\"/img/1579078890824.png\" alt=\"模式\"></p>\n<p>Data Builders：在Addressable窗口菜单中能够选择的在编辑器下的数据构建模式，一般来说附带的这几个已经可以满足大部分要求，你也可以新建适合自己项目的模式。<br>Fast Mode：加载资源不通过资源包，直接使用AssetDatabase加载。<br>Virtual Mode：会形成AssetBundle布局，但是不需要打包，加载资源通过ResourcesManager加载，并且可以在RM Profiler中查看包体布局。<br>Packed Mode：需要额外步骤打包AssetBundle，运行时资源也是在AssetBundle中进行加载。</p>\n<h2 id=\"迁移指南\"><a href=\"#迁移指南\" class=\"headerlink\" title=\"迁移指南\"></a>迁移指南</h2><p><img src=\"/img/1579081015473.png\" alt=\"从自己框架移植\"></p>\n<p><img src=\"/img/1579081031342.png\" alt=\"从Resources移植\"></p>\n<h2 id=\"使用注意项：\"><a href=\"#使用注意项：\" class=\"headerlink\" title=\"使用注意项：\"></a>使用注意项：</h2><p>1.每调用一次Addressables.Instantiate方法，会将该Asset的引用计数加一；而Addressables.ReleaseInstance会减少这个引用计数。如果你使用Object.Destroy释放了它，则原始资源会一直存在于内存中。所以应当避免使用Object.Destroy方法了~<br>2.非使用 Addresables.Instantiate 方法实例化出来的对象，如使用Unity自带的Instantiate实例出来的对象，也可以使用Addressables.ReleaseInstance来释放，这并不会对计数有影响，只是单纯的释放。<br>3.任何通过Addresables.Instantiate 方法实例化出来的对象，在切换场景的时候，如果没有标记为 DontDestroyOnLoad ,则会被自动调用Addressables.ReleaseInstance来释放掉。</p>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><ul>\n<li><ol>\n<li>出包时将自动带上catalog.json在包内，出包的时候不用带 catalogxxx.json 和catalog.hash文件</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>可使用接口随时重加载catalog文件。如：</li>\n</ol>\n</li>\n</ul>\n<pre><code class=\"csharp\">//注意： 一定要先清除所有resoucelocators\nAddressables.ClearResourceLocators();\n//重加载下载好的catalog文件\nawait Addressables.LoadContentCatalogAsync(Path.Combine(ResourceConfig.GetLocalBundlePath(), &quot;catalog.json&quot;),true).Task;</code></pre>\n<ol start=\"3\">\n<li>因此 ： 流程可采用如下的方式：<blockquote>\n<ol>\n<li>将设置好assetbundle provider，这里仍用旧的方式，对资源加载时的路径进行跳转限制，优先找SD卡资源，再找包体资源。</li>\n<li>出APK包，在 catalog打完包，在资源中不需要带，直接删除掉。资源+version.txt即可</li>\n<li>出资源包时，带上新名字的catalog文件作为清单。</li>\n<li>下载模块完全用自己实现！ 先加载SD卡的catalog文件，没有，则默认用包内的。 如果有新的，再次调用加载catalog，这样读取就是最新的。</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n"},{"title":"Centos 部署 Django","_content":"\n### 1. 下载必要库\n\n```\nyum -y groupinstall \"Development tools\"\n```\n\n### 2. 下载最新SQLITE\n\n到SQLite官网的下载页面：https://www.sqlite.org/download.html  这里是最新的版本，我们就安装它吧。\n\n```\nwget https://www.sqlite.org/2017/sqlite-autoconf-3160200.tar.gz\ntar zxvf sqlite-autoconf-3160200.tar.gz\ncd sqlite-autoconf-3160200\n\n./configure\nmake\nsudo make install\n```\n\n以默认方式安装后，会把编译好的二进制文件安装到 /usr/local/lib， 把头文件sqlite3.h sqlite3ext.h安装到/usr/local/include。\n\n用这两条命令确认一下已成功安装到这里：\n\n```\nls -l /usr/local/lib/*sqlite*\nls -l /usr/local/include/*sqlite*\n```\n\n### 3.Python 安装\n\n```\nwget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tgz\ntar -zxvf Python-3.6.6.tgz\n```\n\n进入解压好的目录\n```\n\nsudo LD_RUN_PATH=/usr/local/lib ./configure --enable-optimizations\nsudo LD_RUN_PATH=/usr/local/lib make altinstall\n\n```\n\n建立软链接\n\n```\nln -s /usr/local/python3/bin/python3.6 /usr/bin/python3\nln -s /usr/local/python3/bin/pip3.6 /usr/bin/pip3\n```\n\n看Python3和pip3安装情况\n```\npython3\n\npip3 -V\n```\n\n卸载：\n\n```\nwhereis python\nrm -rf ....\n```\n\n### 4. virtualenv安装\n\n```\npip3 install virtualenv\n```\n\n建立链接\n```\nln -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv\n```\n \n 创建虚拟环境\n \n ```\n mkdir -p /data/env\n mkdir -p /data/wwwroot\n\nvirtualenv --python=/usr/bin/python3 pyweb\n ```\n\n进入虚拟环境\n\n```\ncd /data/env/pyweb/bin\nsource activate\n```\n\n退出虚拟环境\n\n```\ndeactivate\n```\n\n### 5.虚拟环境下安装django, uwsgi\n\n```\npip3 install django （如果用于生产的话，则需要指定安装和你项目相同的版本）\npip3 install uwsgi\n\nln -s /usr/local/python3/bin/uwsgi /usr/bin/uwsgi\n```\n\n### 6. Django下创建项目和app\n\n```\ndjango-admin.py startproject mysite\n\ncd mysite\n\npython3 manage.py startapp blog\n```\n\n\n\n### 参考文章\nhttps://www.cnblogs.com/djangocn/p/9538551.html\nhttps://stackoverflow.com/questions/55674176/django-cant-find-new-sqlite-version-sqlite-3-8-3-or-later-is-required-found\nhttps://blog.csdn.net/yohjob/article/details/90760862","source":"_posts/Centos 部署 Django.md","raw":"---\ntitle: Centos 部署 Django\ncategories:\n- Python\ntags: \n- Python\n- Note\n- Django\n---\n\n### 1. 下载必要库\n\n```\nyum -y groupinstall \"Development tools\"\n```\n\n### 2. 下载最新SQLITE\n\n到SQLite官网的下载页面：https://www.sqlite.org/download.html  这里是最新的版本，我们就安装它吧。\n\n```\nwget https://www.sqlite.org/2017/sqlite-autoconf-3160200.tar.gz\ntar zxvf sqlite-autoconf-3160200.tar.gz\ncd sqlite-autoconf-3160200\n\n./configure\nmake\nsudo make install\n```\n\n以默认方式安装后，会把编译好的二进制文件安装到 /usr/local/lib， 把头文件sqlite3.h sqlite3ext.h安装到/usr/local/include。\n\n用这两条命令确认一下已成功安装到这里：\n\n```\nls -l /usr/local/lib/*sqlite*\nls -l /usr/local/include/*sqlite*\n```\n\n### 3.Python 安装\n\n```\nwget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tgz\ntar -zxvf Python-3.6.6.tgz\n```\n\n进入解压好的目录\n```\n\nsudo LD_RUN_PATH=/usr/local/lib ./configure --enable-optimizations\nsudo LD_RUN_PATH=/usr/local/lib make altinstall\n\n```\n\n建立软链接\n\n```\nln -s /usr/local/python3/bin/python3.6 /usr/bin/python3\nln -s /usr/local/python3/bin/pip3.6 /usr/bin/pip3\n```\n\n看Python3和pip3安装情况\n```\npython3\n\npip3 -V\n```\n\n卸载：\n\n```\nwhereis python\nrm -rf ....\n```\n\n### 4. virtualenv安装\n\n```\npip3 install virtualenv\n```\n\n建立链接\n```\nln -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv\n```\n \n 创建虚拟环境\n \n ```\n mkdir -p /data/env\n mkdir -p /data/wwwroot\n\nvirtualenv --python=/usr/bin/python3 pyweb\n ```\n\n进入虚拟环境\n\n```\ncd /data/env/pyweb/bin\nsource activate\n```\n\n退出虚拟环境\n\n```\ndeactivate\n```\n\n### 5.虚拟环境下安装django, uwsgi\n\n```\npip3 install django （如果用于生产的话，则需要指定安装和你项目相同的版本）\npip3 install uwsgi\n\nln -s /usr/local/python3/bin/uwsgi /usr/bin/uwsgi\n```\n\n### 6. Django下创建项目和app\n\n```\ndjango-admin.py startproject mysite\n\ncd mysite\n\npython3 manage.py startapp blog\n```\n\n\n\n### 参考文章\nhttps://www.cnblogs.com/djangocn/p/9538551.html\nhttps://stackoverflow.com/questions/55674176/django-cant-find-new-sqlite-version-sqlite-3-8-3-or-later-is-required-found\nhttps://blog.csdn.net/yohjob/article/details/90760862","slug":"Centos 部署 Django","published":1,"date":"2020-09-08T03:23:20.714Z","updated":"2020-09-08T03:23:20.714Z","_id":"ckdpclux800018sr3cbkxdfpz","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-下载必要库\"><a href=\"#1-下载必要库\" class=\"headerlink\" title=\"1. 下载必要库\"></a>1. 下载必要库</h3><pre><code>yum -y groupinstall &quot;Development tools&quot;</code></pre><h3 id=\"2-下载最新SQLITE\"><a href=\"#2-下载最新SQLITE\" class=\"headerlink\" title=\"2. 下载最新SQLITE\"></a>2. 下载最新SQLITE</h3><p>到SQLite官网的下载页面：<a href=\"https://www.sqlite.org/download.html\">https://www.sqlite.org/download.html</a>  这里是最新的版本，我们就安装它吧。</p>\n<pre><code>wget https://www.sqlite.org/2017/sqlite-autoconf-3160200.tar.gz\ntar zxvf sqlite-autoconf-3160200.tar.gz\ncd sqlite-autoconf-3160200\n\n./configure\nmake\nsudo make install</code></pre><p>以默认方式安装后，会把编译好的二进制文件安装到 /usr/local/lib， 把头文件sqlite3.h sqlite3ext.h安装到/usr/local/include。</p>\n<p>用这两条命令确认一下已成功安装到这里：</p>\n<pre><code>ls -l /usr/local/lib/*sqlite*\nls -l /usr/local/include/*sqlite*</code></pre><h3 id=\"3-Python-安装\"><a href=\"#3-Python-安装\" class=\"headerlink\" title=\"3.Python 安装\"></a>3.Python 安装</h3><pre><code>wget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tgz\ntar -zxvf Python-3.6.6.tgz</code></pre><p>进入解压好的目录</p>\n<pre><code>\nsudo LD_RUN_PATH=/usr/local/lib ./configure --enable-optimizations\nsudo LD_RUN_PATH=/usr/local/lib make altinstall\n</code></pre><p>建立软链接</p>\n<pre><code>ln -s /usr/local/python3/bin/python3.6 /usr/bin/python3\nln -s /usr/local/python3/bin/pip3.6 /usr/bin/pip3</code></pre><p>看Python3和pip3安装情况</p>\n<pre><code>python3\n\npip3 -V</code></pre><p>卸载：</p>\n<pre><code>whereis python\nrm -rf ....</code></pre><h3 id=\"4-virtualenv安装\"><a href=\"#4-virtualenv安装\" class=\"headerlink\" title=\"4. virtualenv安装\"></a>4. virtualenv安装</h3><pre><code>pip3 install virtualenv</code></pre><p>建立链接</p>\n<pre><code>ln -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv</code></pre><p> 创建虚拟环境</p>\n<pre><code> mkdir -p /data/env\n mkdir -p /data/wwwroot\n\nvirtualenv --python=/usr/bin/python3 pyweb</code></pre><p>进入虚拟环境</p>\n<pre><code>cd /data/env/pyweb/bin\nsource activate</code></pre><p>退出虚拟环境</p>\n<pre><code>deactivate</code></pre><h3 id=\"5-虚拟环境下安装django-uwsgi\"><a href=\"#5-虚拟环境下安装django-uwsgi\" class=\"headerlink\" title=\"5.虚拟环境下安装django, uwsgi\"></a>5.虚拟环境下安装django, uwsgi</h3><pre><code>pip3 install django （如果用于生产的话，则需要指定安装和你项目相同的版本）\npip3 install uwsgi\n\nln -s /usr/local/python3/bin/uwsgi /usr/bin/uwsgi</code></pre><h3 id=\"6-Django下创建项目和app\"><a href=\"#6-Django下创建项目和app\" class=\"headerlink\" title=\"6. Django下创建项目和app\"></a>6. Django下创建项目和app</h3><pre><code>django-admin.py startproject mysite\n\ncd mysite\n\npython3 manage.py startapp blog</code></pre><h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><a href=\"https://www.cnblogs.com/djangocn/p/9538551.html\">https://www.cnblogs.com/djangocn/p/9538551.html</a><br><a href=\"https://stackoverflow.com/questions/55674176/django-cant-find-new-sqlite-version-sqlite-3-8-3-or-later-is-required-found\">https://stackoverflow.com/questions/55674176/django-cant-find-new-sqlite-version-sqlite-3-8-3-or-later-is-required-found</a><br><a href=\"https://blog.csdn.net/yohjob/article/details/90760862\">https://blog.csdn.net/yohjob/article/details/90760862</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-下载必要库\"><a href=\"#1-下载必要库\" class=\"headerlink\" title=\"1. 下载必要库\"></a>1. 下载必要库</h3><pre><code>yum -y groupinstall &quot;Development tools&quot;</code></pre><h3 id=\"2-下载最新SQLITE\"><a href=\"#2-下载最新SQLITE\" class=\"headerlink\" title=\"2. 下载最新SQLITE\"></a>2. 下载最新SQLITE</h3><p>到SQLite官网的下载页面：<a href=\"https://www.sqlite.org/download.html\">https://www.sqlite.org/download.html</a>  这里是最新的版本，我们就安装它吧。</p>\n<pre><code>wget https://www.sqlite.org/2017/sqlite-autoconf-3160200.tar.gz\ntar zxvf sqlite-autoconf-3160200.tar.gz\ncd sqlite-autoconf-3160200\n\n./configure\nmake\nsudo make install</code></pre><p>以默认方式安装后，会把编译好的二进制文件安装到 /usr/local/lib， 把头文件sqlite3.h sqlite3ext.h安装到/usr/local/include。</p>\n<p>用这两条命令确认一下已成功安装到这里：</p>\n<pre><code>ls -l /usr/local/lib/*sqlite*\nls -l /usr/local/include/*sqlite*</code></pre><h3 id=\"3-Python-安装\"><a href=\"#3-Python-安装\" class=\"headerlink\" title=\"3.Python 安装\"></a>3.Python 安装</h3><pre><code>wget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tgz\ntar -zxvf Python-3.6.6.tgz</code></pre><p>进入解压好的目录</p>\n<pre><code>\nsudo LD_RUN_PATH=/usr/local/lib ./configure --enable-optimizations\nsudo LD_RUN_PATH=/usr/local/lib make altinstall\n</code></pre><p>建立软链接</p>\n<pre><code>ln -s /usr/local/python3/bin/python3.6 /usr/bin/python3\nln -s /usr/local/python3/bin/pip3.6 /usr/bin/pip3</code></pre><p>看Python3和pip3安装情况</p>\n<pre><code>python3\n\npip3 -V</code></pre><p>卸载：</p>\n<pre><code>whereis python\nrm -rf ....</code></pre><h3 id=\"4-virtualenv安装\"><a href=\"#4-virtualenv安装\" class=\"headerlink\" title=\"4. virtualenv安装\"></a>4. virtualenv安装</h3><pre><code>pip3 install virtualenv</code></pre><p>建立链接</p>\n<pre><code>ln -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv</code></pre><p> 创建虚拟环境</p>\n<pre><code> mkdir -p /data/env\n mkdir -p /data/wwwroot\n\nvirtualenv --python=/usr/bin/python3 pyweb</code></pre><p>进入虚拟环境</p>\n<pre><code>cd /data/env/pyweb/bin\nsource activate</code></pre><p>退出虚拟环境</p>\n<pre><code>deactivate</code></pre><h3 id=\"5-虚拟环境下安装django-uwsgi\"><a href=\"#5-虚拟环境下安装django-uwsgi\" class=\"headerlink\" title=\"5.虚拟环境下安装django, uwsgi\"></a>5.虚拟环境下安装django, uwsgi</h3><pre><code>pip3 install django （如果用于生产的话，则需要指定安装和你项目相同的版本）\npip3 install uwsgi\n\nln -s /usr/local/python3/bin/uwsgi /usr/bin/uwsgi</code></pre><h3 id=\"6-Django下创建项目和app\"><a href=\"#6-Django下创建项目和app\" class=\"headerlink\" title=\"6. Django下创建项目和app\"></a>6. Django下创建项目和app</h3><pre><code>django-admin.py startproject mysite\n\ncd mysite\n\npython3 manage.py startapp blog</code></pre><h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><a href=\"https://www.cnblogs.com/djangocn/p/9538551.html\">https://www.cnblogs.com/djangocn/p/9538551.html</a><br><a href=\"https://stackoverflow.com/questions/55674176/django-cant-find-new-sqlite-version-sqlite-3-8-3-or-later-is-required-found\">https://stackoverflow.com/questions/55674176/django-cant-find-new-sqlite-version-sqlite-3-8-3-or-later-is-required-found</a><br><a href=\"https://blog.csdn.net/yohjob/article/details/90760862\">https://blog.csdn.net/yohjob/article/details/90760862</a></p>\n"},{"title":"C++ 复习1","_content":"\n#### 关于无符号与有符号数\n* 无符号不能为负数\n* 循环如果使用无符号计数，以>=为条件将导致死循环\n\n#### C++ 11的初始化方法\n```c++\nint a{0};\n```\n\n#### extern的使用\n* 对于希望分离成多个文件独立编译的变量，使用extern公开出去\n* 声明一个变量并extern出去，但注意不要声明+定义一起，否则失去了extern作用了\n* extern变更的声明可以在多个文件，但定义只能在一个文件\n\n#### 复合类型：引用与指针\n* 引用类型一旦初始化就与初始对象绑定在一起，不可以更换绑定。且必须在定义时赋值。\n* 引用类型不可以与值绑定\n* 指针可以不在声明时初始化，指针是一个对象\n* 指针赋值之间类型必须相同\n* C++ 11的标准提供了nullptr为指针初始化为空。 引用cstdlib标准库中，还可以用NULL为指针初始化\n* 任何非0的指针都为true.\n* void＊指针，可用于存放任意对象的地址，但不能直接操作指针所指的对象，可理解为操作内存空间\n\n#### 理解复合类型\n* 对于一个变量，要理解其类型，最简单的办法从右向左阅读变量的定义，离变量名最近的对变量有最直接的影响。\n```c++\nint i = 42;\nint *p;\nint *&r = p; //r是对指针p的一个引用类型变量\n\nr = &i; //给r赋值，就是给p的地址赋值，因此此时 p的值指向了i的地址\n*r = 0;//i的值也为0\n```\n\n* const 限定符， 声明了const后就不能改变其值，但可以使用非常量来初始化const值\n* const 在多文件中的使用：在一个文件中用extern声明同时定义，其他文件中仅extern声明即可。\n* const声明的任何类型都不可以改值！\n* const指针， 即指针指向的地址是不能改变的\n```c++\nint *errNumb = 0;\nint *const curErr = &errNumb;//curErr指针的指向的地址不能改变\nconst double pi = 3.14;\nconst double *const pip = &pi;// pip指向常量pi的常量指针\n```\n* 顶层const与底层const:　从变量名的左侧开始算，底层到高层。最右侧的为顶层const, 指针符左侧为底层const.\n* 拷贝的操作必须两对象都具有相同的底层const\n* 一般来说非常量可转换为常量。\n\n#### 常量表达式 constexpr\n具有以下两个条件的可称为常量表达式：\n1. 表达式左侧的变量需定义为常量\n2. 表达式右侧的值是不用到运行时就能确定的。\n\nC++ 11的标准规定，可以使用constexpr 让编译器验证是否为常量表达式，也可定义函数为constexpr 这样就可以在常量表达式中使用。\n```c++\nconstexpr int mf =20;\nconstexpr int limit = mf+1;\nconstexpr int sz = size(); //size()一定要用constexpr声明。\n```\n\n* constexpr 定义指针，表达此指针为常量指针，因此根据常量指针的特点，必须进行初始化。\n* 注意constexpr定义后的指针就为常量指针，即此const为指针对象的顶层const\n```c++\nconst int *p = nullptr;\nconstexpr int *q = nullptr;\n//p与q是非常不同的，p是一个指针，指向常量。 q是一个常量指针，其地址不能改。\n```\n\n#### 类型别名\n使用typedef 为类型起一个别名：\n```c++\ntypedef int ss;\n```\n\n* C++ 11 新标准可使用using语法替换typedef\n```c++\nusing ss = int;\n```\n* 特别注意当有const在最左侧声明时，带指针的类型别名解释不能直接替换后来翻译，如：\n```c++\ntypedef char *pstring; //类型别名为指向char的指针\nconst pstring a;//a是指向char的常量指针\n//const char* a;//a是指向const char的指针，与const pstring a表示不同！\n\n```\n\n#### Auto类型说明符 (C++11)\n\n不需要强制为某个变量指定类型的声明方式\n* 注意： auto一般会忽略掉顶层的const，当auto引用时！才会保留const\n* auto多变量声明类型必须一样\n```c++\nint i = 0;\nconst int ci = i;\n//以下错误，因为n和p的类型不同，n是整型指针，ci是整型常量指针。\nauto &n = i, *p = &ci;\n```\n\n#### decltype类型说明符（C++11）\n\n使用decltype可取出表达式或变量的类型，以此类型再声明变量。\n\n* 注意：与auto不同的是decltype的值与其内的变量或表达式密切相关，同时也可使用到顶层const和引用。\n* 注意：带括号的表达式或变量，使用decltype时，将必定！返回对应结果的引用类型。而且普通无多个括号时，只有表达式或变量是引用类型才为引用。\n```c++\ndecltype((i)) d; // 错误，d的类型最终为int &, 引用类型必须初始化才行\n```\n\n#### 关于结构体\nC++11新标准规定可以为结构体内的变量设置初始值\n\n#### 关于using的用法\n ```c++\n using std:cin;\n using namespace std;\n ```\n \n * 注意一般不要在头文件中使用using\n\n\n#### string\n* string相加的注意\n```c++\nstring s1 = \"H\"+\"s\"; //错误，无法确定为string类型\n```\n* string的size()返回的size_type，不确定具体类型，但一定是无符号的，所以比对时一定注意。\n\n#### for ： （C++ 11）\n类似于foreach，for 与： 结合取出对象。\n\n#### vector\n* 定义的方式：\n```c++\nvector<int> ivec;\nvector<int> ivec2(ivec);\nvector<int> ivec3 = ivec;\n//C++ 11\nvector<int> ivec4 = {5,6,7}\n\n//10个int类型的元素，且全部为-1\nvector<int> vec(10,-1);\n//10个int类型的元素，且全部为默认初始值\nvector<int> vec2(10);\n```\n* 区别初始化vector时，花号与普通括号内的值的意义。\n* curly braces还可以智能识别，如果其内的第一位与vector不符，且为数字，则此第一位可以表示为初始化的长度。第二位必须与类型相符。\n\n* 添加元素： push_back. 注意不可用下标添加元素\n```c++\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n\t// your code goes here\n\tvector<string> myVec;\n\tmyVec.push_back(\"a\");\n\tmyVec.push_back(\"b\");\n\tcout<< myVec[1] << endl;\n\tauto &v = myVec[1];\n\tv = \"c\";\n\tcout<< myVec[1]<<endl;\n\treturn 0;\n}\n```\n\n\n#### 迭代器的使用\n\nstring与vector都有迭代器。但返回的类型是未知的。因此经常使用auto来接收。\n\n```c++\n\t// your code goes here\n\tvector<vector<string>> myVec;\n\tvector<string> iVec;\n\tiVec.push_back(\"a\");\n\tmyVec.push_back(iVec);\n\t\n\tif(myVec.begin() != myVec.end()){\n\t\tcout<< \"非空vector\"<<endl;\n\t\tauto firstVec = myVec.begin();\n\t\tauto &v = (*firstVec)[0];\n\t\tcout<< \"第一个值：\"<< v;\n\t\tv = \"b\";\n\t\tcout<< \"改：第一个值：\"<< (*firstVec)[0];\n\t}\n```\n\n* C++中推荐尽量使用迭代器加!= 来做遍历。因为标准库的容器都定义了== !=。大部分没有定义<比较。\n```c++\n\t// your code goes here\n\tvector<int> myVec = {5,9,7,5,8,2};\n\tcout << myVec[1]<<endl;\n\tfor(auto it = myVec.begin(); it != myVec.end() ; ++it){\n\t\tcout<< *it << endl; \n\t}\n```\n* 迭代器的表示：\n除了用auto外，还可以使用：：iterator，或：：const_iterator表示常量vector或string。\n\n```c++\nvector<int> a;\na.push_back(6);\nvector<int>::iterator it = a.begin();\ncout<< *it << endl;\n```\n> c++ 11 中引入 cbegin和cend用于表示vector的常量迭代器，返回永远是const_iterator.\n\n* 访问迭代器\n使用C++的箭头， 将解引用与.运算符合在一起了。\n```c++\n// (*it).mem //访问 解it引用后的成员mem\n//it ->mem //与上面一样\n```\n> 特别注意，迭代器的循环不能添加元素，否则将破坏迭代器。\n\n* 迭代器之间的运算：\n+、- 一个数，表示移位置\n+=、-=也适用\n相减得到之间的距离：得到的类型为difference_type。为有符号类型。\n大小比较根据位置而定\n\n\n\n#### 数组的使用\n\n* 与vector区别，数组是定长的\n* 不存在存引用的数组\n```c++\nint arr[10];//定义含10个元素的数组\nint * parr[10];//含有10个整形指针的数组\n```\n* 显示初始化：\n```c++\nint a2[] = {0,2,1};// 自动设置维度为3\n```\n\n* 特殊情况的初始化：字符数组初始化必须加一个’\\0‘结尾字符\n```c++\nchar a3[] = \"c++\";//维度其实是4，因为会自动加一个结尾字符\n```\n* 重要：存对象的数组不需要由另一个数组拷贝，也不需要赋值！\n* 可以定义引用或指针数组来指向一个普通的数组：\n```c++\n\tint a[] = {1,5,3,6,8};\n\tint (*b)[5] = &a;\n\tint (&c)[5] = a;\n\tcout << a[0]<< endl;\n\tcout << *b[0]<<endl;\n\tcout << c[0]<<endl;\n```\n* 数组的size跟vector一样也是size_type\n\n* 指针与数组：\n```c++\nstring nums = {\"a\",\"b\",\"c\"};\nstring *p2 = nums;\n//string p2 = nums[0];//与上面等价\n```\n* 对数组使用decltype关键字返回的是数组还不是指针。使用auto返回的是指针！\n```c++\n\tint a[] = {1,5,3,6,8};\n\tauto b(a);//这是一个指针\n\tdecltype(a) c = {5,9,8,7};//这是一个数组\n```\n* 指针其实也是一个迭代器，拥有之前迭代器的操作。\n如用指针做迭代器输出：\n```c++\n\tfor(int *i = a; i != &a[5]; i++){\n\t\tcout << *i << endl;\n\t}\n```\n* C++ 11引入 begin和end函数用于取出数组的头尾指针位置。\n```c++\n\tfor(int *i = begin(a); i != end(a); i++){\n\t\tcout << *i << endl;\n\t}\n```\n> begin与end相减返回的类型为ptrdiff_t。与迭代器之差不同。但类型类似是符号数\n\n* 指针当成数组用：数组下标与vector和string不同，不是无符号类型！。可为负数。\n```\nint *p = &ia[2];\nint j = p[1];//与*(p+1)等价\nint k = p[-2];//返回ia[0]的元素\n```\n\n#### C风格字符串\n* C风格的字符串，操作的都是指针，而没有string对象的操作。\n* C++中的cstring就是string.h的C++版本。\n* 使用C风格字符串，必须保证字符数组以'\\0'结尾，否则就会发生严重错误！\n* 常用函数\n```c\nstrlen(p)\nstrcmp()//比较相等，相等返回0，大于为正值\nstrcat(p1,p2)//连接，p2加到p1,返回p1。必须保证p1能装得下p2\nstrcpy(p1,p2)//p2拷贝到p1，返回p1\n```\n> 使用C的字符串在估算数组长度时会充满风险，建议使用标准库string.\n\n#### 与旧代码兼容\n以下 C字符串意为： 以空字符结尾的字符数组 \n* 1. 允许使用C字符串初始化 string，或为其赋值\n* 2. string的加法运算，允许有一个C字符串\n* 3. string的复合赋值，右侧可以为一个C字符串\n此三个专为string标准库设计，反之如果是C字符则不行。但可以使用string.cstr()返回一个C字符串。如：\n```c++\nstring s(\"Hello\");\nchar * str = s;//错误，string不能给str赋值\nconst char *str = s.cstr();//正确，但如果一直要用此值，最好重新拷贝\n```\n\n*  以数组初始化vector\n```c++\nint a[] = {1,5,3,6,8};\nvector<int> ivec(begin(a),end(a));\ncout << ivec[0] << endl;\n```\n\n#### 多维数组\n本身C++是没有多维数组的，可以用一个指针嵌套的思想理解。从左往右的理解一个多维数组。\n如3,4的数组表示数组有三个元素，每个元素又是一个有四个元素的数组\n* 定义，二维数组可理解为行和列，平铺式的定义是以一行一行的定义来：\n```c++\n\tint a[3][4] = {\n\t\t{1,2,3,4},\n\t\t{5,6,7,8},\n\t\t{9,10,11,12}\n\t};\n\tint b[3][4] = {1,2,3,4,5,6,7,8,9,10,11,12};//与a等价\n```\n* 遍历查值，除了用下标查找外，可以使用C++ 11的for\n```c++\nint b[3][4] = {1,2,3,4,5,6,7,8,9,10,11,12};\n\tfor(auto &row:b){//注意必须使用引用，因为否则auto将自动转成指针，无法进行下一步\n\t\tfor(auto &i:row){\n\t\t\tcout << i <<endl;\n\t\t}\n\t}\n```\n\n* 注意括号的使用：\n```c++\nint *p[4];//一个有四个整型指针的数组\nint (*p)[4];//定义一个数组指针，指向四元素的数组\n```\n\n* 使用auto遍历：\n```c++\n\tfor(auto p = b;p != b+3;p++){\n\t\tfor(auto q = *p; q != (*p)+4; q++){\n\t\t\tcout << *q <<endl;\n\t\t}\n\t}\n\t//当然可以使用begin和end函数\n```\n* 使用类型别名来定义多维数组里的内部：\n```c++\nusing int_array = int[4];//c++11标准\n```\n\n#### 运算符组合使用\n注意++ 运算符优先级高于解引用优先级\n```c++\n\tint b[3][4] = {1,2,3,4,5,6,7,8,9,10,11,12};\n\tauto p = begin(b[0]);\n\tcout << *p++ << endl; //1\n\tcout << *p << endl; //2\n\tcout << *++p << endl; //3\n//*p++;//p为迭代器时，返回迭代器的值，同时地址往前移一位\n```\n\n#### 位运算符\n```c++\n<< //左移运算符，将一个数的二进制向左移一定位数\n>> //右移运算符，将一个数的二进制向右移一定位数\n| //逻辑或，二进制相同位上的值，有一个为1则为1\n& //逻辑与，二进制相同位上的值，都为1则为1\n^ //逻辑异或，二进制相同位上的值，相同则为0，不同则为1\n```\n*　优先级： 算术运算符 >　移位运算符　＞条件运算符\n\n#### 函数\n\n* 函数的形参会自动忽略顶层const。\n* 尽量将不改动的对象形参设为常量形参。以阻止调用时出错。\n\n#### 内联函数\n\n* 使用Inline定义内联函数\n* 当函数被声明为内联函数之后, 编译器会将其内联展开, 而不是按通常的函数调用机制进行调用.\n> 在使用内联函数时要留神：\n1.在内联函数内不允许使用循环语句和开关语句；\n2.内联函数的定义必须出现在内联函数第一次调用之前；\n3.类结构中所在的类说明内部定义的函数是内联函数。\nTip： 只有当函数只有 10 行甚至更少时才将其定义为内联函数.\n优点: 当函数体比较小的时候, 内联该函数可以令目标代码更加高效. 对于存取函数以及其它函数体比较短, 性能关键的函数, 鼓励使用内联.\n缺点: 滥用内联将导致程序变慢. 内联可能使目标代码量或增或减, 这取决于内联函数的大小. 内联非常短小的存取函数通常会减少代码大小, 但内联一个相当大的函数将戏剧性的增加代码大小. 现代处理器由于更好的利用了指令缓存, 小巧的代码往往执行更快。\n结论: 一个较为合理的经验准则是, 不要内联超过 10 行的函数. 谨慎对待析构函数, 析构函数往往比其表面看起来要更长, 因为有隐含的成员和基类析构函数被调用!\n\n#### 类成员\n* C++11 标准中，将默认值声明成一个类内初始值：\n```c++\n//类里定义\nstd::vector<Screen> screens{Screen(24, 80, '')};\n```\n\n* 返回值类型为引用与普通的区别\n```c++\n//如下如果改为返回Screen对象而非引用，将导致访问到的只是拷贝\nScreen &Screen::set(pos r)\n{\n\tcontents[r] = 10;\n\treturn *this;\n}\n```\n* 如果一个const成员函数以引用形式返回 * this, 则其返回类型是常量引用。因此如下代码无法执行\n```c++\n//假定display为返回const\nmyScreen.display(cout).set('s');\n```\n\n\n","source":"_posts/C++ 复习1.md","raw":"---\ntitle: C++ 复习1\ncategories:\n- CPlusPlus\ntags: \n- C++\n---\n\n#### 关于无符号与有符号数\n* 无符号不能为负数\n* 循环如果使用无符号计数，以>=为条件将导致死循环\n\n#### C++ 11的初始化方法\n```c++\nint a{0};\n```\n\n#### extern的使用\n* 对于希望分离成多个文件独立编译的变量，使用extern公开出去\n* 声明一个变量并extern出去，但注意不要声明+定义一起，否则失去了extern作用了\n* extern变更的声明可以在多个文件，但定义只能在一个文件\n\n#### 复合类型：引用与指针\n* 引用类型一旦初始化就与初始对象绑定在一起，不可以更换绑定。且必须在定义时赋值。\n* 引用类型不可以与值绑定\n* 指针可以不在声明时初始化，指针是一个对象\n* 指针赋值之间类型必须相同\n* C++ 11的标准提供了nullptr为指针初始化为空。 引用cstdlib标准库中，还可以用NULL为指针初始化\n* 任何非0的指针都为true.\n* void＊指针，可用于存放任意对象的地址，但不能直接操作指针所指的对象，可理解为操作内存空间\n\n#### 理解复合类型\n* 对于一个变量，要理解其类型，最简单的办法从右向左阅读变量的定义，离变量名最近的对变量有最直接的影响。\n```c++\nint i = 42;\nint *p;\nint *&r = p; //r是对指针p的一个引用类型变量\n\nr = &i; //给r赋值，就是给p的地址赋值，因此此时 p的值指向了i的地址\n*r = 0;//i的值也为0\n```\n\n* const 限定符， 声明了const后就不能改变其值，但可以使用非常量来初始化const值\n* const 在多文件中的使用：在一个文件中用extern声明同时定义，其他文件中仅extern声明即可。\n* const声明的任何类型都不可以改值！\n* const指针， 即指针指向的地址是不能改变的\n```c++\nint *errNumb = 0;\nint *const curErr = &errNumb;//curErr指针的指向的地址不能改变\nconst double pi = 3.14;\nconst double *const pip = &pi;// pip指向常量pi的常量指针\n```\n* 顶层const与底层const:　从变量名的左侧开始算，底层到高层。最右侧的为顶层const, 指针符左侧为底层const.\n* 拷贝的操作必须两对象都具有相同的底层const\n* 一般来说非常量可转换为常量。\n\n#### 常量表达式 constexpr\n具有以下两个条件的可称为常量表达式：\n1. 表达式左侧的变量需定义为常量\n2. 表达式右侧的值是不用到运行时就能确定的。\n\nC++ 11的标准规定，可以使用constexpr 让编译器验证是否为常量表达式，也可定义函数为constexpr 这样就可以在常量表达式中使用。\n```c++\nconstexpr int mf =20;\nconstexpr int limit = mf+1;\nconstexpr int sz = size(); //size()一定要用constexpr声明。\n```\n\n* constexpr 定义指针，表达此指针为常量指针，因此根据常量指针的特点，必须进行初始化。\n* 注意constexpr定义后的指针就为常量指针，即此const为指针对象的顶层const\n```c++\nconst int *p = nullptr;\nconstexpr int *q = nullptr;\n//p与q是非常不同的，p是一个指针，指向常量。 q是一个常量指针，其地址不能改。\n```\n\n#### 类型别名\n使用typedef 为类型起一个别名：\n```c++\ntypedef int ss;\n```\n\n* C++ 11 新标准可使用using语法替换typedef\n```c++\nusing ss = int;\n```\n* 特别注意当有const在最左侧声明时，带指针的类型别名解释不能直接替换后来翻译，如：\n```c++\ntypedef char *pstring; //类型别名为指向char的指针\nconst pstring a;//a是指向char的常量指针\n//const char* a;//a是指向const char的指针，与const pstring a表示不同！\n\n```\n\n#### Auto类型说明符 (C++11)\n\n不需要强制为某个变量指定类型的声明方式\n* 注意： auto一般会忽略掉顶层的const，当auto引用时！才会保留const\n* auto多变量声明类型必须一样\n```c++\nint i = 0;\nconst int ci = i;\n//以下错误，因为n和p的类型不同，n是整型指针，ci是整型常量指针。\nauto &n = i, *p = &ci;\n```\n\n#### decltype类型说明符（C++11）\n\n使用decltype可取出表达式或变量的类型，以此类型再声明变量。\n\n* 注意：与auto不同的是decltype的值与其内的变量或表达式密切相关，同时也可使用到顶层const和引用。\n* 注意：带括号的表达式或变量，使用decltype时，将必定！返回对应结果的引用类型。而且普通无多个括号时，只有表达式或变量是引用类型才为引用。\n```c++\ndecltype((i)) d; // 错误，d的类型最终为int &, 引用类型必须初始化才行\n```\n\n#### 关于结构体\nC++11新标准规定可以为结构体内的变量设置初始值\n\n#### 关于using的用法\n ```c++\n using std:cin;\n using namespace std;\n ```\n \n * 注意一般不要在头文件中使用using\n\n\n#### string\n* string相加的注意\n```c++\nstring s1 = \"H\"+\"s\"; //错误，无法确定为string类型\n```\n* string的size()返回的size_type，不确定具体类型，但一定是无符号的，所以比对时一定注意。\n\n#### for ： （C++ 11）\n类似于foreach，for 与： 结合取出对象。\n\n#### vector\n* 定义的方式：\n```c++\nvector<int> ivec;\nvector<int> ivec2(ivec);\nvector<int> ivec3 = ivec;\n//C++ 11\nvector<int> ivec4 = {5,6,7}\n\n//10个int类型的元素，且全部为-1\nvector<int> vec(10,-1);\n//10个int类型的元素，且全部为默认初始值\nvector<int> vec2(10);\n```\n* 区别初始化vector时，花号与普通括号内的值的意义。\n* curly braces还可以智能识别，如果其内的第一位与vector不符，且为数字，则此第一位可以表示为初始化的长度。第二位必须与类型相符。\n\n* 添加元素： push_back. 注意不可用下标添加元素\n```c++\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n\t// your code goes here\n\tvector<string> myVec;\n\tmyVec.push_back(\"a\");\n\tmyVec.push_back(\"b\");\n\tcout<< myVec[1] << endl;\n\tauto &v = myVec[1];\n\tv = \"c\";\n\tcout<< myVec[1]<<endl;\n\treturn 0;\n}\n```\n\n\n#### 迭代器的使用\n\nstring与vector都有迭代器。但返回的类型是未知的。因此经常使用auto来接收。\n\n```c++\n\t// your code goes here\n\tvector<vector<string>> myVec;\n\tvector<string> iVec;\n\tiVec.push_back(\"a\");\n\tmyVec.push_back(iVec);\n\t\n\tif(myVec.begin() != myVec.end()){\n\t\tcout<< \"非空vector\"<<endl;\n\t\tauto firstVec = myVec.begin();\n\t\tauto &v = (*firstVec)[0];\n\t\tcout<< \"第一个值：\"<< v;\n\t\tv = \"b\";\n\t\tcout<< \"改：第一个值：\"<< (*firstVec)[0];\n\t}\n```\n\n* C++中推荐尽量使用迭代器加!= 来做遍历。因为标准库的容器都定义了== !=。大部分没有定义<比较。\n```c++\n\t// your code goes here\n\tvector<int> myVec = {5,9,7,5,8,2};\n\tcout << myVec[1]<<endl;\n\tfor(auto it = myVec.begin(); it != myVec.end() ; ++it){\n\t\tcout<< *it << endl; \n\t}\n```\n* 迭代器的表示：\n除了用auto外，还可以使用：：iterator，或：：const_iterator表示常量vector或string。\n\n```c++\nvector<int> a;\na.push_back(6);\nvector<int>::iterator it = a.begin();\ncout<< *it << endl;\n```\n> c++ 11 中引入 cbegin和cend用于表示vector的常量迭代器，返回永远是const_iterator.\n\n* 访问迭代器\n使用C++的箭头， 将解引用与.运算符合在一起了。\n```c++\n// (*it).mem //访问 解it引用后的成员mem\n//it ->mem //与上面一样\n```\n> 特别注意，迭代器的循环不能添加元素，否则将破坏迭代器。\n\n* 迭代器之间的运算：\n+、- 一个数，表示移位置\n+=、-=也适用\n相减得到之间的距离：得到的类型为difference_type。为有符号类型。\n大小比较根据位置而定\n\n\n\n#### 数组的使用\n\n* 与vector区别，数组是定长的\n* 不存在存引用的数组\n```c++\nint arr[10];//定义含10个元素的数组\nint * parr[10];//含有10个整形指针的数组\n```\n* 显示初始化：\n```c++\nint a2[] = {0,2,1};// 自动设置维度为3\n```\n\n* 特殊情况的初始化：字符数组初始化必须加一个’\\0‘结尾字符\n```c++\nchar a3[] = \"c++\";//维度其实是4，因为会自动加一个结尾字符\n```\n* 重要：存对象的数组不需要由另一个数组拷贝，也不需要赋值！\n* 可以定义引用或指针数组来指向一个普通的数组：\n```c++\n\tint a[] = {1,5,3,6,8};\n\tint (*b)[5] = &a;\n\tint (&c)[5] = a;\n\tcout << a[0]<< endl;\n\tcout << *b[0]<<endl;\n\tcout << c[0]<<endl;\n```\n* 数组的size跟vector一样也是size_type\n\n* 指针与数组：\n```c++\nstring nums = {\"a\",\"b\",\"c\"};\nstring *p2 = nums;\n//string p2 = nums[0];//与上面等价\n```\n* 对数组使用decltype关键字返回的是数组还不是指针。使用auto返回的是指针！\n```c++\n\tint a[] = {1,5,3,6,8};\n\tauto b(a);//这是一个指针\n\tdecltype(a) c = {5,9,8,7};//这是一个数组\n```\n* 指针其实也是一个迭代器，拥有之前迭代器的操作。\n如用指针做迭代器输出：\n```c++\n\tfor(int *i = a; i != &a[5]; i++){\n\t\tcout << *i << endl;\n\t}\n```\n* C++ 11引入 begin和end函数用于取出数组的头尾指针位置。\n```c++\n\tfor(int *i = begin(a); i != end(a); i++){\n\t\tcout << *i << endl;\n\t}\n```\n> begin与end相减返回的类型为ptrdiff_t。与迭代器之差不同。但类型类似是符号数\n\n* 指针当成数组用：数组下标与vector和string不同，不是无符号类型！。可为负数。\n```\nint *p = &ia[2];\nint j = p[1];//与*(p+1)等价\nint k = p[-2];//返回ia[0]的元素\n```\n\n#### C风格字符串\n* C风格的字符串，操作的都是指针，而没有string对象的操作。\n* C++中的cstring就是string.h的C++版本。\n* 使用C风格字符串，必须保证字符数组以'\\0'结尾，否则就会发生严重错误！\n* 常用函数\n```c\nstrlen(p)\nstrcmp()//比较相等，相等返回0，大于为正值\nstrcat(p1,p2)//连接，p2加到p1,返回p1。必须保证p1能装得下p2\nstrcpy(p1,p2)//p2拷贝到p1，返回p1\n```\n> 使用C的字符串在估算数组长度时会充满风险，建议使用标准库string.\n\n#### 与旧代码兼容\n以下 C字符串意为： 以空字符结尾的字符数组 \n* 1. 允许使用C字符串初始化 string，或为其赋值\n* 2. string的加法运算，允许有一个C字符串\n* 3. string的复合赋值，右侧可以为一个C字符串\n此三个专为string标准库设计，反之如果是C字符则不行。但可以使用string.cstr()返回一个C字符串。如：\n```c++\nstring s(\"Hello\");\nchar * str = s;//错误，string不能给str赋值\nconst char *str = s.cstr();//正确，但如果一直要用此值，最好重新拷贝\n```\n\n*  以数组初始化vector\n```c++\nint a[] = {1,5,3,6,8};\nvector<int> ivec(begin(a),end(a));\ncout << ivec[0] << endl;\n```\n\n#### 多维数组\n本身C++是没有多维数组的，可以用一个指针嵌套的思想理解。从左往右的理解一个多维数组。\n如3,4的数组表示数组有三个元素，每个元素又是一个有四个元素的数组\n* 定义，二维数组可理解为行和列，平铺式的定义是以一行一行的定义来：\n```c++\n\tint a[3][4] = {\n\t\t{1,2,3,4},\n\t\t{5,6,7,8},\n\t\t{9,10,11,12}\n\t};\n\tint b[3][4] = {1,2,3,4,5,6,7,8,9,10,11,12};//与a等价\n```\n* 遍历查值，除了用下标查找外，可以使用C++ 11的for\n```c++\nint b[3][4] = {1,2,3,4,5,6,7,8,9,10,11,12};\n\tfor(auto &row:b){//注意必须使用引用，因为否则auto将自动转成指针，无法进行下一步\n\t\tfor(auto &i:row){\n\t\t\tcout << i <<endl;\n\t\t}\n\t}\n```\n\n* 注意括号的使用：\n```c++\nint *p[4];//一个有四个整型指针的数组\nint (*p)[4];//定义一个数组指针，指向四元素的数组\n```\n\n* 使用auto遍历：\n```c++\n\tfor(auto p = b;p != b+3;p++){\n\t\tfor(auto q = *p; q != (*p)+4; q++){\n\t\t\tcout << *q <<endl;\n\t\t}\n\t}\n\t//当然可以使用begin和end函数\n```\n* 使用类型别名来定义多维数组里的内部：\n```c++\nusing int_array = int[4];//c++11标准\n```\n\n#### 运算符组合使用\n注意++ 运算符优先级高于解引用优先级\n```c++\n\tint b[3][4] = {1,2,3,4,5,6,7,8,9,10,11,12};\n\tauto p = begin(b[0]);\n\tcout << *p++ << endl; //1\n\tcout << *p << endl; //2\n\tcout << *++p << endl; //3\n//*p++;//p为迭代器时，返回迭代器的值，同时地址往前移一位\n```\n\n#### 位运算符\n```c++\n<< //左移运算符，将一个数的二进制向左移一定位数\n>> //右移运算符，将一个数的二进制向右移一定位数\n| //逻辑或，二进制相同位上的值，有一个为1则为1\n& //逻辑与，二进制相同位上的值，都为1则为1\n^ //逻辑异或，二进制相同位上的值，相同则为0，不同则为1\n```\n*　优先级： 算术运算符 >　移位运算符　＞条件运算符\n\n#### 函数\n\n* 函数的形参会自动忽略顶层const。\n* 尽量将不改动的对象形参设为常量形参。以阻止调用时出错。\n\n#### 内联函数\n\n* 使用Inline定义内联函数\n* 当函数被声明为内联函数之后, 编译器会将其内联展开, 而不是按通常的函数调用机制进行调用.\n> 在使用内联函数时要留神：\n1.在内联函数内不允许使用循环语句和开关语句；\n2.内联函数的定义必须出现在内联函数第一次调用之前；\n3.类结构中所在的类说明内部定义的函数是内联函数。\nTip： 只有当函数只有 10 行甚至更少时才将其定义为内联函数.\n优点: 当函数体比较小的时候, 内联该函数可以令目标代码更加高效. 对于存取函数以及其它函数体比较短, 性能关键的函数, 鼓励使用内联.\n缺点: 滥用内联将导致程序变慢. 内联可能使目标代码量或增或减, 这取决于内联函数的大小. 内联非常短小的存取函数通常会减少代码大小, 但内联一个相当大的函数将戏剧性的增加代码大小. 现代处理器由于更好的利用了指令缓存, 小巧的代码往往执行更快。\n结论: 一个较为合理的经验准则是, 不要内联超过 10 行的函数. 谨慎对待析构函数, 析构函数往往比其表面看起来要更长, 因为有隐含的成员和基类析构函数被调用!\n\n#### 类成员\n* C++11 标准中，将默认值声明成一个类内初始值：\n```c++\n//类里定义\nstd::vector<Screen> screens{Screen(24, 80, '')};\n```\n\n* 返回值类型为引用与普通的区别\n```c++\n//如下如果改为返回Screen对象而非引用，将导致访问到的只是拷贝\nScreen &Screen::set(pos r)\n{\n\tcontents[r] = 10;\n\treturn *this;\n}\n```\n* 如果一个const成员函数以引用形式返回 * this, 则其返回类型是常量引用。因此如下代码无法执行\n```c++\n//假定display为返回const\nmyScreen.display(cout).set('s');\n```\n\n\n","slug":"C++ 复习1","published":1,"date":"2020-09-08T03:23:20.714Z","updated":"2020-09-08T03:23:20.714Z","_id":"ckdpcluxb00048sr3bqwb8woz","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"关于无符号与有符号数\"><a href=\"#关于无符号与有符号数\" class=\"headerlink\" title=\"关于无符号与有符号数\"></a>关于无符号与有符号数</h4><ul>\n<li>无符号不能为负数</li>\n<li>循环如果使用无符号计数，以&gt;=为条件将导致死循环</li>\n</ul>\n<h4 id=\"C-11的初始化方法\"><a href=\"#C-11的初始化方法\" class=\"headerlink\" title=\"C++ 11的初始化方法\"></a>C++ 11的初始化方法</h4><pre><code class=\"c++\">int a{0};</code></pre>\n<h4 id=\"extern的使用\"><a href=\"#extern的使用\" class=\"headerlink\" title=\"extern的使用\"></a>extern的使用</h4><ul>\n<li>对于希望分离成多个文件独立编译的变量，使用extern公开出去</li>\n<li>声明一个变量并extern出去，但注意不要声明+定义一起，否则失去了extern作用了</li>\n<li>extern变更的声明可以在多个文件，但定义只能在一个文件</li>\n</ul>\n<h4 id=\"复合类型：引用与指针\"><a href=\"#复合类型：引用与指针\" class=\"headerlink\" title=\"复合类型：引用与指针\"></a>复合类型：引用与指针</h4><ul>\n<li>引用类型一旦初始化就与初始对象绑定在一起，不可以更换绑定。且必须在定义时赋值。</li>\n<li>引用类型不可以与值绑定</li>\n<li>指针可以不在声明时初始化，指针是一个对象</li>\n<li>指针赋值之间类型必须相同</li>\n<li>C++ 11的标准提供了nullptr为指针初始化为空。 引用cstdlib标准库中，还可以用NULL为指针初始化</li>\n<li>任何非0的指针都为true.</li>\n<li>void＊指针，可用于存放任意对象的地址，但不能直接操作指针所指的对象，可理解为操作内存空间</li>\n</ul>\n<h4 id=\"理解复合类型\"><a href=\"#理解复合类型\" class=\"headerlink\" title=\"理解复合类型\"></a>理解复合类型</h4><ul>\n<li>对于一个变量，要理解其类型，最简单的办法从右向左阅读变量的定义，离变量名最近的对变量有最直接的影响。<pre><code class=\"c++\">int i = 42;\nint *p;\nint *&amp;r = p; //r是对指针p的一个引用类型变量\n</code></pre>\n</li>\n</ul>\n<p>r = &i; //给r赋值，就是给p的地址赋值，因此此时 p的值指向了i的地址<br>*r = 0;//i的值也为0</p>\n<pre><code>\n* const 限定符， 声明了const后就不能改变其值，但可以使用非常量来初始化const值\n* const 在多文件中的使用：在一个文件中用extern声明同时定义，其他文件中仅extern声明即可。\n* const声明的任何类型都不可以改值！\n* const指针， 即指针指向的地址是不能改变的\n```c++\nint *errNumb = 0;\nint *const curErr = &amp;errNumb;//curErr指针的指向的地址不能改变\nconst double pi = 3.14;\nconst double *const pip = &amp;pi;// pip指向常量pi的常量指针</code></pre><ul>\n<li>顶层const与底层const:　从变量名的左侧开始算，底层到高层。最右侧的为顶层const, 指针符左侧为底层const.</li>\n<li>拷贝的操作必须两对象都具有相同的底层const</li>\n<li>一般来说非常量可转换为常量。</li>\n</ul>\n<h4 id=\"常量表达式-constexpr\"><a href=\"#常量表达式-constexpr\" class=\"headerlink\" title=\"常量表达式 constexpr\"></a>常量表达式 constexpr</h4><p>具有以下两个条件的可称为常量表达式：</p>\n<ol>\n<li>表达式左侧的变量需定义为常量</li>\n<li>表达式右侧的值是不用到运行时就能确定的。</li>\n</ol>\n<p>C++ 11的标准规定，可以使用constexpr 让编译器验证是否为常量表达式，也可定义函数为constexpr 这样就可以在常量表达式中使用。</p>\n<pre><code class=\"c++\">constexpr int mf =20;\nconstexpr int limit = mf+1;\nconstexpr int sz = size(); //size()一定要用constexpr声明。</code></pre>\n<ul>\n<li>constexpr 定义指针，表达此指针为常量指针，因此根据常量指针的特点，必须进行初始化。</li>\n<li>注意constexpr定义后的指针就为常量指针，即此const为指针对象的顶层const<pre><code class=\"c++\">const int *p = nullptr;\nconstexpr int *q = nullptr;\n//p与q是非常不同的，p是一个指针，指向常量。 q是一个常量指针，其地址不能改。</code></pre>\n</li>\n</ul>\n<h4 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h4><p>使用typedef 为类型起一个别名：</p>\n<pre><code class=\"c++\">typedef int ss;</code></pre>\n<ul>\n<li>C++ 11 新标准可使用using语法替换typedef<pre><code class=\"c++\">using ss = int;</code></pre>\n</li>\n<li>特别注意当有const在最左侧声明时，带指针的类型别名解释不能直接替换后来翻译，如：<pre><code class=\"c++\">typedef char *pstring; //类型别名为指向char的指针\nconst pstring a;//a是指向char的常量指针\n//const char* a;//a是指向const char的指针，与const pstring a表示不同！\n</code></pre>\n</li>\n</ul>\n<pre><code>\n#### Auto类型说明符 (C++11)\n\n不需要强制为某个变量指定类型的声明方式\n* 注意： auto一般会忽略掉顶层的const，当auto引用时！才会保留const\n* auto多变量声明类型必须一样\n```c++\nint i = 0;\nconst int ci = i;\n//以下错误，因为n和p的类型不同，n是整型指针，ci是整型常量指针。\nauto &amp;n = i, *p = &amp;ci;</code></pre><h4 id=\"decltype类型说明符（C-11）\"><a href=\"#decltype类型说明符（C-11）\" class=\"headerlink\" title=\"decltype类型说明符（C++11）\"></a>decltype类型说明符（C++11）</h4><p>使用decltype可取出表达式或变量的类型，以此类型再声明变量。</p>\n<ul>\n<li>注意：与auto不同的是decltype的值与其内的变量或表达式密切相关，同时也可使用到顶层const和引用。</li>\n<li>注意：带括号的表达式或变量，使用decltype时，将必定！返回对应结果的引用类型。而且普通无多个括号时，只有表达式或变量是引用类型才为引用。<pre><code class=\"c++\">decltype((i)) d; // 错误，d的类型最终为int &amp;, 引用类型必须初始化才行</code></pre>\n</li>\n</ul>\n<h4 id=\"关于结构体\"><a href=\"#关于结构体\" class=\"headerlink\" title=\"关于结构体\"></a>关于结构体</h4><p>C++11新标准规定可以为结构体内的变量设置初始值</p>\n<h4 id=\"关于using的用法\"><a href=\"#关于using的用法\" class=\"headerlink\" title=\"关于using的用法\"></a>关于using的用法</h4><pre><code class=\"c++\"> using std:cin;\n using namespace std;</code></pre>\n<ul>\n<li>注意一般不要在头文件中使用using</li>\n</ul>\n<h4 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h4><ul>\n<li>string相加的注意<pre><code class=\"c++\">string s1 = &quot;H&quot;+&quot;s&quot;; //错误，无法确定为string类型</code></pre>\n</li>\n<li>string的size()返回的size_type，不确定具体类型，但一定是无符号的，所以比对时一定注意。</li>\n</ul>\n<h4 id=\"for-：-（C-11）\"><a href=\"#for-：-（C-11）\" class=\"headerlink\" title=\"for ： （C++ 11）\"></a>for ： （C++ 11）</h4><p>类似于foreach，for 与： 结合取出对象。</p>\n<h4 id=\"vector\"><a href=\"#vector\" class=\"headerlink\" title=\"vector\"></a>vector</h4><ul>\n<li>定义的方式：<pre><code class=\"c++\">vector&lt;int&gt; ivec;\nvector&lt;int&gt; ivec2(ivec);\nvector&lt;int&gt; ivec3 = ivec;\n//C++ 11\nvector&lt;int&gt; ivec4 = {5,6,7}\n</code></pre>\n</li>\n</ul>\n<p>//10个int类型的元素，且全部为-1<br>vector<int> vec(10,-1);<br>//10个int类型的元素，且全部为默认初始值<br>vector<int> vec2(10);</p>\n<pre><code>* 区别初始化vector时，花号与普通括号内的值的意义。\n* curly braces还可以智能识别，如果其内的第一位与vector不符，且为数字，则此第一位可以表示为初始化的长度。第二位必须与类型相符。\n\n* 添加元素： push_back. 注意不可用下标添加元素\n```c++\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n    // your code goes here\n    vector&lt;string&gt; myVec;\n    myVec.push_back(&quot;a&quot;);\n    myVec.push_back(&quot;b&quot;);\n    cout&lt;&lt; myVec[1] &lt;&lt; endl;\n    auto &amp;v = myVec[1];\n    v = &quot;c&quot;;\n    cout&lt;&lt; myVec[1]&lt;&lt;endl;\n    return 0;\n}</code></pre><h4 id=\"迭代器的使用\"><a href=\"#迭代器的使用\" class=\"headerlink\" title=\"迭代器的使用\"></a>迭代器的使用</h4><p>string与vector都有迭代器。但返回的类型是未知的。因此经常使用auto来接收。</p>\n<pre><code class=\"c++\">    // your code goes here\n    vector&lt;vector&lt;string&gt;&gt; myVec;\n    vector&lt;string&gt; iVec;\n    iVec.push_back(&quot;a&quot;);\n    myVec.push_back(iVec);\n\n    if(myVec.begin() != myVec.end()){\n        cout&lt;&lt; &quot;非空vector&quot;&lt;&lt;endl;\n        auto firstVec = myVec.begin();\n        auto &amp;v = (*firstVec)[0];\n        cout&lt;&lt; &quot;第一个值：&quot;&lt;&lt; v;\n        v = &quot;b&quot;;\n        cout&lt;&lt; &quot;改：第一个值：&quot;&lt;&lt; (*firstVec)[0];\n    }</code></pre>\n<ul>\n<li>C++中推荐尽量使用迭代器加!= 来做遍历。因为标准库的容器都定义了== !=。大部分没有定义&lt;比较。<pre><code class=\"c++\">  // your code goes here\n  vector&lt;int&gt; myVec = {5,9,7,5,8,2};\n  cout &lt;&lt; myVec[1]&lt;&lt;endl;\n  for(auto it = myVec.begin(); it != myVec.end() ; ++it){\n      cout&lt;&lt; *it &lt;&lt; endl; \n  }</code></pre>\n</li>\n<li>迭代器的表示：<br>除了用auto外，还可以使用：：iterator，或：：const_iterator表示常量vector或string。</li>\n</ul>\n<pre><code class=\"c++\">vector&lt;int&gt; a;\na.push_back(6);\nvector&lt;int&gt;::iterator it = a.begin();\ncout&lt;&lt; *it &lt;&lt; endl;</code></pre>\n<blockquote>\n<p>c++ 11 中引入 cbegin和cend用于表示vector的常量迭代器，返回永远是const_iterator.</p>\n</blockquote>\n<ul>\n<li><p>访问迭代器<br>使用C++的箭头， 将解引用与.运算符合在一起了。</p>\n<pre><code class=\"c++\">// (*it).mem //访问 解it引用后的成员mem\n//it -&gt;mem //与上面一样</code></pre>\n<blockquote>\n<p>特别注意，迭代器的循环不能添加元素，否则将破坏迭代器。</p>\n</blockquote>\n</li>\n<li><p>迭代器之间的运算：</p>\n</li>\n</ul>\n<p>+、- 一个数，表示移位置<br>+=、-=也适用<br>相减得到之间的距离：得到的类型为difference_type。为有符号类型。<br>大小比较根据位置而定</p>\n<h4 id=\"数组的使用\"><a href=\"#数组的使用\" class=\"headerlink\" title=\"数组的使用\"></a>数组的使用</h4><ul>\n<li><p>与vector区别，数组是定长的</p>\n</li>\n<li><p>不存在存引用的数组</p>\n<pre><code class=\"c++\">int arr[10];//定义含10个元素的数组\nint * parr[10];//含有10个整形指针的数组</code></pre>\n</li>\n<li><p>显示初始化：</p>\n<pre><code class=\"c++\">int a2[] = {0,2,1};// 自动设置维度为3</code></pre>\n</li>\n<li><p>特殊情况的初始化：字符数组初始化必须加一个’\\0‘结尾字符</p>\n<pre><code class=\"c++\">char a3[] = &quot;c++&quot;;//维度其实是4，因为会自动加一个结尾字符</code></pre>\n</li>\n<li><p>重要：存对象的数组不需要由另一个数组拷贝，也不需要赋值！</p>\n</li>\n<li><p>可以定义引用或指针数组来指向一个普通的数组：</p>\n<pre><code class=\"c++\">  int a[] = {1,5,3,6,8};\n  int (*b)[5] = &amp;a;\n  int (&amp;c)[5] = a;\n  cout &lt;&lt; a[0]&lt;&lt; endl;\n  cout &lt;&lt; *b[0]&lt;&lt;endl;\n  cout &lt;&lt; c[0]&lt;&lt;endl;</code></pre>\n</li>\n<li><p>数组的size跟vector一样也是size_type</p>\n</li>\n<li><p>指针与数组：</p>\n<pre><code class=\"c++\">string nums = {&quot;a&quot;,&quot;b&quot;,&quot;c&quot;};\nstring *p2 = nums;\n//string p2 = nums[0];//与上面等价</code></pre>\n</li>\n<li><p>对数组使用decltype关键字返回的是数组还不是指针。使用auto返回的是指针！</p>\n<pre><code class=\"c++\">  int a[] = {1,5,3,6,8};\n  auto b(a);//这是一个指针\n  decltype(a) c = {5,9,8,7};//这是一个数组</code></pre>\n</li>\n<li><p>指针其实也是一个迭代器，拥有之前迭代器的操作。<br>如用指针做迭代器输出：</p>\n<pre><code class=\"c++\">  for(int *i = a; i != &amp;a[5]; i++){\n      cout &lt;&lt; *i &lt;&lt; endl;\n  }</code></pre>\n</li>\n<li><p>C++ 11引入 begin和end函数用于取出数组的头尾指针位置。</p>\n<pre><code class=\"c++\">  for(int *i = begin(a); i != end(a); i++){\n      cout &lt;&lt; *i &lt;&lt; endl;\n  }</code></pre>\n<blockquote>\n<p>begin与end相减返回的类型为ptrdiff_t。与迭代器之差不同。但类型类似是符号数</p>\n</blockquote>\n</li>\n<li><p>指针当成数组用：数组下标与vector和string不同，不是无符号类型！。可为负数。</p>\n<pre><code>int *p = &amp;ia[2];\nint j = p[1];//与*(p+1)等价\nint k = p[-2];//返回ia[0]的元素</code></pre></li>\n</ul>\n<h4 id=\"C风格字符串\"><a href=\"#C风格字符串\" class=\"headerlink\" title=\"C风格字符串\"></a>C风格字符串</h4><ul>\n<li>C风格的字符串，操作的都是指针，而没有string对象的操作。</li>\n<li>C++中的cstring就是string.h的C++版本。</li>\n<li>使用C风格字符串，必须保证字符数组以’\\0’结尾，否则就会发生严重错误！</li>\n<li>常用函数<pre><code class=\"c\">strlen(p)\nstrcmp()//比较相等，相等返回0，大于为正值\nstrcat(p1,p2)//连接，p2加到p1,返回p1。必须保证p1能装得下p2\nstrcpy(p1,p2)//p2拷贝到p1，返回p1</code></pre>\n<blockquote>\n<p>使用C的字符串在估算数组长度时会充满风险，建议使用标准库string.</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"与旧代码兼容\"><a href=\"#与旧代码兼容\" class=\"headerlink\" title=\"与旧代码兼容\"></a>与旧代码兼容</h4><p>以下 C字符串意为： 以空字符结尾的字符数组 </p>\n<ul>\n<li><ol>\n<li>允许使用C字符串初始化 string，或为其赋值</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>string的加法运算，允许有一个C字符串</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>string的复合赋值，右侧可以为一个C字符串<br>此三个专为string标准库设计，反之如果是C字符则不行。但可以使用string.cstr()返回一个C字符串。如：<pre><code class=\"c++\">string s(&quot;Hello&quot;);\nchar * str = s;//错误，string不能给str赋值\nconst char *str = s.cstr();//正确，但如果一直要用此值，最好重新拷贝</code></pre>\n</li>\n</ol>\n</li>\n<li><p>以数组初始化vector</p>\n<pre><code class=\"c++\">int a[] = {1,5,3,6,8};\nvector&lt;int&gt; ivec(begin(a),end(a));\ncout &lt;&lt; ivec[0] &lt;&lt; endl;</code></pre>\n</li>\n</ul>\n<h4 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h4><p>本身C++是没有多维数组的，可以用一个指针嵌套的思想理解。从左往右的理解一个多维数组。<br>如3,4的数组表示数组有三个元素，每个元素又是一个有四个元素的数组</p>\n<ul>\n<li><p>定义，二维数组可理解为行和列，平铺式的定义是以一行一行的定义来：</p>\n<pre><code class=\"c++\">  int a[3][4] = {\n      {1,2,3,4},\n      {5,6,7,8},\n      {9,10,11,12}\n  };\n  int b[3][4] = {1,2,3,4,5,6,7,8,9,10,11,12};//与a等价</code></pre>\n</li>\n<li><p>遍历查值，除了用下标查找外，可以使用C++ 11的for</p>\n<pre><code class=\"c++\">int b[3][4] = {1,2,3,4,5,6,7,8,9,10,11,12};\n  for(auto &amp;row:b){//注意必须使用引用，因为否则auto将自动转成指针，无法进行下一步\n      for(auto &amp;i:row){\n          cout &lt;&lt; i &lt;&lt;endl;\n      }\n  }</code></pre>\n</li>\n<li><p>注意括号的使用：</p>\n<pre><code class=\"c++\">int *p[4];//一个有四个整型指针的数组\nint (*p)[4];//定义一个数组指针，指向四元素的数组</code></pre>\n</li>\n<li><p>使用auto遍历：</p>\n<pre><code class=\"c++\">  for(auto p = b;p != b+3;p++){\n      for(auto q = *p; q != (*p)+4; q++){\n          cout &lt;&lt; *q &lt;&lt;endl;\n      }\n  }\n  //当然可以使用begin和end函数</code></pre>\n</li>\n<li><p>使用类型别名来定义多维数组里的内部：</p>\n<pre><code class=\"c++\">using int_array = int[4];//c++11标准</code></pre>\n</li>\n</ul>\n<h4 id=\"运算符组合使用\"><a href=\"#运算符组合使用\" class=\"headerlink\" title=\"运算符组合使用\"></a>运算符组合使用</h4><p>注意++ 运算符优先级高于解引用优先级</p>\n<pre><code class=\"c++\">    int b[3][4] = {1,2,3,4,5,6,7,8,9,10,11,12};\n    auto p = begin(b[0]);\n    cout &lt;&lt; *p++ &lt;&lt; endl; //1\n    cout &lt;&lt; *p &lt;&lt; endl; //2\n    cout &lt;&lt; *++p &lt;&lt; endl; //3\n//*p++;//p为迭代器时，返回迭代器的值，同时地址往前移一位</code></pre>\n<h4 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h4><pre><code class=\"c++\">&lt;&lt; //左移运算符，将一个数的二进制向左移一定位数\n&gt;&gt; //右移运算符，将一个数的二进制向右移一定位数\n| //逻辑或，二进制相同位上的值，有一个为1则为1\n&amp; //逻辑与，二进制相同位上的值，都为1则为1\n^ //逻辑异或，二进制相同位上的值，相同则为0，不同则为1</code></pre>\n<p>*　优先级： 算术运算符 &gt;　移位运算符　＞条件运算符</p>\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><ul>\n<li>函数的形参会自动忽略顶层const。</li>\n<li>尽量将不改动的对象形参设为常量形参。以阻止调用时出错。</li>\n</ul>\n<h4 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h4><ul>\n<li>使用Inline定义内联函数</li>\n<li>当函数被声明为内联函数之后, 编译器会将其内联展开, 而不是按通常的函数调用机制进行调用.<blockquote>\n<p>在使用内联函数时要留神：</p>\n</blockquote>\n</li>\n</ul>\n<p>1.在内联函数内不允许使用循环语句和开关语句；<br>2.内联函数的定义必须出现在内联函数第一次调用之前；<br>3.类结构中所在的类说明内部定义的函数是内联函数。<br>Tip： 只有当函数只有 10 行甚至更少时才将其定义为内联函数.<br>优点: 当函数体比较小的时候, 内联该函数可以令目标代码更加高效. 对于存取函数以及其它函数体比较短, 性能关键的函数, 鼓励使用内联.<br>缺点: 滥用内联将导致程序变慢. 内联可能使目标代码量或增或减, 这取决于内联函数的大小. 内联非常短小的存取函数通常会减少代码大小, 但内联一个相当大的函数将戏剧性的增加代码大小. 现代处理器由于更好的利用了指令缓存, 小巧的代码往往执行更快。<br>结论: 一个较为合理的经验准则是, 不要内联超过 10 行的函数. 谨慎对待析构函数, 析构函数往往比其表面看起来要更长, 因为有隐含的成员和基类析构函数被调用!</p>\n<h4 id=\"类成员\"><a href=\"#类成员\" class=\"headerlink\" title=\"类成员\"></a>类成员</h4><ul>\n<li><p>C++11 标准中，将默认值声明成一个类内初始值：</p>\n<pre><code class=\"c++\">//类里定义\nstd::vector&lt;Screen&gt; screens{Screen(24, 80, &#39;&#39;)};</code></pre>\n</li>\n<li><p>返回值类型为引用与普通的区别</p>\n<pre><code class=\"c++\">//如下如果改为返回Screen对象而非引用，将导致访问到的只是拷贝\nScreen &amp;Screen::set(pos r)\n{\n  contents[r] = 10;\n  return *this;\n}</code></pre>\n</li>\n<li><p>如果一个const成员函数以引用形式返回 * this, 则其返回类型是常量引用。因此如下代码无法执行</p>\n<pre><code class=\"c++\">//假定display为返回const\nmyScreen.display(cout).set(&#39;s&#39;);</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"关于无符号与有符号数\"><a href=\"#关于无符号与有符号数\" class=\"headerlink\" title=\"关于无符号与有符号数\"></a>关于无符号与有符号数</h4><ul>\n<li>无符号不能为负数</li>\n<li>循环如果使用无符号计数，以&gt;=为条件将导致死循环</li>\n</ul>\n<h4 id=\"C-11的初始化方法\"><a href=\"#C-11的初始化方法\" class=\"headerlink\" title=\"C++ 11的初始化方法\"></a>C++ 11的初始化方法</h4><pre><code class=\"c++\">int a{0};</code></pre>\n<h4 id=\"extern的使用\"><a href=\"#extern的使用\" class=\"headerlink\" title=\"extern的使用\"></a>extern的使用</h4><ul>\n<li>对于希望分离成多个文件独立编译的变量，使用extern公开出去</li>\n<li>声明一个变量并extern出去，但注意不要声明+定义一起，否则失去了extern作用了</li>\n<li>extern变更的声明可以在多个文件，但定义只能在一个文件</li>\n</ul>\n<h4 id=\"复合类型：引用与指针\"><a href=\"#复合类型：引用与指针\" class=\"headerlink\" title=\"复合类型：引用与指针\"></a>复合类型：引用与指针</h4><ul>\n<li>引用类型一旦初始化就与初始对象绑定在一起，不可以更换绑定。且必须在定义时赋值。</li>\n<li>引用类型不可以与值绑定</li>\n<li>指针可以不在声明时初始化，指针是一个对象</li>\n<li>指针赋值之间类型必须相同</li>\n<li>C++ 11的标准提供了nullptr为指针初始化为空。 引用cstdlib标准库中，还可以用NULL为指针初始化</li>\n<li>任何非0的指针都为true.</li>\n<li>void＊指针，可用于存放任意对象的地址，但不能直接操作指针所指的对象，可理解为操作内存空间</li>\n</ul>\n<h4 id=\"理解复合类型\"><a href=\"#理解复合类型\" class=\"headerlink\" title=\"理解复合类型\"></a>理解复合类型</h4><ul>\n<li>对于一个变量，要理解其类型，最简单的办法从右向左阅读变量的定义，离变量名最近的对变量有最直接的影响。<pre><code class=\"c++\">int i = 42;\nint *p;\nint *&amp;r = p; //r是对指针p的一个引用类型变量\n</code></pre>\n</li>\n</ul>\n<p>r = &i; //给r赋值，就是给p的地址赋值，因此此时 p的值指向了i的地址<br>*r = 0;//i的值也为0</p>\n<pre><code>\n* const 限定符， 声明了const后就不能改变其值，但可以使用非常量来初始化const值\n* const 在多文件中的使用：在一个文件中用extern声明同时定义，其他文件中仅extern声明即可。\n* const声明的任何类型都不可以改值！\n* const指针， 即指针指向的地址是不能改变的\n```c++\nint *errNumb = 0;\nint *const curErr = &amp;errNumb;//curErr指针的指向的地址不能改变\nconst double pi = 3.14;\nconst double *const pip = &amp;pi;// pip指向常量pi的常量指针</code></pre><ul>\n<li>顶层const与底层const:　从变量名的左侧开始算，底层到高层。最右侧的为顶层const, 指针符左侧为底层const.</li>\n<li>拷贝的操作必须两对象都具有相同的底层const</li>\n<li>一般来说非常量可转换为常量。</li>\n</ul>\n<h4 id=\"常量表达式-constexpr\"><a href=\"#常量表达式-constexpr\" class=\"headerlink\" title=\"常量表达式 constexpr\"></a>常量表达式 constexpr</h4><p>具有以下两个条件的可称为常量表达式：</p>\n<ol>\n<li>表达式左侧的变量需定义为常量</li>\n<li>表达式右侧的值是不用到运行时就能确定的。</li>\n</ol>\n<p>C++ 11的标准规定，可以使用constexpr 让编译器验证是否为常量表达式，也可定义函数为constexpr 这样就可以在常量表达式中使用。</p>\n<pre><code class=\"c++\">constexpr int mf =20;\nconstexpr int limit = mf+1;\nconstexpr int sz = size(); //size()一定要用constexpr声明。</code></pre>\n<ul>\n<li>constexpr 定义指针，表达此指针为常量指针，因此根据常量指针的特点，必须进行初始化。</li>\n<li>注意constexpr定义后的指针就为常量指针，即此const为指针对象的顶层const<pre><code class=\"c++\">const int *p = nullptr;\nconstexpr int *q = nullptr;\n//p与q是非常不同的，p是一个指针，指向常量。 q是一个常量指针，其地址不能改。</code></pre>\n</li>\n</ul>\n<h4 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h4><p>使用typedef 为类型起一个别名：</p>\n<pre><code class=\"c++\">typedef int ss;</code></pre>\n<ul>\n<li>C++ 11 新标准可使用using语法替换typedef<pre><code class=\"c++\">using ss = int;</code></pre>\n</li>\n<li>特别注意当有const在最左侧声明时，带指针的类型别名解释不能直接替换后来翻译，如：<pre><code class=\"c++\">typedef char *pstring; //类型别名为指向char的指针\nconst pstring a;//a是指向char的常量指针\n//const char* a;//a是指向const char的指针，与const pstring a表示不同！\n</code></pre>\n</li>\n</ul>\n<pre><code>\n#### Auto类型说明符 (C++11)\n\n不需要强制为某个变量指定类型的声明方式\n* 注意： auto一般会忽略掉顶层的const，当auto引用时！才会保留const\n* auto多变量声明类型必须一样\n```c++\nint i = 0;\nconst int ci = i;\n//以下错误，因为n和p的类型不同，n是整型指针，ci是整型常量指针。\nauto &amp;n = i, *p = &amp;ci;</code></pre><h4 id=\"decltype类型说明符（C-11）\"><a href=\"#decltype类型说明符（C-11）\" class=\"headerlink\" title=\"decltype类型说明符（C++11）\"></a>decltype类型说明符（C++11）</h4><p>使用decltype可取出表达式或变量的类型，以此类型再声明变量。</p>\n<ul>\n<li>注意：与auto不同的是decltype的值与其内的变量或表达式密切相关，同时也可使用到顶层const和引用。</li>\n<li>注意：带括号的表达式或变量，使用decltype时，将必定！返回对应结果的引用类型。而且普通无多个括号时，只有表达式或变量是引用类型才为引用。<pre><code class=\"c++\">decltype((i)) d; // 错误，d的类型最终为int &amp;, 引用类型必须初始化才行</code></pre>\n</li>\n</ul>\n<h4 id=\"关于结构体\"><a href=\"#关于结构体\" class=\"headerlink\" title=\"关于结构体\"></a>关于结构体</h4><p>C++11新标准规定可以为结构体内的变量设置初始值</p>\n<h4 id=\"关于using的用法\"><a href=\"#关于using的用法\" class=\"headerlink\" title=\"关于using的用法\"></a>关于using的用法</h4><pre><code class=\"c++\"> using std:cin;\n using namespace std;</code></pre>\n<ul>\n<li>注意一般不要在头文件中使用using</li>\n</ul>\n<h4 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h4><ul>\n<li>string相加的注意<pre><code class=\"c++\">string s1 = &quot;H&quot;+&quot;s&quot;; //错误，无法确定为string类型</code></pre>\n</li>\n<li>string的size()返回的size_type，不确定具体类型，但一定是无符号的，所以比对时一定注意。</li>\n</ul>\n<h4 id=\"for-：-（C-11）\"><a href=\"#for-：-（C-11）\" class=\"headerlink\" title=\"for ： （C++ 11）\"></a>for ： （C++ 11）</h4><p>类似于foreach，for 与： 结合取出对象。</p>\n<h4 id=\"vector\"><a href=\"#vector\" class=\"headerlink\" title=\"vector\"></a>vector</h4><ul>\n<li>定义的方式：<pre><code class=\"c++\">vector&lt;int&gt; ivec;\nvector&lt;int&gt; ivec2(ivec);\nvector&lt;int&gt; ivec3 = ivec;\n//C++ 11\nvector&lt;int&gt; ivec4 = {5,6,7}\n</code></pre>\n</li>\n</ul>\n<p>//10个int类型的元素，且全部为-1<br>vector<int> vec(10,-1);<br>//10个int类型的元素，且全部为默认初始值<br>vector<int> vec2(10);</p>\n<pre><code>* 区别初始化vector时，花号与普通括号内的值的意义。\n* curly braces还可以智能识别，如果其内的第一位与vector不符，且为数字，则此第一位可以表示为初始化的长度。第二位必须与类型相符。\n\n* 添加元素： push_back. 注意不可用下标添加元素\n```c++\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n    // your code goes here\n    vector&lt;string&gt; myVec;\n    myVec.push_back(&quot;a&quot;);\n    myVec.push_back(&quot;b&quot;);\n    cout&lt;&lt; myVec[1] &lt;&lt; endl;\n    auto &amp;v = myVec[1];\n    v = &quot;c&quot;;\n    cout&lt;&lt; myVec[1]&lt;&lt;endl;\n    return 0;\n}</code></pre><h4 id=\"迭代器的使用\"><a href=\"#迭代器的使用\" class=\"headerlink\" title=\"迭代器的使用\"></a>迭代器的使用</h4><p>string与vector都有迭代器。但返回的类型是未知的。因此经常使用auto来接收。</p>\n<pre><code class=\"c++\">    // your code goes here\n    vector&lt;vector&lt;string&gt;&gt; myVec;\n    vector&lt;string&gt; iVec;\n    iVec.push_back(&quot;a&quot;);\n    myVec.push_back(iVec);\n\n    if(myVec.begin() != myVec.end()){\n        cout&lt;&lt; &quot;非空vector&quot;&lt;&lt;endl;\n        auto firstVec = myVec.begin();\n        auto &amp;v = (*firstVec)[0];\n        cout&lt;&lt; &quot;第一个值：&quot;&lt;&lt; v;\n        v = &quot;b&quot;;\n        cout&lt;&lt; &quot;改：第一个值：&quot;&lt;&lt; (*firstVec)[0];\n    }</code></pre>\n<ul>\n<li>C++中推荐尽量使用迭代器加!= 来做遍历。因为标准库的容器都定义了== !=。大部分没有定义&lt;比较。<pre><code class=\"c++\">  // your code goes here\n  vector&lt;int&gt; myVec = {5,9,7,5,8,2};\n  cout &lt;&lt; myVec[1]&lt;&lt;endl;\n  for(auto it = myVec.begin(); it != myVec.end() ; ++it){\n      cout&lt;&lt; *it &lt;&lt; endl; \n  }</code></pre>\n</li>\n<li>迭代器的表示：<br>除了用auto外，还可以使用：：iterator，或：：const_iterator表示常量vector或string。</li>\n</ul>\n<pre><code class=\"c++\">vector&lt;int&gt; a;\na.push_back(6);\nvector&lt;int&gt;::iterator it = a.begin();\ncout&lt;&lt; *it &lt;&lt; endl;</code></pre>\n<blockquote>\n<p>c++ 11 中引入 cbegin和cend用于表示vector的常量迭代器，返回永远是const_iterator.</p>\n</blockquote>\n<ul>\n<li><p>访问迭代器<br>使用C++的箭头， 将解引用与.运算符合在一起了。</p>\n<pre><code class=\"c++\">// (*it).mem //访问 解it引用后的成员mem\n//it -&gt;mem //与上面一样</code></pre>\n<blockquote>\n<p>特别注意，迭代器的循环不能添加元素，否则将破坏迭代器。</p>\n</blockquote>\n</li>\n<li><p>迭代器之间的运算：</p>\n</li>\n</ul>\n<p>+、- 一个数，表示移位置<br>+=、-=也适用<br>相减得到之间的距离：得到的类型为difference_type。为有符号类型。<br>大小比较根据位置而定</p>\n<h4 id=\"数组的使用\"><a href=\"#数组的使用\" class=\"headerlink\" title=\"数组的使用\"></a>数组的使用</h4><ul>\n<li><p>与vector区别，数组是定长的</p>\n</li>\n<li><p>不存在存引用的数组</p>\n<pre><code class=\"c++\">int arr[10];//定义含10个元素的数组\nint * parr[10];//含有10个整形指针的数组</code></pre>\n</li>\n<li><p>显示初始化：</p>\n<pre><code class=\"c++\">int a2[] = {0,2,1};// 自动设置维度为3</code></pre>\n</li>\n<li><p>特殊情况的初始化：字符数组初始化必须加一个’\\0‘结尾字符</p>\n<pre><code class=\"c++\">char a3[] = &quot;c++&quot;;//维度其实是4，因为会自动加一个结尾字符</code></pre>\n</li>\n<li><p>重要：存对象的数组不需要由另一个数组拷贝，也不需要赋值！</p>\n</li>\n<li><p>可以定义引用或指针数组来指向一个普通的数组：</p>\n<pre><code class=\"c++\">  int a[] = {1,5,3,6,8};\n  int (*b)[5] = &amp;a;\n  int (&amp;c)[5] = a;\n  cout &lt;&lt; a[0]&lt;&lt; endl;\n  cout &lt;&lt; *b[0]&lt;&lt;endl;\n  cout &lt;&lt; c[0]&lt;&lt;endl;</code></pre>\n</li>\n<li><p>数组的size跟vector一样也是size_type</p>\n</li>\n<li><p>指针与数组：</p>\n<pre><code class=\"c++\">string nums = {&quot;a&quot;,&quot;b&quot;,&quot;c&quot;};\nstring *p2 = nums;\n//string p2 = nums[0];//与上面等价</code></pre>\n</li>\n<li><p>对数组使用decltype关键字返回的是数组还不是指针。使用auto返回的是指针！</p>\n<pre><code class=\"c++\">  int a[] = {1,5,3,6,8};\n  auto b(a);//这是一个指针\n  decltype(a) c = {5,9,8,7};//这是一个数组</code></pre>\n</li>\n<li><p>指针其实也是一个迭代器，拥有之前迭代器的操作。<br>如用指针做迭代器输出：</p>\n<pre><code class=\"c++\">  for(int *i = a; i != &amp;a[5]; i++){\n      cout &lt;&lt; *i &lt;&lt; endl;\n  }</code></pre>\n</li>\n<li><p>C++ 11引入 begin和end函数用于取出数组的头尾指针位置。</p>\n<pre><code class=\"c++\">  for(int *i = begin(a); i != end(a); i++){\n      cout &lt;&lt; *i &lt;&lt; endl;\n  }</code></pre>\n<blockquote>\n<p>begin与end相减返回的类型为ptrdiff_t。与迭代器之差不同。但类型类似是符号数</p>\n</blockquote>\n</li>\n<li><p>指针当成数组用：数组下标与vector和string不同，不是无符号类型！。可为负数。</p>\n<pre><code>int *p = &amp;ia[2];\nint j = p[1];//与*(p+1)等价\nint k = p[-2];//返回ia[0]的元素</code></pre></li>\n</ul>\n<h4 id=\"C风格字符串\"><a href=\"#C风格字符串\" class=\"headerlink\" title=\"C风格字符串\"></a>C风格字符串</h4><ul>\n<li>C风格的字符串，操作的都是指针，而没有string对象的操作。</li>\n<li>C++中的cstring就是string.h的C++版本。</li>\n<li>使用C风格字符串，必须保证字符数组以’\\0’结尾，否则就会发生严重错误！</li>\n<li>常用函数<pre><code class=\"c\">strlen(p)\nstrcmp()//比较相等，相等返回0，大于为正值\nstrcat(p1,p2)//连接，p2加到p1,返回p1。必须保证p1能装得下p2\nstrcpy(p1,p2)//p2拷贝到p1，返回p1</code></pre>\n<blockquote>\n<p>使用C的字符串在估算数组长度时会充满风险，建议使用标准库string.</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"与旧代码兼容\"><a href=\"#与旧代码兼容\" class=\"headerlink\" title=\"与旧代码兼容\"></a>与旧代码兼容</h4><p>以下 C字符串意为： 以空字符结尾的字符数组 </p>\n<ul>\n<li><ol>\n<li>允许使用C字符串初始化 string，或为其赋值</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>string的加法运算，允许有一个C字符串</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>string的复合赋值，右侧可以为一个C字符串<br>此三个专为string标准库设计，反之如果是C字符则不行。但可以使用string.cstr()返回一个C字符串。如：<pre><code class=\"c++\">string s(&quot;Hello&quot;);\nchar * str = s;//错误，string不能给str赋值\nconst char *str = s.cstr();//正确，但如果一直要用此值，最好重新拷贝</code></pre>\n</li>\n</ol>\n</li>\n<li><p>以数组初始化vector</p>\n<pre><code class=\"c++\">int a[] = {1,5,3,6,8};\nvector&lt;int&gt; ivec(begin(a),end(a));\ncout &lt;&lt; ivec[0] &lt;&lt; endl;</code></pre>\n</li>\n</ul>\n<h4 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h4><p>本身C++是没有多维数组的，可以用一个指针嵌套的思想理解。从左往右的理解一个多维数组。<br>如3,4的数组表示数组有三个元素，每个元素又是一个有四个元素的数组</p>\n<ul>\n<li><p>定义，二维数组可理解为行和列，平铺式的定义是以一行一行的定义来：</p>\n<pre><code class=\"c++\">  int a[3][4] = {\n      {1,2,3,4},\n      {5,6,7,8},\n      {9,10,11,12}\n  };\n  int b[3][4] = {1,2,3,4,5,6,7,8,9,10,11,12};//与a等价</code></pre>\n</li>\n<li><p>遍历查值，除了用下标查找外，可以使用C++ 11的for</p>\n<pre><code class=\"c++\">int b[3][4] = {1,2,3,4,5,6,7,8,9,10,11,12};\n  for(auto &amp;row:b){//注意必须使用引用，因为否则auto将自动转成指针，无法进行下一步\n      for(auto &amp;i:row){\n          cout &lt;&lt; i &lt;&lt;endl;\n      }\n  }</code></pre>\n</li>\n<li><p>注意括号的使用：</p>\n<pre><code class=\"c++\">int *p[4];//一个有四个整型指针的数组\nint (*p)[4];//定义一个数组指针，指向四元素的数组</code></pre>\n</li>\n<li><p>使用auto遍历：</p>\n<pre><code class=\"c++\">  for(auto p = b;p != b+3;p++){\n      for(auto q = *p; q != (*p)+4; q++){\n          cout &lt;&lt; *q &lt;&lt;endl;\n      }\n  }\n  //当然可以使用begin和end函数</code></pre>\n</li>\n<li><p>使用类型别名来定义多维数组里的内部：</p>\n<pre><code class=\"c++\">using int_array = int[4];//c++11标准</code></pre>\n</li>\n</ul>\n<h4 id=\"运算符组合使用\"><a href=\"#运算符组合使用\" class=\"headerlink\" title=\"运算符组合使用\"></a>运算符组合使用</h4><p>注意++ 运算符优先级高于解引用优先级</p>\n<pre><code class=\"c++\">    int b[3][4] = {1,2,3,4,5,6,7,8,9,10,11,12};\n    auto p = begin(b[0]);\n    cout &lt;&lt; *p++ &lt;&lt; endl; //1\n    cout &lt;&lt; *p &lt;&lt; endl; //2\n    cout &lt;&lt; *++p &lt;&lt; endl; //3\n//*p++;//p为迭代器时，返回迭代器的值，同时地址往前移一位</code></pre>\n<h4 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h4><pre><code class=\"c++\">&lt;&lt; //左移运算符，将一个数的二进制向左移一定位数\n&gt;&gt; //右移运算符，将一个数的二进制向右移一定位数\n| //逻辑或，二进制相同位上的值，有一个为1则为1\n&amp; //逻辑与，二进制相同位上的值，都为1则为1\n^ //逻辑异或，二进制相同位上的值，相同则为0，不同则为1</code></pre>\n<p>*　优先级： 算术运算符 &gt;　移位运算符　＞条件运算符</p>\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><ul>\n<li>函数的形参会自动忽略顶层const。</li>\n<li>尽量将不改动的对象形参设为常量形参。以阻止调用时出错。</li>\n</ul>\n<h4 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h4><ul>\n<li>使用Inline定义内联函数</li>\n<li>当函数被声明为内联函数之后, 编译器会将其内联展开, 而不是按通常的函数调用机制进行调用.<blockquote>\n<p>在使用内联函数时要留神：</p>\n</blockquote>\n</li>\n</ul>\n<p>1.在内联函数内不允许使用循环语句和开关语句；<br>2.内联函数的定义必须出现在内联函数第一次调用之前；<br>3.类结构中所在的类说明内部定义的函数是内联函数。<br>Tip： 只有当函数只有 10 行甚至更少时才将其定义为内联函数.<br>优点: 当函数体比较小的时候, 内联该函数可以令目标代码更加高效. 对于存取函数以及其它函数体比较短, 性能关键的函数, 鼓励使用内联.<br>缺点: 滥用内联将导致程序变慢. 内联可能使目标代码量或增或减, 这取决于内联函数的大小. 内联非常短小的存取函数通常会减少代码大小, 但内联一个相当大的函数将戏剧性的增加代码大小. 现代处理器由于更好的利用了指令缓存, 小巧的代码往往执行更快。<br>结论: 一个较为合理的经验准则是, 不要内联超过 10 行的函数. 谨慎对待析构函数, 析构函数往往比其表面看起来要更长, 因为有隐含的成员和基类析构函数被调用!</p>\n<h4 id=\"类成员\"><a href=\"#类成员\" class=\"headerlink\" title=\"类成员\"></a>类成员</h4><ul>\n<li><p>C++11 标准中，将默认值声明成一个类内初始值：</p>\n<pre><code class=\"c++\">//类里定义\nstd::vector&lt;Screen&gt; screens{Screen(24, 80, &#39;&#39;)};</code></pre>\n</li>\n<li><p>返回值类型为引用与普通的区别</p>\n<pre><code class=\"c++\">//如下如果改为返回Screen对象而非引用，将导致访问到的只是拷贝\nScreen &amp;Screen::set(pos r)\n{\n  contents[r] = 10;\n  return *this;\n}</code></pre>\n</li>\n<li><p>如果一个const成员函数以引用形式返回 * this, 则其返回类型是常量引用。因此如下代码无法执行</p>\n<pre><code class=\"c++\">//假定display为返回const\nmyScreen.display(cout).set(&#39;s&#39;);</code></pre>\n</li>\n</ul>\n"},{"title":"DOTS-事件","_content":"\n### 方式一、使用NativeQueue循环检测\n* 1. 获取JOB可写的多线程NativeQueue对象\n```c#\nNativeQueue<PipePassedEvent>.ParallelWriter eventQueueParallel = eventQueue.AsParallelWriter();\n```\n\n* 2. 发出事件\n```c#\neventQueueParallel.Enqueue(new PipePassedEvent());\n```\n\n* 3. 事件机\n```c#\nwhile (eventQueue.TryDequeue(out PipePassedEvent evnt))\n        {\n            //Debug.Log(\"Get EVENT!!\");\n            OnPipePassed?.Invoke(this, EventArgs.Empty);\n        }\n```\n\n4.接收事件\n```c#\nWorld.DefaultGameObjectInjectionWorld.GetOrCreateSystem<PipeMoveSystem_Done>().OnPipePassed += TestingDOTSEvents_OnPipePassed;\n```\n\n\n### 方式二、使用EntityCommandBuffer\n\n* 1. 获取CommandBuffer的System\n* 2. 从System中创建一个commandbuffer, 并拿其Concurrent\n* 3. 利用2的concurrent就可以在job中创建一个entity.\n* 4.使用Entities.WithoutBurst().ForEach执行触发事件，并在触发完后一定将entity删除掉。\n\n```c#\n EntityCommandBuffer entityCommandBuffer = endSimulationEntityCommandBufferSystem.CreateCommandBuffer();\n        EntityCommandBuffer.Concurrent entityCommandBufferConcurrent = entityCommandBuffer.ToConcurrent();\n        EntityArchetype eventEntityArchetype = EntityManager.CreateArchetype(typeof(EventComponent));\n\n        double ElapsedTime = Time.ElapsedTime;\n\n        JobHandle jobHandle = Entities.ForEach((int entityInQueryIndex, ref Translation translation, ref Pipe pipe) => {\n            float xBefore = translation.Value.x;\n            translation.Value += moveDir * moveSpeed * deltaTime;\n            float xAfter = translation.Value.x;\n\n            if (pipe.isBottom && xBefore > 0 && xAfter <= 0) {\n                // Passed the Player\n                Entity eventEntity = entityCommandBufferConcurrent.CreateEntity(entityInQueryIndex, eventEntityArchetype);\n                entityCommandBufferConcurrent.SetComponent(entityInQueryIndex, eventEntity, new EventComponent {\n                    ElapsedTime = ElapsedTime\n                });\n            }\n        }).Schedule(inputDeps);\n\n        endSimulationEntityCommandBufferSystem.AddJobHandleForProducer(jobHandle);\n\n        EntityCommandBuffer captureEventsEntityCommandBuffer = endSimulationEntityCommandBufferSystem.CreateCommandBuffer();\n\n        Entities.WithoutBurst().ForEach((Entity entity, ref EventComponent eventComponent) => {\n            Debug.Log(eventComponent.ElapsedTime + \" ### \" + ElapsedTime);\n            OnPipePassed?.Invoke(this, EventArgs.Empty);\n            captureEventsEntityCommandBuffer.DestroyEntity(entity);\n        }).Run();\n```\n\n>  不用EndSimulationEntityCommandBufferSystem 也可以直接定义EntityCommandBuffer。只要在 job complete时，手动dispose()即可。\n```c#\nentityCommandBuffer.Playback(EntityManager);\n        entityCommandBuffer.Dispose();\n```","source":"_posts/DOTS-事件.md","raw":"---\ntitle: DOTS-事件\ncategories:\n- Unity\n---\n\n### 方式一、使用NativeQueue循环检测\n* 1. 获取JOB可写的多线程NativeQueue对象\n```c#\nNativeQueue<PipePassedEvent>.ParallelWriter eventQueueParallel = eventQueue.AsParallelWriter();\n```\n\n* 2. 发出事件\n```c#\neventQueueParallel.Enqueue(new PipePassedEvent());\n```\n\n* 3. 事件机\n```c#\nwhile (eventQueue.TryDequeue(out PipePassedEvent evnt))\n        {\n            //Debug.Log(\"Get EVENT!!\");\n            OnPipePassed?.Invoke(this, EventArgs.Empty);\n        }\n```\n\n4.接收事件\n```c#\nWorld.DefaultGameObjectInjectionWorld.GetOrCreateSystem<PipeMoveSystem_Done>().OnPipePassed += TestingDOTSEvents_OnPipePassed;\n```\n\n\n### 方式二、使用EntityCommandBuffer\n\n* 1. 获取CommandBuffer的System\n* 2. 从System中创建一个commandbuffer, 并拿其Concurrent\n* 3. 利用2的concurrent就可以在job中创建一个entity.\n* 4.使用Entities.WithoutBurst().ForEach执行触发事件，并在触发完后一定将entity删除掉。\n\n```c#\n EntityCommandBuffer entityCommandBuffer = endSimulationEntityCommandBufferSystem.CreateCommandBuffer();\n        EntityCommandBuffer.Concurrent entityCommandBufferConcurrent = entityCommandBuffer.ToConcurrent();\n        EntityArchetype eventEntityArchetype = EntityManager.CreateArchetype(typeof(EventComponent));\n\n        double ElapsedTime = Time.ElapsedTime;\n\n        JobHandle jobHandle = Entities.ForEach((int entityInQueryIndex, ref Translation translation, ref Pipe pipe) => {\n            float xBefore = translation.Value.x;\n            translation.Value += moveDir * moveSpeed * deltaTime;\n            float xAfter = translation.Value.x;\n\n            if (pipe.isBottom && xBefore > 0 && xAfter <= 0) {\n                // Passed the Player\n                Entity eventEntity = entityCommandBufferConcurrent.CreateEntity(entityInQueryIndex, eventEntityArchetype);\n                entityCommandBufferConcurrent.SetComponent(entityInQueryIndex, eventEntity, new EventComponent {\n                    ElapsedTime = ElapsedTime\n                });\n            }\n        }).Schedule(inputDeps);\n\n        endSimulationEntityCommandBufferSystem.AddJobHandleForProducer(jobHandle);\n\n        EntityCommandBuffer captureEventsEntityCommandBuffer = endSimulationEntityCommandBufferSystem.CreateCommandBuffer();\n\n        Entities.WithoutBurst().ForEach((Entity entity, ref EventComponent eventComponent) => {\n            Debug.Log(eventComponent.ElapsedTime + \" ### \" + ElapsedTime);\n            OnPipePassed?.Invoke(this, EventArgs.Empty);\n            captureEventsEntityCommandBuffer.DestroyEntity(entity);\n        }).Run();\n```\n\n>  不用EndSimulationEntityCommandBufferSystem 也可以直接定义EntityCommandBuffer。只要在 job complete时，手动dispose()即可。\n```c#\nentityCommandBuffer.Playback(EntityManager);\n        entityCommandBuffer.Dispose();\n```","slug":"DOTS-事件","published":1,"date":"2020-09-08T03:23:20.714Z","updated":"2020-09-08T03:23:20.714Z","_id":"ckdpcluxc00058sr3k3pi52v6","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"方式一、使用NativeQueue循环检测\"><a href=\"#方式一、使用NativeQueue循环检测\" class=\"headerlink\" title=\"方式一、使用NativeQueue循环检测\"></a>方式一、使用NativeQueue循环检测</h3><ul>\n<li><ol>\n<li>获取JOB可写的多线程NativeQueue对象<pre><code class=\"c#\">NativeQueue&lt;PipePassedEvent&gt;.ParallelWriter eventQueueParallel = eventQueue.AsParallelWriter();</code></pre>\n</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>发出事件<pre><code class=\"c#\">eventQueueParallel.Enqueue(new PipePassedEvent());</code></pre>\n</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>事件机<pre><code class=\"c#\">while (eventQueue.TryDequeue(out PipePassedEvent evnt))\n   {\n       //Debug.Log(&quot;Get EVENT!!&quot;);\n       OnPipePassed?.Invoke(this, EventArgs.Empty);\n   }</code></pre>\n</li>\n</ol>\n</li>\n</ul>\n<p>4.接收事件</p>\n<pre><code class=\"c#\">World.DefaultGameObjectInjectionWorld.GetOrCreateSystem&lt;PipeMoveSystem_Done&gt;().OnPipePassed += TestingDOTSEvents_OnPipePassed;</code></pre>\n<h3 id=\"方式二、使用EntityCommandBuffer\"><a href=\"#方式二、使用EntityCommandBuffer\" class=\"headerlink\" title=\"方式二、使用EntityCommandBuffer\"></a>方式二、使用EntityCommandBuffer</h3><ul>\n<li><ol>\n<li>获取CommandBuffer的System</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>从System中创建一个commandbuffer, 并拿其Concurrent</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>利用2的concurrent就可以在job中创建一个entity.</li>\n</ol>\n</li>\n<li>4.使用Entities.WithoutBurst().ForEach执行触发事件，并在触发完后一定将entity删除掉。</li>\n</ul>\n<pre><code class=\"c#\"> EntityCommandBuffer entityCommandBuffer = endSimulationEntityCommandBufferSystem.CreateCommandBuffer();\n        EntityCommandBuffer.Concurrent entityCommandBufferConcurrent = entityCommandBuffer.ToConcurrent();\n        EntityArchetype eventEntityArchetype = EntityManager.CreateArchetype(typeof(EventComponent));\n\n        double ElapsedTime = Time.ElapsedTime;\n\n        JobHandle jobHandle = Entities.ForEach((int entityInQueryIndex, ref Translation translation, ref Pipe pipe) =&gt; {\n            float xBefore = translation.Value.x;\n            translation.Value += moveDir * moveSpeed * deltaTime;\n            float xAfter = translation.Value.x;\n\n            if (pipe.isBottom &amp;&amp; xBefore &gt; 0 &amp;&amp; xAfter &lt;= 0) {\n                // Passed the Player\n                Entity eventEntity = entityCommandBufferConcurrent.CreateEntity(entityInQueryIndex, eventEntityArchetype);\n                entityCommandBufferConcurrent.SetComponent(entityInQueryIndex, eventEntity, new EventComponent {\n                    ElapsedTime = ElapsedTime\n                });\n            }\n        }).Schedule(inputDeps);\n\n        endSimulationEntityCommandBufferSystem.AddJobHandleForProducer(jobHandle);\n\n        EntityCommandBuffer captureEventsEntityCommandBuffer = endSimulationEntityCommandBufferSystem.CreateCommandBuffer();\n\n        Entities.WithoutBurst().ForEach((Entity entity, ref EventComponent eventComponent) =&gt; {\n            Debug.Log(eventComponent.ElapsedTime + &quot; ### &quot; + ElapsedTime);\n            OnPipePassed?.Invoke(this, EventArgs.Empty);\n            captureEventsEntityCommandBuffer.DestroyEntity(entity);\n        }).Run();</code></pre>\n<blockquote>\n<p> 不用EndSimulationEntityCommandBufferSystem 也可以直接定义EntityCommandBuffer。只要在 job complete时，手动dispose()即可。</p>\n</blockquote>\n<pre><code class=\"c#\">entityCommandBuffer.Playback(EntityManager);\n        entityCommandBuffer.Dispose();</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"方式一、使用NativeQueue循环检测\"><a href=\"#方式一、使用NativeQueue循环检测\" class=\"headerlink\" title=\"方式一、使用NativeQueue循环检测\"></a>方式一、使用NativeQueue循环检测</h3><ul>\n<li><ol>\n<li>获取JOB可写的多线程NativeQueue对象<pre><code class=\"c#\">NativeQueue&lt;PipePassedEvent&gt;.ParallelWriter eventQueueParallel = eventQueue.AsParallelWriter();</code></pre>\n</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>发出事件<pre><code class=\"c#\">eventQueueParallel.Enqueue(new PipePassedEvent());</code></pre>\n</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>事件机<pre><code class=\"c#\">while (eventQueue.TryDequeue(out PipePassedEvent evnt))\n   {\n       //Debug.Log(&quot;Get EVENT!!&quot;);\n       OnPipePassed?.Invoke(this, EventArgs.Empty);\n   }</code></pre>\n</li>\n</ol>\n</li>\n</ul>\n<p>4.接收事件</p>\n<pre><code class=\"c#\">World.DefaultGameObjectInjectionWorld.GetOrCreateSystem&lt;PipeMoveSystem_Done&gt;().OnPipePassed += TestingDOTSEvents_OnPipePassed;</code></pre>\n<h3 id=\"方式二、使用EntityCommandBuffer\"><a href=\"#方式二、使用EntityCommandBuffer\" class=\"headerlink\" title=\"方式二、使用EntityCommandBuffer\"></a>方式二、使用EntityCommandBuffer</h3><ul>\n<li><ol>\n<li>获取CommandBuffer的System</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>从System中创建一个commandbuffer, 并拿其Concurrent</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>利用2的concurrent就可以在job中创建一个entity.</li>\n</ol>\n</li>\n<li>4.使用Entities.WithoutBurst().ForEach执行触发事件，并在触发完后一定将entity删除掉。</li>\n</ul>\n<pre><code class=\"c#\"> EntityCommandBuffer entityCommandBuffer = endSimulationEntityCommandBufferSystem.CreateCommandBuffer();\n        EntityCommandBuffer.Concurrent entityCommandBufferConcurrent = entityCommandBuffer.ToConcurrent();\n        EntityArchetype eventEntityArchetype = EntityManager.CreateArchetype(typeof(EventComponent));\n\n        double ElapsedTime = Time.ElapsedTime;\n\n        JobHandle jobHandle = Entities.ForEach((int entityInQueryIndex, ref Translation translation, ref Pipe pipe) =&gt; {\n            float xBefore = translation.Value.x;\n            translation.Value += moveDir * moveSpeed * deltaTime;\n            float xAfter = translation.Value.x;\n\n            if (pipe.isBottom &amp;&amp; xBefore &gt; 0 &amp;&amp; xAfter &lt;= 0) {\n                // Passed the Player\n                Entity eventEntity = entityCommandBufferConcurrent.CreateEntity(entityInQueryIndex, eventEntityArchetype);\n                entityCommandBufferConcurrent.SetComponent(entityInQueryIndex, eventEntity, new EventComponent {\n                    ElapsedTime = ElapsedTime\n                });\n            }\n        }).Schedule(inputDeps);\n\n        endSimulationEntityCommandBufferSystem.AddJobHandleForProducer(jobHandle);\n\n        EntityCommandBuffer captureEventsEntityCommandBuffer = endSimulationEntityCommandBufferSystem.CreateCommandBuffer();\n\n        Entities.WithoutBurst().ForEach((Entity entity, ref EventComponent eventComponent) =&gt; {\n            Debug.Log(eventComponent.ElapsedTime + &quot; ### &quot; + ElapsedTime);\n            OnPipePassed?.Invoke(this, EventArgs.Empty);\n            captureEventsEntityCommandBuffer.DestroyEntity(entity);\n        }).Run();</code></pre>\n<blockquote>\n<p> 不用EndSimulationEntityCommandBufferSystem 也可以直接定义EntityCommandBuffer。只要在 job complete时，手动dispose()即可。</p>\n</blockquote>\n<pre><code class=\"c#\">entityCommandBuffer.Playback(EntityManager);\n        entityCommandBuffer.Dispose();</code></pre>\n"},{"title":"Conda 常用操作","_content":"\n\n### Conda介绍\n\n> Conda 是一个开源的软件包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。 Conda 是为 Python 程序创建的，适用于 Linux，OS X 和Windows，也可以打包和分发其他软件。\n\n### 下载&安装\n> conda官网：https://conda.io/miniconda.html\n\nlinux或mac ox版本：\n\n```\nwget -c https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n\nchmod 777 Miniconda3-latest-Linux-x86_64.sh #给执行权限\nbash Miniconda3-latest-Linux-x86_64.sh #运行\n```\n\n> 当命令行前面出现(base)的时候说明现在已经在conda的环境中了。这时候输入conda list 命令就有反应了\n\n\n###  添加频道\n\n官方频道\n \n```\nconda config --add channels bioconda\nconda config --add channels conda-forge\n```\n\n 清华镜像\n  \n``` \nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda\n```\n\n其他：\n\n``` \nconda config --add channels genomedk\n```\n\n显示安装的频道\n\n``` \n conda config --set show_channel_urls yes \n ``` \n \n查看已经添加的channels\n\n``` \nconda config --get channels\n``` \n\n已添加的channel在哪里查看\n\n``` \nvim ~/.condarc\n``` \n\n### 创建环境\n\n如创建一个python2.7环境且名为mysite\n\n``` \nconda create -n mysite python=2.7\n``` \n\n### 激活、退出环境\n\n激活：\nwindows环境下不用加conda前缀，mac及旧版本下可能需要使用source activate\n\n```\nconda activate mysite\n```\n\n退出：\n同激活\n\n``` \nconda deactivate mysite\n```\n\n### 删除环境\n\n``` \nconda remove -n mysite --all\n```\n\n### 重命名环境\n\n把一个原来叫做py2的环境重新命名成python2：\n\n``` \nconda create -n python2 --clone py2\nconda remove -n py2 --all\n```\n\n\n\n\n","source":"_posts/Conda 常用操作.md","raw":"---\ntitle: Conda 常用操作\ncategories:\n- Python\ntags: \n- Python\n- Note\n- Django\n- Conda\n---\n\n\n### Conda介绍\n\n> Conda 是一个开源的软件包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。 Conda 是为 Python 程序创建的，适用于 Linux，OS X 和Windows，也可以打包和分发其他软件。\n\n### 下载&安装\n> conda官网：https://conda.io/miniconda.html\n\nlinux或mac ox版本：\n\n```\nwget -c https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n\nchmod 777 Miniconda3-latest-Linux-x86_64.sh #给执行权限\nbash Miniconda3-latest-Linux-x86_64.sh #运行\n```\n\n> 当命令行前面出现(base)的时候说明现在已经在conda的环境中了。这时候输入conda list 命令就有反应了\n\n\n###  添加频道\n\n官方频道\n \n```\nconda config --add channels bioconda\nconda config --add channels conda-forge\n```\n\n 清华镜像\n  \n``` \nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda\n```\n\n其他：\n\n``` \nconda config --add channels genomedk\n```\n\n显示安装的频道\n\n``` \n conda config --set show_channel_urls yes \n ``` \n \n查看已经添加的channels\n\n``` \nconda config --get channels\n``` \n\n已添加的channel在哪里查看\n\n``` \nvim ~/.condarc\n``` \n\n### 创建环境\n\n如创建一个python2.7环境且名为mysite\n\n``` \nconda create -n mysite python=2.7\n``` \n\n### 激活、退出环境\n\n激活：\nwindows环境下不用加conda前缀，mac及旧版本下可能需要使用source activate\n\n```\nconda activate mysite\n```\n\n退出：\n同激活\n\n``` \nconda deactivate mysite\n```\n\n### 删除环境\n\n``` \nconda remove -n mysite --all\n```\n\n### 重命名环境\n\n把一个原来叫做py2的环境重新命名成python2：\n\n``` \nconda create -n python2 --clone py2\nconda remove -n py2 --all\n```\n\n\n\n\n","slug":"Conda 常用操作","published":1,"date":"2020-09-08T03:23:20.714Z","updated":"2020-09-08T03:23:20.714Z","_id":"ckdpcluxe00068sr30velonlp","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Conda介绍\"><a href=\"#Conda介绍\" class=\"headerlink\" title=\"Conda介绍\"></a>Conda介绍</h3><blockquote>\n<p>Conda 是一个开源的软件包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。 Conda 是为 Python 程序创建的，适用于 Linux，OS X 和Windows，也可以打包和分发其他软件。</p>\n</blockquote>\n<h3 id=\"下载-amp-安装\"><a href=\"#下载-amp-安装\" class=\"headerlink\" title=\"下载&amp;安装\"></a>下载&amp;安装</h3><blockquote>\n<p>conda官网：<a href=\"https://conda.io/miniconda.html\">https://conda.io/miniconda.html</a></p>\n</blockquote>\n<p>linux或mac ox版本：</p>\n<pre><code>wget -c https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n\nchmod 777 Miniconda3-latest-Linux-x86_64.sh #给执行权限\nbash Miniconda3-latest-Linux-x86_64.sh #运行</code></pre><blockquote>\n<p>当命令行前面出现(base)的时候说明现在已经在conda的环境中了。这时候输入conda list 命令就有反应了</p>\n</blockquote>\n<h3 id=\"添加频道\"><a href=\"#添加频道\" class=\"headerlink\" title=\"添加频道\"></a>添加频道</h3><p>官方频道</p>\n<pre><code>conda config --add channels bioconda\nconda config --add channels conda-forge</code></pre><p> 清华镜像</p>\n<pre><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda</code></pre><p>其他：</p>\n<pre><code>conda config --add channels genomedk</code></pre><p>显示安装的频道</p>\n<pre><code> conda config --set show_channel_urls yes </code></pre><p>查看已经添加的channels</p>\n<pre><code>conda config --get channels</code></pre><p>已添加的channel在哪里查看</p>\n<pre><code>vim ~/.condarc</code></pre><h3 id=\"创建环境\"><a href=\"#创建环境\" class=\"headerlink\" title=\"创建环境\"></a>创建环境</h3><p>如创建一个python2.7环境且名为mysite</p>\n<pre><code>conda create -n mysite python=2.7</code></pre><h3 id=\"激活、退出环境\"><a href=\"#激活、退出环境\" class=\"headerlink\" title=\"激活、退出环境\"></a>激活、退出环境</h3><p>激活：<br>windows环境下不用加conda前缀，mac及旧版本下可能需要使用source activate</p>\n<pre><code>conda activate mysite</code></pre><p>退出：<br>同激活</p>\n<pre><code>conda deactivate mysite</code></pre><h3 id=\"删除环境\"><a href=\"#删除环境\" class=\"headerlink\" title=\"删除环境\"></a>删除环境</h3><pre><code>conda remove -n mysite --all</code></pre><h3 id=\"重命名环境\"><a href=\"#重命名环境\" class=\"headerlink\" title=\"重命名环境\"></a>重命名环境</h3><p>把一个原来叫做py2的环境重新命名成python2：</p>\n<pre><code>conda create -n python2 --clone py2\nconda remove -n py2 --all</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Conda介绍\"><a href=\"#Conda介绍\" class=\"headerlink\" title=\"Conda介绍\"></a>Conda介绍</h3><blockquote>\n<p>Conda 是一个开源的软件包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。 Conda 是为 Python 程序创建的，适用于 Linux，OS X 和Windows，也可以打包和分发其他软件。</p>\n</blockquote>\n<h3 id=\"下载-amp-安装\"><a href=\"#下载-amp-安装\" class=\"headerlink\" title=\"下载&amp;安装\"></a>下载&amp;安装</h3><blockquote>\n<p>conda官网：<a href=\"https://conda.io/miniconda.html\">https://conda.io/miniconda.html</a></p>\n</blockquote>\n<p>linux或mac ox版本：</p>\n<pre><code>wget -c https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n\nchmod 777 Miniconda3-latest-Linux-x86_64.sh #给执行权限\nbash Miniconda3-latest-Linux-x86_64.sh #运行</code></pre><blockquote>\n<p>当命令行前面出现(base)的时候说明现在已经在conda的环境中了。这时候输入conda list 命令就有反应了</p>\n</blockquote>\n<h3 id=\"添加频道\"><a href=\"#添加频道\" class=\"headerlink\" title=\"添加频道\"></a>添加频道</h3><p>官方频道</p>\n<pre><code>conda config --add channels bioconda\nconda config --add channels conda-forge</code></pre><p> 清华镜像</p>\n<pre><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda</code></pre><p>其他：</p>\n<pre><code>conda config --add channels genomedk</code></pre><p>显示安装的频道</p>\n<pre><code> conda config --set show_channel_urls yes </code></pre><p>查看已经添加的channels</p>\n<pre><code>conda config --get channels</code></pre><p>已添加的channel在哪里查看</p>\n<pre><code>vim ~/.condarc</code></pre><h3 id=\"创建环境\"><a href=\"#创建环境\" class=\"headerlink\" title=\"创建环境\"></a>创建环境</h3><p>如创建一个python2.7环境且名为mysite</p>\n<pre><code>conda create -n mysite python=2.7</code></pre><h3 id=\"激活、退出环境\"><a href=\"#激活、退出环境\" class=\"headerlink\" title=\"激活、退出环境\"></a>激活、退出环境</h3><p>激活：<br>windows环境下不用加conda前缀，mac及旧版本下可能需要使用source activate</p>\n<pre><code>conda activate mysite</code></pre><p>退出：<br>同激活</p>\n<pre><code>conda deactivate mysite</code></pre><h3 id=\"删除环境\"><a href=\"#删除环境\" class=\"headerlink\" title=\"删除环境\"></a>删除环境</h3><pre><code>conda remove -n mysite --all</code></pre><h3 id=\"重命名环境\"><a href=\"#重命名环境\" class=\"headerlink\" title=\"重命名环境\"></a>重命名环境</h3><p>把一个原来叫做py2的环境重新命名成python2：</p>\n<pre><code>conda create -n python2 --clone py2\nconda remove -n py2 --all</code></pre>"},{"title":"C与C++开源项目学习","_content":"\n来自www.codesheep.cn 作者推荐\n\n#### CJson\n实现在一个C语言的JSON解析器\nhttps://sourceforge.net/projects/cjson\n\n#### TinyHttpd\n实现一个C语言简单的HTTP服务器\nhttps://github.com/ezlippi/tinyhttpd\n\n#### MyTinySTL\n实现了一个STL库\nhttps://github.com/alinshans/mytinystl\n\n#### OATPP\n纯C++的高性能无依赖的WEB框架\nhttps://github.com/oatpp/oatpp\n\n#### Redis\n\nhttps://redis.io\n\n#### nginx\n超轻量级静态服务器","source":"_posts/C与C++开源项目学习.md","raw":"---\ntitle: C与C++开源项目学习\ncategories:\n- CPlusPlus\ntags: \n- C++\n---\n\n来自www.codesheep.cn 作者推荐\n\n#### CJson\n实现在一个C语言的JSON解析器\nhttps://sourceforge.net/projects/cjson\n\n#### TinyHttpd\n实现一个C语言简单的HTTP服务器\nhttps://github.com/ezlippi/tinyhttpd\n\n#### MyTinySTL\n实现了一个STL库\nhttps://github.com/alinshans/mytinystl\n\n#### OATPP\n纯C++的高性能无依赖的WEB框架\nhttps://github.com/oatpp/oatpp\n\n#### Redis\n\nhttps://redis.io\n\n#### nginx\n超轻量级静态服务器","slug":"C与C++开源项目学习","published":1,"date":"2020-09-08T03:23:20.714Z","updated":"2020-09-08T03:23:20.714Z","_id":"ckdpcluxg000a8sr3338ku06b","comments":1,"layout":"post","photos":[],"link":"","content":"<p>来自<a href=\"http://www.codesheep.cn\">www.codesheep.cn</a> 作者推荐</p>\n<h4 id=\"CJson\"><a href=\"#CJson\" class=\"headerlink\" title=\"CJson\"></a>CJson</h4><p>实现在一个C语言的JSON解析器<br><a href=\"https://sourceforge.net/projects/cjson\">https://sourceforge.net/projects/cjson</a></p>\n<h4 id=\"TinyHttpd\"><a href=\"#TinyHttpd\" class=\"headerlink\" title=\"TinyHttpd\"></a>TinyHttpd</h4><p>实现一个C语言简单的HTTP服务器<br><a href=\"https://github.com/ezlippi/tinyhttpd\">https://github.com/ezlippi/tinyhttpd</a></p>\n<h4 id=\"MyTinySTL\"><a href=\"#MyTinySTL\" class=\"headerlink\" title=\"MyTinySTL\"></a>MyTinySTL</h4><p>实现了一个STL库<br><a href=\"https://github.com/alinshans/mytinystl\">https://github.com/alinshans/mytinystl</a></p>\n<h4 id=\"OATPP\"><a href=\"#OATPP\" class=\"headerlink\" title=\"OATPP\"></a>OATPP</h4><p>纯C++的高性能无依赖的WEB框架<br><a href=\"https://github.com/oatpp/oatpp\">https://github.com/oatpp/oatpp</a></p>\n<h4 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h4><p><a href=\"https://redis.io\">https://redis.io</a></p>\n<h4 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h4><p>超轻量级静态服务器</p>\n","site":{"data":{}},"excerpt":"","more":"<p>来自<a href=\"http://www.codesheep.cn\">www.codesheep.cn</a> 作者推荐</p>\n<h4 id=\"CJson\"><a href=\"#CJson\" class=\"headerlink\" title=\"CJson\"></a>CJson</h4><p>实现在一个C语言的JSON解析器<br><a href=\"https://sourceforge.net/projects/cjson\">https://sourceforge.net/projects/cjson</a></p>\n<h4 id=\"TinyHttpd\"><a href=\"#TinyHttpd\" class=\"headerlink\" title=\"TinyHttpd\"></a>TinyHttpd</h4><p>实现一个C语言简单的HTTP服务器<br><a href=\"https://github.com/ezlippi/tinyhttpd\">https://github.com/ezlippi/tinyhttpd</a></p>\n<h4 id=\"MyTinySTL\"><a href=\"#MyTinySTL\" class=\"headerlink\" title=\"MyTinySTL\"></a>MyTinySTL</h4><p>实现了一个STL库<br><a href=\"https://github.com/alinshans/mytinystl\">https://github.com/alinshans/mytinystl</a></p>\n<h4 id=\"OATPP\"><a href=\"#OATPP\" class=\"headerlink\" title=\"OATPP\"></a>OATPP</h4><p>纯C++的高性能无依赖的WEB框架<br><a href=\"https://github.com/oatpp/oatpp\">https://github.com/oatpp/oatpp</a></p>\n<h4 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h4><p><a href=\"https://redis.io\">https://redis.io</a></p>\n<h4 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h4><p>超轻量级静态服务器</p>\n"},{"title":"Django  初始测试","_content":"\n### 使用models.py 创建数据库\n\n> 注意事项：\n>1、makemigrations 和 migrate 工作原理分别是什么：\nmakemigrations：根据检测到的模型创建新的迁移。迁移的作用，更多的是将数据库的操作，以文件的形式记录下来，方便以后检查、调用、重做等等。\nmigrate：使数据库状态与当前模型集和迁移集同步。说白了，就是将对数据库的更改，主要是数据表设计的更改，在数据库中真实执行。例如，新建、修改、删除数据表，新增、修改、删除某数据表内的字段等等。\n2、如果不想使用 Django 的 makemigrations 和 migrate 功能，但是不小心执行了这两个命令会发生什么，\n首先在该app下建立 migrations目录，并记录下你所有的关于modes.py的改动，比如0001_initial.py，\n接着执行migrate的话，这时候会作用到数据库文件，产生对应的表\n3、官方解释：\n运行 python manage.py makemigrations 为模型的改变生成迁移文件。\n运行 python manage.py migrate 来应用数据库迁移。\n参考： https://blog.csdn.net/weixin_43507484/article/details/87950788\n\n> 1. 先执行一下迁移\n\n\n> 2. 编辑app里的models.py\n如：\n\n```\nfrom django.db import models\n\n\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField('date published')\n\n\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)\n```\n\n> 3. 激活模型\n\n```\n#mysite/settings.py\nINSTALLED_APPS = [\n    'polls.apps.PollsConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```\n\n> 4. 执行生成数据库\n\n\n```\npython manage.py makemigrations polls\n```\n\n输出迁移过程中可能执行的sql\n\n```\npython manage.py sqlmigrate polls 0001\n```\n\n最后，正式执行迁移\n\n```\npython manage.py migrate\n```\n\n\n\n### 使用API\n\n进入项目的Python控制台\n\n```\npython manage.py shell\n\nfrom polls.models import Choice, Question  # Import the model classes we just wrote.\nQuestion.objects.all()\n```\n\n给模型添加__str__()函数，这样默认输出将会改变\n\n```\nfrom django.db import models\n\nclass Question(models.Model):\n    # ...\n    def __str__(self):\n        return self.question_text\n\nclass Choice(models.Model):\n    # ...\n    def __str__(self):\n        return self.choice_text\n```\n\n\n\n### 使用管理员账号\n\n```\npython manage.py createsuperuser\n```\n\n此时进入xxxx/admin网址，登录就可看到数据库资源\n\n```\npython manage.py runserver\n```\n\n加入我们的项目\n\n```\nfrom django.contrib import admin\n\nfrom .models import Question\n\nadmin.site.register(Question)\n```\n\n无需重启，直接刷新就可以看到项目在主界面\n\n\n","source":"_posts/Django  初始测试.md","raw":"---\ntitle: Django  初始测试\ncategories:\n- Python\ntags: \n- Python\n- Note\n- Django\n---\n\n### 使用models.py 创建数据库\n\n> 注意事项：\n>1、makemigrations 和 migrate 工作原理分别是什么：\nmakemigrations：根据检测到的模型创建新的迁移。迁移的作用，更多的是将数据库的操作，以文件的形式记录下来，方便以后检查、调用、重做等等。\nmigrate：使数据库状态与当前模型集和迁移集同步。说白了，就是将对数据库的更改，主要是数据表设计的更改，在数据库中真实执行。例如，新建、修改、删除数据表，新增、修改、删除某数据表内的字段等等。\n2、如果不想使用 Django 的 makemigrations 和 migrate 功能，但是不小心执行了这两个命令会发生什么，\n首先在该app下建立 migrations目录，并记录下你所有的关于modes.py的改动，比如0001_initial.py，\n接着执行migrate的话，这时候会作用到数据库文件，产生对应的表\n3、官方解释：\n运行 python manage.py makemigrations 为模型的改变生成迁移文件。\n运行 python manage.py migrate 来应用数据库迁移。\n参考： https://blog.csdn.net/weixin_43507484/article/details/87950788\n\n> 1. 先执行一下迁移\n\n\n> 2. 编辑app里的models.py\n如：\n\n```\nfrom django.db import models\n\n\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField('date published')\n\n\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)\n```\n\n> 3. 激活模型\n\n```\n#mysite/settings.py\nINSTALLED_APPS = [\n    'polls.apps.PollsConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```\n\n> 4. 执行生成数据库\n\n\n```\npython manage.py makemigrations polls\n```\n\n输出迁移过程中可能执行的sql\n\n```\npython manage.py sqlmigrate polls 0001\n```\n\n最后，正式执行迁移\n\n```\npython manage.py migrate\n```\n\n\n\n### 使用API\n\n进入项目的Python控制台\n\n```\npython manage.py shell\n\nfrom polls.models import Choice, Question  # Import the model classes we just wrote.\nQuestion.objects.all()\n```\n\n给模型添加__str__()函数，这样默认输出将会改变\n\n```\nfrom django.db import models\n\nclass Question(models.Model):\n    # ...\n    def __str__(self):\n        return self.question_text\n\nclass Choice(models.Model):\n    # ...\n    def __str__(self):\n        return self.choice_text\n```\n\n\n\n### 使用管理员账号\n\n```\npython manage.py createsuperuser\n```\n\n此时进入xxxx/admin网址，登录就可看到数据库资源\n\n```\npython manage.py runserver\n```\n\n加入我们的项目\n\n```\nfrom django.contrib import admin\n\nfrom .models import Question\n\nadmin.site.register(Question)\n```\n\n无需重启，直接刷新就可以看到项目在主界面\n\n\n","slug":"Django  初始测试","published":1,"date":"2020-09-08T03:23:20.714Z","updated":"2020-09-08T03:23:20.714Z","_id":"ckdpcluxh000b8sr3wfe0yzk0","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"使用models-py-创建数据库\"><a href=\"#使用models-py-创建数据库\" class=\"headerlink\" title=\"使用models.py 创建数据库\"></a>使用models.py 创建数据库</h3><blockquote>\n<p>注意事项：<br>1、makemigrations 和 migrate 工作原理分别是什么：<br>makemigrations：根据检测到的模型创建新的迁移。迁移的作用，更多的是将数据库的操作，以文件的形式记录下来，方便以后检查、调用、重做等等。<br>migrate：使数据库状态与当前模型集和迁移集同步。说白了，就是将对数据库的更改，主要是数据表设计的更改，在数据库中真实执行。例如，新建、修改、删除数据表，新增、修改、删除某数据表内的字段等等。<br>2、如果不想使用 Django 的 makemigrations 和 migrate 功能，但是不小心执行了这两个命令会发生什么，<br>首先在该app下建立 migrations目录，并记录下你所有的关于modes.py的改动，比如0001_initial.py，<br>接着执行migrate的话，这时候会作用到数据库文件，产生对应的表<br>3、官方解释：<br>运行 python manage.py makemigrations 为模型的改变生成迁移文件。<br>运行 python manage.py migrate 来应用数据库迁移。<br>参考： <a href=\"https://blog.csdn.net/weixin_43507484/article/details/87950788\">https://blog.csdn.net/weixin_43507484/article/details/87950788</a></p>\n</blockquote>\n<blockquote>\n<ol>\n<li>先执行一下迁移</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>编辑app里的models.py<br>如：</li>\n</ol>\n</blockquote>\n<pre><code>from django.db import models\n\n\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField(&#39;date published&#39;)\n\n\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)</code></pre><blockquote>\n<ol start=\"3\">\n<li>激活模型</li>\n</ol>\n</blockquote>\n<pre><code>#mysite/settings.py\nINSTALLED_APPS = [\n    &#39;polls.apps.PollsConfig&#39;,\n    &#39;django.contrib.admin&#39;,\n    &#39;django.contrib.auth&#39;,\n    &#39;django.contrib.contenttypes&#39;,\n    &#39;django.contrib.sessions&#39;,\n    &#39;django.contrib.messages&#39;,\n    &#39;django.contrib.staticfiles&#39;,\n]</code></pre><blockquote>\n<ol start=\"4\">\n<li>执行生成数据库</li>\n</ol>\n</blockquote>\n<pre><code>python manage.py makemigrations polls</code></pre><p>输出迁移过程中可能执行的sql</p>\n<pre><code>python manage.py sqlmigrate polls 0001</code></pre><p>最后，正式执行迁移</p>\n<pre><code>python manage.py migrate</code></pre><h3 id=\"使用API\"><a href=\"#使用API\" class=\"headerlink\" title=\"使用API\"></a>使用API</h3><p>进入项目的Python控制台</p>\n<pre><code>python manage.py shell\n\nfrom polls.models import Choice, Question  # Import the model classes we just wrote.\nQuestion.objects.all()</code></pre><p>给模型添加<strong>str</strong>()函数，这样默认输出将会改变</p>\n<pre><code>from django.db import models\n\nclass Question(models.Model):\n    # ...\n    def __str__(self):\n        return self.question_text\n\nclass Choice(models.Model):\n    # ...\n    def __str__(self):\n        return self.choice_text</code></pre><h3 id=\"使用管理员账号\"><a href=\"#使用管理员账号\" class=\"headerlink\" title=\"使用管理员账号\"></a>使用管理员账号</h3><pre><code>python manage.py createsuperuser</code></pre><p>此时进入xxxx/admin网址，登录就可看到数据库资源</p>\n<pre><code>python manage.py runserver</code></pre><p>加入我们的项目</p>\n<pre><code>from django.contrib import admin\n\nfrom .models import Question\n\nadmin.site.register(Question)</code></pre><p>无需重启，直接刷新就可以看到项目在主界面</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"使用models-py-创建数据库\"><a href=\"#使用models-py-创建数据库\" class=\"headerlink\" title=\"使用models.py 创建数据库\"></a>使用models.py 创建数据库</h3><blockquote>\n<p>注意事项：<br>1、makemigrations 和 migrate 工作原理分别是什么：<br>makemigrations：根据检测到的模型创建新的迁移。迁移的作用，更多的是将数据库的操作，以文件的形式记录下来，方便以后检查、调用、重做等等。<br>migrate：使数据库状态与当前模型集和迁移集同步。说白了，就是将对数据库的更改，主要是数据表设计的更改，在数据库中真实执行。例如，新建、修改、删除数据表，新增、修改、删除某数据表内的字段等等。<br>2、如果不想使用 Django 的 makemigrations 和 migrate 功能，但是不小心执行了这两个命令会发生什么，<br>首先在该app下建立 migrations目录，并记录下你所有的关于modes.py的改动，比如0001_initial.py，<br>接着执行migrate的话，这时候会作用到数据库文件，产生对应的表<br>3、官方解释：<br>运行 python manage.py makemigrations 为模型的改变生成迁移文件。<br>运行 python manage.py migrate 来应用数据库迁移。<br>参考： <a href=\"https://blog.csdn.net/weixin_43507484/article/details/87950788\">https://blog.csdn.net/weixin_43507484/article/details/87950788</a></p>\n</blockquote>\n<blockquote>\n<ol>\n<li>先执行一下迁移</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>编辑app里的models.py<br>如：</li>\n</ol>\n</blockquote>\n<pre><code>from django.db import models\n\n\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField(&#39;date published&#39;)\n\n\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)</code></pre><blockquote>\n<ol start=\"3\">\n<li>激活模型</li>\n</ol>\n</blockquote>\n<pre><code>#mysite/settings.py\nINSTALLED_APPS = [\n    &#39;polls.apps.PollsConfig&#39;,\n    &#39;django.contrib.admin&#39;,\n    &#39;django.contrib.auth&#39;,\n    &#39;django.contrib.contenttypes&#39;,\n    &#39;django.contrib.sessions&#39;,\n    &#39;django.contrib.messages&#39;,\n    &#39;django.contrib.staticfiles&#39;,\n]</code></pre><blockquote>\n<ol start=\"4\">\n<li>执行生成数据库</li>\n</ol>\n</blockquote>\n<pre><code>python manage.py makemigrations polls</code></pre><p>输出迁移过程中可能执行的sql</p>\n<pre><code>python manage.py sqlmigrate polls 0001</code></pre><p>最后，正式执行迁移</p>\n<pre><code>python manage.py migrate</code></pre><h3 id=\"使用API\"><a href=\"#使用API\" class=\"headerlink\" title=\"使用API\"></a>使用API</h3><p>进入项目的Python控制台</p>\n<pre><code>python manage.py shell\n\nfrom polls.models import Choice, Question  # Import the model classes we just wrote.\nQuestion.objects.all()</code></pre><p>给模型添加<strong>str</strong>()函数，这样默认输出将会改变</p>\n<pre><code>from django.db import models\n\nclass Question(models.Model):\n    # ...\n    def __str__(self):\n        return self.question_text\n\nclass Choice(models.Model):\n    # ...\n    def __str__(self):\n        return self.choice_text</code></pre><h3 id=\"使用管理员账号\"><a href=\"#使用管理员账号\" class=\"headerlink\" title=\"使用管理员账号\"></a>使用管理员账号</h3><pre><code>python manage.py createsuperuser</code></pre><p>此时进入xxxx/admin网址，登录就可看到数据库资源</p>\n<pre><code>python manage.py runserver</code></pre><p>加入我们的项目</p>\n<pre><code>from django.contrib import admin\n\nfrom .models import Question\n\nadmin.site.register(Question)</code></pre><p>无需重启，直接刷新就可以看到项目在主界面</p>\n"},{"title":"Django  初步构建","_content":"\n### Generic View\n>　简化写法，可选的有generic.IndexView和generic.DetailView\n>　DetailView 默认使用  \\<app name\\>/\\<model name\\>_detail.html.为模板， 可使用template重定向。自动生成model小写名字_list 为名的对象\n>　ListView 默认使用  \\<app name\\>/\\<model name\\>_list.html 为模板，可使用template重定向。 自动生成model小写名字的context对象\n\n","source":"_posts/Django  初步构建.md","raw":"---\ntitle: Django  初步构建\ncategories:\n- Python\ntags: \n- Python\n- Note\n- Django\n---\n\n### Generic View\n>　简化写法，可选的有generic.IndexView和generic.DetailView\n>　DetailView 默认使用  \\<app name\\>/\\<model name\\>_detail.html.为模板， 可使用template重定向。自动生成model小写名字_list 为名的对象\n>　ListView 默认使用  \\<app name\\>/\\<model name\\>_list.html 为模板，可使用template重定向。 自动生成model小写名字的context对象\n\n","slug":"Django  初步构建","published":1,"date":"2020-09-08T03:23:20.714Z","updated":"2020-09-08T03:23:20.714Z","_id":"ckdpcluxj000f8sr3qbxgd2o5","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Generic-View\"><a href=\"#Generic-View\" class=\"headerlink\" title=\"Generic View\"></a>Generic View</h3><blockquote>\n<p>　简化写法，可选的有generic.IndexView和generic.DetailView<br>　DetailView 默认使用  &lt;app name&gt;/&lt;model name&gt;_detail.html.为模板， 可使用template重定向。自动生成model小写名字_list 为名的对象<br>　ListView 默认使用  &lt;app name&gt;/&lt;model name&gt;_list.html 为模板，可使用template重定向。 自动生成model小写名字的context对象</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Generic-View\"><a href=\"#Generic-View\" class=\"headerlink\" title=\"Generic View\"></a>Generic View</h3><blockquote>\n<p>　简化写法，可选的有generic.IndexView和generic.DetailView<br>　DetailView 默认使用  &lt;app name&gt;/&lt;model name&gt;_detail.html.为模板， 可使用template重定向。自动生成model小写名字_list 为名的对象<br>　ListView 默认使用  &lt;app name&gt;/&lt;model name&gt;_list.html 为模板，可使用template重定向。 自动生成model小写名字的context对象</p>\n</blockquote>\n"},{"title":"网络游戏同步方案","_content":"\n![enter description here](/img/1583548259212.png)\n\n![enter description here](/img/1583549163720.png)\n\n![enter description here](/img/1583549878874.png)\n\n![enter description here](/img/1583550030862.png)","source":"_posts/DrawCall优化.md","raw":"---\ntitle: 网络游戏同步方案\ncategories:\n- Unity\ntags: \n---\n\n![enter description here](/img/1583548259212.png)\n\n![enter description here](/img/1583549163720.png)\n\n![enter description here](/img/1583549878874.png)\n\n![enter description here](/img/1583550030862.png)","slug":"DrawCall优化","published":1,"date":"2020-09-08T03:23:20.714Z","updated":"2020-09-08T03:23:20.714Z","_id":"ckdpcluxl000g8sr3dw838t6x","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/img/1583548259212.png\" alt=\"enter description here\"></p>\n<p><img src=\"/img/1583549163720.png\" alt=\"enter description here\"></p>\n<p><img src=\"/img/1583549878874.png\" alt=\"enter description here\"></p>\n<p><img src=\"/img/1583550030862.png\" alt=\"enter description here\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/img/1583548259212.png\" alt=\"enter description here\"></p>\n<p><img src=\"/img/1583549163720.png\" alt=\"enter description here\"></p>\n<p><img src=\"/img/1583549878874.png\" alt=\"enter description here\"></p>\n<p><img src=\"/img/1583550030862.png\" alt=\"enter description here\"></p>\n"},{"title":"Django 实例 Web Application","_content":"\n## Preparing\n\n > Python\n > Django\n > Html\n > css\n > Javascript\n > Databases\n > HeroKu\n > Materialize  \n > Beautiful suite\n > Web scraping\n\n\n## Starters!\n\n+ 创建conda环境\n\n```\nconda create --name codedaddies python=3\n```\n\n+ 安装django\n\n```\npip install django\n```\n\n+ 创建工程（指定目录下）\n\n```\ndjango-admin startproject codedaddies_list\n```\n\n+ 创建APP\n\n```\npython manage.py startapp my_app\n```\n\n+ 数据库构建\n\n```\npython manage.py makemigrations\npython manage.py migrate\n```\n\n+ Templates文件夹\n> 配置在settings中，加入以下：\nTEMPLATE_DIR = os.path.join(BASE_DIR, \"templates\")\n> 底部加入:\nSTATICFILES_DIR = (os.path.join(BASE_DIR, 'static'),)\n\n> TEMPLATES块中设置DIRS\n> 'DIRS': [TEMPLATE_DIR],\n\n注：需要在pycharm中设置templates标志\n\n+ 启用admin\n```\npython manage.py createsuperuser\n```\n\n\n## First Page\n\n+ APP中新建urls.py\n在文件中配置路径表：\n\n```\nfrom . import views\n\n\nurlpatterns = [\n    path('', views.home, name='home'),\n]\n```\n\n+ 创建视图（与上面的Home匹配）\n在views.py\n\n```\ndef home(request):\n    return render(request, 'base.html')\n```\n\n+ 创建数据表\n\nmodels.py中\n\n```\nclass Search(models.Model):\n    search = models.CharField(max_length=500)\n    created = models.DateTimeField(auto_now=True)\n\n```\n记得执行migrate操作\n\n+ 添加admin管理\n\n```\nfrom .models import Search\n\n# Register your models here.\nadmin.site.register(Search)\n```\n\n","source":"_posts/Django 实例 Web Application.md","raw":"---\ntitle: Django 实例 Web Application\ncategories:\n- Python\ntags: \n- Python\n- Note\n- Django\n- 实例\n---\n\n## Preparing\n\n > Python\n > Django\n > Html\n > css\n > Javascript\n > Databases\n > HeroKu\n > Materialize  \n > Beautiful suite\n > Web scraping\n\n\n## Starters!\n\n+ 创建conda环境\n\n```\nconda create --name codedaddies python=3\n```\n\n+ 安装django\n\n```\npip install django\n```\n\n+ 创建工程（指定目录下）\n\n```\ndjango-admin startproject codedaddies_list\n```\n\n+ 创建APP\n\n```\npython manage.py startapp my_app\n```\n\n+ 数据库构建\n\n```\npython manage.py makemigrations\npython manage.py migrate\n```\n\n+ Templates文件夹\n> 配置在settings中，加入以下：\nTEMPLATE_DIR = os.path.join(BASE_DIR, \"templates\")\n> 底部加入:\nSTATICFILES_DIR = (os.path.join(BASE_DIR, 'static'),)\n\n> TEMPLATES块中设置DIRS\n> 'DIRS': [TEMPLATE_DIR],\n\n注：需要在pycharm中设置templates标志\n\n+ 启用admin\n```\npython manage.py createsuperuser\n```\n\n\n## First Page\n\n+ APP中新建urls.py\n在文件中配置路径表：\n\n```\nfrom . import views\n\n\nurlpatterns = [\n    path('', views.home, name='home'),\n]\n```\n\n+ 创建视图（与上面的Home匹配）\n在views.py\n\n```\ndef home(request):\n    return render(request, 'base.html')\n```\n\n+ 创建数据表\n\nmodels.py中\n\n```\nclass Search(models.Model):\n    search = models.CharField(max_length=500)\n    created = models.DateTimeField(auto_now=True)\n\n```\n记得执行migrate操作\n\n+ 添加admin管理\n\n```\nfrom .models import Search\n\n# Register your models here.\nadmin.site.register(Search)\n```\n\n","slug":"Django 实例 Web Application","published":1,"date":"2020-09-08T03:23:20.714Z","updated":"2020-09-08T03:23:20.714Z","_id":"ckdpcluxn000k8sr3o2isw1dc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Preparing\"><a href=\"#Preparing\" class=\"headerlink\" title=\"Preparing\"></a>Preparing</h2><blockquote>\n<p>Python<br>Django<br>Html<br>css<br>Javascript<br>Databases<br>HeroKu<br>Materialize<br>Beautiful suite<br>Web scraping</p>\n</blockquote>\n<h2 id=\"Starters\"><a href=\"#Starters\" class=\"headerlink\" title=\"Starters!\"></a>Starters!</h2><ul>\n<li>创建conda环境</li>\n</ul>\n<pre><code>conda create --name codedaddies python=3</code></pre><ul>\n<li>安装django</li>\n</ul>\n<pre><code>pip install django</code></pre><ul>\n<li>创建工程（指定目录下）</li>\n</ul>\n<pre><code>django-admin startproject codedaddies_list</code></pre><ul>\n<li>创建APP</li>\n</ul>\n<pre><code>python manage.py startapp my_app</code></pre><ul>\n<li>数据库构建</li>\n</ul>\n<pre><code>python manage.py makemigrations\npython manage.py migrate</code></pre><ul>\n<li>Templates文件夹<blockquote>\n<p>配置在settings中，加入以下：<br>TEMPLATE_DIR = os.path.join(BASE_DIR, “templates”)<br>底部加入:<br>STATICFILES_DIR = (os.path.join(BASE_DIR, ‘static’),)</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>TEMPLATES块中设置DIRS<br>‘DIRS’: [TEMPLATE_DIR],</p>\n</blockquote>\n<p>注：需要在pycharm中设置templates标志</p>\n<ul>\n<li>启用admin<pre><code>python manage.py createsuperuser</code></pre></li>\n</ul>\n<h2 id=\"First-Page\"><a href=\"#First-Page\" class=\"headerlink\" title=\"First Page\"></a>First Page</h2><ul>\n<li>APP中新建urls.py<br>在文件中配置路径表：</li>\n</ul>\n<pre><code>from . import views\n\n\nurlpatterns = [\n    path(&#39;&#39;, views.home, name=&#39;home&#39;),\n]</code></pre><ul>\n<li>创建视图（与上面的Home匹配）<br>在views.py</li>\n</ul>\n<pre><code>def home(request):\n    return render(request, &#39;base.html&#39;)</code></pre><ul>\n<li>创建数据表</li>\n</ul>\n<p>models.py中</p>\n<pre><code>class Search(models.Model):\n    search = models.CharField(max_length=500)\n    created = models.DateTimeField(auto_now=True)\n</code></pre><p>记得执行migrate操作</p>\n<ul>\n<li>添加admin管理</li>\n</ul>\n<pre><code>from .models import Search\n\n# Register your models here.\nadmin.site.register(Search)</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Preparing\"><a href=\"#Preparing\" class=\"headerlink\" title=\"Preparing\"></a>Preparing</h2><blockquote>\n<p>Python<br>Django<br>Html<br>css<br>Javascript<br>Databases<br>HeroKu<br>Materialize<br>Beautiful suite<br>Web scraping</p>\n</blockquote>\n<h2 id=\"Starters\"><a href=\"#Starters\" class=\"headerlink\" title=\"Starters!\"></a>Starters!</h2><ul>\n<li>创建conda环境</li>\n</ul>\n<pre><code>conda create --name codedaddies python=3</code></pre><ul>\n<li>安装django</li>\n</ul>\n<pre><code>pip install django</code></pre><ul>\n<li>创建工程（指定目录下）</li>\n</ul>\n<pre><code>django-admin startproject codedaddies_list</code></pre><ul>\n<li>创建APP</li>\n</ul>\n<pre><code>python manage.py startapp my_app</code></pre><ul>\n<li>数据库构建</li>\n</ul>\n<pre><code>python manage.py makemigrations\npython manage.py migrate</code></pre><ul>\n<li>Templates文件夹<blockquote>\n<p>配置在settings中，加入以下：<br>TEMPLATE_DIR = os.path.join(BASE_DIR, “templates”)<br>底部加入:<br>STATICFILES_DIR = (os.path.join(BASE_DIR, ‘static’),)</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>TEMPLATES块中设置DIRS<br>‘DIRS’: [TEMPLATE_DIR],</p>\n</blockquote>\n<p>注：需要在pycharm中设置templates标志</p>\n<ul>\n<li>启用admin<pre><code>python manage.py createsuperuser</code></pre></li>\n</ul>\n<h2 id=\"First-Page\"><a href=\"#First-Page\" class=\"headerlink\" title=\"First Page\"></a>First Page</h2><ul>\n<li>APP中新建urls.py<br>在文件中配置路径表：</li>\n</ul>\n<pre><code>from . import views\n\n\nurlpatterns = [\n    path(&#39;&#39;, views.home, name=&#39;home&#39;),\n]</code></pre><ul>\n<li>创建视图（与上面的Home匹配）<br>在views.py</li>\n</ul>\n<pre><code>def home(request):\n    return render(request, &#39;base.html&#39;)</code></pre><ul>\n<li>创建数据表</li>\n</ul>\n<p>models.py中</p>\n<pre><code>class Search(models.Model):\n    search = models.CharField(max_length=500)\n    created = models.DateTimeField(auto_now=True)\n</code></pre><p>记得执行migrate操作</p>\n<ul>\n<li>添加admin管理</li>\n</ul>\n<pre><code>from .models import Search\n\n# Register your models here.\nadmin.site.register(Search)</code></pre>"},{"title":"DOTS-研究学习","_content":"\n### 1. What is DOTS?\n\nDATA-ORIENTED TECH STACK\n多线程式数据导向型技术堆栈\n\n 核心-高性能\n充分利用多核处理器，多线程，让游戏运行速度更快。\n组成部分如下：\n* C# 任务系统， Job System，用于高效运行多线程代码\n* 实体组件系统，ECS， 默认编写的高性能代码的框架结构\n* Burst编译器，用于生成高度优化的本地代码\n\nJob System 与ECS是独立的，两者结合实际才能发挥最大优势。\n\n### 2. Job System\n\n* 在Job System之前，unity 仅在内部支持多线程，外部都必须运行在主线程上\n* C#虽然支持多线程，但在unity中只处理数据，如网络消息，下载等等，且在线程中调用Unity的API是不行的。\n* 有了Job System,可以充分利用多核CPU，比如在多线程中修改Transform等\n* 例：MMO游戏判断碰撞，大量同步角色坐标，大量血条飘字等较为适合\n* 不必过于担心线程安全，加锁的问题\n* 配合Burst更佳\n\n2.1 HPC# -High Performance C#\n\n介绍：\n* IL2Cpp虽然将IL转成C++，但实际还是模拟了.NET的垃圾回收，效率并非等同C++\n* 使用NativeArray代替T[]，数据类型包括了值类型和其他类型指针\n* NativeArray可以在C#层分配 C++中的对象，主动释放而不进行C#的垃圾回收。\n\nBurst性能对比：\n* .Net Code 比C++慢2倍\n* Mono比.NET Code慢3倍\n* IL2CPP与.NET Code相当\n* Burst将比C++运行更快。\n\nhttp://aras-p.info/blog/2018/03/28/Daily-Pathtracer-Part-3-CSharp-Unity-Burst/\n\n2.2 代码使用\n\n* 数据类型只能是值类型和其他类型的指针\n* 不能使用引用类型，如T[]数组就不能在job中使用，应用HPC#的NativeArray代替\n\n![enter description here](/img/1584498872491.png)\n\n> IJob与IJobParallelFor\n> IJob是一个一个的开线程任务，顺序执行的，所以正确性有保证\n> 如果想让线程真正并行，则应使用JobParallelFor。这样并行后的数据就不会有前后依赖关系。\n> 使用ReadOnly标记的数据，只读后让Job不为其加锁。\n> 默认的数据是Read/Write的，这样在改变数据后，Job一定会等它。\n> 加解锁unity已经做好了，不需要自己实现逻辑。\n> \n![enter description here](/img/1584499275880.png)\n\n### 3.Burst编译器\n\n3.1 原理\n* 以开源LLVM为基础的后端编译技术\n* 原理的5个步骤：源代码》前端》优化器》后端 》机器码\n* LLVM定义抽象语言IR，前端负责将源代码（C#）翻译成IR，优化器优化，后端将IR生成目标语言（机器码）。\n* IR的存在，所以LLVM支持众多语言\n* LLVM对C#的GC支持不好，目前burst只支持值类型。\n\n3.2 内存别名\n* 之前的编译器无法知道运行时两个指针指向同一个地址的情况，编译出的代码必然要占用额外寄存器多次拷贝，无法优化。\n* NativeArray的API禁止限制了内存别名，不存在两个指针指向同一地址的情况。所以它更加高效。\n\n\n3.3 Unity.Mathmatcis数学库\n* 更高效的数据库，提供矢量类型float3,float4. 直接映射到SIMD寄存器\n* Math类中也提供了直接映射 到硬件SIMD寄存器。\n* SIMD可以一次性计算完毕。\n* 旧Math类是不支持SIMD寄存器的。\n*\n\n3.4 启动BurstCompile\n* 添加标签即可：\n* Struct必须实现IJob接口\n![enter description here](/img/1584499995727.png)\n\n\n### 4. ECS\n\n4.1 组合模式：\n需要什么功能加什么组件\n\n4.2 传统脚本的问题：\n* 耦合度过高\n* 引用类型\n* 挂脚本过重，产生 0.01s耗时\n* 热更支持不好\n\n4.3 Entity  实体\nA entity is a key.\n* 非常轻量级，一个ID用Int保存。\n* 根据需要绑定组件\n* 对Cache友好，将相同的组件排列在一起，遍历更快。\n\n4.4 Component 组件\n数据层，只有数据\n* 实现IcomponentData接口的结构体，不能写方法，没有任何行为\n* 注意使用新的数学库代替一些变量。\n\n> ArcheType原型\n> 组件命中率高得益于Archetype\n> unity规定每个archetype为16K，不够再开，保证连续性\n\n![enter description here](/img/1584500576606.png)\n\n> 共享组件\n> 区别IcomponentData于，IsharedComponentData共享组件。是为了避免结构体存储的数据完全相同，从而占用多份内存\n> 典型的例子：场景中很多相同mesh和材质的物体。\n> 必须实现IEquatable接口！\n\n![共享组件](/img/1584501076960.png)\n![enter description here](/img/1584501108996.png)\n\n4.5 System系统\nA system is a data tranform.\n* 只与Component关联，不关心entity\n* 在Update中可以统一更新自己关心的组件\n\n![enter description here](/img/1584500759081.png)\n\n4.6 World世界\nWorlds ars for isolation\n* 包含EntityManager, ComponentSystem, ArcheTypes.\n* ECS默认提供了一个World，也可自己创建\n* 世界之间不互通，可以同时并行\n\n### 5. ECS + Job + Burst让性能飞起来\n\n5.1 JobComponentSystem \n\n* 使用继承于ComponentSystem的JobComponentSystem\n* JobComponentSystem的Update效率更高，复杂运算将由Job完成\n*  标识ReadOnly让Job的数据并行\n*  如果Job数据变更，此Job就不能与其他访问此数据的JOB并行\n\n5.2 JCS与CS混合\n\n* JCS中的实体有任何 结构数据变更修改都带来硬性同步点\n* JCS必须保证后面执行的CS拿到的数据准确性，实体增删改都会带来同步点，导致线程卡顿。\n\n\n5.3 ECS渲染\n\n* ECS自身不包含渲染，但游戏中的渲染与实体是紧密绑定的\n* 原理大致是ECS在Job中先准备渲染的数据，通过GPU Instancing一次渲染，中间不产生gameobject.\n* GPU instancing不带裁剪，且需要每帧在Update中调用刷新。建议使用CommandBuffer来渲染Gpu instancing，如果在有变化时再刷新。\n\nhttps://www.xuanyusong.com/archives/4683\n\n* 使用BatchRendererGroup代替Graphics.DrawMeshInstanced和CommandBuffer.DrawMeshInstanced\n* BRG强制需要镜头裁剪的JOB方法，自己实现\n* BRG需要提供每个渲染物体的包围盒区载用于job中判断是否不在视野。\n* BRG内部会调自动Graphics.DrawMeshInstanced且没有1023的数量限制。\n\n![enter description here](/img/1584502302892.png)\n\n![enter description here](/img/1584502316800.png)\n\n\n### 6.实践\n\n6.1  装Entites, Burst, Hybrid Render, Dots Editor\n\n>报错了？The type or namespace name 'CompilerServices' does not exist in the namespace 'Unity.Burst' (are you missing an assembly reference?)\n>选择安装preview下的最高版本，如burst会默认安装非preview的版本\n\n6.2 实例1 创建entity\n\n```csharp\nusing UnityEngine;\nusing Unity.Transforms;\nusing Unity.Entities;\nusing Unity.Rendering;\nusing Unity.Mathematics;\npublic class Spawner : MonoBehaviour\n{\n    [SerializeField] private Mesh unitMesh;\n    [SerializeField] private Material unitMat;\n\n    private EntityManager unitManager;\n    private EntityArchetype entityArcheType;\n    // Start is called before the first frame update\n    void Start()\n    {\n        InitEntityManager();\n        CreateArcheType();\n        CreateEntity();\n    }\n\n    void InitEntityManager()\n    {\n        unitManager = World.DefaultGameObjectInjectionWorld.EntityManager;\n    }\n\n    void CreateEntity()\n    {\n        Entity hero = unitManager.CreateEntity(entityArcheType);\n        unitManager.AddComponentData(hero, new Translation(){\n            Value = new float3(1, 1, 1)\n        });\n\n        unitManager.AddComponentData(hero, new Scale()\n        {\n            Value = 1.0f\n        });\n\n        unitManager.AddSharedComponentData(hero, new RenderMesh()\n        {\n            mesh = unitMesh,\n            material = unitMat\n        });\n        \n    }\n\n    void CreateArcheType()\n    {\n        var translationType = ComponentType.ReadWrite<Translation>();\n        var scaleType = ComponentType.ReadWrite<Scale>();\n        var rotationType = ComponentType.ReadWrite<Rotation>();\n        var renderType = ComponentType.ReadWrite<RenderMesh>();\n        var renderBoundsType = ComponentType.ReadWrite<RenderBounds>();\n        var localToWorldType = ComponentType.ReadWrite<LocalToWorld>();\n        entityArcheType = unitManager.CreateArchetype(translationType, scaleType, rotationType, renderType, renderBoundsType, localToWorldType);\n    }\n}\n```\n\n> 注意： RenderBounds 如果不加，会导致不显示。。\n\n6.2 实例2 自定义system\n\nSystem定义后，将自动执行update函数。\n\n```csharp\nusing Unity.Entities;\nusing Unity.Mathematics;\nusing Unity.Transforms;\n\npublic class MoveSystem : ComponentSystem\n{\n    protected override void OnUpdate()\n    {\n        Entities.ForEach((ref Translation trans, ref MoveBySpeedData moveSpeed, ref WaveData waveData) =>\n        {\n            float zPos = waveData.amplitude * math.sin((float)Time.ElapsedTime * moveSpeed.Value\n                + trans.Value.x * waveData.xOffset + trans.Value.y * waveData.yOffset);\n            trans.Value = new float3(trans.Value.x, trans.Value.y, zPos);\n        });\n    }\n}\n\n```\n\n6.3 实例3 加入JOB与Burst\n\n在实例2的基础上加上Job和Burst\n\n```csharp\n\nusing Unity.Burst;\nusing Unity.Collections;\nusing Unity.Entities;\nusing Unity.Jobs;\nusing Unity.Mathematics;\nusing Unity.Transforms;\n\npublic class MoveSystem : JobComponentSystem\n{\n    [BurstCompile]\n    private struct MoveJob : IJobChunk\n    {\n        public double ElapsedTime;\n\n        public ArchetypeChunkComponentType<Translation> TranslationType;\n        [ReadOnly] public ArchetypeChunkComponentType<MoveBySpeedData> MoveBySpeedDataType;\n        [ReadOnly] public ArchetypeChunkComponentType<WaveData> WaveDataType;\n        public uint LastSystemVersion;\n        public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex)\n        {\n\n            var chunkTrans = chunk.GetNativeArray(TranslationType);\n            var chunkSpeedDatas = chunk.GetNativeArray(MoveBySpeedDataType);\n            var chunkWaveDatas = chunk.GetNativeArray(WaveDataType);\n\n            for (var i = 0; i < chunk.Count; i++)\n            {\n                var moveSpeed = chunkSpeedDatas[i];\n                var waveData = chunkWaveDatas[i];\n                var trans = chunkTrans[i];\n                float zPos = waveData.amplitude * math.sin((float)ElapsedTime * moveSpeed.Value\n               + trans.Value.x * waveData.xOffset + trans.Value.y * waveData.yOffset);\n\n                // Rotate something about its up vector at the speed given by RotationSpeed.\n                chunkTrans[i] = new Translation\n                {\n                    Value = new float3(trans.Value.x, trans.Value.y, zPos)\n                };\n            }\n        }\n    }\n    EntityQuery m_Group;\n    protected override void OnCreate()\n    {\n        m_Group = GetEntityQuery(ComponentType.ReadOnly<MoveBySpeedData>(),\n                               ComponentType.ReadOnly<WaveData>());\n    }\n\n    protected override JobHandle OnUpdate(JobHandle inputDeps)\n    {\n        var job = new MoveJob()\n        {\n            TranslationType = GetArchetypeChunkComponentType<Translation>(false),\n            MoveBySpeedDataType = GetArchetypeChunkComponentType<MoveBySpeedData>(true),\n            WaveDataType = GetArchetypeChunkComponentType<WaveData>(true),\n            ElapsedTime = Time.ElapsedTime\n        };\n        return job.Schedule(m_Group, inputDeps);\n    }\n}\n\n```\n\n### 7. 使用Conversion\n流程明细：\n```c#\n// ??? <- IDeclareReferencedPrefabs 调用.\nGameObjectDeclareReferencedObjectsGroup.Update()\n// ??? <- discovery 阶段结束, 无法再声明更多 asset.\nGameObjectBeforeConversionGroup.Update()\nGameObjectConversionGroup.Update() <-- 你的 Convert 方法在这时运行\nGameObjectAfterConversionGroup.Update()\n// ??? <- LinkedEntityGroup + Prefab 都已就绪.\nGameObjectExportGroup.Update()\n```\n\n7.1 ConversionToEntity\n* 为GameObject添加ConversionToEntity将自动转换为ECS的entity. \n* 添加ConversionToEntity(Stop)将保持为原gameobject\n\n7.2 ConversionMode\n* Convert And Destroy模式：如果没有conversion system处理的组件，在Conversion world 被带入的东西在world销毁时也同时销毁。\n* Convert and inject 模式： 此模式下，相比上一个组件都会保留。\n> Convert and inject模式是用于当你需要在 conversion 的结果上面回溯原有对象的情况下才有用, 而 Hybrid Renderer 显然无需回溯。\n\n7.3 IConvertGameObjectToEntity\n* 继承此接口，在方法Convert里自由控制conversion的过程\n> Unity 内置了另一种名为ConvertGameObjectToEntitySystem 的 conversion system. 该 system 会迭代 conversion world 中所有的GameObject, 接着使用GetComponents 并判断是否实现IConvertGameObjectToEntity 接口, 然后再调用该接口的.Convert 方法\n\n7.4 LinkedEntityGroup\n* 为原层次结构做关联的组件。同时也是一个dynmaic buffer。 \n* 调用Instantiate方法时, 会同时实例化所有 buffer 中的 entity, 同时也会创建相同的LinkedEntityGroup. 注意实例化并不一定和ECS中的Prefab component 直接关联.\n* 调用DestroyEntity时也会同时销毁 LinkedEntityGroup中的所有 entity. 类似在编辑器中删除GameObject\n* 调用 entityManager.SetEnabled 加上的 Disabledcomponent 会告知 ECS 的查询系统忽略它们, 而 LinkedEntityGroup 中的 entity 也会受到同样的影响. 有点类似禁用GameObject 时同时会禁用整个层级树.\n\n> 当有子物体Disable状态时，此子物体自身不会生成linkedentitygroup的子结构,但可以手动在此disable上添加\n\n> 注意如果buffer 中的 entity 也有LinkedEntityGroup, 系统不会递归地执行instantiation/destroy/disabled 过程.\n这些过程在具体执行当中也有一些细微不同.Instantiate和SetEnabled只要检测到 buffer 便在所有成员上一次性执行, 不会做其他更多事. 这意味着关联该 buffer 的 entity 必须要把自己包括在内才能正常工作. 然而DestroyEntity则无所谓, 因为它会先销毁传入的entity, 然后再迭代 buffer 中的 entity 进行销毁.\n要注意LinkedEntityGroup 和 Parent并不一样 (虽然它们经常同时出现). 后者是递归地工作, 循环依赖也是不允许的.\n\n* 为gameobject添加\n```c#\npublic class CubeConvert : MonoBehaviour, IConvertGameObjectToEntity\n{\n    public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        conversionSystem.DeclareLinkedEntityGroup(this.gameObject);\n    }\n}\n```\n\n> 在 entities-0.5.1版本里, TypeManager.cs 源码中可看到, 任何没有[InternalBufferCapacity] 的buffer 类型都会默认 128/size 的容量. LinkedEntityGroup里面装的是 entity, 因此其容量是 128/8 = 16 .\n每个 Entity 关联的LinkedEntityGroup(或者其他未指定 capacity 的buffer) 将占据 128 bytes. 这是 chunk 容积变小的原因.\n层级中超过16个子对象并不是什么好事, 一旦超过这个数量, 这些 linked entities 不得不从排列良好的 chunk 内存中挪到堆内存中. 可能 Unity 认为 16 是一个不太可能达到的值, 而 8 又太过于常见.\n除非显式调用, LinkedEntityGroup仅仅在 prefab 的 conversion 过程中被自动创建, 因此你只需要注意你的 prefab 里面嵌套的 GameObject 数量\n在运行时, 所有嵌套 prefab 和 prefab variant 工作流并不受影响, 系统内部只把它们看过一个单独的 prefab. 你无法把嵌套 prefab 从父 prefab 中拿出来, 并期望LinkedEntityGroup正常工作.\n最后, 16个entities 一个 chunk ，  1MB 大概包含 60 个 chunk. 如上例, 你能在 1MB 存储大约 2700 个转换后的GameObject , 这样看来或许45 的 chunk 容量也不用太担心了(当然具体情况具体分析).\n\n7.5 创建额外的entity\n使用如下方式：\n```c#\n  Entity additional1 = conversionSystem.CreateAdditionalEntity(this.gameObject);\n        dstManager.SetName(additional1, $\"{this.name}_Add1\");\n        Entity additional2 = conversionSystem.CreateAdditionalEntity(this.gameObject);\n        dstManager.SetName(additional2, $\"{this.name}_Add2\");\n```\n\n> 注意：此方式创建的entity将不在linkedentitygroup内，且是完全空的entity\n","source":"_posts/ECS-研究学习.md","raw":"---\ntitle: DOTS-研究学习\ncategories:\n- Unity\n---\n\n### 1. What is DOTS?\n\nDATA-ORIENTED TECH STACK\n多线程式数据导向型技术堆栈\n\n 核心-高性能\n充分利用多核处理器，多线程，让游戏运行速度更快。\n组成部分如下：\n* C# 任务系统， Job System，用于高效运行多线程代码\n* 实体组件系统，ECS， 默认编写的高性能代码的框架结构\n* Burst编译器，用于生成高度优化的本地代码\n\nJob System 与ECS是独立的，两者结合实际才能发挥最大优势。\n\n### 2. Job System\n\n* 在Job System之前，unity 仅在内部支持多线程，外部都必须运行在主线程上\n* C#虽然支持多线程，但在unity中只处理数据，如网络消息，下载等等，且在线程中调用Unity的API是不行的。\n* 有了Job System,可以充分利用多核CPU，比如在多线程中修改Transform等\n* 例：MMO游戏判断碰撞，大量同步角色坐标，大量血条飘字等较为适合\n* 不必过于担心线程安全，加锁的问题\n* 配合Burst更佳\n\n2.1 HPC# -High Performance C#\n\n介绍：\n* IL2Cpp虽然将IL转成C++，但实际还是模拟了.NET的垃圾回收，效率并非等同C++\n* 使用NativeArray代替T[]，数据类型包括了值类型和其他类型指针\n* NativeArray可以在C#层分配 C++中的对象，主动释放而不进行C#的垃圾回收。\n\nBurst性能对比：\n* .Net Code 比C++慢2倍\n* Mono比.NET Code慢3倍\n* IL2CPP与.NET Code相当\n* Burst将比C++运行更快。\n\nhttp://aras-p.info/blog/2018/03/28/Daily-Pathtracer-Part-3-CSharp-Unity-Burst/\n\n2.2 代码使用\n\n* 数据类型只能是值类型和其他类型的指针\n* 不能使用引用类型，如T[]数组就不能在job中使用，应用HPC#的NativeArray代替\n\n![enter description here](/img/1584498872491.png)\n\n> IJob与IJobParallelFor\n> IJob是一个一个的开线程任务，顺序执行的，所以正确性有保证\n> 如果想让线程真正并行，则应使用JobParallelFor。这样并行后的数据就不会有前后依赖关系。\n> 使用ReadOnly标记的数据，只读后让Job不为其加锁。\n> 默认的数据是Read/Write的，这样在改变数据后，Job一定会等它。\n> 加解锁unity已经做好了，不需要自己实现逻辑。\n> \n![enter description here](/img/1584499275880.png)\n\n### 3.Burst编译器\n\n3.1 原理\n* 以开源LLVM为基础的后端编译技术\n* 原理的5个步骤：源代码》前端》优化器》后端 》机器码\n* LLVM定义抽象语言IR，前端负责将源代码（C#）翻译成IR，优化器优化，后端将IR生成目标语言（机器码）。\n* IR的存在，所以LLVM支持众多语言\n* LLVM对C#的GC支持不好，目前burst只支持值类型。\n\n3.2 内存别名\n* 之前的编译器无法知道运行时两个指针指向同一个地址的情况，编译出的代码必然要占用额外寄存器多次拷贝，无法优化。\n* NativeArray的API禁止限制了内存别名，不存在两个指针指向同一地址的情况。所以它更加高效。\n\n\n3.3 Unity.Mathmatcis数学库\n* 更高效的数据库，提供矢量类型float3,float4. 直接映射到SIMD寄存器\n* Math类中也提供了直接映射 到硬件SIMD寄存器。\n* SIMD可以一次性计算完毕。\n* 旧Math类是不支持SIMD寄存器的。\n*\n\n3.4 启动BurstCompile\n* 添加标签即可：\n* Struct必须实现IJob接口\n![enter description here](/img/1584499995727.png)\n\n\n### 4. ECS\n\n4.1 组合模式：\n需要什么功能加什么组件\n\n4.2 传统脚本的问题：\n* 耦合度过高\n* 引用类型\n* 挂脚本过重，产生 0.01s耗时\n* 热更支持不好\n\n4.3 Entity  实体\nA entity is a key.\n* 非常轻量级，一个ID用Int保存。\n* 根据需要绑定组件\n* 对Cache友好，将相同的组件排列在一起，遍历更快。\n\n4.4 Component 组件\n数据层，只有数据\n* 实现IcomponentData接口的结构体，不能写方法，没有任何行为\n* 注意使用新的数学库代替一些变量。\n\n> ArcheType原型\n> 组件命中率高得益于Archetype\n> unity规定每个archetype为16K，不够再开，保证连续性\n\n![enter description here](/img/1584500576606.png)\n\n> 共享组件\n> 区别IcomponentData于，IsharedComponentData共享组件。是为了避免结构体存储的数据完全相同，从而占用多份内存\n> 典型的例子：场景中很多相同mesh和材质的物体。\n> 必须实现IEquatable接口！\n\n![共享组件](/img/1584501076960.png)\n![enter description here](/img/1584501108996.png)\n\n4.5 System系统\nA system is a data tranform.\n* 只与Component关联，不关心entity\n* 在Update中可以统一更新自己关心的组件\n\n![enter description here](/img/1584500759081.png)\n\n4.6 World世界\nWorlds ars for isolation\n* 包含EntityManager, ComponentSystem, ArcheTypes.\n* ECS默认提供了一个World，也可自己创建\n* 世界之间不互通，可以同时并行\n\n### 5. ECS + Job + Burst让性能飞起来\n\n5.1 JobComponentSystem \n\n* 使用继承于ComponentSystem的JobComponentSystem\n* JobComponentSystem的Update效率更高，复杂运算将由Job完成\n*  标识ReadOnly让Job的数据并行\n*  如果Job数据变更，此Job就不能与其他访问此数据的JOB并行\n\n5.2 JCS与CS混合\n\n* JCS中的实体有任何 结构数据变更修改都带来硬性同步点\n* JCS必须保证后面执行的CS拿到的数据准确性，实体增删改都会带来同步点，导致线程卡顿。\n\n\n5.3 ECS渲染\n\n* ECS自身不包含渲染，但游戏中的渲染与实体是紧密绑定的\n* 原理大致是ECS在Job中先准备渲染的数据，通过GPU Instancing一次渲染，中间不产生gameobject.\n* GPU instancing不带裁剪，且需要每帧在Update中调用刷新。建议使用CommandBuffer来渲染Gpu instancing，如果在有变化时再刷新。\n\nhttps://www.xuanyusong.com/archives/4683\n\n* 使用BatchRendererGroup代替Graphics.DrawMeshInstanced和CommandBuffer.DrawMeshInstanced\n* BRG强制需要镜头裁剪的JOB方法，自己实现\n* BRG需要提供每个渲染物体的包围盒区载用于job中判断是否不在视野。\n* BRG内部会调自动Graphics.DrawMeshInstanced且没有1023的数量限制。\n\n![enter description here](/img/1584502302892.png)\n\n![enter description here](/img/1584502316800.png)\n\n\n### 6.实践\n\n6.1  装Entites, Burst, Hybrid Render, Dots Editor\n\n>报错了？The type or namespace name 'CompilerServices' does not exist in the namespace 'Unity.Burst' (are you missing an assembly reference?)\n>选择安装preview下的最高版本，如burst会默认安装非preview的版本\n\n6.2 实例1 创建entity\n\n```csharp\nusing UnityEngine;\nusing Unity.Transforms;\nusing Unity.Entities;\nusing Unity.Rendering;\nusing Unity.Mathematics;\npublic class Spawner : MonoBehaviour\n{\n    [SerializeField] private Mesh unitMesh;\n    [SerializeField] private Material unitMat;\n\n    private EntityManager unitManager;\n    private EntityArchetype entityArcheType;\n    // Start is called before the first frame update\n    void Start()\n    {\n        InitEntityManager();\n        CreateArcheType();\n        CreateEntity();\n    }\n\n    void InitEntityManager()\n    {\n        unitManager = World.DefaultGameObjectInjectionWorld.EntityManager;\n    }\n\n    void CreateEntity()\n    {\n        Entity hero = unitManager.CreateEntity(entityArcheType);\n        unitManager.AddComponentData(hero, new Translation(){\n            Value = new float3(1, 1, 1)\n        });\n\n        unitManager.AddComponentData(hero, new Scale()\n        {\n            Value = 1.0f\n        });\n\n        unitManager.AddSharedComponentData(hero, new RenderMesh()\n        {\n            mesh = unitMesh,\n            material = unitMat\n        });\n        \n    }\n\n    void CreateArcheType()\n    {\n        var translationType = ComponentType.ReadWrite<Translation>();\n        var scaleType = ComponentType.ReadWrite<Scale>();\n        var rotationType = ComponentType.ReadWrite<Rotation>();\n        var renderType = ComponentType.ReadWrite<RenderMesh>();\n        var renderBoundsType = ComponentType.ReadWrite<RenderBounds>();\n        var localToWorldType = ComponentType.ReadWrite<LocalToWorld>();\n        entityArcheType = unitManager.CreateArchetype(translationType, scaleType, rotationType, renderType, renderBoundsType, localToWorldType);\n    }\n}\n```\n\n> 注意： RenderBounds 如果不加，会导致不显示。。\n\n6.2 实例2 自定义system\n\nSystem定义后，将自动执行update函数。\n\n```csharp\nusing Unity.Entities;\nusing Unity.Mathematics;\nusing Unity.Transforms;\n\npublic class MoveSystem : ComponentSystem\n{\n    protected override void OnUpdate()\n    {\n        Entities.ForEach((ref Translation trans, ref MoveBySpeedData moveSpeed, ref WaveData waveData) =>\n        {\n            float zPos = waveData.amplitude * math.sin((float)Time.ElapsedTime * moveSpeed.Value\n                + trans.Value.x * waveData.xOffset + trans.Value.y * waveData.yOffset);\n            trans.Value = new float3(trans.Value.x, trans.Value.y, zPos);\n        });\n    }\n}\n\n```\n\n6.3 实例3 加入JOB与Burst\n\n在实例2的基础上加上Job和Burst\n\n```csharp\n\nusing Unity.Burst;\nusing Unity.Collections;\nusing Unity.Entities;\nusing Unity.Jobs;\nusing Unity.Mathematics;\nusing Unity.Transforms;\n\npublic class MoveSystem : JobComponentSystem\n{\n    [BurstCompile]\n    private struct MoveJob : IJobChunk\n    {\n        public double ElapsedTime;\n\n        public ArchetypeChunkComponentType<Translation> TranslationType;\n        [ReadOnly] public ArchetypeChunkComponentType<MoveBySpeedData> MoveBySpeedDataType;\n        [ReadOnly] public ArchetypeChunkComponentType<WaveData> WaveDataType;\n        public uint LastSystemVersion;\n        public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex)\n        {\n\n            var chunkTrans = chunk.GetNativeArray(TranslationType);\n            var chunkSpeedDatas = chunk.GetNativeArray(MoveBySpeedDataType);\n            var chunkWaveDatas = chunk.GetNativeArray(WaveDataType);\n\n            for (var i = 0; i < chunk.Count; i++)\n            {\n                var moveSpeed = chunkSpeedDatas[i];\n                var waveData = chunkWaveDatas[i];\n                var trans = chunkTrans[i];\n                float zPos = waveData.amplitude * math.sin((float)ElapsedTime * moveSpeed.Value\n               + trans.Value.x * waveData.xOffset + trans.Value.y * waveData.yOffset);\n\n                // Rotate something about its up vector at the speed given by RotationSpeed.\n                chunkTrans[i] = new Translation\n                {\n                    Value = new float3(trans.Value.x, trans.Value.y, zPos)\n                };\n            }\n        }\n    }\n    EntityQuery m_Group;\n    protected override void OnCreate()\n    {\n        m_Group = GetEntityQuery(ComponentType.ReadOnly<MoveBySpeedData>(),\n                               ComponentType.ReadOnly<WaveData>());\n    }\n\n    protected override JobHandle OnUpdate(JobHandle inputDeps)\n    {\n        var job = new MoveJob()\n        {\n            TranslationType = GetArchetypeChunkComponentType<Translation>(false),\n            MoveBySpeedDataType = GetArchetypeChunkComponentType<MoveBySpeedData>(true),\n            WaveDataType = GetArchetypeChunkComponentType<WaveData>(true),\n            ElapsedTime = Time.ElapsedTime\n        };\n        return job.Schedule(m_Group, inputDeps);\n    }\n}\n\n```\n\n### 7. 使用Conversion\n流程明细：\n```c#\n// ??? <- IDeclareReferencedPrefabs 调用.\nGameObjectDeclareReferencedObjectsGroup.Update()\n// ??? <- discovery 阶段结束, 无法再声明更多 asset.\nGameObjectBeforeConversionGroup.Update()\nGameObjectConversionGroup.Update() <-- 你的 Convert 方法在这时运行\nGameObjectAfterConversionGroup.Update()\n// ??? <- LinkedEntityGroup + Prefab 都已就绪.\nGameObjectExportGroup.Update()\n```\n\n7.1 ConversionToEntity\n* 为GameObject添加ConversionToEntity将自动转换为ECS的entity. \n* 添加ConversionToEntity(Stop)将保持为原gameobject\n\n7.2 ConversionMode\n* Convert And Destroy模式：如果没有conversion system处理的组件，在Conversion world 被带入的东西在world销毁时也同时销毁。\n* Convert and inject 模式： 此模式下，相比上一个组件都会保留。\n> Convert and inject模式是用于当你需要在 conversion 的结果上面回溯原有对象的情况下才有用, 而 Hybrid Renderer 显然无需回溯。\n\n7.3 IConvertGameObjectToEntity\n* 继承此接口，在方法Convert里自由控制conversion的过程\n> Unity 内置了另一种名为ConvertGameObjectToEntitySystem 的 conversion system. 该 system 会迭代 conversion world 中所有的GameObject, 接着使用GetComponents 并判断是否实现IConvertGameObjectToEntity 接口, 然后再调用该接口的.Convert 方法\n\n7.4 LinkedEntityGroup\n* 为原层次结构做关联的组件。同时也是一个dynmaic buffer。 \n* 调用Instantiate方法时, 会同时实例化所有 buffer 中的 entity, 同时也会创建相同的LinkedEntityGroup. 注意实例化并不一定和ECS中的Prefab component 直接关联.\n* 调用DestroyEntity时也会同时销毁 LinkedEntityGroup中的所有 entity. 类似在编辑器中删除GameObject\n* 调用 entityManager.SetEnabled 加上的 Disabledcomponent 会告知 ECS 的查询系统忽略它们, 而 LinkedEntityGroup 中的 entity 也会受到同样的影响. 有点类似禁用GameObject 时同时会禁用整个层级树.\n\n> 当有子物体Disable状态时，此子物体自身不会生成linkedentitygroup的子结构,但可以手动在此disable上添加\n\n> 注意如果buffer 中的 entity 也有LinkedEntityGroup, 系统不会递归地执行instantiation/destroy/disabled 过程.\n这些过程在具体执行当中也有一些细微不同.Instantiate和SetEnabled只要检测到 buffer 便在所有成员上一次性执行, 不会做其他更多事. 这意味着关联该 buffer 的 entity 必须要把自己包括在内才能正常工作. 然而DestroyEntity则无所谓, 因为它会先销毁传入的entity, 然后再迭代 buffer 中的 entity 进行销毁.\n要注意LinkedEntityGroup 和 Parent并不一样 (虽然它们经常同时出现). 后者是递归地工作, 循环依赖也是不允许的.\n\n* 为gameobject添加\n```c#\npublic class CubeConvert : MonoBehaviour, IConvertGameObjectToEntity\n{\n    public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        conversionSystem.DeclareLinkedEntityGroup(this.gameObject);\n    }\n}\n```\n\n> 在 entities-0.5.1版本里, TypeManager.cs 源码中可看到, 任何没有[InternalBufferCapacity] 的buffer 类型都会默认 128/size 的容量. LinkedEntityGroup里面装的是 entity, 因此其容量是 128/8 = 16 .\n每个 Entity 关联的LinkedEntityGroup(或者其他未指定 capacity 的buffer) 将占据 128 bytes. 这是 chunk 容积变小的原因.\n层级中超过16个子对象并不是什么好事, 一旦超过这个数量, 这些 linked entities 不得不从排列良好的 chunk 内存中挪到堆内存中. 可能 Unity 认为 16 是一个不太可能达到的值, 而 8 又太过于常见.\n除非显式调用, LinkedEntityGroup仅仅在 prefab 的 conversion 过程中被自动创建, 因此你只需要注意你的 prefab 里面嵌套的 GameObject 数量\n在运行时, 所有嵌套 prefab 和 prefab variant 工作流并不受影响, 系统内部只把它们看过一个单独的 prefab. 你无法把嵌套 prefab 从父 prefab 中拿出来, 并期望LinkedEntityGroup正常工作.\n最后, 16个entities 一个 chunk ，  1MB 大概包含 60 个 chunk. 如上例, 你能在 1MB 存储大约 2700 个转换后的GameObject , 这样看来或许45 的 chunk 容量也不用太担心了(当然具体情况具体分析).\n\n7.5 创建额外的entity\n使用如下方式：\n```c#\n  Entity additional1 = conversionSystem.CreateAdditionalEntity(this.gameObject);\n        dstManager.SetName(additional1, $\"{this.name}_Add1\");\n        Entity additional2 = conversionSystem.CreateAdditionalEntity(this.gameObject);\n        dstManager.SetName(additional2, $\"{this.name}_Add2\");\n```\n\n> 注意：此方式创建的entity将不在linkedentitygroup内，且是完全空的entity\n","slug":"ECS-研究学习","published":1,"date":"2020-09-08T03:23:20.714Z","updated":"2020-09-08T03:23:20.714Z","_id":"ckdpcluxo000m8sr3ho9w1w23","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-What-is-DOTS\"><a href=\"#1-What-is-DOTS\" class=\"headerlink\" title=\"1. What is DOTS?\"></a>1. What is DOTS?</h3><p>DATA-ORIENTED TECH STACK<br>多线程式数据导向型技术堆栈</p>\n<p> 核心-高性能<br>充分利用多核处理器，多线程，让游戏运行速度更快。<br>组成部分如下：</p>\n<ul>\n<li>C# 任务系统， Job System，用于高效运行多线程代码</li>\n<li>实体组件系统，ECS， 默认编写的高性能代码的框架结构</li>\n<li>Burst编译器，用于生成高度优化的本地代码</li>\n</ul>\n<p>Job System 与ECS是独立的，两者结合实际才能发挥最大优势。</p>\n<h3 id=\"2-Job-System\"><a href=\"#2-Job-System\" class=\"headerlink\" title=\"2. Job System\"></a>2. Job System</h3><ul>\n<li>在Job System之前，unity 仅在内部支持多线程，外部都必须运行在主线程上</li>\n<li>C#虽然支持多线程，但在unity中只处理数据，如网络消息，下载等等，且在线程中调用Unity的API是不行的。</li>\n<li>有了Job System,可以充分利用多核CPU，比如在多线程中修改Transform等</li>\n<li>例：MMO游戏判断碰撞，大量同步角色坐标，大量血条飘字等较为适合</li>\n<li>不必过于担心线程安全，加锁的问题</li>\n<li>配合Burst更佳</li>\n</ul>\n<p>2.1 HPC# -High Performance C#</p>\n<p>介绍：</p>\n<ul>\n<li>IL2Cpp虽然将IL转成C++，但实际还是模拟了.NET的垃圾回收，效率并非等同C++</li>\n<li>使用NativeArray代替T[]，数据类型包括了值类型和其他类型指针</li>\n<li>NativeArray可以在C#层分配 C++中的对象，主动释放而不进行C#的垃圾回收。</li>\n</ul>\n<p>Burst性能对比：</p>\n<ul>\n<li>.Net Code 比C++慢2倍</li>\n<li>Mono比.NET Code慢3倍</li>\n<li>IL2CPP与.NET Code相当</li>\n<li>Burst将比C++运行更快。</li>\n</ul>\n<p><a href=\"http://aras-p.info/blog/2018/03/28/Daily-Pathtracer-Part-3-CSharp-Unity-Burst/\">http://aras-p.info/blog/2018/03/28/Daily-Pathtracer-Part-3-CSharp-Unity-Burst/</a></p>\n<p>2.2 代码使用</p>\n<ul>\n<li>数据类型只能是值类型和其他类型的指针</li>\n<li>不能使用引用类型，如T[]数组就不能在job中使用，应用HPC#的NativeArray代替</li>\n</ul>\n<p><img src=\"/img/1584498872491.png\" alt=\"enter description here\"></p>\n<blockquote>\n<p>IJob与IJobParallelFor<br>IJob是一个一个的开线程任务，顺序执行的，所以正确性有保证<br>如果想让线程真正并行，则应使用JobParallelFor。这样并行后的数据就不会有前后依赖关系。<br>使用ReadOnly标记的数据，只读后让Job不为其加锁。<br>默认的数据是Read/Write的，这样在改变数据后，Job一定会等它。<br>加解锁unity已经做好了，不需要自己实现逻辑。</p>\n</blockquote>\n<p><img src=\"/img/1584499275880.png\" alt=\"enter description here\"></p>\n<h3 id=\"3-Burst编译器\"><a href=\"#3-Burst编译器\" class=\"headerlink\" title=\"3.Burst编译器\"></a>3.Burst编译器</h3><p>3.1 原理</p>\n<ul>\n<li>以开源LLVM为基础的后端编译技术</li>\n<li>原理的5个步骤：源代码》前端》优化器》后端 》机器码</li>\n<li>LLVM定义抽象语言IR，前端负责将源代码（C#）翻译成IR，优化器优化，后端将IR生成目标语言（机器码）。</li>\n<li>IR的存在，所以LLVM支持众多语言</li>\n<li>LLVM对C#的GC支持不好，目前burst只支持值类型。</li>\n</ul>\n<p>3.2 内存别名</p>\n<ul>\n<li>之前的编译器无法知道运行时两个指针指向同一个地址的情况，编译出的代码必然要占用额外寄存器多次拷贝，无法优化。</li>\n<li>NativeArray的API禁止限制了内存别名，不存在两个指针指向同一地址的情况。所以它更加高效。</li>\n</ul>\n<p>3.3 Unity.Mathmatcis数学库</p>\n<ul>\n<li>更高效的数据库，提供矢量类型float3,float4. 直接映射到SIMD寄存器</li>\n<li>Math类中也提供了直接映射 到硬件SIMD寄存器。</li>\n<li>SIMD可以一次性计算完毕。</li>\n<li>旧Math类是不支持SIMD寄存器的。</li>\n<li></li>\n</ul>\n<p>3.4 启动BurstCompile</p>\n<ul>\n<li>添加标签即可：</li>\n<li>Struct必须实现IJob接口<br><img src=\"/img/1584499995727.png\" alt=\"enter description here\"></li>\n</ul>\n<h3 id=\"4-ECS\"><a href=\"#4-ECS\" class=\"headerlink\" title=\"4. ECS\"></a>4. ECS</h3><p>4.1 组合模式：<br>需要什么功能加什么组件</p>\n<p>4.2 传统脚本的问题：</p>\n<ul>\n<li>耦合度过高</li>\n<li>引用类型</li>\n<li>挂脚本过重，产生 0.01s耗时</li>\n<li>热更支持不好</li>\n</ul>\n<p>4.3 Entity  实体<br>A entity is a key.</p>\n<ul>\n<li>非常轻量级，一个ID用Int保存。</li>\n<li>根据需要绑定组件</li>\n<li>对Cache友好，将相同的组件排列在一起，遍历更快。</li>\n</ul>\n<p>4.4 Component 组件<br>数据层，只有数据</p>\n<ul>\n<li>实现IcomponentData接口的结构体，不能写方法，没有任何行为</li>\n<li>注意使用新的数学库代替一些变量。</li>\n</ul>\n<blockquote>\n<p>ArcheType原型<br>组件命中率高得益于Archetype<br>unity规定每个archetype为16K，不够再开，保证连续性</p>\n</blockquote>\n<p><img src=\"/img/1584500576606.png\" alt=\"enter description here\"></p>\n<blockquote>\n<p>共享组件<br>区别IcomponentData于，IsharedComponentData共享组件。是为了避免结构体存储的数据完全相同，从而占用多份内存<br>典型的例子：场景中很多相同mesh和材质的物体。<br>必须实现IEquatable接口！</p>\n</blockquote>\n<p><img src=\"/img/1584501076960.png\" alt=\"共享组件\"><br><img src=\"/img/1584501108996.png\" alt=\"enter description here\"></p>\n<p>4.5 System系统<br>A system is a data tranform.</p>\n<ul>\n<li>只与Component关联，不关心entity</li>\n<li>在Update中可以统一更新自己关心的组件</li>\n</ul>\n<p><img src=\"/img/1584500759081.png\" alt=\"enter description here\"></p>\n<p>4.6 World世界<br>Worlds ars for isolation</p>\n<ul>\n<li>包含EntityManager, ComponentSystem, ArcheTypes.</li>\n<li>ECS默认提供了一个World，也可自己创建</li>\n<li>世界之间不互通，可以同时并行</li>\n</ul>\n<h3 id=\"5-ECS-Job-Burst让性能飞起来\"><a href=\"#5-ECS-Job-Burst让性能飞起来\" class=\"headerlink\" title=\"5. ECS + Job + Burst让性能飞起来\"></a>5. ECS + Job + Burst让性能飞起来</h3><p>5.1 JobComponentSystem </p>\n<ul>\n<li>使用继承于ComponentSystem的JobComponentSystem</li>\n<li>JobComponentSystem的Update效率更高，复杂运算将由Job完成</li>\n<li>标识ReadOnly让Job的数据并行</li>\n<li>如果Job数据变更，此Job就不能与其他访问此数据的JOB并行</li>\n</ul>\n<p>5.2 JCS与CS混合</p>\n<ul>\n<li>JCS中的实体有任何 结构数据变更修改都带来硬性同步点</li>\n<li>JCS必须保证后面执行的CS拿到的数据准确性，实体增删改都会带来同步点，导致线程卡顿。</li>\n</ul>\n<p>5.3 ECS渲染</p>\n<ul>\n<li>ECS自身不包含渲染，但游戏中的渲染与实体是紧密绑定的</li>\n<li>原理大致是ECS在Job中先准备渲染的数据，通过GPU Instancing一次渲染，中间不产生gameobject.</li>\n<li>GPU instancing不带裁剪，且需要每帧在Update中调用刷新。建议使用CommandBuffer来渲染Gpu instancing，如果在有变化时再刷新。</li>\n</ul>\n<p><a href=\"https://www.xuanyusong.com/archives/4683\">https://www.xuanyusong.com/archives/4683</a></p>\n<ul>\n<li>使用BatchRendererGroup代替Graphics.DrawMeshInstanced和CommandBuffer.DrawMeshInstanced</li>\n<li>BRG强制需要镜头裁剪的JOB方法，自己实现</li>\n<li>BRG需要提供每个渲染物体的包围盒区载用于job中判断是否不在视野。</li>\n<li>BRG内部会调自动Graphics.DrawMeshInstanced且没有1023的数量限制。</li>\n</ul>\n<p><img src=\"/img/1584502302892.png\" alt=\"enter description here\"></p>\n<p><img src=\"/img/1584502316800.png\" alt=\"enter description here\"></p>\n<h3 id=\"6-实践\"><a href=\"#6-实践\" class=\"headerlink\" title=\"6.实践\"></a>6.实践</h3><p>6.1  装Entites, Burst, Hybrid Render, Dots Editor</p>\n<blockquote>\n<p>报错了？The type or namespace name ‘CompilerServices’ does not exist in the namespace ‘Unity.Burst’ (are you missing an assembly reference?)<br>选择安装preview下的最高版本，如burst会默认安装非preview的版本</p>\n</blockquote>\n<p>6.2 实例1 创建entity</p>\n<pre><code class=\"csharp\">using UnityEngine;\nusing Unity.Transforms;\nusing Unity.Entities;\nusing Unity.Rendering;\nusing Unity.Mathematics;\npublic class Spawner : MonoBehaviour\n{\n    [SerializeField] private Mesh unitMesh;\n    [SerializeField] private Material unitMat;\n\n    private EntityManager unitManager;\n    private EntityArchetype entityArcheType;\n    // Start is called before the first frame update\n    void Start()\n    {\n        InitEntityManager();\n        CreateArcheType();\n        CreateEntity();\n    }\n\n    void InitEntityManager()\n    {\n        unitManager = World.DefaultGameObjectInjectionWorld.EntityManager;\n    }\n\n    void CreateEntity()\n    {\n        Entity hero = unitManager.CreateEntity(entityArcheType);\n        unitManager.AddComponentData(hero, new Translation(){\n            Value = new float3(1, 1, 1)\n        });\n\n        unitManager.AddComponentData(hero, new Scale()\n        {\n            Value = 1.0f\n        });\n\n        unitManager.AddSharedComponentData(hero, new RenderMesh()\n        {\n            mesh = unitMesh,\n            material = unitMat\n        });\n\n    }\n\n    void CreateArcheType()\n    {\n        var translationType = ComponentType.ReadWrite&lt;Translation&gt;();\n        var scaleType = ComponentType.ReadWrite&lt;Scale&gt;();\n        var rotationType = ComponentType.ReadWrite&lt;Rotation&gt;();\n        var renderType = ComponentType.ReadWrite&lt;RenderMesh&gt;();\n        var renderBoundsType = ComponentType.ReadWrite&lt;RenderBounds&gt;();\n        var localToWorldType = ComponentType.ReadWrite&lt;LocalToWorld&gt;();\n        entityArcheType = unitManager.CreateArchetype(translationType, scaleType, rotationType, renderType, renderBoundsType, localToWorldType);\n    }\n}</code></pre>\n<blockquote>\n<p>注意： RenderBounds 如果不加，会导致不显示。。</p>\n</blockquote>\n<p>6.2 实例2 自定义system</p>\n<p>System定义后，将自动执行update函数。</p>\n<pre><code class=\"csharp\">using Unity.Entities;\nusing Unity.Mathematics;\nusing Unity.Transforms;\n\npublic class MoveSystem : ComponentSystem\n{\n    protected override void OnUpdate()\n    {\n        Entities.ForEach((ref Translation trans, ref MoveBySpeedData moveSpeed, ref WaveData waveData) =&gt;\n        {\n            float zPos = waveData.amplitude * math.sin((float)Time.ElapsedTime * moveSpeed.Value\n                + trans.Value.x * waveData.xOffset + trans.Value.y * waveData.yOffset);\n            trans.Value = new float3(trans.Value.x, trans.Value.y, zPos);\n        });\n    }\n}\n</code></pre>\n<p>6.3 实例3 加入JOB与Burst</p>\n<p>在实例2的基础上加上Job和Burst</p>\n<pre><code class=\"csharp\">\nusing Unity.Burst;\nusing Unity.Collections;\nusing Unity.Entities;\nusing Unity.Jobs;\nusing Unity.Mathematics;\nusing Unity.Transforms;\n\npublic class MoveSystem : JobComponentSystem\n{\n    [BurstCompile]\n    private struct MoveJob : IJobChunk\n    {\n        public double ElapsedTime;\n\n        public ArchetypeChunkComponentType&lt;Translation&gt; TranslationType;\n        [ReadOnly] public ArchetypeChunkComponentType&lt;MoveBySpeedData&gt; MoveBySpeedDataType;\n        [ReadOnly] public ArchetypeChunkComponentType&lt;WaveData&gt; WaveDataType;\n        public uint LastSystemVersion;\n        public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex)\n        {\n\n            var chunkTrans = chunk.GetNativeArray(TranslationType);\n            var chunkSpeedDatas = chunk.GetNativeArray(MoveBySpeedDataType);\n            var chunkWaveDatas = chunk.GetNativeArray(WaveDataType);\n\n            for (var i = 0; i &lt; chunk.Count; i++)\n            {\n                var moveSpeed = chunkSpeedDatas[i];\n                var waveData = chunkWaveDatas[i];\n                var trans = chunkTrans[i];\n                float zPos = waveData.amplitude * math.sin((float)ElapsedTime * moveSpeed.Value\n               + trans.Value.x * waveData.xOffset + trans.Value.y * waveData.yOffset);\n\n                // Rotate something about its up vector at the speed given by RotationSpeed.\n                chunkTrans[i] = new Translation\n                {\n                    Value = new float3(trans.Value.x, trans.Value.y, zPos)\n                };\n            }\n        }\n    }\n    EntityQuery m_Group;\n    protected override void OnCreate()\n    {\n        m_Group = GetEntityQuery(ComponentType.ReadOnly&lt;MoveBySpeedData&gt;(),\n                               ComponentType.ReadOnly&lt;WaveData&gt;());\n    }\n\n    protected override JobHandle OnUpdate(JobHandle inputDeps)\n    {\n        var job = new MoveJob()\n        {\n            TranslationType = GetArchetypeChunkComponentType&lt;Translation&gt;(false),\n            MoveBySpeedDataType = GetArchetypeChunkComponentType&lt;MoveBySpeedData&gt;(true),\n            WaveDataType = GetArchetypeChunkComponentType&lt;WaveData&gt;(true),\n            ElapsedTime = Time.ElapsedTime\n        };\n        return job.Schedule(m_Group, inputDeps);\n    }\n}\n</code></pre>\n<h3 id=\"7-使用Conversion\"><a href=\"#7-使用Conversion\" class=\"headerlink\" title=\"7. 使用Conversion\"></a>7. 使用Conversion</h3><p>流程明细：</p>\n<pre><code class=\"c#\">// ??? &lt;- IDeclareReferencedPrefabs 调用.\nGameObjectDeclareReferencedObjectsGroup.Update()\n// ??? &lt;- discovery 阶段结束, 无法再声明更多 asset.\nGameObjectBeforeConversionGroup.Update()\nGameObjectConversionGroup.Update() &lt;-- 你的 Convert 方法在这时运行\nGameObjectAfterConversionGroup.Update()\n// ??? &lt;- LinkedEntityGroup + Prefab 都已就绪.\nGameObjectExportGroup.Update()</code></pre>\n<p>7.1 ConversionToEntity</p>\n<ul>\n<li>为GameObject添加ConversionToEntity将自动转换为ECS的entity. </li>\n<li>添加ConversionToEntity(Stop)将保持为原gameobject</li>\n</ul>\n<p>7.2 ConversionMode</p>\n<ul>\n<li>Convert And Destroy模式：如果没有conversion system处理的组件，在Conversion world 被带入的东西在world销毁时也同时销毁。</li>\n<li>Convert and inject 模式： 此模式下，相比上一个组件都会保留。<blockquote>\n<p>Convert and inject模式是用于当你需要在 conversion 的结果上面回溯原有对象的情况下才有用, 而 Hybrid Renderer 显然无需回溯。</p>\n</blockquote>\n</li>\n</ul>\n<p>7.3 IConvertGameObjectToEntity</p>\n<ul>\n<li>继承此接口，在方法Convert里自由控制conversion的过程<blockquote>\n<p>Unity 内置了另一种名为ConvertGameObjectToEntitySystem 的 conversion system. 该 system 会迭代 conversion world 中所有的GameObject, 接着使用GetComponents 并判断是否实现IConvertGameObjectToEntity 接口, 然后再调用该接口的.Convert 方法</p>\n</blockquote>\n</li>\n</ul>\n<p>7.4 LinkedEntityGroup</p>\n<ul>\n<li>为原层次结构做关联的组件。同时也是一个dynmaic buffer。 </li>\n<li>调用Instantiate方法时, 会同时实例化所有 buffer 中的 entity, 同时也会创建相同的LinkedEntityGroup. 注意实例化并不一定和ECS中的Prefab component 直接关联.</li>\n<li>调用DestroyEntity时也会同时销毁 LinkedEntityGroup中的所有 entity. 类似在编辑器中删除GameObject</li>\n<li>调用 entityManager.SetEnabled 加上的 Disabledcomponent 会告知 ECS 的查询系统忽略它们, 而 LinkedEntityGroup 中的 entity 也会受到同样的影响. 有点类似禁用GameObject 时同时会禁用整个层级树.</li>\n</ul>\n<blockquote>\n<p>当有子物体Disable状态时，此子物体自身不会生成linkedentitygroup的子结构,但可以手动在此disable上添加</p>\n</blockquote>\n<blockquote>\n<p>注意如果buffer 中的 entity 也有LinkedEntityGroup, 系统不会递归地执行instantiation/destroy/disabled 过程.<br>这些过程在具体执行当中也有一些细微不同.Instantiate和SetEnabled只要检测到 buffer 便在所有成员上一次性执行, 不会做其他更多事. 这意味着关联该 buffer 的 entity 必须要把自己包括在内才能正常工作. 然而DestroyEntity则无所谓, 因为它会先销毁传入的entity, 然后再迭代 buffer 中的 entity 进行销毁.<br>要注意LinkedEntityGroup 和 Parent并不一样 (虽然它们经常同时出现). 后者是递归地工作, 循环依赖也是不允许的.</p>\n</blockquote>\n<ul>\n<li>为gameobject添加<pre><code class=\"c#\">public class CubeConvert : MonoBehaviour, IConvertGameObjectToEntity\n{\n  public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n  {\n      conversionSystem.DeclareLinkedEntityGroup(this.gameObject);\n  }\n}</code></pre>\n</li>\n</ul>\n<blockquote>\n<p>在 entities-0.5.1版本里, TypeManager.cs 源码中可看到, 任何没有[InternalBufferCapacity] 的buffer 类型都会默认 128/size 的容量. LinkedEntityGroup里面装的是 entity, 因此其容量是 128/8 = 16 .<br>每个 Entity 关联的LinkedEntityGroup(或者其他未指定 capacity 的buffer) 将占据 128 bytes. 这是 chunk 容积变小的原因.<br>层级中超过16个子对象并不是什么好事, 一旦超过这个数量, 这些 linked entities 不得不从排列良好的 chunk 内存中挪到堆内存中. 可能 Unity 认为 16 是一个不太可能达到的值, 而 8 又太过于常见.<br>除非显式调用, LinkedEntityGroup仅仅在 prefab 的 conversion 过程中被自动创建, 因此你只需要注意你的 prefab 里面嵌套的 GameObject 数量<br>在运行时, 所有嵌套 prefab 和 prefab variant 工作流并不受影响, 系统内部只把它们看过一个单独的 prefab. 你无法把嵌套 prefab 从父 prefab 中拿出来, 并期望LinkedEntityGroup正常工作.<br>最后, 16个entities 一个 chunk ，  1MB 大概包含 60 个 chunk. 如上例, 你能在 1MB 存储大约 2700 个转换后的GameObject , 这样看来或许45 的 chunk 容量也不用太担心了(当然具体情况具体分析).</p>\n</blockquote>\n<p>7.5 创建额外的entity<br>使用如下方式：</p>\n<pre><code class=\"c#\">  Entity additional1 = conversionSystem.CreateAdditionalEntity(this.gameObject);\n        dstManager.SetName(additional1, $&quot;{this.name}_Add1&quot;);\n        Entity additional2 = conversionSystem.CreateAdditionalEntity(this.gameObject);\n        dstManager.SetName(additional2, $&quot;{this.name}_Add2&quot;);</code></pre>\n<blockquote>\n<p>注意：此方式创建的entity将不在linkedentitygroup内，且是完全空的entity</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-What-is-DOTS\"><a href=\"#1-What-is-DOTS\" class=\"headerlink\" title=\"1. What is DOTS?\"></a>1. What is DOTS?</h3><p>DATA-ORIENTED TECH STACK<br>多线程式数据导向型技术堆栈</p>\n<p> 核心-高性能<br>充分利用多核处理器，多线程，让游戏运行速度更快。<br>组成部分如下：</p>\n<ul>\n<li>C# 任务系统， Job System，用于高效运行多线程代码</li>\n<li>实体组件系统，ECS， 默认编写的高性能代码的框架结构</li>\n<li>Burst编译器，用于生成高度优化的本地代码</li>\n</ul>\n<p>Job System 与ECS是独立的，两者结合实际才能发挥最大优势。</p>\n<h3 id=\"2-Job-System\"><a href=\"#2-Job-System\" class=\"headerlink\" title=\"2. Job System\"></a>2. Job System</h3><ul>\n<li>在Job System之前，unity 仅在内部支持多线程，外部都必须运行在主线程上</li>\n<li>C#虽然支持多线程，但在unity中只处理数据，如网络消息，下载等等，且在线程中调用Unity的API是不行的。</li>\n<li>有了Job System,可以充分利用多核CPU，比如在多线程中修改Transform等</li>\n<li>例：MMO游戏判断碰撞，大量同步角色坐标，大量血条飘字等较为适合</li>\n<li>不必过于担心线程安全，加锁的问题</li>\n<li>配合Burst更佳</li>\n</ul>\n<p>2.1 HPC# -High Performance C#</p>\n<p>介绍：</p>\n<ul>\n<li>IL2Cpp虽然将IL转成C++，但实际还是模拟了.NET的垃圾回收，效率并非等同C++</li>\n<li>使用NativeArray代替T[]，数据类型包括了值类型和其他类型指针</li>\n<li>NativeArray可以在C#层分配 C++中的对象，主动释放而不进行C#的垃圾回收。</li>\n</ul>\n<p>Burst性能对比：</p>\n<ul>\n<li>.Net Code 比C++慢2倍</li>\n<li>Mono比.NET Code慢3倍</li>\n<li>IL2CPP与.NET Code相当</li>\n<li>Burst将比C++运行更快。</li>\n</ul>\n<p><a href=\"http://aras-p.info/blog/2018/03/28/Daily-Pathtracer-Part-3-CSharp-Unity-Burst/\">http://aras-p.info/blog/2018/03/28/Daily-Pathtracer-Part-3-CSharp-Unity-Burst/</a></p>\n<p>2.2 代码使用</p>\n<ul>\n<li>数据类型只能是值类型和其他类型的指针</li>\n<li>不能使用引用类型，如T[]数组就不能在job中使用，应用HPC#的NativeArray代替</li>\n</ul>\n<p><img src=\"/img/1584498872491.png\" alt=\"enter description here\"></p>\n<blockquote>\n<p>IJob与IJobParallelFor<br>IJob是一个一个的开线程任务，顺序执行的，所以正确性有保证<br>如果想让线程真正并行，则应使用JobParallelFor。这样并行后的数据就不会有前后依赖关系。<br>使用ReadOnly标记的数据，只读后让Job不为其加锁。<br>默认的数据是Read/Write的，这样在改变数据后，Job一定会等它。<br>加解锁unity已经做好了，不需要自己实现逻辑。</p>\n</blockquote>\n<p><img src=\"/img/1584499275880.png\" alt=\"enter description here\"></p>\n<h3 id=\"3-Burst编译器\"><a href=\"#3-Burst编译器\" class=\"headerlink\" title=\"3.Burst编译器\"></a>3.Burst编译器</h3><p>3.1 原理</p>\n<ul>\n<li>以开源LLVM为基础的后端编译技术</li>\n<li>原理的5个步骤：源代码》前端》优化器》后端 》机器码</li>\n<li>LLVM定义抽象语言IR，前端负责将源代码（C#）翻译成IR，优化器优化，后端将IR生成目标语言（机器码）。</li>\n<li>IR的存在，所以LLVM支持众多语言</li>\n<li>LLVM对C#的GC支持不好，目前burst只支持值类型。</li>\n</ul>\n<p>3.2 内存别名</p>\n<ul>\n<li>之前的编译器无法知道运行时两个指针指向同一个地址的情况，编译出的代码必然要占用额外寄存器多次拷贝，无法优化。</li>\n<li>NativeArray的API禁止限制了内存别名，不存在两个指针指向同一地址的情况。所以它更加高效。</li>\n</ul>\n<p>3.3 Unity.Mathmatcis数学库</p>\n<ul>\n<li>更高效的数据库，提供矢量类型float3,float4. 直接映射到SIMD寄存器</li>\n<li>Math类中也提供了直接映射 到硬件SIMD寄存器。</li>\n<li>SIMD可以一次性计算完毕。</li>\n<li>旧Math类是不支持SIMD寄存器的。</li>\n<li></li>\n</ul>\n<p>3.4 启动BurstCompile</p>\n<ul>\n<li>添加标签即可：</li>\n<li>Struct必须实现IJob接口<br><img src=\"/img/1584499995727.png\" alt=\"enter description here\"></li>\n</ul>\n<h3 id=\"4-ECS\"><a href=\"#4-ECS\" class=\"headerlink\" title=\"4. ECS\"></a>4. ECS</h3><p>4.1 组合模式：<br>需要什么功能加什么组件</p>\n<p>4.2 传统脚本的问题：</p>\n<ul>\n<li>耦合度过高</li>\n<li>引用类型</li>\n<li>挂脚本过重，产生 0.01s耗时</li>\n<li>热更支持不好</li>\n</ul>\n<p>4.3 Entity  实体<br>A entity is a key.</p>\n<ul>\n<li>非常轻量级，一个ID用Int保存。</li>\n<li>根据需要绑定组件</li>\n<li>对Cache友好，将相同的组件排列在一起，遍历更快。</li>\n</ul>\n<p>4.4 Component 组件<br>数据层，只有数据</p>\n<ul>\n<li>实现IcomponentData接口的结构体，不能写方法，没有任何行为</li>\n<li>注意使用新的数学库代替一些变量。</li>\n</ul>\n<blockquote>\n<p>ArcheType原型<br>组件命中率高得益于Archetype<br>unity规定每个archetype为16K，不够再开，保证连续性</p>\n</blockquote>\n<p><img src=\"/img/1584500576606.png\" alt=\"enter description here\"></p>\n<blockquote>\n<p>共享组件<br>区别IcomponentData于，IsharedComponentData共享组件。是为了避免结构体存储的数据完全相同，从而占用多份内存<br>典型的例子：场景中很多相同mesh和材质的物体。<br>必须实现IEquatable接口！</p>\n</blockquote>\n<p><img src=\"/img/1584501076960.png\" alt=\"共享组件\"><br><img src=\"/img/1584501108996.png\" alt=\"enter description here\"></p>\n<p>4.5 System系统<br>A system is a data tranform.</p>\n<ul>\n<li>只与Component关联，不关心entity</li>\n<li>在Update中可以统一更新自己关心的组件</li>\n</ul>\n<p><img src=\"/img/1584500759081.png\" alt=\"enter description here\"></p>\n<p>4.6 World世界<br>Worlds ars for isolation</p>\n<ul>\n<li>包含EntityManager, ComponentSystem, ArcheTypes.</li>\n<li>ECS默认提供了一个World，也可自己创建</li>\n<li>世界之间不互通，可以同时并行</li>\n</ul>\n<h3 id=\"5-ECS-Job-Burst让性能飞起来\"><a href=\"#5-ECS-Job-Burst让性能飞起来\" class=\"headerlink\" title=\"5. ECS + Job + Burst让性能飞起来\"></a>5. ECS + Job + Burst让性能飞起来</h3><p>5.1 JobComponentSystem </p>\n<ul>\n<li>使用继承于ComponentSystem的JobComponentSystem</li>\n<li>JobComponentSystem的Update效率更高，复杂运算将由Job完成</li>\n<li>标识ReadOnly让Job的数据并行</li>\n<li>如果Job数据变更，此Job就不能与其他访问此数据的JOB并行</li>\n</ul>\n<p>5.2 JCS与CS混合</p>\n<ul>\n<li>JCS中的实体有任何 结构数据变更修改都带来硬性同步点</li>\n<li>JCS必须保证后面执行的CS拿到的数据准确性，实体增删改都会带来同步点，导致线程卡顿。</li>\n</ul>\n<p>5.3 ECS渲染</p>\n<ul>\n<li>ECS自身不包含渲染，但游戏中的渲染与实体是紧密绑定的</li>\n<li>原理大致是ECS在Job中先准备渲染的数据，通过GPU Instancing一次渲染，中间不产生gameobject.</li>\n<li>GPU instancing不带裁剪，且需要每帧在Update中调用刷新。建议使用CommandBuffer来渲染Gpu instancing，如果在有变化时再刷新。</li>\n</ul>\n<p><a href=\"https://www.xuanyusong.com/archives/4683\">https://www.xuanyusong.com/archives/4683</a></p>\n<ul>\n<li>使用BatchRendererGroup代替Graphics.DrawMeshInstanced和CommandBuffer.DrawMeshInstanced</li>\n<li>BRG强制需要镜头裁剪的JOB方法，自己实现</li>\n<li>BRG需要提供每个渲染物体的包围盒区载用于job中判断是否不在视野。</li>\n<li>BRG内部会调自动Graphics.DrawMeshInstanced且没有1023的数量限制。</li>\n</ul>\n<p><img src=\"/img/1584502302892.png\" alt=\"enter description here\"></p>\n<p><img src=\"/img/1584502316800.png\" alt=\"enter description here\"></p>\n<h3 id=\"6-实践\"><a href=\"#6-实践\" class=\"headerlink\" title=\"6.实践\"></a>6.实践</h3><p>6.1  装Entites, Burst, Hybrid Render, Dots Editor</p>\n<blockquote>\n<p>报错了？The type or namespace name ‘CompilerServices’ does not exist in the namespace ‘Unity.Burst’ (are you missing an assembly reference?)<br>选择安装preview下的最高版本，如burst会默认安装非preview的版本</p>\n</blockquote>\n<p>6.2 实例1 创建entity</p>\n<pre><code class=\"csharp\">using UnityEngine;\nusing Unity.Transforms;\nusing Unity.Entities;\nusing Unity.Rendering;\nusing Unity.Mathematics;\npublic class Spawner : MonoBehaviour\n{\n    [SerializeField] private Mesh unitMesh;\n    [SerializeField] private Material unitMat;\n\n    private EntityManager unitManager;\n    private EntityArchetype entityArcheType;\n    // Start is called before the first frame update\n    void Start()\n    {\n        InitEntityManager();\n        CreateArcheType();\n        CreateEntity();\n    }\n\n    void InitEntityManager()\n    {\n        unitManager = World.DefaultGameObjectInjectionWorld.EntityManager;\n    }\n\n    void CreateEntity()\n    {\n        Entity hero = unitManager.CreateEntity(entityArcheType);\n        unitManager.AddComponentData(hero, new Translation(){\n            Value = new float3(1, 1, 1)\n        });\n\n        unitManager.AddComponentData(hero, new Scale()\n        {\n            Value = 1.0f\n        });\n\n        unitManager.AddSharedComponentData(hero, new RenderMesh()\n        {\n            mesh = unitMesh,\n            material = unitMat\n        });\n\n    }\n\n    void CreateArcheType()\n    {\n        var translationType = ComponentType.ReadWrite&lt;Translation&gt;();\n        var scaleType = ComponentType.ReadWrite&lt;Scale&gt;();\n        var rotationType = ComponentType.ReadWrite&lt;Rotation&gt;();\n        var renderType = ComponentType.ReadWrite&lt;RenderMesh&gt;();\n        var renderBoundsType = ComponentType.ReadWrite&lt;RenderBounds&gt;();\n        var localToWorldType = ComponentType.ReadWrite&lt;LocalToWorld&gt;();\n        entityArcheType = unitManager.CreateArchetype(translationType, scaleType, rotationType, renderType, renderBoundsType, localToWorldType);\n    }\n}</code></pre>\n<blockquote>\n<p>注意： RenderBounds 如果不加，会导致不显示。。</p>\n</blockquote>\n<p>6.2 实例2 自定义system</p>\n<p>System定义后，将自动执行update函数。</p>\n<pre><code class=\"csharp\">using Unity.Entities;\nusing Unity.Mathematics;\nusing Unity.Transforms;\n\npublic class MoveSystem : ComponentSystem\n{\n    protected override void OnUpdate()\n    {\n        Entities.ForEach((ref Translation trans, ref MoveBySpeedData moveSpeed, ref WaveData waveData) =&gt;\n        {\n            float zPos = waveData.amplitude * math.sin((float)Time.ElapsedTime * moveSpeed.Value\n                + trans.Value.x * waveData.xOffset + trans.Value.y * waveData.yOffset);\n            trans.Value = new float3(trans.Value.x, trans.Value.y, zPos);\n        });\n    }\n}\n</code></pre>\n<p>6.3 实例3 加入JOB与Burst</p>\n<p>在实例2的基础上加上Job和Burst</p>\n<pre><code class=\"csharp\">\nusing Unity.Burst;\nusing Unity.Collections;\nusing Unity.Entities;\nusing Unity.Jobs;\nusing Unity.Mathematics;\nusing Unity.Transforms;\n\npublic class MoveSystem : JobComponentSystem\n{\n    [BurstCompile]\n    private struct MoveJob : IJobChunk\n    {\n        public double ElapsedTime;\n\n        public ArchetypeChunkComponentType&lt;Translation&gt; TranslationType;\n        [ReadOnly] public ArchetypeChunkComponentType&lt;MoveBySpeedData&gt; MoveBySpeedDataType;\n        [ReadOnly] public ArchetypeChunkComponentType&lt;WaveData&gt; WaveDataType;\n        public uint LastSystemVersion;\n        public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex)\n        {\n\n            var chunkTrans = chunk.GetNativeArray(TranslationType);\n            var chunkSpeedDatas = chunk.GetNativeArray(MoveBySpeedDataType);\n            var chunkWaveDatas = chunk.GetNativeArray(WaveDataType);\n\n            for (var i = 0; i &lt; chunk.Count; i++)\n            {\n                var moveSpeed = chunkSpeedDatas[i];\n                var waveData = chunkWaveDatas[i];\n                var trans = chunkTrans[i];\n                float zPos = waveData.amplitude * math.sin((float)ElapsedTime * moveSpeed.Value\n               + trans.Value.x * waveData.xOffset + trans.Value.y * waveData.yOffset);\n\n                // Rotate something about its up vector at the speed given by RotationSpeed.\n                chunkTrans[i] = new Translation\n                {\n                    Value = new float3(trans.Value.x, trans.Value.y, zPos)\n                };\n            }\n        }\n    }\n    EntityQuery m_Group;\n    protected override void OnCreate()\n    {\n        m_Group = GetEntityQuery(ComponentType.ReadOnly&lt;MoveBySpeedData&gt;(),\n                               ComponentType.ReadOnly&lt;WaveData&gt;());\n    }\n\n    protected override JobHandle OnUpdate(JobHandle inputDeps)\n    {\n        var job = new MoveJob()\n        {\n            TranslationType = GetArchetypeChunkComponentType&lt;Translation&gt;(false),\n            MoveBySpeedDataType = GetArchetypeChunkComponentType&lt;MoveBySpeedData&gt;(true),\n            WaveDataType = GetArchetypeChunkComponentType&lt;WaveData&gt;(true),\n            ElapsedTime = Time.ElapsedTime\n        };\n        return job.Schedule(m_Group, inputDeps);\n    }\n}\n</code></pre>\n<h3 id=\"7-使用Conversion\"><a href=\"#7-使用Conversion\" class=\"headerlink\" title=\"7. 使用Conversion\"></a>7. 使用Conversion</h3><p>流程明细：</p>\n<pre><code class=\"c#\">// ??? &lt;- IDeclareReferencedPrefabs 调用.\nGameObjectDeclareReferencedObjectsGroup.Update()\n// ??? &lt;- discovery 阶段结束, 无法再声明更多 asset.\nGameObjectBeforeConversionGroup.Update()\nGameObjectConversionGroup.Update() &lt;-- 你的 Convert 方法在这时运行\nGameObjectAfterConversionGroup.Update()\n// ??? &lt;- LinkedEntityGroup + Prefab 都已就绪.\nGameObjectExportGroup.Update()</code></pre>\n<p>7.1 ConversionToEntity</p>\n<ul>\n<li>为GameObject添加ConversionToEntity将自动转换为ECS的entity. </li>\n<li>添加ConversionToEntity(Stop)将保持为原gameobject</li>\n</ul>\n<p>7.2 ConversionMode</p>\n<ul>\n<li>Convert And Destroy模式：如果没有conversion system处理的组件，在Conversion world 被带入的东西在world销毁时也同时销毁。</li>\n<li>Convert and inject 模式： 此模式下，相比上一个组件都会保留。<blockquote>\n<p>Convert and inject模式是用于当你需要在 conversion 的结果上面回溯原有对象的情况下才有用, 而 Hybrid Renderer 显然无需回溯。</p>\n</blockquote>\n</li>\n</ul>\n<p>7.3 IConvertGameObjectToEntity</p>\n<ul>\n<li>继承此接口，在方法Convert里自由控制conversion的过程<blockquote>\n<p>Unity 内置了另一种名为ConvertGameObjectToEntitySystem 的 conversion system. 该 system 会迭代 conversion world 中所有的GameObject, 接着使用GetComponents 并判断是否实现IConvertGameObjectToEntity 接口, 然后再调用该接口的.Convert 方法</p>\n</blockquote>\n</li>\n</ul>\n<p>7.4 LinkedEntityGroup</p>\n<ul>\n<li>为原层次结构做关联的组件。同时也是一个dynmaic buffer。 </li>\n<li>调用Instantiate方法时, 会同时实例化所有 buffer 中的 entity, 同时也会创建相同的LinkedEntityGroup. 注意实例化并不一定和ECS中的Prefab component 直接关联.</li>\n<li>调用DestroyEntity时也会同时销毁 LinkedEntityGroup中的所有 entity. 类似在编辑器中删除GameObject</li>\n<li>调用 entityManager.SetEnabled 加上的 Disabledcomponent 会告知 ECS 的查询系统忽略它们, 而 LinkedEntityGroup 中的 entity 也会受到同样的影响. 有点类似禁用GameObject 时同时会禁用整个层级树.</li>\n</ul>\n<blockquote>\n<p>当有子物体Disable状态时，此子物体自身不会生成linkedentitygroup的子结构,但可以手动在此disable上添加</p>\n</blockquote>\n<blockquote>\n<p>注意如果buffer 中的 entity 也有LinkedEntityGroup, 系统不会递归地执行instantiation/destroy/disabled 过程.<br>这些过程在具体执行当中也有一些细微不同.Instantiate和SetEnabled只要检测到 buffer 便在所有成员上一次性执行, 不会做其他更多事. 这意味着关联该 buffer 的 entity 必须要把自己包括在内才能正常工作. 然而DestroyEntity则无所谓, 因为它会先销毁传入的entity, 然后再迭代 buffer 中的 entity 进行销毁.<br>要注意LinkedEntityGroup 和 Parent并不一样 (虽然它们经常同时出现). 后者是递归地工作, 循环依赖也是不允许的.</p>\n</blockquote>\n<ul>\n<li>为gameobject添加<pre><code class=\"c#\">public class CubeConvert : MonoBehaviour, IConvertGameObjectToEntity\n{\n  public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n  {\n      conversionSystem.DeclareLinkedEntityGroup(this.gameObject);\n  }\n}</code></pre>\n</li>\n</ul>\n<blockquote>\n<p>在 entities-0.5.1版本里, TypeManager.cs 源码中可看到, 任何没有[InternalBufferCapacity] 的buffer 类型都会默认 128/size 的容量. LinkedEntityGroup里面装的是 entity, 因此其容量是 128/8 = 16 .<br>每个 Entity 关联的LinkedEntityGroup(或者其他未指定 capacity 的buffer) 将占据 128 bytes. 这是 chunk 容积变小的原因.<br>层级中超过16个子对象并不是什么好事, 一旦超过这个数量, 这些 linked entities 不得不从排列良好的 chunk 内存中挪到堆内存中. 可能 Unity 认为 16 是一个不太可能达到的值, 而 8 又太过于常见.<br>除非显式调用, LinkedEntityGroup仅仅在 prefab 的 conversion 过程中被自动创建, 因此你只需要注意你的 prefab 里面嵌套的 GameObject 数量<br>在运行时, 所有嵌套 prefab 和 prefab variant 工作流并不受影响, 系统内部只把它们看过一个单独的 prefab. 你无法把嵌套 prefab 从父 prefab 中拿出来, 并期望LinkedEntityGroup正常工作.<br>最后, 16个entities 一个 chunk ，  1MB 大概包含 60 个 chunk. 如上例, 你能在 1MB 存储大约 2700 个转换后的GameObject , 这样看来或许45 的 chunk 容量也不用太担心了(当然具体情况具体分析).</p>\n</blockquote>\n<p>7.5 创建额外的entity<br>使用如下方式：</p>\n<pre><code class=\"c#\">  Entity additional1 = conversionSystem.CreateAdditionalEntity(this.gameObject);\n        dstManager.SetName(additional1, $&quot;{this.name}_Add1&quot;);\n        Entity additional2 = conversionSystem.CreateAdditionalEntity(this.gameObject);\n        dstManager.SetName(additional2, $&quot;{this.name}_Add2&quot;);</code></pre>\n<blockquote>\n<p>注意：此方式创建的entity将不在linkedentitygroup内，且是完全空的entity</p>\n</blockquote>\n"},{"title":"Effective C++学习记录","_content":"\n#### 条款1: 习惯C++\nC++ 领域的四大块：\n* 1.C： 基础，语句，数组，指针等等\n* 2.Object-Oriented C: 继承，多态，封装\n* 3.Template C++: 泛型编程\n* 4. STL： 一种特殊的Template程序库，容器，迭代器，算法，对象等等规约\n\n#### 条款2：尽量以const, enum, inline替换 #define\n宁用编译器替换预处理器。\n* 1.使用声明式与定义式：如\n```c++\n//头文件\nclass GamePlayer{\nprivate:\n\tstatic const int NumTurns = 5;//声明时候指定数值\n}\n//实现文件\nconst int GamePlayer::NumTurns;//无需再次定义了\n```\n* 2.使用enum当int数组用\n```c++\nclass GamePlayer{\nprivate:\n\tenum{NumTurns =5};\n\tint scores[NumTurns];\n}\n```\n* 3.对于函数宏定义，使用Inline替代\n ```c++\n //替换以下define语句。\n //#define CALL_WITH_MAX(a,b) f(a>b?a:b);\n template<typename T>\n inline void callWithMax(const T&a,const T&b)\n {\n \tf(a>b?a:b);\n }\n ```\n\n","source":"_posts/Effective C++学习记录.md","raw":"---\ntitle: Effective C++学习记录\ncategories:\n- CPlusPlus\ntags: \n- C++\n---\n\n#### 条款1: 习惯C++\nC++ 领域的四大块：\n* 1.C： 基础，语句，数组，指针等等\n* 2.Object-Oriented C: 继承，多态，封装\n* 3.Template C++: 泛型编程\n* 4. STL： 一种特殊的Template程序库，容器，迭代器，算法，对象等等规约\n\n#### 条款2：尽量以const, enum, inline替换 #define\n宁用编译器替换预处理器。\n* 1.使用声明式与定义式：如\n```c++\n//头文件\nclass GamePlayer{\nprivate:\n\tstatic const int NumTurns = 5;//声明时候指定数值\n}\n//实现文件\nconst int GamePlayer::NumTurns;//无需再次定义了\n```\n* 2.使用enum当int数组用\n```c++\nclass GamePlayer{\nprivate:\n\tenum{NumTurns =5};\n\tint scores[NumTurns];\n}\n```\n* 3.对于函数宏定义，使用Inline替代\n ```c++\n //替换以下define语句。\n //#define CALL_WITH_MAX(a,b) f(a>b?a:b);\n template<typename T>\n inline void callWithMax(const T&a,const T&b)\n {\n \tf(a>b?a:b);\n }\n ```\n\n","slug":"Effective C++学习记录","published":1,"date":"2020-09-08T03:23:20.714Z","updated":"2020-09-08T03:23:20.714Z","_id":"ckdpcluxr000q8sr31uk8g7la","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"条款1-习惯C\"><a href=\"#条款1-习惯C\" class=\"headerlink\" title=\"条款1: 习惯C++\"></a>条款1: 习惯C++</h4><p>C++ 领域的四大块：</p>\n<ul>\n<li>1.C： 基础，语句，数组，指针等等</li>\n<li>2.Object-Oriented C: 继承，多态，封装</li>\n<li>3.Template C++: 泛型编程</li>\n<li><ol start=\"4\">\n<li>STL： 一种特殊的Template程序库，容器，迭代器，算法，对象等等规约</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"条款2：尽量以const-enum-inline替换-define\"><a href=\"#条款2：尽量以const-enum-inline替换-define\" class=\"headerlink\" title=\"条款2：尽量以const, enum, inline替换 #define\"></a>条款2：尽量以const, enum, inline替换 #define</h4><p>宁用编译器替换预处理器。</p>\n<ul>\n<li>1.使用声明式与定义式：如<pre><code class=\"c++\">//头文件\nclass GamePlayer{\nprivate:\n  static const int NumTurns = 5;//声明时候指定数值\n}\n//实现文件\nconst int GamePlayer::NumTurns;//无需再次定义了</code></pre>\n</li>\n<li>2.使用enum当int数组用<pre><code class=\"c++\">class GamePlayer{\nprivate:\n  enum{NumTurns =5};\n  int scores[NumTurns];\n}</code></pre>\n</li>\n<li>3.对于函数宏定义，使用Inline替代<pre><code class=\"c++\">//替换以下define语句。\n//#define CALL_WITH_MAX(a,b) f(a&gt;b?a:b);\ntemplate&lt;typename T&gt;\ninline void callWithMax(const T&amp;a,const T&amp;b)\n{\n   f(a&gt;b?a:b);\n}</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"条款1-习惯C\"><a href=\"#条款1-习惯C\" class=\"headerlink\" title=\"条款1: 习惯C++\"></a>条款1: 习惯C++</h4><p>C++ 领域的四大块：</p>\n<ul>\n<li>1.C： 基础，语句，数组，指针等等</li>\n<li>2.Object-Oriented C: 继承，多态，封装</li>\n<li>3.Template C++: 泛型编程</li>\n<li><ol start=\"4\">\n<li>STL： 一种特殊的Template程序库，容器，迭代器，算法，对象等等规约</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"条款2：尽量以const-enum-inline替换-define\"><a href=\"#条款2：尽量以const-enum-inline替换-define\" class=\"headerlink\" title=\"条款2：尽量以const, enum, inline替换 #define\"></a>条款2：尽量以const, enum, inline替换 #define</h4><p>宁用编译器替换预处理器。</p>\n<ul>\n<li>1.使用声明式与定义式：如<pre><code class=\"c++\">//头文件\nclass GamePlayer{\nprivate:\n  static const int NumTurns = 5;//声明时候指定数值\n}\n//实现文件\nconst int GamePlayer::NumTurns;//无需再次定义了</code></pre>\n</li>\n<li>2.使用enum当int数组用<pre><code class=\"c++\">class GamePlayer{\nprivate:\n  enum{NumTurns =5};\n  int scores[NumTurns];\n}</code></pre>\n</li>\n<li>3.对于函数宏定义，使用Inline替代<pre><code class=\"c++\">//替换以下define语句。\n//#define CALL_WITH_MAX(a,b) f(a&gt;b?a:b);\ntemplate&lt;typename T&gt;\ninline void callWithMax(const T&amp;a,const T&amp;b)\n{\n   f(a&gt;b?a:b);\n}</code></pre>\n</li>\n</ul>\n"},{"title":"ECS框架的思考","_content":"\n# 对比ECSGameEngine框架的问题：\n1.Archetype加入的优势 ？\n2.Component与Entity不使用类概念的好处？\n\n\n\n# 开发模式的变更（对比ECSGameEngine）：\n1.System与数据对象之间无组合关系\n* Unity ECS\n读取所有数据方式都一样\n* A: 在Awake时通过GetComponentGroup 注册需要的component\n* B: 处理时使用group.ToComponentDataArray拿到Entity. 再从Entity取出Component数据\n\n* ECSGameEngine：\n读取其他数据：需要访问其他的System或某个manager来获取。\n* A: 新建一个Entity对象，将Component数据预先存到对象里\n* B: 此System需要某个Entity时，在awake时将Entity实例加入进去，访问其下Component拿数据\n\n>ECSGameEngine框架，Component，Entity与System有组合关系，如果有共享Entity数据，这时要么System间相互访问，要么借助另一个公共类将Entity存起来。\n>Unity的ECS，Entity是直属于EntityManager<- World层的。Entity与System没有任何关联。 Component 对应存储在Archetype中，并有entity的标签（id），System会通过componen类型找到对应的Entity，再从entity获取数据内容。\n\n2.内存优化\n\n* Unity ECS\n同类的Component 存在Archetype中，Archetype存储着一堆chunk，一个chunk 16KB.\n\n* ECSGameEngine\n所有都为类，都将占用堆内存，第一次实例时内存将会有一个峰值，多次进出将重复利用内存。\n\n3.应用层差别\n\n* Unity ECS:\n\t*A: ECS.TypeManager.RegisterType(\"MyComponentData\", {value=0}) --装载时即指定此Component数据（适合全局）\n\t*B: 在拥有Entity时，ECS.EntityManager:SetComponentData(entity, \"MyComponentData\", {value=123}) --通过设置entity里的数据设置（适合局部修改）\n    LUA: Inject方式\n    *A：使用Inject函数将Component名字注入\n    *B：在SystemUpdate中接收处理，使用注入的别名+数组索引号取出对象\n\t\n* ECSGameEngine:  \n\t* A： 定义一个类，继承自EntityComponent\n\t* B:  找到一个Entity来挂载或定义一个新的Entity类，继承自Entity\n\t* C:  System需要添加些entity，再通过此entity拿到component\n\n4.LUA层的实践过程\n\n* 创建ArcheType的过程\n* 1. 入口：EntityManager - CreateArchetype(types)。 \n    > 调用ComponentTypeInArcheType，创建一个Entity类型的type放在其第一位。\n    > 原types数组内容往后面放入当cachedArcheTypes中，设置长度+1\n* 2. 处理者： ArcheTypeManager。 cachedArcheTypes和长度，传入GetExistingArchetype() 看是否可拿到ArcheType对象。\n* 3. 只有当2不同拿到对象时，才执行此步！ 处理者：ArcheTypeManager。 \n将cacheArcheTypes和长度传入GetOrCreateArchetype()执行拿到ArcheType对象\n\n* 4. 入口：ArchetypeManager - CreateArchetypeInternal() \n    > 创建新的table，设置chunk大小，types，及把当前type设为PrevArchetype\n    > 处理者：EntityGroupManager- AddArchetypeIfMatching \n\n* 5. 入口：EntityGroupManager - AddArchetypeIfMatching(type) \n    > 取出lastGroupData，默认从ComponentSystem-GetComponentGroup创建\n    > 将type与ComponentGroup所属的archetype对应起来 \n    > IndexInArchetype存储上对应的类型\n\n* System中拿数据的过程\n* 1. 入口：ComponentSystem - GetComponentGroup({}) \n    System的Awake回调函数中添加GetComponentGroup，注册指定的archetype名，并得到group对象\n    \n    \n* 2. [在另一个地方创建好此Archetype的Entity后] 使用此group对象的ToComponentDataArray({})，获取到所有含些component数据。\n","source":"_posts/ECS框架的思考.md","raw":"---\ntitle: ECS框架的思考\ncategories:\n- Unity\n---\n\n# 对比ECSGameEngine框架的问题：\n1.Archetype加入的优势 ？\n2.Component与Entity不使用类概念的好处？\n\n\n\n# 开发模式的变更（对比ECSGameEngine）：\n1.System与数据对象之间无组合关系\n* Unity ECS\n读取所有数据方式都一样\n* A: 在Awake时通过GetComponentGroup 注册需要的component\n* B: 处理时使用group.ToComponentDataArray拿到Entity. 再从Entity取出Component数据\n\n* ECSGameEngine：\n读取其他数据：需要访问其他的System或某个manager来获取。\n* A: 新建一个Entity对象，将Component数据预先存到对象里\n* B: 此System需要某个Entity时，在awake时将Entity实例加入进去，访问其下Component拿数据\n\n>ECSGameEngine框架，Component，Entity与System有组合关系，如果有共享Entity数据，这时要么System间相互访问，要么借助另一个公共类将Entity存起来。\n>Unity的ECS，Entity是直属于EntityManager<- World层的。Entity与System没有任何关联。 Component 对应存储在Archetype中，并有entity的标签（id），System会通过componen类型找到对应的Entity，再从entity获取数据内容。\n\n2.内存优化\n\n* Unity ECS\n同类的Component 存在Archetype中，Archetype存储着一堆chunk，一个chunk 16KB.\n\n* ECSGameEngine\n所有都为类，都将占用堆内存，第一次实例时内存将会有一个峰值，多次进出将重复利用内存。\n\n3.应用层差别\n\n* Unity ECS:\n\t*A: ECS.TypeManager.RegisterType(\"MyComponentData\", {value=0}) --装载时即指定此Component数据（适合全局）\n\t*B: 在拥有Entity时，ECS.EntityManager:SetComponentData(entity, \"MyComponentData\", {value=123}) --通过设置entity里的数据设置（适合局部修改）\n    LUA: Inject方式\n    *A：使用Inject函数将Component名字注入\n    *B：在SystemUpdate中接收处理，使用注入的别名+数组索引号取出对象\n\t\n* ECSGameEngine:  \n\t* A： 定义一个类，继承自EntityComponent\n\t* B:  找到一个Entity来挂载或定义一个新的Entity类，继承自Entity\n\t* C:  System需要添加些entity，再通过此entity拿到component\n\n4.LUA层的实践过程\n\n* 创建ArcheType的过程\n* 1. 入口：EntityManager - CreateArchetype(types)。 \n    > 调用ComponentTypeInArcheType，创建一个Entity类型的type放在其第一位。\n    > 原types数组内容往后面放入当cachedArcheTypes中，设置长度+1\n* 2. 处理者： ArcheTypeManager。 cachedArcheTypes和长度，传入GetExistingArchetype() 看是否可拿到ArcheType对象。\n* 3. 只有当2不同拿到对象时，才执行此步！ 处理者：ArcheTypeManager。 \n将cacheArcheTypes和长度传入GetOrCreateArchetype()执行拿到ArcheType对象\n\n* 4. 入口：ArchetypeManager - CreateArchetypeInternal() \n    > 创建新的table，设置chunk大小，types，及把当前type设为PrevArchetype\n    > 处理者：EntityGroupManager- AddArchetypeIfMatching \n\n* 5. 入口：EntityGroupManager - AddArchetypeIfMatching(type) \n    > 取出lastGroupData，默认从ComponentSystem-GetComponentGroup创建\n    > 将type与ComponentGroup所属的archetype对应起来 \n    > IndexInArchetype存储上对应的类型\n\n* System中拿数据的过程\n* 1. 入口：ComponentSystem - GetComponentGroup({}) \n    System的Awake回调函数中添加GetComponentGroup，注册指定的archetype名，并得到group对象\n    \n    \n* 2. [在另一个地方创建好此Archetype的Entity后] 使用此group对象的ToComponentDataArray({})，获取到所有含些component数据。\n","slug":"ECS框架的思考","published":1,"date":"2020-09-08T03:23:20.714Z","updated":"2020-09-08T03:23:20.714Z","_id":"ckdpcluxt000t8sr36p5dc0ps","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"对比ECSGameEngine框架的问题：\"><a href=\"#对比ECSGameEngine框架的问题：\" class=\"headerlink\" title=\"对比ECSGameEngine框架的问题：\"></a>对比ECSGameEngine框架的问题：</h1><p>1.Archetype加入的优势 ？<br>2.Component与Entity不使用类概念的好处？</p>\n<h1 id=\"开发模式的变更（对比ECSGameEngine）：\"><a href=\"#开发模式的变更（对比ECSGameEngine）：\" class=\"headerlink\" title=\"开发模式的变更（对比ECSGameEngine）：\"></a>开发模式的变更（对比ECSGameEngine）：</h1><p>1.System与数据对象之间无组合关系</p>\n<ul>\n<li><p>Unity ECS<br>读取所有数据方式都一样</p>\n</li>\n<li><p>A: 在Awake时通过GetComponentGroup 注册需要的component</p>\n</li>\n<li><p>B: 处理时使用group.ToComponentDataArray拿到Entity. 再从Entity取出Component数据</p>\n</li>\n<li><p>ECSGameEngine：<br>读取其他数据：需要访问其他的System或某个manager来获取。</p>\n</li>\n<li><p>A: 新建一个Entity对象，将Component数据预先存到对象里</p>\n</li>\n<li><p>B: 此System需要某个Entity时，在awake时将Entity实例加入进去，访问其下Component拿数据</p>\n</li>\n</ul>\n<blockquote>\n<p>ECSGameEngine框架，Component，Entity与System有组合关系，如果有共享Entity数据，这时要么System间相互访问，要么借助另一个公共类将Entity存起来。<br>Unity的ECS，Entity是直属于EntityManager&lt;- World层的。Entity与System没有任何关联。 Component 对应存储在Archetype中，并有entity的标签（id），System会通过componen类型找到对应的Entity，再从entity获取数据内容。</p>\n</blockquote>\n<p>2.内存优化</p>\n<ul>\n<li><p>Unity ECS<br>同类的Component 存在Archetype中，Archetype存储着一堆chunk，一个chunk 16KB.</p>\n</li>\n<li><p>ECSGameEngine<br>所有都为类，都将占用堆内存，第一次实例时内存将会有一个峰值，多次进出将重复利用内存。</p>\n</li>\n</ul>\n<p>3.应用层差别</p>\n<ul>\n<li><p>Unity ECS:<br>  *A: ECS.TypeManager.RegisterType(“MyComponentData”, {value=0}) –装载时即指定此Component数据（适合全局）<br>  *B: 在拥有Entity时，ECS.EntityManager:SetComponentData(entity, “MyComponentData”, {value=123}) –通过设置entity里的数据设置（适合局部修改）<br>  LUA: Inject方式<br>  *A：使用Inject函数将Component名字注入<br>  *B：在SystemUpdate中接收处理，使用注入的别名+数组索引号取出对象</p>\n</li>\n<li><p>ECSGameEngine:  </p>\n<ul>\n<li>A： 定义一个类，继承自EntityComponent</li>\n<li>B:  找到一个Entity来挂载或定义一个新的Entity类，继承自Entity</li>\n<li>C:  System需要添加些entity，再通过此entity拿到component</li>\n</ul>\n</li>\n</ul>\n<p>4.LUA层的实践过程</p>\n<ul>\n<li><p>创建ArcheType的过程</p>\n</li>\n<li><ol>\n<li>入口：EntityManager - CreateArchetype(types)。 <blockquote>\n<p>调用ComponentTypeInArcheType，创建一个Entity类型的type放在其第一位。<br>原types数组内容往后面放入当cachedArcheTypes中，设置长度+1</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>处理者： ArcheTypeManager。 cachedArcheTypes和长度，传入GetExistingArchetype() 看是否可拿到ArcheType对象。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>只有当2不同拿到对象时，才执行此步！ 处理者：ArcheTypeManager。<br>将cacheArcheTypes和长度传入GetOrCreateArchetype()执行拿到ArcheType对象</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>入口：ArchetypeManager - CreateArchetypeInternal() <blockquote>\n<p>创建新的table，设置chunk大小，types，及把当前type设为PrevArchetype<br>处理者：EntityGroupManager- AddArchetypeIfMatching </p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>入口：EntityGroupManager - AddArchetypeIfMatching(type) <blockquote>\n<p>取出lastGroupData，默认从ComponentSystem-GetComponentGroup创建<br>将type与ComponentGroup所属的archetype对应起来<br>IndexInArchetype存储上对应的类型</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><p>System中拿数据的过程</p>\n</li>\n<li><ol>\n<li>入口：ComponentSystem - GetComponentGroup({})<br>System的Awake回调函数中添加GetComponentGroup，注册指定的archetype名，并得到group对象</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><ol start=\"2\">\n<li>[在另一个地方创建好此Archetype的Entity后] 使用此group对象的ToComponentDataArray({})，获取到所有含些component数据。</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"对比ECSGameEngine框架的问题：\"><a href=\"#对比ECSGameEngine框架的问题：\" class=\"headerlink\" title=\"对比ECSGameEngine框架的问题：\"></a>对比ECSGameEngine框架的问题：</h1><p>1.Archetype加入的优势 ？<br>2.Component与Entity不使用类概念的好处？</p>\n<h1 id=\"开发模式的变更（对比ECSGameEngine）：\"><a href=\"#开发模式的变更（对比ECSGameEngine）：\" class=\"headerlink\" title=\"开发模式的变更（对比ECSGameEngine）：\"></a>开发模式的变更（对比ECSGameEngine）：</h1><p>1.System与数据对象之间无组合关系</p>\n<ul>\n<li><p>Unity ECS<br>读取所有数据方式都一样</p>\n</li>\n<li><p>A: 在Awake时通过GetComponentGroup 注册需要的component</p>\n</li>\n<li><p>B: 处理时使用group.ToComponentDataArray拿到Entity. 再从Entity取出Component数据</p>\n</li>\n<li><p>ECSGameEngine：<br>读取其他数据：需要访问其他的System或某个manager来获取。</p>\n</li>\n<li><p>A: 新建一个Entity对象，将Component数据预先存到对象里</p>\n</li>\n<li><p>B: 此System需要某个Entity时，在awake时将Entity实例加入进去，访问其下Component拿数据</p>\n</li>\n</ul>\n<blockquote>\n<p>ECSGameEngine框架，Component，Entity与System有组合关系，如果有共享Entity数据，这时要么System间相互访问，要么借助另一个公共类将Entity存起来。<br>Unity的ECS，Entity是直属于EntityManager&lt;- World层的。Entity与System没有任何关联。 Component 对应存储在Archetype中，并有entity的标签（id），System会通过componen类型找到对应的Entity，再从entity获取数据内容。</p>\n</blockquote>\n<p>2.内存优化</p>\n<ul>\n<li><p>Unity ECS<br>同类的Component 存在Archetype中，Archetype存储着一堆chunk，一个chunk 16KB.</p>\n</li>\n<li><p>ECSGameEngine<br>所有都为类，都将占用堆内存，第一次实例时内存将会有一个峰值，多次进出将重复利用内存。</p>\n</li>\n</ul>\n<p>3.应用层差别</p>\n<ul>\n<li><p>Unity ECS:<br>  *A: ECS.TypeManager.RegisterType(“MyComponentData”, {value=0}) –装载时即指定此Component数据（适合全局）<br>  *B: 在拥有Entity时，ECS.EntityManager:SetComponentData(entity, “MyComponentData”, {value=123}) –通过设置entity里的数据设置（适合局部修改）<br>  LUA: Inject方式<br>  *A：使用Inject函数将Component名字注入<br>  *B：在SystemUpdate中接收处理，使用注入的别名+数组索引号取出对象</p>\n</li>\n<li><p>ECSGameEngine:  </p>\n<ul>\n<li>A： 定义一个类，继承自EntityComponent</li>\n<li>B:  找到一个Entity来挂载或定义一个新的Entity类，继承自Entity</li>\n<li>C:  System需要添加些entity，再通过此entity拿到component</li>\n</ul>\n</li>\n</ul>\n<p>4.LUA层的实践过程</p>\n<ul>\n<li><p>创建ArcheType的过程</p>\n</li>\n<li><ol>\n<li>入口：EntityManager - CreateArchetype(types)。 <blockquote>\n<p>调用ComponentTypeInArcheType，创建一个Entity类型的type放在其第一位。<br>原types数组内容往后面放入当cachedArcheTypes中，设置长度+1</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>处理者： ArcheTypeManager。 cachedArcheTypes和长度，传入GetExistingArchetype() 看是否可拿到ArcheType对象。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>只有当2不同拿到对象时，才执行此步！ 处理者：ArcheTypeManager。<br>将cacheArcheTypes和长度传入GetOrCreateArchetype()执行拿到ArcheType对象</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>入口：ArchetypeManager - CreateArchetypeInternal() <blockquote>\n<p>创建新的table，设置chunk大小，types，及把当前type设为PrevArchetype<br>处理者：EntityGroupManager- AddArchetypeIfMatching </p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>入口：EntityGroupManager - AddArchetypeIfMatching(type) <blockquote>\n<p>取出lastGroupData，默认从ComponentSystem-GetComponentGroup创建<br>将type与ComponentGroup所属的archetype对应起来<br>IndexInArchetype存储上对应的类型</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><p>System中拿数据的过程</p>\n</li>\n<li><ol>\n<li>入口：ComponentSystem - GetComponentGroup({})<br>System的Awake回调函数中添加GetComponentGroup，注册指定的archetype名，并得到group对象</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><ol start=\"2\">\n<li>[在另一个地方创建好此Archetype的Entity后] 使用此group对象的ToComponentDataArray({})，获取到所有含些component数据。</li>\n</ol>\n</li>\n</ul>\n"},{"title":"Jenkins打包事项","_content":"\n# Jenkins 打包说明\n\n\n\n## 脚本准备\n\n### 自动化脚本\n\n> 1. AutoCi.rar文件\n> 2. 将文件解压至与Assets同级目录即可\n\n### Unity脚本\n\n> 1. Editor 目录下创建类BundleMakerUtil.cs， 添加如下函数：\n>\n>    ```C#\n>      public static bool HasRawArg(string name)\n>      {\n>          var args = System.Environment.GetCommandLineArgs();\n>          for (int i = 0; i < args.Length; i++)\n>          {\n>              if (args[i].Trim() == name)\n>              {\n>                  return true;\n>              }\n>          }\n>          return false;\n>      }\n>    \n>    ```\n>\n>    \n>\n> 2. Editor目录下创建类BuilderMenu.cs　使用命名空间SGameBundleMaker. （也可自定义，但需要修改auto_ci.py里的配置）\n>\n> 3. BuilderMenu.cs类中创建 build_bundle_for_ci() 静态函数，示例：\n\n ```c#\n   public static void build_bundle_for_ci()\n   {\n   \t\t //... Code for build build \n          AssetBundleManifest bundle_manifest = null;\n            try\n            {\n                bundle_manifest = BuildPipeline.BuildAssetBundles(BundleMaker.BUNDLE_DIR, all_build, BuildAssetBundleOptions.DeterministicAssetBundle | BuildAssetBundleOptions.ChunkBasedCompression, EditorUserBuildSettings.activeBuildTarget);\n            }\n            catch (Exception e)\n            {\n                error_code_ = BundleMakerErrorCode.UNKNOWN;\n                Debug.LogError(\"BuildAssetBundles Error: \" + e.Message);\n                return;\n            }\n   }\n ```\n\n\n\n> 4. BuilderMenu.cs中创建 build_for_ci() 静态函数\n>\n>    注：-proj, -path 也可修改，需要与auto_ci.py中代码对应\n>\n>    示例如下:\n\n```c#\npublic static void build_for_ci()\n{\n    //！Builder类需要自己实现，具体作为对应不同平台打包用\n    string build_path = string.Empty;\n    #if UNITY_ANDROID\n        //是否输出项目文件或APK的标识\n        bool is_proj = BundleMakerUtil.HasRawArg(\"-proj\");\n    Debug.Log(\"build_for_ci, is_proj: \" + is_proj);\n    Builder.is_android_proj = is_proj;\n    if(Builder.is_android_proj){\n        build_path = Const.PROJECT_DIR + \"autopack/android/XGameProject\";\n    }else{\n        build_path = Const.PROJECT_DIR + \"autopack/android/XGame.apk\";\n    }\n    #elif UNITY_IPHONE\n        build_path = BundleMakerUtil.GetArg(\"-path\");\n    if (string.IsNullOrEmpty(build_path))\n    {\n        Debug.LogError(\"------build path null\");\n        return;\n    }\n    Debug.Log(\"build_for_ci, build_path: \" + build_path);\n    //build_path = string.Format(\"{0}autopack/ios/XcodeProject{1}\", new DirectoryInfo(Const.PROJECT_DIR).Parent.FullName, System.DateTime.Now.ToString(\"yyyy-MM-dd--HH-mm-ss\"));\n    #else\n        build_path = Const.PROJECT_DIR + \"autopack/win32/XGame.exe\";\n    #endif\n        //是否是debug版本的标识\n        bool is_debug = BundleMakerUtil.HasRawArg(\"-debug\");\n    Builder.is_debug_build_ = is_debug; \n    Builder.build_package(build_path, true);\n}\n```\n\n\n\n## Jenkins配置\n\n> 1. Jenkins安装 Powershell插件，在 插件列表中搜索到这个：\n\n<img src=\"./images/1571217538404.png\" alt=\"1571217538404\" style=\"zoom:100%;\" />\n\n> 2. 安装完后，重启下Jetkins\n> 3. 在项目配置->构建 里选择使用Windows PowerShell:\n\n<img src=\"./images/1571217610540.png\" alt=\"1571217610540\" style=\"zoom:100%;\" />\n\n> 4. 添加如下配置在Command格内：\n\n```powershell\necho ${ENV:WORKSPACE}\ncd ${ENV:WORKSPACE}/Unity\n./AutoCi/autobuild_android.ps1\n```\n\n<img src=\"./images/1571217788247.png\" alt=\"1571217788247\" style=\"zoom:100%;\" />\n\n\n\n## 打什么样的包？  设置环境变量\n\n> 1. 找到Jenkins环境变量设置\n>\n>    **Manage Jenkins**   ->  **Configure System**\n\n\n\n![1571216524617](./images/1571216524617.png)\n\n<img src=\"./images/1571216565243.png\" alt=\"1571216565243\" style=\"zoom:67%;\" />\n\n\n\n> 2.  打 Apk \n\n设置 IsApk 为 true\n\n\n\n> 3. 打 aar到平台\n\n设置 IsApk 为false或其他\n\n\n\n> 4. 带Debug的包\n\n设置 IsDebug为true,  当不为true时则默认为relase包\n\n\n\n## CI的执行脚本说明\n\n> 1. auto_ci.py -仅打aar到平台需要\n>    * 修改manifest.xml文件，去掉intent-filter\n>    * 修改build.gradle文件，设置为library，去掉applicationId，设置gradle版本，添加jcenter(),google()到 all projects块\n> 2. jksdk_util.py -上传aar到平台\n>    \n>    * 需要打开文件，更改下id为对应项目\n>    \n>    * 上传到平台，需要改成指定格式的名字： \n>    \n>        游戏名称-框架类型-debug/release-version.出包号.aar\n\n\n\n## 注意事项\n\n> 1. Powershell 脚本访问Jenkins环境变量记得加 **ENV:** 前缀\n> 2. 在build.gradle加入的all projects块的代码，是由于gradle有时会找不到相关的jar包，又不会启动自动下载导致\n\n","source":"_posts/Jenkins打包事项.md","raw":"---\ntitle: Jenkins打包事项\ncategories:\n- 工作相关\ntags: \n- Jenkins\n- CI\n---\n\n# Jenkins 打包说明\n\n\n\n## 脚本准备\n\n### 自动化脚本\n\n> 1. AutoCi.rar文件\n> 2. 将文件解压至与Assets同级目录即可\n\n### Unity脚本\n\n> 1. Editor 目录下创建类BundleMakerUtil.cs， 添加如下函数：\n>\n>    ```C#\n>      public static bool HasRawArg(string name)\n>      {\n>          var args = System.Environment.GetCommandLineArgs();\n>          for (int i = 0; i < args.Length; i++)\n>          {\n>              if (args[i].Trim() == name)\n>              {\n>                  return true;\n>              }\n>          }\n>          return false;\n>      }\n>    \n>    ```\n>\n>    \n>\n> 2. Editor目录下创建类BuilderMenu.cs　使用命名空间SGameBundleMaker. （也可自定义，但需要修改auto_ci.py里的配置）\n>\n> 3. BuilderMenu.cs类中创建 build_bundle_for_ci() 静态函数，示例：\n\n ```c#\n   public static void build_bundle_for_ci()\n   {\n   \t\t //... Code for build build \n          AssetBundleManifest bundle_manifest = null;\n            try\n            {\n                bundle_manifest = BuildPipeline.BuildAssetBundles(BundleMaker.BUNDLE_DIR, all_build, BuildAssetBundleOptions.DeterministicAssetBundle | BuildAssetBundleOptions.ChunkBasedCompression, EditorUserBuildSettings.activeBuildTarget);\n            }\n            catch (Exception e)\n            {\n                error_code_ = BundleMakerErrorCode.UNKNOWN;\n                Debug.LogError(\"BuildAssetBundles Error: \" + e.Message);\n                return;\n            }\n   }\n ```\n\n\n\n> 4. BuilderMenu.cs中创建 build_for_ci() 静态函数\n>\n>    注：-proj, -path 也可修改，需要与auto_ci.py中代码对应\n>\n>    示例如下:\n\n```c#\npublic static void build_for_ci()\n{\n    //！Builder类需要自己实现，具体作为对应不同平台打包用\n    string build_path = string.Empty;\n    #if UNITY_ANDROID\n        //是否输出项目文件或APK的标识\n        bool is_proj = BundleMakerUtil.HasRawArg(\"-proj\");\n    Debug.Log(\"build_for_ci, is_proj: \" + is_proj);\n    Builder.is_android_proj = is_proj;\n    if(Builder.is_android_proj){\n        build_path = Const.PROJECT_DIR + \"autopack/android/XGameProject\";\n    }else{\n        build_path = Const.PROJECT_DIR + \"autopack/android/XGame.apk\";\n    }\n    #elif UNITY_IPHONE\n        build_path = BundleMakerUtil.GetArg(\"-path\");\n    if (string.IsNullOrEmpty(build_path))\n    {\n        Debug.LogError(\"------build path null\");\n        return;\n    }\n    Debug.Log(\"build_for_ci, build_path: \" + build_path);\n    //build_path = string.Format(\"{0}autopack/ios/XcodeProject{1}\", new DirectoryInfo(Const.PROJECT_DIR).Parent.FullName, System.DateTime.Now.ToString(\"yyyy-MM-dd--HH-mm-ss\"));\n    #else\n        build_path = Const.PROJECT_DIR + \"autopack/win32/XGame.exe\";\n    #endif\n        //是否是debug版本的标识\n        bool is_debug = BundleMakerUtil.HasRawArg(\"-debug\");\n    Builder.is_debug_build_ = is_debug; \n    Builder.build_package(build_path, true);\n}\n```\n\n\n\n## Jenkins配置\n\n> 1. Jenkins安装 Powershell插件，在 插件列表中搜索到这个：\n\n<img src=\"./images/1571217538404.png\" alt=\"1571217538404\" style=\"zoom:100%;\" />\n\n> 2. 安装完后，重启下Jetkins\n> 3. 在项目配置->构建 里选择使用Windows PowerShell:\n\n<img src=\"./images/1571217610540.png\" alt=\"1571217610540\" style=\"zoom:100%;\" />\n\n> 4. 添加如下配置在Command格内：\n\n```powershell\necho ${ENV:WORKSPACE}\ncd ${ENV:WORKSPACE}/Unity\n./AutoCi/autobuild_android.ps1\n```\n\n<img src=\"./images/1571217788247.png\" alt=\"1571217788247\" style=\"zoom:100%;\" />\n\n\n\n## 打什么样的包？  设置环境变量\n\n> 1. 找到Jenkins环境变量设置\n>\n>    **Manage Jenkins**   ->  **Configure System**\n\n\n\n![1571216524617](./images/1571216524617.png)\n\n<img src=\"./images/1571216565243.png\" alt=\"1571216565243\" style=\"zoom:67%;\" />\n\n\n\n> 2.  打 Apk \n\n设置 IsApk 为 true\n\n\n\n> 3. 打 aar到平台\n\n设置 IsApk 为false或其他\n\n\n\n> 4. 带Debug的包\n\n设置 IsDebug为true,  当不为true时则默认为relase包\n\n\n\n## CI的执行脚本说明\n\n> 1. auto_ci.py -仅打aar到平台需要\n>    * 修改manifest.xml文件，去掉intent-filter\n>    * 修改build.gradle文件，设置为library，去掉applicationId，设置gradle版本，添加jcenter(),google()到 all projects块\n> 2. jksdk_util.py -上传aar到平台\n>    \n>    * 需要打开文件，更改下id为对应项目\n>    \n>    * 上传到平台，需要改成指定格式的名字： \n>    \n>        游戏名称-框架类型-debug/release-version.出包号.aar\n\n\n\n## 注意事项\n\n> 1. Powershell 脚本访问Jenkins环境变量记得加 **ENV:** 前缀\n> 2. 在build.gradle加入的all projects块的代码，是由于gradle有时会找不到相关的jar包，又不会启动自动下载导致\n\n","slug":"Jenkins打包事项","published":1,"date":"2020-09-08T03:23:20.715Z","updated":"2020-09-08T03:23:20.715Z","_id":"ckdpcluy000158sr3gkmlsi1v","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Jenkins-打包说明\"><a href=\"#Jenkins-打包说明\" class=\"headerlink\" title=\"Jenkins 打包说明\"></a>Jenkins 打包说明</h1><h2 id=\"脚本准备\"><a href=\"#脚本准备\" class=\"headerlink\" title=\"脚本准备\"></a>脚本准备</h2><h3 id=\"自动化脚本\"><a href=\"#自动化脚本\" class=\"headerlink\" title=\"自动化脚本\"></a>自动化脚本</h3><blockquote>\n<ol>\n<li>AutoCi.rar文件</li>\n<li>将文件解压至与Assets同级目录即可</li>\n</ol>\n</blockquote>\n<h3 id=\"Unity脚本\"><a href=\"#Unity脚本\" class=\"headerlink\" title=\"Unity脚本\"></a>Unity脚本</h3><blockquote>\n<ol>\n<li><p>Editor 目录下创建类BundleMakerUtil.cs， 添加如下函数：</p>\n<pre><code class=\"C#\">  public static bool HasRawArg(string name)\n  {\n      var args = System.Environment.GetCommandLineArgs();\n      for (int i = 0; i &lt; args.Length; i++)\n      {\n          if (args[i].Trim() == name)\n          {\n              return true;\n          }\n      }\n      return false;\n  }\n</code></pre>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>Editor目录下创建类BuilderMenu.cs　使用命名空间SGameBundleMaker. （也可自定义，但需要修改auto_ci.py里的配置）</p>\n</li>\n<li><p>BuilderMenu.cs类中创建 build_bundle_for_ci() 静态函数，示例：</p>\n</li>\n</ol>\n</blockquote>\n<pre><code class=\"c#\">   public static void build_bundle_for_ci()\n   {\n            //... Code for build build \n          AssetBundleManifest bundle_manifest = null;\n            try\n            {\n                bundle_manifest = BuildPipeline.BuildAssetBundles(BundleMaker.BUNDLE_DIR, all_build, BuildAssetBundleOptions.DeterministicAssetBundle | BuildAssetBundleOptions.ChunkBasedCompression, EditorUserBuildSettings.activeBuildTarget);\n            }\n            catch (Exception e)\n            {\n                error_code_ = BundleMakerErrorCode.UNKNOWN;\n                Debug.LogError(&quot;BuildAssetBundles Error: &quot; + e.Message);\n                return;\n            }\n   }</code></pre>\n<blockquote>\n<ol start=\"4\">\n<li><p>BuilderMenu.cs中创建 build_for_ci() 静态函数</p>\n<p>注：-proj, -path 也可修改，需要与auto_ci.py中代码对应</p>\n<p>示例如下:</p>\n</li>\n</ol>\n</blockquote>\n<pre><code class=\"c#\">public static void build_for_ci()\n{\n    //！Builder类需要自己实现，具体作为对应不同平台打包用\n    string build_path = string.Empty;\n    #if UNITY_ANDROID\n        //是否输出项目文件或APK的标识\n        bool is_proj = BundleMakerUtil.HasRawArg(&quot;-proj&quot;);\n    Debug.Log(&quot;build_for_ci, is_proj: &quot; + is_proj);\n    Builder.is_android_proj = is_proj;\n    if(Builder.is_android_proj){\n        build_path = Const.PROJECT_DIR + &quot;autopack/android/XGameProject&quot;;\n    }else{\n        build_path = Const.PROJECT_DIR + &quot;autopack/android/XGame.apk&quot;;\n    }\n    #elif UNITY_IPHONE\n        build_path = BundleMakerUtil.GetArg(&quot;-path&quot;);\n    if (string.IsNullOrEmpty(build_path))\n    {\n        Debug.LogError(&quot;------build path null&quot;);\n        return;\n    }\n    Debug.Log(&quot;build_for_ci, build_path: &quot; + build_path);\n    //build_path = string.Format(&quot;{0}autopack/ios/XcodeProject{1}&quot;, new DirectoryInfo(Const.PROJECT_DIR).Parent.FullName, System.DateTime.Now.ToString(&quot;yyyy-MM-dd--HH-mm-ss&quot;));\n    #else\n        build_path = Const.PROJECT_DIR + &quot;autopack/win32/XGame.exe&quot;;\n    #endif\n        //是否是debug版本的标识\n        bool is_debug = BundleMakerUtil.HasRawArg(&quot;-debug&quot;);\n    Builder.is_debug_build_ = is_debug; \n    Builder.build_package(build_path, true);\n}</code></pre>\n<h2 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h2><blockquote>\n<ol>\n<li>Jenkins安装 Powershell插件，在 插件列表中搜索到这个：</li>\n</ol>\n</blockquote>\n<img src=\"./images/1571217538404.png\" alt=\"1571217538404\" style=\"zoom:100%;\" />\n\n<blockquote>\n<ol start=\"2\">\n<li>安装完后，重启下Jetkins</li>\n<li>在项目配置-&gt;构建 里选择使用Windows PowerShell:</li>\n</ol>\n</blockquote>\n<img src=\"./images/1571217610540.png\" alt=\"1571217610540\" style=\"zoom:100%;\" />\n\n<blockquote>\n<ol start=\"4\">\n<li>添加如下配置在Command格内：</li>\n</ol>\n</blockquote>\n<pre><code class=\"powershell\">echo ${ENV:WORKSPACE}\ncd ${ENV:WORKSPACE}/Unity\n./AutoCi/autobuild_android.ps1</code></pre>\n<img src=\"./images/1571217788247.png\" alt=\"1571217788247\" style=\"zoom:100%;\" />\n\n\n\n<h2 id=\"打什么样的包？-设置环境变量\"><a href=\"#打什么样的包？-设置环境变量\" class=\"headerlink\" title=\"打什么样的包？  设置环境变量\"></a>打什么样的包？  设置环境变量</h2><blockquote>\n<ol>\n<li><p>找到Jenkins环境变量设置</p>\n<p><strong>Manage Jenkins</strong>   -&gt;  <strong>Configure System</strong></p>\n</li>\n</ol>\n</blockquote>\n<p><img src=\"./images/1571216524617.png\" alt=\"1571216524617\"></p>\n<img src=\"./images/1571216565243.png\" alt=\"1571216565243\" style=\"zoom:67%;\" />\n\n\n\n<blockquote>\n<ol start=\"2\">\n<li>打 Apk </li>\n</ol>\n</blockquote>\n<p>设置 IsApk 为 true</p>\n<blockquote>\n<ol start=\"3\">\n<li>打 aar到平台</li>\n</ol>\n</blockquote>\n<p>设置 IsApk 为false或其他</p>\n<blockquote>\n<ol start=\"4\">\n<li>带Debug的包</li>\n</ol>\n</blockquote>\n<p>设置 IsDebug为true,  当不为true时则默认为relase包</p>\n<h2 id=\"CI的执行脚本说明\"><a href=\"#CI的执行脚本说明\" class=\"headerlink\" title=\"CI的执行脚本说明\"></a>CI的执行脚本说明</h2><blockquote>\n<ol>\n<li><p>auto_ci.py -仅打aar到平台需要</p>\n<ul>\n<li>修改manifest.xml文件，去掉intent-filter</li>\n<li>修改build.gradle文件，设置为library，去掉applicationId，设置gradle版本，添加jcenter(),google()到 all projects块</li>\n</ul>\n</li>\n<li><p>jksdk_util.py -上传aar到平台</p>\n<ul>\n<li><p>需要打开文件，更改下id为对应项目</p>\n</li>\n<li><p>上传到平台，需要改成指定格式的名字： </p>\n<p>  游戏名称-框架类型-debug/release-version.出包号.aar</p>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><blockquote>\n<ol>\n<li>Powershell 脚本访问Jenkins环境变量记得加 <strong>ENV:</strong> 前缀</li>\n<li>在build.gradle加入的all projects块的代码，是由于gradle有时会找不到相关的jar包，又不会启动自动下载导致</li>\n</ol>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Jenkins-打包说明\"><a href=\"#Jenkins-打包说明\" class=\"headerlink\" title=\"Jenkins 打包说明\"></a>Jenkins 打包说明</h1><h2 id=\"脚本准备\"><a href=\"#脚本准备\" class=\"headerlink\" title=\"脚本准备\"></a>脚本准备</h2><h3 id=\"自动化脚本\"><a href=\"#自动化脚本\" class=\"headerlink\" title=\"自动化脚本\"></a>自动化脚本</h3><blockquote>\n<ol>\n<li>AutoCi.rar文件</li>\n<li>将文件解压至与Assets同级目录即可</li>\n</ol>\n</blockquote>\n<h3 id=\"Unity脚本\"><a href=\"#Unity脚本\" class=\"headerlink\" title=\"Unity脚本\"></a>Unity脚本</h3><blockquote>\n<ol>\n<li><p>Editor 目录下创建类BundleMakerUtil.cs， 添加如下函数：</p>\n<pre><code class=\"C#\">  public static bool HasRawArg(string name)\n  {\n      var args = System.Environment.GetCommandLineArgs();\n      for (int i = 0; i &lt; args.Length; i++)\n      {\n          if (args[i].Trim() == name)\n          {\n              return true;\n          }\n      }\n      return false;\n  }\n</code></pre>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>Editor目录下创建类BuilderMenu.cs　使用命名空间SGameBundleMaker. （也可自定义，但需要修改auto_ci.py里的配置）</p>\n</li>\n<li><p>BuilderMenu.cs类中创建 build_bundle_for_ci() 静态函数，示例：</p>\n</li>\n</ol>\n</blockquote>\n<pre><code class=\"c#\">   public static void build_bundle_for_ci()\n   {\n            //... Code for build build \n          AssetBundleManifest bundle_manifest = null;\n            try\n            {\n                bundle_manifest = BuildPipeline.BuildAssetBundles(BundleMaker.BUNDLE_DIR, all_build, BuildAssetBundleOptions.DeterministicAssetBundle | BuildAssetBundleOptions.ChunkBasedCompression, EditorUserBuildSettings.activeBuildTarget);\n            }\n            catch (Exception e)\n            {\n                error_code_ = BundleMakerErrorCode.UNKNOWN;\n                Debug.LogError(&quot;BuildAssetBundles Error: &quot; + e.Message);\n                return;\n            }\n   }</code></pre>\n<blockquote>\n<ol start=\"4\">\n<li><p>BuilderMenu.cs中创建 build_for_ci() 静态函数</p>\n<p>注：-proj, -path 也可修改，需要与auto_ci.py中代码对应</p>\n<p>示例如下:</p>\n</li>\n</ol>\n</blockquote>\n<pre><code class=\"c#\">public static void build_for_ci()\n{\n    //！Builder类需要自己实现，具体作为对应不同平台打包用\n    string build_path = string.Empty;\n    #if UNITY_ANDROID\n        //是否输出项目文件或APK的标识\n        bool is_proj = BundleMakerUtil.HasRawArg(&quot;-proj&quot;);\n    Debug.Log(&quot;build_for_ci, is_proj: &quot; + is_proj);\n    Builder.is_android_proj = is_proj;\n    if(Builder.is_android_proj){\n        build_path = Const.PROJECT_DIR + &quot;autopack/android/XGameProject&quot;;\n    }else{\n        build_path = Const.PROJECT_DIR + &quot;autopack/android/XGame.apk&quot;;\n    }\n    #elif UNITY_IPHONE\n        build_path = BundleMakerUtil.GetArg(&quot;-path&quot;);\n    if (string.IsNullOrEmpty(build_path))\n    {\n        Debug.LogError(&quot;------build path null&quot;);\n        return;\n    }\n    Debug.Log(&quot;build_for_ci, build_path: &quot; + build_path);\n    //build_path = string.Format(&quot;{0}autopack/ios/XcodeProject{1}&quot;, new DirectoryInfo(Const.PROJECT_DIR).Parent.FullName, System.DateTime.Now.ToString(&quot;yyyy-MM-dd--HH-mm-ss&quot;));\n    #else\n        build_path = Const.PROJECT_DIR + &quot;autopack/win32/XGame.exe&quot;;\n    #endif\n        //是否是debug版本的标识\n        bool is_debug = BundleMakerUtil.HasRawArg(&quot;-debug&quot;);\n    Builder.is_debug_build_ = is_debug; \n    Builder.build_package(build_path, true);\n}</code></pre>\n<h2 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h2><blockquote>\n<ol>\n<li>Jenkins安装 Powershell插件，在 插件列表中搜索到这个：</li>\n</ol>\n</blockquote>\n<img src=\"./images/1571217538404.png\" alt=\"1571217538404\" style=\"zoom:100%;\" />\n\n<blockquote>\n<ol start=\"2\">\n<li>安装完后，重启下Jetkins</li>\n<li>在项目配置-&gt;构建 里选择使用Windows PowerShell:</li>\n</ol>\n</blockquote>\n<img src=\"./images/1571217610540.png\" alt=\"1571217610540\" style=\"zoom:100%;\" />\n\n<blockquote>\n<ol start=\"4\">\n<li>添加如下配置在Command格内：</li>\n</ol>\n</blockquote>\n<pre><code class=\"powershell\">echo ${ENV:WORKSPACE}\ncd ${ENV:WORKSPACE}/Unity\n./AutoCi/autobuild_android.ps1</code></pre>\n<img src=\"./images/1571217788247.png\" alt=\"1571217788247\" style=\"zoom:100%;\" />\n\n\n\n<h2 id=\"打什么样的包？-设置环境变量\"><a href=\"#打什么样的包？-设置环境变量\" class=\"headerlink\" title=\"打什么样的包？  设置环境变量\"></a>打什么样的包？  设置环境变量</h2><blockquote>\n<ol>\n<li><p>找到Jenkins环境变量设置</p>\n<p><strong>Manage Jenkins</strong>   -&gt;  <strong>Configure System</strong></p>\n</li>\n</ol>\n</blockquote>\n<p><img src=\"./images/1571216524617.png\" alt=\"1571216524617\"></p>\n<img src=\"./images/1571216565243.png\" alt=\"1571216565243\" style=\"zoom:67%;\" />\n\n\n\n<blockquote>\n<ol start=\"2\">\n<li>打 Apk </li>\n</ol>\n</blockquote>\n<p>设置 IsApk 为 true</p>\n<blockquote>\n<ol start=\"3\">\n<li>打 aar到平台</li>\n</ol>\n</blockquote>\n<p>设置 IsApk 为false或其他</p>\n<blockquote>\n<ol start=\"4\">\n<li>带Debug的包</li>\n</ol>\n</blockquote>\n<p>设置 IsDebug为true,  当不为true时则默认为relase包</p>\n<h2 id=\"CI的执行脚本说明\"><a href=\"#CI的执行脚本说明\" class=\"headerlink\" title=\"CI的执行脚本说明\"></a>CI的执行脚本说明</h2><blockquote>\n<ol>\n<li><p>auto_ci.py -仅打aar到平台需要</p>\n<ul>\n<li>修改manifest.xml文件，去掉intent-filter</li>\n<li>修改build.gradle文件，设置为library，去掉applicationId，设置gradle版本，添加jcenter(),google()到 all projects块</li>\n</ul>\n</li>\n<li><p>jksdk_util.py -上传aar到平台</p>\n<ul>\n<li><p>需要打开文件，更改下id为对应项目</p>\n</li>\n<li><p>上传到平台，需要改成指定格式的名字： </p>\n<p>  游戏名称-框架类型-debug/release-version.出包号.aar</p>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><blockquote>\n<ol>\n<li>Powershell 脚本访问Jenkins环境变量记得加 <strong>ENV:</strong> 前缀</li>\n<li>在build.gradle加入的all projects块的代码，是由于gradle有时会找不到相关的jar包，又不会启动自动下载导致</li>\n</ol>\n</blockquote>\n"},{"title":"LWRP官方说明","_content":"\n## Render Pipeline 的build-in 的流程\n\n![build-in流程](/img/1578468743022.png)\n\n## Command Buffer说明\n![Command Buffer说明](/img/1578468782581.png)\n\n## 语法说明\n\n>原先shader使用的cginc引入，改成Include官方的hlsl文件\n>材质变量需要CBuffer块套好，这样才能使用LWRP的batcher\n>可使用LWRP独有的宏声明采样器\n>属性名的变更：使用Attribute替代input, 使用Varying替代v2f\n>获取顶点信息的函数变更\n\n\n![LWRP的shader](/img/1578469710690.png)\n![单独申明的采样器](/img/1578469737158.png)\n![顶点函数](/img/1578469925626.png)\n![LWRP](/img/1578470183627.png)\n![手写LWRP](/img/1578470217523.png)\n![LWRP Batcher](/img/1578470471751.png)\n\n\n## SRP Batcher\n![SRP Batcher](/img/1578470502893.png)\n![不支持情况](/img/1578470577651.png)","source":"_posts/LWRP官方说明.md","raw":"---\ntitle: LWRP官方说明\ncategories:\n- Unity学习\ntags: \n- Unity学习\n---\n\n## Render Pipeline 的build-in 的流程\n\n![build-in流程](/img/1578468743022.png)\n\n## Command Buffer说明\n![Command Buffer说明](/img/1578468782581.png)\n\n## 语法说明\n\n>原先shader使用的cginc引入，改成Include官方的hlsl文件\n>材质变量需要CBuffer块套好，这样才能使用LWRP的batcher\n>可使用LWRP独有的宏声明采样器\n>属性名的变更：使用Attribute替代input, 使用Varying替代v2f\n>获取顶点信息的函数变更\n\n\n![LWRP的shader](/img/1578469710690.png)\n![单独申明的采样器](/img/1578469737158.png)\n![顶点函数](/img/1578469925626.png)\n![LWRP](/img/1578470183627.png)\n![手写LWRP](/img/1578470217523.png)\n![LWRP Batcher](/img/1578470471751.png)\n\n\n## SRP Batcher\n![SRP Batcher](/img/1578470502893.png)\n![不支持情况](/img/1578470577651.png)","slug":"LWRP官方说明","published":1,"date":"2020-09-08T03:23:20.715Z","updated":"2020-09-08T03:23:20.715Z","_id":"ckdpcluy6001e8sr30ucf7vf9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Render-Pipeline-的build-in-的流程\"><a href=\"#Render-Pipeline-的build-in-的流程\" class=\"headerlink\" title=\"Render Pipeline 的build-in 的流程\"></a>Render Pipeline 的build-in 的流程</h2><p><img src=\"/img/1578468743022.png\" alt=\"build-in流程\"></p>\n<h2 id=\"Command-Buffer说明\"><a href=\"#Command-Buffer说明\" class=\"headerlink\" title=\"Command Buffer说明\"></a>Command Buffer说明</h2><p><img src=\"/img/1578468782581.png\" alt=\"Command Buffer说明\"></p>\n<h2 id=\"语法说明\"><a href=\"#语法说明\" class=\"headerlink\" title=\"语法说明\"></a>语法说明</h2><blockquote>\n<p>原先shader使用的cginc引入，改成Include官方的hlsl文件<br>材质变量需要CBuffer块套好，这样才能使用LWRP的batcher<br>可使用LWRP独有的宏声明采样器<br>属性名的变更：使用Attribute替代input, 使用Varying替代v2f<br>获取顶点信息的函数变更</p>\n</blockquote>\n<p><img src=\"/img/1578469710690.png\" alt=\"LWRP的shader\"><br><img src=\"/img/1578469737158.png\" alt=\"单独申明的采样器\"><br><img src=\"/img/1578469925626.png\" alt=\"顶点函数\"><br><img src=\"/img/1578470183627.png\" alt=\"LWRP\"><br><img src=\"/img/1578470217523.png\" alt=\"手写LWRP\"><br><img src=\"/img/1578470471751.png\" alt=\"LWRP Batcher\"></p>\n<h2 id=\"SRP-Batcher\"><a href=\"#SRP-Batcher\" class=\"headerlink\" title=\"SRP Batcher\"></a>SRP Batcher</h2><p><img src=\"/img/1578470502893.png\" alt=\"SRP Batcher\"><br><img src=\"/img/1578470577651.png\" alt=\"不支持情况\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Render-Pipeline-的build-in-的流程\"><a href=\"#Render-Pipeline-的build-in-的流程\" class=\"headerlink\" title=\"Render Pipeline 的build-in 的流程\"></a>Render Pipeline 的build-in 的流程</h2><p><img src=\"/img/1578468743022.png\" alt=\"build-in流程\"></p>\n<h2 id=\"Command-Buffer说明\"><a href=\"#Command-Buffer说明\" class=\"headerlink\" title=\"Command Buffer说明\"></a>Command Buffer说明</h2><p><img src=\"/img/1578468782581.png\" alt=\"Command Buffer说明\"></p>\n<h2 id=\"语法说明\"><a href=\"#语法说明\" class=\"headerlink\" title=\"语法说明\"></a>语法说明</h2><blockquote>\n<p>原先shader使用的cginc引入，改成Include官方的hlsl文件<br>材质变量需要CBuffer块套好，这样才能使用LWRP的batcher<br>可使用LWRP独有的宏声明采样器<br>属性名的变更：使用Attribute替代input, 使用Varying替代v2f<br>获取顶点信息的函数变更</p>\n</blockquote>\n<p><img src=\"/img/1578469710690.png\" alt=\"LWRP的shader\"><br><img src=\"/img/1578469737158.png\" alt=\"单独申明的采样器\"><br><img src=\"/img/1578469925626.png\" alt=\"顶点函数\"><br><img src=\"/img/1578470183627.png\" alt=\"LWRP\"><br><img src=\"/img/1578470217523.png\" alt=\"手写LWRP\"><br><img src=\"/img/1578470471751.png\" alt=\"LWRP Batcher\"></p>\n<h2 id=\"SRP-Batcher\"><a href=\"#SRP-Batcher\" class=\"headerlink\" title=\"SRP Batcher\"></a>SRP Batcher</h2><p><img src=\"/img/1578470502893.png\" alt=\"SRP Batcher\"><br><img src=\"/img/1578470577651.png\" alt=\"不支持情况\"></p>\n"},{"title":"Linux与window常用指令","_content":"\n## linux启动关闭服务\n\n```shell\nps -ef|grep tomcat                        //查看所有进程\nkill -9 pid                               //关闭对应pid进程\ncd /root/DCIM/apache-tomcat-7.0.90/bin    //打开服务所在的文件夹\nls                                        //查看所有文件 显示除隐藏文件外所有文件及目录的名字\n./startup.sh                              //启动.sh文件\ntail -f ../logs/catalina.out              //查看指定文件夹里的日志\n \n \nls –a                                     //显示当前目录中的所有文件，包含隐藏文件\n```\n\n\n## windows 查看服务\n\n```\nsc query redis //查询redis的服务\n\nsc stop/start redis\nsc showid redis\nsc qc redis //查询信息\nsc enumdepend redis //查询依赖\n```","source":"_posts/Linux与window常用指令.md","raw":"---\ntitle: Linux与window常用指令\ntags: \n- linux\n- 指令\n---\n\n## linux启动关闭服务\n\n```shell\nps -ef|grep tomcat                        //查看所有进程\nkill -9 pid                               //关闭对应pid进程\ncd /root/DCIM/apache-tomcat-7.0.90/bin    //打开服务所在的文件夹\nls                                        //查看所有文件 显示除隐藏文件外所有文件及目录的名字\n./startup.sh                              //启动.sh文件\ntail -f ../logs/catalina.out              //查看指定文件夹里的日志\n \n \nls –a                                     //显示当前目录中的所有文件，包含隐藏文件\n```\n\n\n## windows 查看服务\n\n```\nsc query redis //查询redis的服务\n\nsc stop/start redis\nsc showid redis\nsc qc redis //查询信息\nsc enumdepend redis //查询依赖\n```","slug":"Linux与window常用指令","published":1,"date":"2020-09-08T03:23:20.715Z","updated":"2020-09-08T03:23:20.715Z","_id":"ckdpcluy7001g8sr3qpl8niik","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"linux启动关闭服务\"><a href=\"#linux启动关闭服务\" class=\"headerlink\" title=\"linux启动关闭服务\"></a>linux启动关闭服务</h2><pre><code class=\"shell\">ps -ef|grep tomcat                        //查看所有进程\nkill -9 pid                               //关闭对应pid进程\ncd /root/DCIM/apache-tomcat-7.0.90/bin    //打开服务所在的文件夹\nls                                        //查看所有文件 显示除隐藏文件外所有文件及目录的名字\n./startup.sh                              //启动.sh文件\ntail -f ../logs/catalina.out              //查看指定文件夹里的日志\n\n\nls –a                                     //显示当前目录中的所有文件，包含隐藏文件</code></pre>\n<h2 id=\"windows-查看服务\"><a href=\"#windows-查看服务\" class=\"headerlink\" title=\"windows 查看服务\"></a>windows 查看服务</h2><pre><code>sc query redis //查询redis的服务\n\nsc stop/start redis\nsc showid redis\nsc qc redis //查询信息\nsc enumdepend redis //查询依赖</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"linux启动关闭服务\"><a href=\"#linux启动关闭服务\" class=\"headerlink\" title=\"linux启动关闭服务\"></a>linux启动关闭服务</h2><pre><code class=\"shell\">ps -ef|grep tomcat                        //查看所有进程\nkill -9 pid                               //关闭对应pid进程\ncd /root/DCIM/apache-tomcat-7.0.90/bin    //打开服务所在的文件夹\nls                                        //查看所有文件 显示除隐藏文件外所有文件及目录的名字\n./startup.sh                              //启动.sh文件\ntail -f ../logs/catalina.out              //查看指定文件夹里的日志\n\n\nls –a                                     //显示当前目录中的所有文件，包含隐藏文件</code></pre>\n<h2 id=\"windows-查看服务\"><a href=\"#windows-查看服务\" class=\"headerlink\" title=\"windows 查看服务\"></a>windows 查看服务</h2><pre><code>sc query redis //查询redis的服务\n\nsc stop/start redis\nsc showid redis\nsc qc redis //查询信息\nsc enumdepend redis //查询依赖</code></pre>"},{"title":"Python Core Programming Note 1","_content":"\n## Regular Expression\n![常用表达式](/img/1570674939333.png)\n![续](/img/1570674953248.png)\n\n## match() & search()\n\n```python\nimport re\nm = re.match('\\d','a541')\nif m is not None:\n    print(m.group())\nelse:\n    print(\"none found\")\n\t\n## none found\n\nimport re\nm = re.match('\\d','a541')\nif m is not None:\n    print(m.group())\nelse:\n    print(\"none found\")\n\t\n## 5\n```\n```\nimport re\nm = re.search('..[\\d]{1,3}','\\na51')\nif m is not None:\n    print(m.group())\nelse:\n    print(\"none found\")\n# . 匹配除\\n外的任意字符，其他如\\t,\\.都可以\n```\n\n## 分组\n\n```python\nimport re\nm = re.search('\\w+@(\\w+\\.)*(\\w+)*\\.com','aaa@aa.a.com')\nif m is not None:\n    print(m.group())\nelse:\n    print(\"none found\")\n```\n\n## sub() & subn()\n\n```python\n#使用函数作为参数\ndef repl_t(txt):\n    if txt.group(0) == '-':\n        return 'x'\n    elif txt.group(0) == '--':\n        return '-'\n    elif txt.group(0) == '-1':\n        return '\\\"good\\\"'\nm = re.subn('(-{1,2})\\d?',repl_t,\"d----asf-s-a-123\")\nprint(m)\n```\n\n### Regular Expression -> Split()\n\n```python\ndata = (\n 'Mountain View, CA 94040',\n 'Sunnyvale, CA',\n 'Los Altos, 94023',\n 'Cupertino 95014',\n 'Palo Alto CA',\n )\n\nfor d in data:\n     v = re.split(r\", |(?= (?:\\d{5}|[A-Z]{2})) \",d)\n     print(v)\n```\n\n### 扩展表达式\n// 前瞻：\nexp1(?=exp2) 查找exp2前面的exp1\n// 后顾：\n(?<=exp2)exp1 查找exp2后面的exp1\n// 负前瞻：\nexp1(?!exp2) 查找后面不是exp2的exp1\n// 负后顾：\n(?<!exp2)exp1 查找前面不是exp2的exp1\n\n要理解?:则需要理解捕获分组和非捕获分组的概念：\n\n> ()表示捕获分组，()会把每个分组里的匹配的值保存起来，使用$n(n是一个数字，表示第n个捕获组的内容)\n> (?:)表示非捕获分组，和捕获分组唯一的区别在于，非捕获分组匹配的值不会保存起来\n\n\n```python\nm = re.findall(r'(?<!YES)yes','YESyes? YESYes . YESyesYES!! ')\nprint(m)\n\nm = re.sub('\\B(?=(?:\\d{3})+(?!\\d))',',',\"123456789\")\nprint(m)\n```\n\n?i ignorecase\n?m multi-line search\n?s dotall, 点号也可表示\\n\n?x 格式化正则中的空格\n?: 分组查询但不保存在结果中\n\n```python\nm = re.findall(r'(?m)(^th[\\w ]+)', \"\"\"\nThis line is the first,\nanother line,\nthat line, it's the best\n\"\"\")\n\nprint(m)\n```\n\n```python\nm = re.search(r'''(?x)\n \\((\\d{3})\\) # 区号\n [ ] # 空白符\n (\\d{3}) # 前缀\n - # 横线\n (\\d{4}) # 终点数字\n ''', '(800) 555-1212').group()\nprint(m)\n```\n\n```python\nm = re.findall(r'http://(?:\\w+\\.)*(\\w+\\.com)','http://google.com http://www.google.com http://code.google.com')\nprint(m)\n```\n\n### 贪婪与非贪婪\n一个方案是使用“非贪婪”操作符“?”。读者可以在“*”、“+”或者“?”之后使\n用该操作符。该操作符将要求正则表达式引擎匹配尽可能少的字符。\n\n```python\ndata = 'Thu Feb 15 17:46:04 2007::uzifzf@dpyivihw.gov::1171590364-6-8'\npatt = '.+?(\\d+-\\d+-\\d+)'\nm = re.match(patt, data).group(1)\nprint(m)\n```","source":"_posts/Python Core Programming Note 1.md","raw":"---\ntitle: Python Core Programming Note 1\ncategories:\n- Python\ntags: \n- Python\n- Core Programming\n- Note\n---\n\n## Regular Expression\n![常用表达式](/img/1570674939333.png)\n![续](/img/1570674953248.png)\n\n## match() & search()\n\n```python\nimport re\nm = re.match('\\d','a541')\nif m is not None:\n    print(m.group())\nelse:\n    print(\"none found\")\n\t\n## none found\n\nimport re\nm = re.match('\\d','a541')\nif m is not None:\n    print(m.group())\nelse:\n    print(\"none found\")\n\t\n## 5\n```\n```\nimport re\nm = re.search('..[\\d]{1,3}','\\na51')\nif m is not None:\n    print(m.group())\nelse:\n    print(\"none found\")\n# . 匹配除\\n外的任意字符，其他如\\t,\\.都可以\n```\n\n## 分组\n\n```python\nimport re\nm = re.search('\\w+@(\\w+\\.)*(\\w+)*\\.com','aaa@aa.a.com')\nif m is not None:\n    print(m.group())\nelse:\n    print(\"none found\")\n```\n\n## sub() & subn()\n\n```python\n#使用函数作为参数\ndef repl_t(txt):\n    if txt.group(0) == '-':\n        return 'x'\n    elif txt.group(0) == '--':\n        return '-'\n    elif txt.group(0) == '-1':\n        return '\\\"good\\\"'\nm = re.subn('(-{1,2})\\d?',repl_t,\"d----asf-s-a-123\")\nprint(m)\n```\n\n### Regular Expression -> Split()\n\n```python\ndata = (\n 'Mountain View, CA 94040',\n 'Sunnyvale, CA',\n 'Los Altos, 94023',\n 'Cupertino 95014',\n 'Palo Alto CA',\n )\n\nfor d in data:\n     v = re.split(r\", |(?= (?:\\d{5}|[A-Z]{2})) \",d)\n     print(v)\n```\n\n### 扩展表达式\n// 前瞻：\nexp1(?=exp2) 查找exp2前面的exp1\n// 后顾：\n(?<=exp2)exp1 查找exp2后面的exp1\n// 负前瞻：\nexp1(?!exp2) 查找后面不是exp2的exp1\n// 负后顾：\n(?<!exp2)exp1 查找前面不是exp2的exp1\n\n要理解?:则需要理解捕获分组和非捕获分组的概念：\n\n> ()表示捕获分组，()会把每个分组里的匹配的值保存起来，使用$n(n是一个数字，表示第n个捕获组的内容)\n> (?:)表示非捕获分组，和捕获分组唯一的区别在于，非捕获分组匹配的值不会保存起来\n\n\n```python\nm = re.findall(r'(?<!YES)yes','YESyes? YESYes . YESyesYES!! ')\nprint(m)\n\nm = re.sub('\\B(?=(?:\\d{3})+(?!\\d))',',',\"123456789\")\nprint(m)\n```\n\n?i ignorecase\n?m multi-line search\n?s dotall, 点号也可表示\\n\n?x 格式化正则中的空格\n?: 分组查询但不保存在结果中\n\n```python\nm = re.findall(r'(?m)(^th[\\w ]+)', \"\"\"\nThis line is the first,\nanother line,\nthat line, it's the best\n\"\"\")\n\nprint(m)\n```\n\n```python\nm = re.search(r'''(?x)\n \\((\\d{3})\\) # 区号\n [ ] # 空白符\n (\\d{3}) # 前缀\n - # 横线\n (\\d{4}) # 终点数字\n ''', '(800) 555-1212').group()\nprint(m)\n```\n\n```python\nm = re.findall(r'http://(?:\\w+\\.)*(\\w+\\.com)','http://google.com http://www.google.com http://code.google.com')\nprint(m)\n```\n\n### 贪婪与非贪婪\n一个方案是使用“非贪婪”操作符“?”。读者可以在“*”、“+”或者“?”之后使\n用该操作符。该操作符将要求正则表达式引擎匹配尽可能少的字符。\n\n```python\ndata = 'Thu Feb 15 17:46:04 2007::uzifzf@dpyivihw.gov::1171590364-6-8'\npatt = '.+?(\\d+-\\d+-\\d+)'\nm = re.match(patt, data).group(1)\nprint(m)\n```","slug":"Python Core Programming Note 1","published":1,"date":"2020-08-11T01:59:40.424Z","updated":"2020-08-11T01:59:40.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpcluya001l8sr3h4lgw88m","content":"<h2 id=\"Regular-Expression\"><a href=\"#Regular-Expression\" class=\"headerlink\" title=\"Regular Expression\"></a>Regular Expression</h2><p><img src=\"/img/1570674939333.png\" alt=\"常用表达式\"><br><img src=\"/img/1570674953248.png\" alt=\"续\"></p>\n<h2 id=\"match-amp-search\"><a href=\"#match-amp-search\" class=\"headerlink\" title=\"match() &amp; search()\"></a>match() &amp; search()</h2><pre><code class=\"python\">import re\nm = re.match(&#39;\\d&#39;,&#39;a541&#39;)\nif m is not None:\n    print(m.group())\nelse:\n    print(&quot;none found&quot;)\n\n## none found\n\nimport re\nm = re.match(&#39;\\d&#39;,&#39;a541&#39;)\nif m is not None:\n    print(m.group())\nelse:\n    print(&quot;none found&quot;)\n\n## 5</code></pre>\n<pre><code>import re\nm = re.search(&#39;..[\\d]{1,3}&#39;,&#39;\\na51&#39;)\nif m is not None:\n    print(m.group())\nelse:\n    print(&quot;none found&quot;)\n# . 匹配除\\n外的任意字符，其他如\\t,\\.都可以</code></pre><h2 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h2><pre><code class=\"python\">import re\nm = re.search(&#39;\\w+@(\\w+\\.)*(\\w+)*\\.com&#39;,&#39;aaa@aa.a.com&#39;)\nif m is not None:\n    print(m.group())\nelse:\n    print(&quot;none found&quot;)</code></pre>\n<h2 id=\"sub-amp-subn\"><a href=\"#sub-amp-subn\" class=\"headerlink\" title=\"sub() &amp; subn()\"></a>sub() &amp; subn()</h2><pre><code class=\"python\">#使用函数作为参数\ndef repl_t(txt):\n    if txt.group(0) == &#39;-&#39;:\n        return &#39;x&#39;\n    elif txt.group(0) == &#39;--&#39;:\n        return &#39;-&#39;\n    elif txt.group(0) == &#39;-1&#39;:\n        return &#39;\\&quot;good\\&quot;&#39;\nm = re.subn(&#39;(-{1,2})\\d?&#39;,repl_t,&quot;d----asf-s-a-123&quot;)\nprint(m)</code></pre>\n<h3 id=\"Regular-Expression-gt-Split\"><a href=\"#Regular-Expression-gt-Split\" class=\"headerlink\" title=\"Regular Expression -&gt; Split()\"></a>Regular Expression -&gt; Split()</h3><pre><code class=\"python\">data = (\n &#39;Mountain View, CA 94040&#39;,\n &#39;Sunnyvale, CA&#39;,\n &#39;Los Altos, 94023&#39;,\n &#39;Cupertino 95014&#39;,\n &#39;Palo Alto CA&#39;,\n )\n\nfor d in data:\n     v = re.split(r&quot;, |(?= (?:\\d{5}|[A-Z]{2})) &quot;,d)\n     print(v)</code></pre>\n<h3 id=\"扩展表达式\"><a href=\"#扩展表达式\" class=\"headerlink\" title=\"扩展表达式\"></a>扩展表达式</h3><p>// 前瞻：<br>exp1(?=exp2) 查找exp2前面的exp1<br>// 后顾：<br>(?&lt;=exp2)exp1 查找exp2后面的exp1<br>// 负前瞻：<br>exp1(?!exp2) 查找后面不是exp2的exp1<br>// 负后顾：<br>(?&lt;!exp2)exp1 查找前面不是exp2的exp1</p>\n<p>要理解?:则需要理解捕获分组和非捕获分组的概念：</p>\n<blockquote>\n<p>()表示捕获分组，()会把每个分组里的匹配的值保存起来，使用$n(n是一个数字，表示第n个捕获组的内容)<br>(?:)表示非捕获分组，和捕获分组唯一的区别在于，非捕获分组匹配的值不会保存起来</p>\n</blockquote>\n<pre><code class=\"python\">m = re.findall(r&#39;(?&lt;!YES)yes&#39;,&#39;YESyes? YESYes . YESyesYES!! &#39;)\nprint(m)\n\nm = re.sub(&#39;\\B(?=(?:\\d{3})+(?!\\d))&#39;,&#39;,&#39;,&quot;123456789&quot;)\nprint(m)</code></pre>\n<p>?i ignorecase<br>?m multi-line search<br>?s dotall, 点号也可表示\\n<br>?x 格式化正则中的空格<br>?: 分组查询但不保存在结果中</p>\n<pre><code class=\"python\">m = re.findall(r&#39;(?m)(^th[\\w ]+)&#39;, &quot;&quot;&quot;\nThis line is the first,\nanother line,\nthat line, it&#39;s the best\n&quot;&quot;&quot;)\n\nprint(m)</code></pre>\n<pre><code class=\"python\">m = re.search(r&#39;&#39;&#39;(?x)\n \\((\\d{3})\\) # 区号\n [ ] # 空白符\n (\\d{3}) # 前缀\n - # 横线\n (\\d{4}) # 终点数字\n &#39;&#39;&#39;, &#39;(800) 555-1212&#39;).group()\nprint(m)</code></pre>\n<pre><code class=\"python\">m = re.findall(r&#39;http://(?:\\w+\\.)*(\\w+\\.com)&#39;,&#39;http://google.com http://www.google.com http://code.google.com&#39;)\nprint(m)</code></pre>\n<h3 id=\"贪婪与非贪婪\"><a href=\"#贪婪与非贪婪\" class=\"headerlink\" title=\"贪婪与非贪婪\"></a>贪婪与非贪婪</h3><p>一个方案是使用“非贪婪”操作符“?”。读者可以在“*”、“+”或者“?”之后使<br>用该操作符。该操作符将要求正则表达式引擎匹配尽可能少的字符。</p>\n<pre><code class=\"python\">data = &#39;Thu Feb 15 17:46:04 2007::uzifzf@dpyivihw.gov::1171590364-6-8&#39;\npatt = &#39;.+?(\\d+-\\d+-\\d+)&#39;\nm = re.match(patt, data).group(1)\nprint(m)</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Regular-Expression\"><a href=\"#Regular-Expression\" class=\"headerlink\" title=\"Regular Expression\"></a>Regular Expression</h2><p><img src=\"/img/1570674939333.png\" alt=\"常用表达式\"><br><img src=\"/img/1570674953248.png\" alt=\"续\"></p>\n<h2 id=\"match-amp-search\"><a href=\"#match-amp-search\" class=\"headerlink\" title=\"match() &amp; search()\"></a>match() &amp; search()</h2><pre><code class=\"python\">import re\nm = re.match(&#39;\\d&#39;,&#39;a541&#39;)\nif m is not None:\n    print(m.group())\nelse:\n    print(&quot;none found&quot;)\n\n## none found\n\nimport re\nm = re.match(&#39;\\d&#39;,&#39;a541&#39;)\nif m is not None:\n    print(m.group())\nelse:\n    print(&quot;none found&quot;)\n\n## 5</code></pre>\n<pre><code>import re\nm = re.search(&#39;..[\\d]{1,3}&#39;,&#39;\\na51&#39;)\nif m is not None:\n    print(m.group())\nelse:\n    print(&quot;none found&quot;)\n# . 匹配除\\n外的任意字符，其他如\\t,\\.都可以</code></pre><h2 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h2><pre><code class=\"python\">import re\nm = re.search(&#39;\\w+@(\\w+\\.)*(\\w+)*\\.com&#39;,&#39;aaa@aa.a.com&#39;)\nif m is not None:\n    print(m.group())\nelse:\n    print(&quot;none found&quot;)</code></pre>\n<h2 id=\"sub-amp-subn\"><a href=\"#sub-amp-subn\" class=\"headerlink\" title=\"sub() &amp; subn()\"></a>sub() &amp; subn()</h2><pre><code class=\"python\">#使用函数作为参数\ndef repl_t(txt):\n    if txt.group(0) == &#39;-&#39;:\n        return &#39;x&#39;\n    elif txt.group(0) == &#39;--&#39;:\n        return &#39;-&#39;\n    elif txt.group(0) == &#39;-1&#39;:\n        return &#39;\\&quot;good\\&quot;&#39;\nm = re.subn(&#39;(-{1,2})\\d?&#39;,repl_t,&quot;d----asf-s-a-123&quot;)\nprint(m)</code></pre>\n<h3 id=\"Regular-Expression-gt-Split\"><a href=\"#Regular-Expression-gt-Split\" class=\"headerlink\" title=\"Regular Expression -&gt; Split()\"></a>Regular Expression -&gt; Split()</h3><pre><code class=\"python\">data = (\n &#39;Mountain View, CA 94040&#39;,\n &#39;Sunnyvale, CA&#39;,\n &#39;Los Altos, 94023&#39;,\n &#39;Cupertino 95014&#39;,\n &#39;Palo Alto CA&#39;,\n )\n\nfor d in data:\n     v = re.split(r&quot;, |(?= (?:\\d{5}|[A-Z]{2})) &quot;,d)\n     print(v)</code></pre>\n<h3 id=\"扩展表达式\"><a href=\"#扩展表达式\" class=\"headerlink\" title=\"扩展表达式\"></a>扩展表达式</h3><p>// 前瞻：<br>exp1(?=exp2) 查找exp2前面的exp1<br>// 后顾：<br>(?&lt;=exp2)exp1 查找exp2后面的exp1<br>// 负前瞻：<br>exp1(?!exp2) 查找后面不是exp2的exp1<br>// 负后顾：<br>(?&lt;!exp2)exp1 查找前面不是exp2的exp1</p>\n<p>要理解?:则需要理解捕获分组和非捕获分组的概念：</p>\n<blockquote>\n<p>()表示捕获分组，()会把每个分组里的匹配的值保存起来，使用$n(n是一个数字，表示第n个捕获组的内容)<br>(?:)表示非捕获分组，和捕获分组唯一的区别在于，非捕获分组匹配的值不会保存起来</p>\n</blockquote>\n<pre><code class=\"python\">m = re.findall(r&#39;(?&lt;!YES)yes&#39;,&#39;YESyes? YESYes . YESyesYES!! &#39;)\nprint(m)\n\nm = re.sub(&#39;\\B(?=(?:\\d{3})+(?!\\d))&#39;,&#39;,&#39;,&quot;123456789&quot;)\nprint(m)</code></pre>\n<p>?i ignorecase<br>?m multi-line search<br>?s dotall, 点号也可表示\\n<br>?x 格式化正则中的空格<br>?: 分组查询但不保存在结果中</p>\n<pre><code class=\"python\">m = re.findall(r&#39;(?m)(^th[\\w ]+)&#39;, &quot;&quot;&quot;\nThis line is the first,\nanother line,\nthat line, it&#39;s the best\n&quot;&quot;&quot;)\n\nprint(m)</code></pre>\n<pre><code class=\"python\">m = re.search(r&#39;&#39;&#39;(?x)\n \\((\\d{3})\\) # 区号\n [ ] # 空白符\n (\\d{3}) # 前缀\n - # 横线\n (\\d{4}) # 终点数字\n &#39;&#39;&#39;, &#39;(800) 555-1212&#39;).group()\nprint(m)</code></pre>\n<pre><code class=\"python\">m = re.findall(r&#39;http://(?:\\w+\\.)*(\\w+\\.com)&#39;,&#39;http://google.com http://www.google.com http://code.google.com&#39;)\nprint(m)</code></pre>\n<h3 id=\"贪婪与非贪婪\"><a href=\"#贪婪与非贪婪\" class=\"headerlink\" title=\"贪婪与非贪婪\"></a>贪婪与非贪婪</h3><p>一个方案是使用“非贪婪”操作符“?”。读者可以在“*”、“+”或者“?”之后使<br>用该操作符。该操作符将要求正则表达式引擎匹配尽可能少的字符。</p>\n<pre><code class=\"python\">data = &#39;Thu Feb 15 17:46:04 2007::uzifzf@dpyivihw.gov::1171590364-6-8&#39;\npatt = &#39;.+?(\\d+-\\d+-\\d+)&#39;\nm = re.match(patt, data).group(1)\nprint(m)</code></pre>\n"},{"title":"Python Core Programming Note 2","_content":"\n## Net Programming\n\n#### 1. TCP\n+ Server:\n\n```python\nfrom socket import *\nfrom time import ctime\n\nHOST = ''\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\ntcpSerSocket = socket(AF_INET, SOCK_STREAM)\ntcpSerSocket.bind(ADDR)\ntcpSerSocket.listen(5)\n\ntry:\n    while True:\n        print(\"waiting for connection...\")\n        tcpCliSocket, addr = tcpSerSocket.accept()\n        print(\"connected from :\",addr)\n        while True:\n            data = tcpCliSocket.recv(BUFSIZ)\n            if not data:\n                break\n            print(\"rec:\",data)\n            send_str = '[%s] %s' %(bytes(ctime(), 'utf-8'), 'Oh?')\n            tcpCliSocket.send(send_str.encode('utf-8'))\n        tcpCliSocket.close()\nexcept EOFError:\n    print(\"Error: EOFEError\")\nexcept KeyboardInterrupt:\n    print(\"Error: EOFEError\")\nfinally:\n    tcpSerSocket.close()\n```\n\n+ Client\n\n```python\nfrom socket import *\n\nHOST = '127.0.0.1' \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\ntcpCliSocket = socket(AF_INET, SOCK_STREAM)\ntcpCliSocket.connect(ADDR)\n\nwhile True:\n    data = input('> ')\n    if not data:\n        break\n\n    tcpCliSocket.send(data.encode('utf-8'))\n    data = tcpCliSocket.recv(BUFSIZ)\n    if not data:\n        break\n    print(data.decode('utf-8'))\n\ntcpCliSocket.close()\n\n```\n\n#### 2. UDP\n\n+ Server\n\n```python\nfrom socket import *\nfrom time import ctime\n\nHOST = ''\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nudpSerSocket = socket(AF_INET, SOCK_DGRAM)\nudpSerSocket.bind(ADDR)\n\ntry:\n    while True:\n        print(\"waiting for message...\")\n        msg, addr = udpSerSocket.recvfrom(BUFSIZ)\n        if msg.decode('utf-8') == ' ':\n            break\n        print('Rev client:',msg)\n        send_str = '[%s] %s' %(bytes(ctime(), 'utf-8'), msg)\n        udpSerSocket.sendto(send_str.encode('utf-8'),addr)\n        \nexcept EOFError:\n    print(\"Error: EOFEError\")\nexcept KeyboardInterrupt:\n    print(\"Error: EOFEError\")\nfinally:\n    udpSerSocket.close()\n```\n\n+ Client\n\n```python\nfrom socket import *\n\nHOST = '127.0.0.1' \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nudpCliSocket = socket(AF_INET, SOCK_DGRAM)\nwhile True:\n    data = input('> ')\n    if not data:\n        break\n\n    udpCliSocket.sendto(data.encode('utf-8'),ADDR)\n    if data == ' ':\n        break\n    data,ADDR = udpCliSocket.recvfrom(BUFSIZ)\n    if not data:\n        break\n    print(data.decode('utf-8'))\n\nudpCliSocket.close()\n```\n\n### 使用SocketServer\n+ Server\n\n```python\nfrom socketserver import (TCPServer as TCP, StreamRequestHandler as SRH)\nfrom time import ctime\n\n\nHOST = ''\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nclass MyRequestHandler(SRH):\n    def handle(self):\n        print(\"connected from..\", self.client_address)\n        send_str = '[%s] %s' %(bytes(ctime(), 'utf-8'), self.rfile.readline())\n        self.wfile.write(send_str.encode('utf-8'))\n\ntcpServ = TCP(ADDR, MyRequestHandler)\nprint(\"waiting for connection...\")\ntcpServ.serve_forever()\n        \n```\n\n+ Client\n不同之处：需要把建立和连接放在每次循环中\n\n```\nfrom socket import *\n\nHOST = '127.0.0.1' \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\n\n\nwhile True:\n    tcpCliSocket = socket(AF_INET, SOCK_STREAM)\n    tcpCliSocket.connect(ADDR)\n    data = input('> ')\n    if not data:\n        break\n\n    send_data = \"%s\\n\" % data\n    tcpCliSocket.send(send_data.encode('utf-8'))\n    data = tcpCliSocket.recv(BUFSIZ)\n    if not data:\n        break\n    print(data.decode('utf-8'))\n    tcpCliSocket.close()\n\n```\n","source":"_posts/Python Core Programming Note 2.md","raw":"---\ntitle: Python Core Programming Note 2\ncategories:\n- Python\ntags: \n- Python\n- Core Programming\n- Note\n---\n\n## Net Programming\n\n#### 1. TCP\n+ Server:\n\n```python\nfrom socket import *\nfrom time import ctime\n\nHOST = ''\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\ntcpSerSocket = socket(AF_INET, SOCK_STREAM)\ntcpSerSocket.bind(ADDR)\ntcpSerSocket.listen(5)\n\ntry:\n    while True:\n        print(\"waiting for connection...\")\n        tcpCliSocket, addr = tcpSerSocket.accept()\n        print(\"connected from :\",addr)\n        while True:\n            data = tcpCliSocket.recv(BUFSIZ)\n            if not data:\n                break\n            print(\"rec:\",data)\n            send_str = '[%s] %s' %(bytes(ctime(), 'utf-8'), 'Oh?')\n            tcpCliSocket.send(send_str.encode('utf-8'))\n        tcpCliSocket.close()\nexcept EOFError:\n    print(\"Error: EOFEError\")\nexcept KeyboardInterrupt:\n    print(\"Error: EOFEError\")\nfinally:\n    tcpSerSocket.close()\n```\n\n+ Client\n\n```python\nfrom socket import *\n\nHOST = '127.0.0.1' \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\ntcpCliSocket = socket(AF_INET, SOCK_STREAM)\ntcpCliSocket.connect(ADDR)\n\nwhile True:\n    data = input('> ')\n    if not data:\n        break\n\n    tcpCliSocket.send(data.encode('utf-8'))\n    data = tcpCliSocket.recv(BUFSIZ)\n    if not data:\n        break\n    print(data.decode('utf-8'))\n\ntcpCliSocket.close()\n\n```\n\n#### 2. UDP\n\n+ Server\n\n```python\nfrom socket import *\nfrom time import ctime\n\nHOST = ''\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nudpSerSocket = socket(AF_INET, SOCK_DGRAM)\nudpSerSocket.bind(ADDR)\n\ntry:\n    while True:\n        print(\"waiting for message...\")\n        msg, addr = udpSerSocket.recvfrom(BUFSIZ)\n        if msg.decode('utf-8') == ' ':\n            break\n        print('Rev client:',msg)\n        send_str = '[%s] %s' %(bytes(ctime(), 'utf-8'), msg)\n        udpSerSocket.sendto(send_str.encode('utf-8'),addr)\n        \nexcept EOFError:\n    print(\"Error: EOFEError\")\nexcept KeyboardInterrupt:\n    print(\"Error: EOFEError\")\nfinally:\n    udpSerSocket.close()\n```\n\n+ Client\n\n```python\nfrom socket import *\n\nHOST = '127.0.0.1' \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nudpCliSocket = socket(AF_INET, SOCK_DGRAM)\nwhile True:\n    data = input('> ')\n    if not data:\n        break\n\n    udpCliSocket.sendto(data.encode('utf-8'),ADDR)\n    if data == ' ':\n        break\n    data,ADDR = udpCliSocket.recvfrom(BUFSIZ)\n    if not data:\n        break\n    print(data.decode('utf-8'))\n\nudpCliSocket.close()\n```\n\n### 使用SocketServer\n+ Server\n\n```python\nfrom socketserver import (TCPServer as TCP, StreamRequestHandler as SRH)\nfrom time import ctime\n\n\nHOST = ''\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nclass MyRequestHandler(SRH):\n    def handle(self):\n        print(\"connected from..\", self.client_address)\n        send_str = '[%s] %s' %(bytes(ctime(), 'utf-8'), self.rfile.readline())\n        self.wfile.write(send_str.encode('utf-8'))\n\ntcpServ = TCP(ADDR, MyRequestHandler)\nprint(\"waiting for connection...\")\ntcpServ.serve_forever()\n        \n```\n\n+ Client\n不同之处：需要把建立和连接放在每次循环中\n\n```\nfrom socket import *\n\nHOST = '127.0.0.1' \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\n\n\nwhile True:\n    tcpCliSocket = socket(AF_INET, SOCK_STREAM)\n    tcpCliSocket.connect(ADDR)\n    data = input('> ')\n    if not data:\n        break\n\n    send_data = \"%s\\n\" % data\n    tcpCliSocket.send(send_data.encode('utf-8'))\n    data = tcpCliSocket.recv(BUFSIZ)\n    if not data:\n        break\n    print(data.decode('utf-8'))\n    tcpCliSocket.close()\n\n```\n","slug":"Python Core Programming Note 2","published":1,"date":"2020-08-11T01:59:40.424Z","updated":"2020-08-11T01:59:40.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpcluyb001m8sr3gtr4ksnb","content":"<h2 id=\"Net-Programming\"><a href=\"#Net-Programming\" class=\"headerlink\" title=\"Net Programming\"></a>Net Programming</h2><h4 id=\"1-TCP\"><a href=\"#1-TCP\" class=\"headerlink\" title=\"1. TCP\"></a>1. TCP</h4><ul>\n<li>Server:</li>\n</ul>\n<pre><code class=\"python\">from socket import *\nfrom time import ctime\n\nHOST = &#39;&#39;\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\ntcpSerSocket = socket(AF_INET, SOCK_STREAM)\ntcpSerSocket.bind(ADDR)\ntcpSerSocket.listen(5)\n\ntry:\n    while True:\n        print(&quot;waiting for connection...&quot;)\n        tcpCliSocket, addr = tcpSerSocket.accept()\n        print(&quot;connected from :&quot;,addr)\n        while True:\n            data = tcpCliSocket.recv(BUFSIZ)\n            if not data:\n                break\n            print(&quot;rec:&quot;,data)\n            send_str = &#39;[%s] %s&#39; %(bytes(ctime(), &#39;utf-8&#39;), &#39;Oh?&#39;)\n            tcpCliSocket.send(send_str.encode(&#39;utf-8&#39;))\n        tcpCliSocket.close()\nexcept EOFError:\n    print(&quot;Error: EOFEError&quot;)\nexcept KeyboardInterrupt:\n    print(&quot;Error: EOFEError&quot;)\nfinally:\n    tcpSerSocket.close()</code></pre>\n<ul>\n<li>Client</li>\n</ul>\n<pre><code class=\"python\">from socket import *\n\nHOST = &#39;127.0.0.1&#39; \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\ntcpCliSocket = socket(AF_INET, SOCK_STREAM)\ntcpCliSocket.connect(ADDR)\n\nwhile True:\n    data = input(&#39;&gt; &#39;)\n    if not data:\n        break\n\n    tcpCliSocket.send(data.encode(&#39;utf-8&#39;))\n    data = tcpCliSocket.recv(BUFSIZ)\n    if not data:\n        break\n    print(data.decode(&#39;utf-8&#39;))\n\ntcpCliSocket.close()\n</code></pre>\n<h4 id=\"2-UDP\"><a href=\"#2-UDP\" class=\"headerlink\" title=\"2. UDP\"></a>2. UDP</h4><ul>\n<li>Server</li>\n</ul>\n<pre><code class=\"python\">from socket import *\nfrom time import ctime\n\nHOST = &#39;&#39;\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nudpSerSocket = socket(AF_INET, SOCK_DGRAM)\nudpSerSocket.bind(ADDR)\n\ntry:\n    while True:\n        print(&quot;waiting for message...&quot;)\n        msg, addr = udpSerSocket.recvfrom(BUFSIZ)\n        if msg.decode(&#39;utf-8&#39;) == &#39; &#39;:\n            break\n        print(&#39;Rev client:&#39;,msg)\n        send_str = &#39;[%s] %s&#39; %(bytes(ctime(), &#39;utf-8&#39;), msg)\n        udpSerSocket.sendto(send_str.encode(&#39;utf-8&#39;),addr)\n\nexcept EOFError:\n    print(&quot;Error: EOFEError&quot;)\nexcept KeyboardInterrupt:\n    print(&quot;Error: EOFEError&quot;)\nfinally:\n    udpSerSocket.close()</code></pre>\n<ul>\n<li>Client</li>\n</ul>\n<pre><code class=\"python\">from socket import *\n\nHOST = &#39;127.0.0.1&#39; \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nudpCliSocket = socket(AF_INET, SOCK_DGRAM)\nwhile True:\n    data = input(&#39;&gt; &#39;)\n    if not data:\n        break\n\n    udpCliSocket.sendto(data.encode(&#39;utf-8&#39;),ADDR)\n    if data == &#39; &#39;:\n        break\n    data,ADDR = udpCliSocket.recvfrom(BUFSIZ)\n    if not data:\n        break\n    print(data.decode(&#39;utf-8&#39;))\n\nudpCliSocket.close()</code></pre>\n<h3 id=\"使用SocketServer\"><a href=\"#使用SocketServer\" class=\"headerlink\" title=\"使用SocketServer\"></a>使用SocketServer</h3><ul>\n<li>Server</li>\n</ul>\n<pre><code class=\"python\">from socketserver import (TCPServer as TCP, StreamRequestHandler as SRH)\nfrom time import ctime\n\n\nHOST = &#39;&#39;\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nclass MyRequestHandler(SRH):\n    def handle(self):\n        print(&quot;connected from..&quot;, self.client_address)\n        send_str = &#39;[%s] %s&#39; %(bytes(ctime(), &#39;utf-8&#39;), self.rfile.readline())\n        self.wfile.write(send_str.encode(&#39;utf-8&#39;))\n\ntcpServ = TCP(ADDR, MyRequestHandler)\nprint(&quot;waiting for connection...&quot;)\ntcpServ.serve_forever()\n</code></pre>\n<ul>\n<li>Client<br>不同之处：需要把建立和连接放在每次循环中</li>\n</ul>\n<pre><code>from socket import *\n\nHOST = &#39;127.0.0.1&#39; \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\n\n\nwhile True:\n    tcpCliSocket = socket(AF_INET, SOCK_STREAM)\n    tcpCliSocket.connect(ADDR)\n    data = input(&#39;&gt; &#39;)\n    if not data:\n        break\n\n    send_data = &quot;%s\\n&quot; % data\n    tcpCliSocket.send(send_data.encode(&#39;utf-8&#39;))\n    data = tcpCliSocket.recv(BUFSIZ)\n    if not data:\n        break\n    print(data.decode(&#39;utf-8&#39;))\n    tcpCliSocket.close()\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Net-Programming\"><a href=\"#Net-Programming\" class=\"headerlink\" title=\"Net Programming\"></a>Net Programming</h2><h4 id=\"1-TCP\"><a href=\"#1-TCP\" class=\"headerlink\" title=\"1. TCP\"></a>1. TCP</h4><ul>\n<li>Server:</li>\n</ul>\n<pre><code class=\"python\">from socket import *\nfrom time import ctime\n\nHOST = &#39;&#39;\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\ntcpSerSocket = socket(AF_INET, SOCK_STREAM)\ntcpSerSocket.bind(ADDR)\ntcpSerSocket.listen(5)\n\ntry:\n    while True:\n        print(&quot;waiting for connection...&quot;)\n        tcpCliSocket, addr = tcpSerSocket.accept()\n        print(&quot;connected from :&quot;,addr)\n        while True:\n            data = tcpCliSocket.recv(BUFSIZ)\n            if not data:\n                break\n            print(&quot;rec:&quot;,data)\n            send_str = &#39;[%s] %s&#39; %(bytes(ctime(), &#39;utf-8&#39;), &#39;Oh?&#39;)\n            tcpCliSocket.send(send_str.encode(&#39;utf-8&#39;))\n        tcpCliSocket.close()\nexcept EOFError:\n    print(&quot;Error: EOFEError&quot;)\nexcept KeyboardInterrupt:\n    print(&quot;Error: EOFEError&quot;)\nfinally:\n    tcpSerSocket.close()</code></pre>\n<ul>\n<li>Client</li>\n</ul>\n<pre><code class=\"python\">from socket import *\n\nHOST = &#39;127.0.0.1&#39; \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\ntcpCliSocket = socket(AF_INET, SOCK_STREAM)\ntcpCliSocket.connect(ADDR)\n\nwhile True:\n    data = input(&#39;&gt; &#39;)\n    if not data:\n        break\n\n    tcpCliSocket.send(data.encode(&#39;utf-8&#39;))\n    data = tcpCliSocket.recv(BUFSIZ)\n    if not data:\n        break\n    print(data.decode(&#39;utf-8&#39;))\n\ntcpCliSocket.close()\n</code></pre>\n<h4 id=\"2-UDP\"><a href=\"#2-UDP\" class=\"headerlink\" title=\"2. UDP\"></a>2. UDP</h4><ul>\n<li>Server</li>\n</ul>\n<pre><code class=\"python\">from socket import *\nfrom time import ctime\n\nHOST = &#39;&#39;\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nudpSerSocket = socket(AF_INET, SOCK_DGRAM)\nudpSerSocket.bind(ADDR)\n\ntry:\n    while True:\n        print(&quot;waiting for message...&quot;)\n        msg, addr = udpSerSocket.recvfrom(BUFSIZ)\n        if msg.decode(&#39;utf-8&#39;) == &#39; &#39;:\n            break\n        print(&#39;Rev client:&#39;,msg)\n        send_str = &#39;[%s] %s&#39; %(bytes(ctime(), &#39;utf-8&#39;), msg)\n        udpSerSocket.sendto(send_str.encode(&#39;utf-8&#39;),addr)\n\nexcept EOFError:\n    print(&quot;Error: EOFEError&quot;)\nexcept KeyboardInterrupt:\n    print(&quot;Error: EOFEError&quot;)\nfinally:\n    udpSerSocket.close()</code></pre>\n<ul>\n<li>Client</li>\n</ul>\n<pre><code class=\"python\">from socket import *\n\nHOST = &#39;127.0.0.1&#39; \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nudpCliSocket = socket(AF_INET, SOCK_DGRAM)\nwhile True:\n    data = input(&#39;&gt; &#39;)\n    if not data:\n        break\n\n    udpCliSocket.sendto(data.encode(&#39;utf-8&#39;),ADDR)\n    if data == &#39; &#39;:\n        break\n    data,ADDR = udpCliSocket.recvfrom(BUFSIZ)\n    if not data:\n        break\n    print(data.decode(&#39;utf-8&#39;))\n\nudpCliSocket.close()</code></pre>\n<h3 id=\"使用SocketServer\"><a href=\"#使用SocketServer\" class=\"headerlink\" title=\"使用SocketServer\"></a>使用SocketServer</h3><ul>\n<li>Server</li>\n</ul>\n<pre><code class=\"python\">from socketserver import (TCPServer as TCP, StreamRequestHandler as SRH)\nfrom time import ctime\n\n\nHOST = &#39;&#39;\nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nclass MyRequestHandler(SRH):\n    def handle(self):\n        print(&quot;connected from..&quot;, self.client_address)\n        send_str = &#39;[%s] %s&#39; %(bytes(ctime(), &#39;utf-8&#39;), self.rfile.readline())\n        self.wfile.write(send_str.encode(&#39;utf-8&#39;))\n\ntcpServ = TCP(ADDR, MyRequestHandler)\nprint(&quot;waiting for connection...&quot;)\ntcpServ.serve_forever()\n</code></pre>\n<ul>\n<li>Client<br>不同之处：需要把建立和连接放在每次循环中</li>\n</ul>\n<pre><code>from socket import *\n\nHOST = &#39;127.0.0.1&#39; \nPORT = 21111\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\n\n\nwhile True:\n    tcpCliSocket = socket(AF_INET, SOCK_STREAM)\n    tcpCliSocket.connect(ADDR)\n    data = input(&#39;&gt; &#39;)\n    if not data:\n        break\n\n    send_data = &quot;%s\\n&quot; % data\n    tcpCliSocket.send(send_data.encode(&#39;utf-8&#39;))\n    data = tcpCliSocket.recv(BUFSIZ)\n    if not data:\n        break\n    print(data.decode(&#39;utf-8&#39;))\n    tcpCliSocket.close()\n</code></pre>"},{"title":"Python Core Programming Note 3","_content":"\n## Multi-thread \n\n### Python 的 threading 模块\nPython 提供了多个模块来支持多线程编程，包括 thread、 threading 和 Queue 模块等。程\n序是可以使用 thread 和 threading 模块来创建与管理线程。 thread 模块提供了基本的线程和锁\n定支持；而 threading 模块提供了更高级别、功能更全面的线程管理。使用 Queue 模块，用户\n可以创建一个队列数据结构，用于在多线程之间进行共享。\n\n> **核心提示：避免使用 thread 模块**\n推荐使用更高级别的 threading 模块，而不使用 thread 模块有很多原因。 threading 模\n块更加先进，有更好的线程支持，并且 thread 模块中的一些属性会和 threading 模块有冲突。\n另一个原因是低级别的 thread 模块拥有的同步原语很少（实际上只有一个），而 threading\n模块则有很多。\n不过，出于对 Python 和线程学习的兴趣，我们将给出使用 thread 模块的一些代码。\n给出这些代码只是出于学习目的，希望它能够让你更好地领悟为什么应该避免使用\nthread 模块。我们还将展示如何使用更加合适的工具，如 threading 和 Queue 模块中的那\n些方法。\n避免使用 thread 模块的另一个原因是它对于进程何时退出没有控制。当主线程结束\n时，所有其他线程也都强制结束，不会发出警告或者进行适当的清理。如前所述，至少\nthreading 模块能确保重要的子线程在进程退出前结束。\n我们只建议那些想访问线程的更底层级别的专家使用 thread 模块。为了强调这一点，\n在 Python3 中该模块被重命名为_thread。你创建的任何多线程应用都应该使用 threading 模\n块或其他更高级别的模块。\n\n> **核心提示：守护线程**\n避免使用 thread 模块的另一个原因是该模块不支持守护线程这个概念。当主线程退出\n时，所有子线程都将终止，不管它们是否仍在工作。如果你不希望发生这种行为，就要引\n入守护线程的概念了。\nthreading 模块支持守护线程，其工作方式是：守护线程一般是一个等待客户端请\n求服务的服务器。如果没有客户端请求，守护线程就是空闲的。如果把一个线程设置\n为守护线程，就表示这个线程是不重要的，进程退出时不需要等待这个线程执行完成。\n如同在第 2 章中看到的那样，服务器线程远行在一个无限循环里，并且在正常情况下\n不会退出。\n如果主线程准备退出时，不需要等待某些子线程完成，就可以为这些子线程设置守护\n线程标记。该标记值为真时，表示该线程是不重要的，或者说该线程只是用来等待客户端\n请求而不做任何其他事情。\n要将一个线程设置为守护线程，需要在启动线程之前执行如下赋值语句：\nthread.daemon = True（调用 thread.setDaemon(True)的旧方法已经弃用了）。同样，要检\n查线程的守护状态，也只需要检查这个值即可（对比过去调用 thread.isDaemon()的方\n法）。一个新的子线程会继承父线程的守护标记。整个 Python 程序（可以解读为：主线\n程）将在所有非守护线程退出之后才退出，换句话说，就是没有剩下存活的非守护线\n程时。\n\n>当所有线程都分配完成之后，通过调用每个线程的 start()方法让它们开始执行，而不是\n在这之前就会执行。相比于管理一组锁（分配、获取、释放、检查锁状态等）而言，这里只\n需要为每个线程调用 join()方法即可。 join()方法将等待线程结束，或者在提供了超时时间的\n情况下，达到超时时间。使用 join()方法要比等待锁释放的无限循环更加清晰（这也是这种锁\n又称为自旋锁的原因）。136 第 1 部分 通用应用主题\n对于 join()方法而言，其另一个重要方面是其实它根本不需要调用。一旦线程启动，它们\n就会一直执行，直到给定的函数完成后退出。如果主线程还有其他事情要去做，而不是等待\n这些线程完成（例如其他处理或者等待新的客户端请求），就可以不调用 join()。 join()方法只\n有在你需要等待线程完成的时候才是有用的。\n\n\n>使用 Thread 类，可以有很多方法来创建线程。我们将介绍其中比较相似的三种方法。选\n择你觉得最舒服的，或者是最适合你的应用和未来扩展的方法（我们更倾向于最后一种方案）。\n• 创建 Thread 的实例，传给它一个函数。\n• 创建 Thread 的实例，传给它一个可调用的类实例。\n• 派生 Thread 的子类，并创建子类的实例。\n你会发现你将选择第一个或第三个方案。当你需要一个更加符合面向对象的接口时，\n会选择后者；否则会选择前者。老实说，你会发现第二种方案显得有些尴尬并且稍微难以\n阅读，以下示例详细介绍：\n\n> 函数形式创建\n\n```python\nimport threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\ndef loop(nloop, nsec):\n    print(\"thread start! :\",nloop , ctime())\n    sleep(nsec)\n    print(\"thread end! :\",nloop , ctime())\n\n\ndef main():\n    print(f\"starting at :{ctime()}\")\n    threads = []\n    for i in range(len(loops)):\n        t = thread.Thread(target=loop, args=(i, loops[i]))\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n    \n    print(\"all done\")\n\nmain()\n```\n\n> 类形式创建\n\n```python\nimport threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\n\nclass MyThread():\n    def __init__(self, func, args, name=''):\n        self.func = func\n        self.args = args\n        self.name = name\n    def __call__(self):\n        self.func(*self.args)\n        \n\ndef loop(nloop, nsec):\n    print(\"thread start! :\",nloop , ctime())\n    sleep(nsec)\n    print(\"thread end! :\",nloop , ctime())\n\n\ndef main():\n    print(f\"starting at :{ctime()}\")\n    threads = []\n    for i in range(len(loops)):\n        t = thread.Thread(target=MyThread(loop,(i,loops[i]),loop.__name__))\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n    \n    print(\"all done\")\n\nmain()\n```\n\n\n> 子类形式创建\n\n```python\nimport threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\n\nclass MyThread(thread.Thread):\n    def __init__(self, func, args, name=''):\n        thread.Thread.__init__(self) #Changed: need to inherit and call parent's init\n        self.func = func\n        self.args = args\n        self.name = name\n\n    def get_result(self):\n        return self.res\n\n    def run(self):\n        print('starting', self.name, 'at: ', ctime())\n        self.res = self.func(*self.args)\n        print('finished', self.name, 'at: ', ctime())\n        \n\ndef loop(nloop, nsec):\n    sleep(nsec)\n\n\ndef main():\n    threads = []\n    for i in range(len(loops)):\n        t = MyThread(loop, (i, loops[i]), loop.__name__+str(i)) #Changed:no need to use threading.Thread() method\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n    \n    print(\"all done\")\n\nmain()\n\n```\n\n> 实例：\n\n```python\n#my_thread.py\nimport threading as thread\nfrom time import ctime\n\nclass MyThread(thread.Thread):\n    def __init__(self, func, args, name=''):\n        thread.Thread.__init__(self)  # Changed: need to inherit and call parent's init\n        self.func = func\n        self.args = args\n        self.name = name\n\n    def get_result(self):\n        return self.res\n\n    def run(self):\n        print('starting', self.name, 'at: ', ctime())\n        self.res = self.func(*self.args)\n        print('finished', self.name, 'at: ', ctime())\n\n```\n\n\n ```python\n #main.py\n from my_thread import MyThread\nfrom time import ctime, sleep\n\n\ndef fib(x):\n    sleep(0.002)\n    if x < 2: return 1\n    return fib(x-2) + fib(x-1)\n\n\ndef fac(x):\n    sleep(0.1)\n    if x < 2: return 1\n    return x * fac(x-1)\n\n\ndef sum(x):\n    sleep(0.2)\n    if x < 2: return 1\n    return x + sum(x-1)\n\n\nfuncs = [fib, fac, sum]\nn = 12\n\ndef main():\n    print(\"****** Single THREAD ********\")\n    for i in range(len(funcs)):\n        print(\"start function %s\" % funcs[i].__name__)\n        print(funcs[i](n))\n        print(\"end function %s\" % funcs[i].__name__)\n\n    threads = []\n    print(\"****** Multi THREAD ********\")\n    for i in range(len(funcs)):\n        t = MyThread(funcs[i], (n,), funcs[i].__name__)\n        threads.append(t)\n\n    for i in range(len(funcs)):\n        threads[i].start()\n\n    for i in range(len(funcs)):\n        threads[i].join()\n        print(threads[i].get_result())\n\n    print(\"all done\")\nmain()\n\n ```\n\n\n","source":"_posts/Python Core Programming Note 3.md","raw":"---\ntitle: Python Core Programming Note 3\ncategories:\n- Python\ntags: \n- Python\n- Core Programming\n- Note\n---\n\n## Multi-thread \n\n### Python 的 threading 模块\nPython 提供了多个模块来支持多线程编程，包括 thread、 threading 和 Queue 模块等。程\n序是可以使用 thread 和 threading 模块来创建与管理线程。 thread 模块提供了基本的线程和锁\n定支持；而 threading 模块提供了更高级别、功能更全面的线程管理。使用 Queue 模块，用户\n可以创建一个队列数据结构，用于在多线程之间进行共享。\n\n> **核心提示：避免使用 thread 模块**\n推荐使用更高级别的 threading 模块，而不使用 thread 模块有很多原因。 threading 模\n块更加先进，有更好的线程支持，并且 thread 模块中的一些属性会和 threading 模块有冲突。\n另一个原因是低级别的 thread 模块拥有的同步原语很少（实际上只有一个），而 threading\n模块则有很多。\n不过，出于对 Python 和线程学习的兴趣，我们将给出使用 thread 模块的一些代码。\n给出这些代码只是出于学习目的，希望它能够让你更好地领悟为什么应该避免使用\nthread 模块。我们还将展示如何使用更加合适的工具，如 threading 和 Queue 模块中的那\n些方法。\n避免使用 thread 模块的另一个原因是它对于进程何时退出没有控制。当主线程结束\n时，所有其他线程也都强制结束，不会发出警告或者进行适当的清理。如前所述，至少\nthreading 模块能确保重要的子线程在进程退出前结束。\n我们只建议那些想访问线程的更底层级别的专家使用 thread 模块。为了强调这一点，\n在 Python3 中该模块被重命名为_thread。你创建的任何多线程应用都应该使用 threading 模\n块或其他更高级别的模块。\n\n> **核心提示：守护线程**\n避免使用 thread 模块的另一个原因是该模块不支持守护线程这个概念。当主线程退出\n时，所有子线程都将终止，不管它们是否仍在工作。如果你不希望发生这种行为，就要引\n入守护线程的概念了。\nthreading 模块支持守护线程，其工作方式是：守护线程一般是一个等待客户端请\n求服务的服务器。如果没有客户端请求，守护线程就是空闲的。如果把一个线程设置\n为守护线程，就表示这个线程是不重要的，进程退出时不需要等待这个线程执行完成。\n如同在第 2 章中看到的那样，服务器线程远行在一个无限循环里，并且在正常情况下\n不会退出。\n如果主线程准备退出时，不需要等待某些子线程完成，就可以为这些子线程设置守护\n线程标记。该标记值为真时，表示该线程是不重要的，或者说该线程只是用来等待客户端\n请求而不做任何其他事情。\n要将一个线程设置为守护线程，需要在启动线程之前执行如下赋值语句：\nthread.daemon = True（调用 thread.setDaemon(True)的旧方法已经弃用了）。同样，要检\n查线程的守护状态，也只需要检查这个值即可（对比过去调用 thread.isDaemon()的方\n法）。一个新的子线程会继承父线程的守护标记。整个 Python 程序（可以解读为：主线\n程）将在所有非守护线程退出之后才退出，换句话说，就是没有剩下存活的非守护线\n程时。\n\n>当所有线程都分配完成之后，通过调用每个线程的 start()方法让它们开始执行，而不是\n在这之前就会执行。相比于管理一组锁（分配、获取、释放、检查锁状态等）而言，这里只\n需要为每个线程调用 join()方法即可。 join()方法将等待线程结束，或者在提供了超时时间的\n情况下，达到超时时间。使用 join()方法要比等待锁释放的无限循环更加清晰（这也是这种锁\n又称为自旋锁的原因）。136 第 1 部分 通用应用主题\n对于 join()方法而言，其另一个重要方面是其实它根本不需要调用。一旦线程启动，它们\n就会一直执行，直到给定的函数完成后退出。如果主线程还有其他事情要去做，而不是等待\n这些线程完成（例如其他处理或者等待新的客户端请求），就可以不调用 join()。 join()方法只\n有在你需要等待线程完成的时候才是有用的。\n\n\n>使用 Thread 类，可以有很多方法来创建线程。我们将介绍其中比较相似的三种方法。选\n择你觉得最舒服的，或者是最适合你的应用和未来扩展的方法（我们更倾向于最后一种方案）。\n• 创建 Thread 的实例，传给它一个函数。\n• 创建 Thread 的实例，传给它一个可调用的类实例。\n• 派生 Thread 的子类，并创建子类的实例。\n你会发现你将选择第一个或第三个方案。当你需要一个更加符合面向对象的接口时，\n会选择后者；否则会选择前者。老实说，你会发现第二种方案显得有些尴尬并且稍微难以\n阅读，以下示例详细介绍：\n\n> 函数形式创建\n\n```python\nimport threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\ndef loop(nloop, nsec):\n    print(\"thread start! :\",nloop , ctime())\n    sleep(nsec)\n    print(\"thread end! :\",nloop , ctime())\n\n\ndef main():\n    print(f\"starting at :{ctime()}\")\n    threads = []\n    for i in range(len(loops)):\n        t = thread.Thread(target=loop, args=(i, loops[i]))\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n    \n    print(\"all done\")\n\nmain()\n```\n\n> 类形式创建\n\n```python\nimport threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\n\nclass MyThread():\n    def __init__(self, func, args, name=''):\n        self.func = func\n        self.args = args\n        self.name = name\n    def __call__(self):\n        self.func(*self.args)\n        \n\ndef loop(nloop, nsec):\n    print(\"thread start! :\",nloop , ctime())\n    sleep(nsec)\n    print(\"thread end! :\",nloop , ctime())\n\n\ndef main():\n    print(f\"starting at :{ctime()}\")\n    threads = []\n    for i in range(len(loops)):\n        t = thread.Thread(target=MyThread(loop,(i,loops[i]),loop.__name__))\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n    \n    print(\"all done\")\n\nmain()\n```\n\n\n> 子类形式创建\n\n```python\nimport threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\n\nclass MyThread(thread.Thread):\n    def __init__(self, func, args, name=''):\n        thread.Thread.__init__(self) #Changed: need to inherit and call parent's init\n        self.func = func\n        self.args = args\n        self.name = name\n\n    def get_result(self):\n        return self.res\n\n    def run(self):\n        print('starting', self.name, 'at: ', ctime())\n        self.res = self.func(*self.args)\n        print('finished', self.name, 'at: ', ctime())\n        \n\ndef loop(nloop, nsec):\n    sleep(nsec)\n\n\ndef main():\n    threads = []\n    for i in range(len(loops)):\n        t = MyThread(loop, (i, loops[i]), loop.__name__+str(i)) #Changed:no need to use threading.Thread() method\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n    \n    print(\"all done\")\n\nmain()\n\n```\n\n> 实例：\n\n```python\n#my_thread.py\nimport threading as thread\nfrom time import ctime\n\nclass MyThread(thread.Thread):\n    def __init__(self, func, args, name=''):\n        thread.Thread.__init__(self)  # Changed: need to inherit and call parent's init\n        self.func = func\n        self.args = args\n        self.name = name\n\n    def get_result(self):\n        return self.res\n\n    def run(self):\n        print('starting', self.name, 'at: ', ctime())\n        self.res = self.func(*self.args)\n        print('finished', self.name, 'at: ', ctime())\n\n```\n\n\n ```python\n #main.py\n from my_thread import MyThread\nfrom time import ctime, sleep\n\n\ndef fib(x):\n    sleep(0.002)\n    if x < 2: return 1\n    return fib(x-2) + fib(x-1)\n\n\ndef fac(x):\n    sleep(0.1)\n    if x < 2: return 1\n    return x * fac(x-1)\n\n\ndef sum(x):\n    sleep(0.2)\n    if x < 2: return 1\n    return x + sum(x-1)\n\n\nfuncs = [fib, fac, sum]\nn = 12\n\ndef main():\n    print(\"****** Single THREAD ********\")\n    for i in range(len(funcs)):\n        print(\"start function %s\" % funcs[i].__name__)\n        print(funcs[i](n))\n        print(\"end function %s\" % funcs[i].__name__)\n\n    threads = []\n    print(\"****** Multi THREAD ********\")\n    for i in range(len(funcs)):\n        t = MyThread(funcs[i], (n,), funcs[i].__name__)\n        threads.append(t)\n\n    for i in range(len(funcs)):\n        threads[i].start()\n\n    for i in range(len(funcs)):\n        threads[i].join()\n        print(threads[i].get_result())\n\n    print(\"all done\")\nmain()\n\n ```\n\n\n","slug":"Python Core Programming Note 3","published":1,"date":"2020-09-08T03:23:20.715Z","updated":"2020-09-08T03:23:20.715Z","_id":"ckdpcluyd001q8sr3zblyr974","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Multi-thread\"><a href=\"#Multi-thread\" class=\"headerlink\" title=\"Multi-thread\"></a>Multi-thread</h2><h3 id=\"Python-的-threading-模块\"><a href=\"#Python-的-threading-模块\" class=\"headerlink\" title=\"Python 的 threading 模块\"></a>Python 的 threading 模块</h3><p>Python 提供了多个模块来支持多线程编程，包括 thread、 threading 和 Queue 模块等。程<br>序是可以使用 thread 和 threading 模块来创建与管理线程。 thread 模块提供了基本的线程和锁<br>定支持；而 threading 模块提供了更高级别、功能更全面的线程管理。使用 Queue 模块，用户<br>可以创建一个队列数据结构，用于在多线程之间进行共享。</p>\n<blockquote>\n<p><strong>核心提示：避免使用 thread 模块</strong><br>推荐使用更高级别的 threading 模块，而不使用 thread 模块有很多原因。 threading 模<br>块更加先进，有更好的线程支持，并且 thread 模块中的一些属性会和 threading 模块有冲突。<br>另一个原因是低级别的 thread 模块拥有的同步原语很少（实际上只有一个），而 threading<br>模块则有很多。<br>不过，出于对 Python 和线程学习的兴趣，我们将给出使用 thread 模块的一些代码。<br>给出这些代码只是出于学习目的，希望它能够让你更好地领悟为什么应该避免使用<br>thread 模块。我们还将展示如何使用更加合适的工具，如 threading 和 Queue 模块中的那<br>些方法。<br>避免使用 thread 模块的另一个原因是它对于进程何时退出没有控制。当主线程结束<br>时，所有其他线程也都强制结束，不会发出警告或者进行适当的清理。如前所述，至少<br>threading 模块能确保重要的子线程在进程退出前结束。<br>我们只建议那些想访问线程的更底层级别的专家使用 thread 模块。为了强调这一点，<br>在 Python3 中该模块被重命名为_thread。你创建的任何多线程应用都应该使用 threading 模<br>块或其他更高级别的模块。</p>\n</blockquote>\n<blockquote>\n<p><strong>核心提示：守护线程</strong><br>避免使用 thread 模块的另一个原因是该模块不支持守护线程这个概念。当主线程退出<br>时，所有子线程都将终止，不管它们是否仍在工作。如果你不希望发生这种行为，就要引<br>入守护线程的概念了。<br>threading 模块支持守护线程，其工作方式是：守护线程一般是一个等待客户端请<br>求服务的服务器。如果没有客户端请求，守护线程就是空闲的。如果把一个线程设置<br>为守护线程，就表示这个线程是不重要的，进程退出时不需要等待这个线程执行完成。<br>如同在第 2 章中看到的那样，服务器线程远行在一个无限循环里，并且在正常情况下<br>不会退出。<br>如果主线程准备退出时，不需要等待某些子线程完成，就可以为这些子线程设置守护<br>线程标记。该标记值为真时，表示该线程是不重要的，或者说该线程只是用来等待客户端<br>请求而不做任何其他事情。<br>要将一个线程设置为守护线程，需要在启动线程之前执行如下赋值语句：<br>thread.daemon = True（调用 thread.setDaemon(True)的旧方法已经弃用了）。同样，要检<br>查线程的守护状态，也只需要检查这个值即可（对比过去调用 thread.isDaemon()的方<br>法）。一个新的子线程会继承父线程的守护标记。整个 Python 程序（可以解读为：主线<br>程）将在所有非守护线程退出之后才退出，换句话说，就是没有剩下存活的非守护线<br>程时。</p>\n</blockquote>\n<blockquote>\n<p>当所有线程都分配完成之后，通过调用每个线程的 start()方法让它们开始执行，而不是<br>在这之前就会执行。相比于管理一组锁（分配、获取、释放、检查锁状态等）而言，这里只<br>需要为每个线程调用 join()方法即可。 join()方法将等待线程结束，或者在提供了超时时间的<br>情况下，达到超时时间。使用 join()方法要比等待锁释放的无限循环更加清晰（这也是这种锁<br>又称为自旋锁的原因）。136 第 1 部分 通用应用主题<br>对于 join()方法而言，其另一个重要方面是其实它根本不需要调用。一旦线程启动，它们<br>就会一直执行，直到给定的函数完成后退出。如果主线程还有其他事情要去做，而不是等待<br>这些线程完成（例如其他处理或者等待新的客户端请求），就可以不调用 join()。 join()方法只<br>有在你需要等待线程完成的时候才是有用的。</p>\n</blockquote>\n<blockquote>\n<p>使用 Thread 类，可以有很多方法来创建线程。我们将介绍其中比较相似的三种方法。选<br>择你觉得最舒服的，或者是最适合你的应用和未来扩展的方法（我们更倾向于最后一种方案）。<br>• 创建 Thread 的实例，传给它一个函数。<br>• 创建 Thread 的实例，传给它一个可调用的类实例。<br>• 派生 Thread 的子类，并创建子类的实例。<br>你会发现你将选择第一个或第三个方案。当你需要一个更加符合面向对象的接口时，<br>会选择后者；否则会选择前者。老实说，你会发现第二种方案显得有些尴尬并且稍微难以<br>阅读，以下示例详细介绍：</p>\n</blockquote>\n<blockquote>\n<p>函数形式创建</p>\n</blockquote>\n<pre><code class=\"python\">import threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\ndef loop(nloop, nsec):\n    print(&quot;thread start! :&quot;,nloop , ctime())\n    sleep(nsec)\n    print(&quot;thread end! :&quot;,nloop , ctime())\n\n\ndef main():\n    print(f&quot;starting at :{ctime()}&quot;)\n    threads = []\n    for i in range(len(loops)):\n        t = thread.Thread(target=loop, args=(i, loops[i]))\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n\n    print(&quot;all done&quot;)\n\nmain()</code></pre>\n<blockquote>\n<p>类形式创建</p>\n</blockquote>\n<pre><code class=\"python\">import threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\n\nclass MyThread():\n    def __init__(self, func, args, name=&#39;&#39;):\n        self.func = func\n        self.args = args\n        self.name = name\n    def __call__(self):\n        self.func(*self.args)\n\n\ndef loop(nloop, nsec):\n    print(&quot;thread start! :&quot;,nloop , ctime())\n    sleep(nsec)\n    print(&quot;thread end! :&quot;,nloop , ctime())\n\n\ndef main():\n    print(f&quot;starting at :{ctime()}&quot;)\n    threads = []\n    for i in range(len(loops)):\n        t = thread.Thread(target=MyThread(loop,(i,loops[i]),loop.__name__))\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n\n    print(&quot;all done&quot;)\n\nmain()</code></pre>\n<blockquote>\n<p>子类形式创建</p>\n</blockquote>\n<pre><code class=\"python\">import threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\n\nclass MyThread(thread.Thread):\n    def __init__(self, func, args, name=&#39;&#39;):\n        thread.Thread.__init__(self) #Changed: need to inherit and call parent&#39;s init\n        self.func = func\n        self.args = args\n        self.name = name\n\n    def get_result(self):\n        return self.res\n\n    def run(self):\n        print(&#39;starting&#39;, self.name, &#39;at: &#39;, ctime())\n        self.res = self.func(*self.args)\n        print(&#39;finished&#39;, self.name, &#39;at: &#39;, ctime())\n\n\ndef loop(nloop, nsec):\n    sleep(nsec)\n\n\ndef main():\n    threads = []\n    for i in range(len(loops)):\n        t = MyThread(loop, (i, loops[i]), loop.__name__+str(i)) #Changed:no need to use threading.Thread() method\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n\n    print(&quot;all done&quot;)\n\nmain()\n</code></pre>\n<blockquote>\n<p>实例：</p>\n</blockquote>\n<pre><code class=\"python\">#my_thread.py\nimport threading as thread\nfrom time import ctime\n\nclass MyThread(thread.Thread):\n    def __init__(self, func, args, name=&#39;&#39;):\n        thread.Thread.__init__(self)  # Changed: need to inherit and call parent&#39;s init\n        self.func = func\n        self.args = args\n        self.name = name\n\n    def get_result(self):\n        return self.res\n\n    def run(self):\n        print(&#39;starting&#39;, self.name, &#39;at: &#39;, ctime())\n        self.res = self.func(*self.args)\n        print(&#39;finished&#39;, self.name, &#39;at: &#39;, ctime())\n</code></pre>\n<pre><code class=\"python\"> #main.py\n from my_thread import MyThread\nfrom time import ctime, sleep\n\n\ndef fib(x):\n    sleep(0.002)\n    if x &lt; 2: return 1\n    return fib(x-2) + fib(x-1)\n\n\ndef fac(x):\n    sleep(0.1)\n    if x &lt; 2: return 1\n    return x * fac(x-1)\n\n\ndef sum(x):\n    sleep(0.2)\n    if x &lt; 2: return 1\n    return x + sum(x-1)\n\n\nfuncs = [fib, fac, sum]\nn = 12\n\ndef main():\n    print(&quot;****** Single THREAD ********&quot;)\n    for i in range(len(funcs)):\n        print(&quot;start function %s&quot; % funcs[i].__name__)\n        print(funcs[i](n))\n        print(&quot;end function %s&quot; % funcs[i].__name__)\n\n    threads = []\n    print(&quot;****** Multi THREAD ********&quot;)\n    for i in range(len(funcs)):\n        t = MyThread(funcs[i], (n,), funcs[i].__name__)\n        threads.append(t)\n\n    for i in range(len(funcs)):\n        threads[i].start()\n\n    for i in range(len(funcs)):\n        threads[i].join()\n        print(threads[i].get_result())\n\n    print(&quot;all done&quot;)\nmain()\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Multi-thread\"><a href=\"#Multi-thread\" class=\"headerlink\" title=\"Multi-thread\"></a>Multi-thread</h2><h3 id=\"Python-的-threading-模块\"><a href=\"#Python-的-threading-模块\" class=\"headerlink\" title=\"Python 的 threading 模块\"></a>Python 的 threading 模块</h3><p>Python 提供了多个模块来支持多线程编程，包括 thread、 threading 和 Queue 模块等。程<br>序是可以使用 thread 和 threading 模块来创建与管理线程。 thread 模块提供了基本的线程和锁<br>定支持；而 threading 模块提供了更高级别、功能更全面的线程管理。使用 Queue 模块，用户<br>可以创建一个队列数据结构，用于在多线程之间进行共享。</p>\n<blockquote>\n<p><strong>核心提示：避免使用 thread 模块</strong><br>推荐使用更高级别的 threading 模块，而不使用 thread 模块有很多原因。 threading 模<br>块更加先进，有更好的线程支持，并且 thread 模块中的一些属性会和 threading 模块有冲突。<br>另一个原因是低级别的 thread 模块拥有的同步原语很少（实际上只有一个），而 threading<br>模块则有很多。<br>不过，出于对 Python 和线程学习的兴趣，我们将给出使用 thread 模块的一些代码。<br>给出这些代码只是出于学习目的，希望它能够让你更好地领悟为什么应该避免使用<br>thread 模块。我们还将展示如何使用更加合适的工具，如 threading 和 Queue 模块中的那<br>些方法。<br>避免使用 thread 模块的另一个原因是它对于进程何时退出没有控制。当主线程结束<br>时，所有其他线程也都强制结束，不会发出警告或者进行适当的清理。如前所述，至少<br>threading 模块能确保重要的子线程在进程退出前结束。<br>我们只建议那些想访问线程的更底层级别的专家使用 thread 模块。为了强调这一点，<br>在 Python3 中该模块被重命名为_thread。你创建的任何多线程应用都应该使用 threading 模<br>块或其他更高级别的模块。</p>\n</blockquote>\n<blockquote>\n<p><strong>核心提示：守护线程</strong><br>避免使用 thread 模块的另一个原因是该模块不支持守护线程这个概念。当主线程退出<br>时，所有子线程都将终止，不管它们是否仍在工作。如果你不希望发生这种行为，就要引<br>入守护线程的概念了。<br>threading 模块支持守护线程，其工作方式是：守护线程一般是一个等待客户端请<br>求服务的服务器。如果没有客户端请求，守护线程就是空闲的。如果把一个线程设置<br>为守护线程，就表示这个线程是不重要的，进程退出时不需要等待这个线程执行完成。<br>如同在第 2 章中看到的那样，服务器线程远行在一个无限循环里，并且在正常情况下<br>不会退出。<br>如果主线程准备退出时，不需要等待某些子线程完成，就可以为这些子线程设置守护<br>线程标记。该标记值为真时，表示该线程是不重要的，或者说该线程只是用来等待客户端<br>请求而不做任何其他事情。<br>要将一个线程设置为守护线程，需要在启动线程之前执行如下赋值语句：<br>thread.daemon = True（调用 thread.setDaemon(True)的旧方法已经弃用了）。同样，要检<br>查线程的守护状态，也只需要检查这个值即可（对比过去调用 thread.isDaemon()的方<br>法）。一个新的子线程会继承父线程的守护标记。整个 Python 程序（可以解读为：主线<br>程）将在所有非守护线程退出之后才退出，换句话说，就是没有剩下存活的非守护线<br>程时。</p>\n</blockquote>\n<blockquote>\n<p>当所有线程都分配完成之后，通过调用每个线程的 start()方法让它们开始执行，而不是<br>在这之前就会执行。相比于管理一组锁（分配、获取、释放、检查锁状态等）而言，这里只<br>需要为每个线程调用 join()方法即可。 join()方法将等待线程结束，或者在提供了超时时间的<br>情况下，达到超时时间。使用 join()方法要比等待锁释放的无限循环更加清晰（这也是这种锁<br>又称为自旋锁的原因）。136 第 1 部分 通用应用主题<br>对于 join()方法而言，其另一个重要方面是其实它根本不需要调用。一旦线程启动，它们<br>就会一直执行，直到给定的函数完成后退出。如果主线程还有其他事情要去做，而不是等待<br>这些线程完成（例如其他处理或者等待新的客户端请求），就可以不调用 join()。 join()方法只<br>有在你需要等待线程完成的时候才是有用的。</p>\n</blockquote>\n<blockquote>\n<p>使用 Thread 类，可以有很多方法来创建线程。我们将介绍其中比较相似的三种方法。选<br>择你觉得最舒服的，或者是最适合你的应用和未来扩展的方法（我们更倾向于最后一种方案）。<br>• 创建 Thread 的实例，传给它一个函数。<br>• 创建 Thread 的实例，传给它一个可调用的类实例。<br>• 派生 Thread 的子类，并创建子类的实例。<br>你会发现你将选择第一个或第三个方案。当你需要一个更加符合面向对象的接口时，<br>会选择后者；否则会选择前者。老实说，你会发现第二种方案显得有些尴尬并且稍微难以<br>阅读，以下示例详细介绍：</p>\n</blockquote>\n<blockquote>\n<p>函数形式创建</p>\n</blockquote>\n<pre><code class=\"python\">import threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\ndef loop(nloop, nsec):\n    print(&quot;thread start! :&quot;,nloop , ctime())\n    sleep(nsec)\n    print(&quot;thread end! :&quot;,nloop , ctime())\n\n\ndef main():\n    print(f&quot;starting at :{ctime()}&quot;)\n    threads = []\n    for i in range(len(loops)):\n        t = thread.Thread(target=loop, args=(i, loops[i]))\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n\n    print(&quot;all done&quot;)\n\nmain()</code></pre>\n<blockquote>\n<p>类形式创建</p>\n</blockquote>\n<pre><code class=\"python\">import threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\n\nclass MyThread():\n    def __init__(self, func, args, name=&#39;&#39;):\n        self.func = func\n        self.args = args\n        self.name = name\n    def __call__(self):\n        self.func(*self.args)\n\n\ndef loop(nloop, nsec):\n    print(&quot;thread start! :&quot;,nloop , ctime())\n    sleep(nsec)\n    print(&quot;thread end! :&quot;,nloop , ctime())\n\n\ndef main():\n    print(f&quot;starting at :{ctime()}&quot;)\n    threads = []\n    for i in range(len(loops)):\n        t = thread.Thread(target=MyThread(loop,(i,loops[i]),loop.__name__))\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n\n    print(&quot;all done&quot;)\n\nmain()</code></pre>\n<blockquote>\n<p>子类形式创建</p>\n</blockquote>\n<pre><code class=\"python\">import threading as thread\nfrom time import sleep, ctime\n\nloops = [3,2]\n\nclass MyThread(thread.Thread):\n    def __init__(self, func, args, name=&#39;&#39;):\n        thread.Thread.__init__(self) #Changed: need to inherit and call parent&#39;s init\n        self.func = func\n        self.args = args\n        self.name = name\n\n    def get_result(self):\n        return self.res\n\n    def run(self):\n        print(&#39;starting&#39;, self.name, &#39;at: &#39;, ctime())\n        self.res = self.func(*self.args)\n        print(&#39;finished&#39;, self.name, &#39;at: &#39;, ctime())\n\n\ndef loop(nloop, nsec):\n    sleep(nsec)\n\n\ndef main():\n    threads = []\n    for i in range(len(loops)):\n        t = MyThread(loop, (i, loops[i]), loop.__name__+str(i)) #Changed:no need to use threading.Thread() method\n        t.daemon = True\n        threads.append(t)\n\n    for i in range(len(loops)):\n        threads[i].start()\n\n    for i in range(len(loops)):\n        threads[i].join()\n\n    print(&quot;all done&quot;)\n\nmain()\n</code></pre>\n<blockquote>\n<p>实例：</p>\n</blockquote>\n<pre><code class=\"python\">#my_thread.py\nimport threading as thread\nfrom time import ctime\n\nclass MyThread(thread.Thread):\n    def __init__(self, func, args, name=&#39;&#39;):\n        thread.Thread.__init__(self)  # Changed: need to inherit and call parent&#39;s init\n        self.func = func\n        self.args = args\n        self.name = name\n\n    def get_result(self):\n        return self.res\n\n    def run(self):\n        print(&#39;starting&#39;, self.name, &#39;at: &#39;, ctime())\n        self.res = self.func(*self.args)\n        print(&#39;finished&#39;, self.name, &#39;at: &#39;, ctime())\n</code></pre>\n<pre><code class=\"python\"> #main.py\n from my_thread import MyThread\nfrom time import ctime, sleep\n\n\ndef fib(x):\n    sleep(0.002)\n    if x &lt; 2: return 1\n    return fib(x-2) + fib(x-1)\n\n\ndef fac(x):\n    sleep(0.1)\n    if x &lt; 2: return 1\n    return x * fac(x-1)\n\n\ndef sum(x):\n    sleep(0.2)\n    if x &lt; 2: return 1\n    return x + sum(x-1)\n\n\nfuncs = [fib, fac, sum]\nn = 12\n\ndef main():\n    print(&quot;****** Single THREAD ********&quot;)\n    for i in range(len(funcs)):\n        print(&quot;start function %s&quot; % funcs[i].__name__)\n        print(funcs[i](n))\n        print(&quot;end function %s&quot; % funcs[i].__name__)\n\n    threads = []\n    print(&quot;****** Multi THREAD ********&quot;)\n    for i in range(len(funcs)):\n        t = MyThread(funcs[i], (n,), funcs[i].__name__)\n        threads.append(t)\n\n    for i in range(len(funcs)):\n        threads[i].start()\n\n    for i in range(len(funcs)):\n        threads[i].join()\n        print(threads[i].get_result())\n\n    print(&quot;all done&quot;)\nmain()\n</code></pre>\n"},{"title":"Python 杂项","_content":"## Python 杂项\n\n### 关于 *args 和 **kwargs参数的用法\n\n> * 允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。\n\n```python\ndef f(a,*args):\n    print(args)\n\nf(1,2,3,4)\n\n\ndef calc(*numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    print(sum)\n\ncalc(1,2,3,4)\n```\n\n>  ** ,关键字参数允许你传入0个或任意个含参数名的参数,这些关键字参数在函数内部自动组装为一个dict。\n\n```python\ndef d(**kargs):\n    print(kargs)\n    \nd(a=1,b=2)\n\n#在函数混合使用*以及**。\ndef h(a,*args,**kargs):\n    print(a,args,kargs)\n\nh(1,2,3,x=4,y=5)\n\ndef person(name,age,**kw):\n    print('name:',name,'age:',age,'other:',kw)\n    \nperson('Adam', 45, gender='M', job='Engineer')\n```\n","source":"_posts/Python 杂项.md","raw":"---\ntitle:  Python 杂项\ncategories:\n- Python\ntags: \n- Python\n- Note\n---\n## Python 杂项\n\n### 关于 *args 和 **kwargs参数的用法\n\n> * 允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。\n\n```python\ndef f(a,*args):\n    print(args)\n\nf(1,2,3,4)\n\n\ndef calc(*numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    print(sum)\n\ncalc(1,2,3,4)\n```\n\n>  ** ,关键字参数允许你传入0个或任意个含参数名的参数,这些关键字参数在函数内部自动组装为一个dict。\n\n```python\ndef d(**kargs):\n    print(kargs)\n    \nd(a=1,b=2)\n\n#在函数混合使用*以及**。\ndef h(a,*args,**kargs):\n    print(a,args,kargs)\n\nh(1,2,3,x=4,y=5)\n\ndef person(name,age,**kw):\n    print('name:',name,'age:',age,'other:',kw)\n    \nperson('Adam', 45, gender='M', job='Engineer')\n```\n","slug":"Python 杂项","published":1,"date":"2020-08-11T01:59:40.425Z","updated":"2020-08-11T01:59:40.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpcluyf001t8sr3vf3c7y2b","content":"<h2 id=\"Python-杂项\"><a href=\"#Python-杂项\" class=\"headerlink\" title=\"Python 杂项\"></a>Python 杂项</h2><h3 id=\"关于-args-和-kwargs参数的用法\"><a href=\"#关于-args-和-kwargs参数的用法\" class=\"headerlink\" title=\"关于 args 和 *kwargs参数的用法\"></a>关于 <em>args 和 *</em>kwargs参数的用法</h3><blockquote>\n<ul>\n<li>允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。</li>\n</ul>\n</blockquote>\n<pre><code class=\"python\">def f(a,*args):\n    print(args)\n\nf(1,2,3,4)\n\n\ndef calc(*numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    print(sum)\n\ncalc(1,2,3,4)</code></pre>\n<blockquote>\n<p> ** ,关键字参数允许你传入0个或任意个含参数名的参数,这些关键字参数在函数内部自动组装为一个dict。</p>\n</blockquote>\n<pre><code class=\"python\">def d(**kargs):\n    print(kargs)\n\nd(a=1,b=2)\n\n#在函数混合使用*以及**。\ndef h(a,*args,**kargs):\n    print(a,args,kargs)\n\nh(1,2,3,x=4,y=5)\n\ndef person(name,age,**kw):\n    print(&#39;name:&#39;,name,&#39;age:&#39;,age,&#39;other:&#39;,kw)\n\nperson(&#39;Adam&#39;, 45, gender=&#39;M&#39;, job=&#39;Engineer&#39;)</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Python-杂项\"><a href=\"#Python-杂项\" class=\"headerlink\" title=\"Python 杂项\"></a>Python 杂项</h2><h3 id=\"关于-args-和-kwargs参数的用法\"><a href=\"#关于-args-和-kwargs参数的用法\" class=\"headerlink\" title=\"关于 args 和 *kwargs参数的用法\"></a>关于 <em>args 和 *</em>kwargs参数的用法</h3><blockquote>\n<ul>\n<li>允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。</li>\n</ul>\n</blockquote>\n<pre><code class=\"python\">def f(a,*args):\n    print(args)\n\nf(1,2,3,4)\n\n\ndef calc(*numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    print(sum)\n\ncalc(1,2,3,4)</code></pre>\n<blockquote>\n<p> ** ,关键字参数允许你传入0个或任意个含参数名的参数,这些关键字参数在函数内部自动组装为一个dict。</p>\n</blockquote>\n<pre><code class=\"python\">def d(**kargs):\n    print(kargs)\n\nd(a=1,b=2)\n\n#在函数混合使用*以及**。\ndef h(a,*args,**kargs):\n    print(a,args,kargs)\n\nh(1,2,3,x=4,y=5)\n\ndef person(name,age,**kw):\n    print(&#39;name:&#39;,name,&#39;age:&#39;,age,&#39;other:&#39;,kw)\n\nperson(&#39;Adam&#39;, 45, gender=&#39;M&#39;, job=&#39;Engineer&#39;)</code></pre>\n"},{"title":"Shader Variant","_content":"\n#### multi_compile与shader_feature\n\nmulti_compile与shader_feature可在shader中定义宏。两者区别如下图所示：\n\n|              | multi_compile           | shader_feature           |\n| ------------ | ----------------------- | ------------------------ |\n| 定义方式     | #pragma multi_compile A | #pragma shader_feature A |\n| 宏的适用范围 | 大多数shader            | 一般仅针对shader自身     |\n| 变体的生成   | 生成所有的变体          | 可自定义生成何种变体     |\n| 默认定义的宏 | 默认定义首个宏          | 默认定义首个宏           |\n\n\n1. 定义方式\n定义方式中值得注意的是，#pragma shader_feature A其实是 #pragma shader_feature _ A的简写，下划线表示未定义宏(nokeyword)。因此此时shader其实对应了两个变体，一个是nokeyword，一个是定义了宏A的。\n而#pragma multi_compile A并不存在简写这一说，所以shader此时只对应A这个变体。若要表示未定义任何变体，则应写为 #pragma multi_compile __ A。\n\n2. 宏的适用范围\nmulti_compile定义的宏，如#pragma multi_compile_fog，#pragma multi_compile_fwdbase等，基本上适用于大部分shader，与shader自身所带的属性无关。\nshader_feature定义的宏多用于针对shader自身的属性。比如shader中有_NormalMap这个属性(Property)，便可通过#pragma shader_feature _NormalMap来定义宏，用来实现这个shader在material有无_NormalMap时可进行不同的处理。\n\n3. 变体的生成\n#pragma multi_compile A B C\n#pragma multi_compile D E\n则此时会生成 A D、A E、B D、B E、C D、C E这6中变体。\nshader_feature要生成何种变体可用shader variant collection进行自定义设置。\n\n4. 默认定义的宏\n当material中的keywords无法对应shader所生成的变体时，Unity便会默认定义宏定义语句中的首个宏，并运行相应的变体来为这个material进行渲染。\nmulti_compile与shader_feature都默认定义首个宏。\n\n#### 如何控制项目中Shader变体的生成\n\n| 生成方式                                              | 优点                                             | 缺点                                                                                                                       |\n| ----------------------------------------------------- | ------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------- |\n| shader与material打在一个包中                          | 变体根据material中的keywords自动生成             | 多个不同的material包中可能存在相同的shader变体，造成资源冗余，若在程序运行时动态改变material的keyword其变体可能并没有被生成 |\n| Shader单独打包，使用multi_compile定义全部宏           | 全部变体都被生成，不会发生需要的变体未生成的情况 |                                                                                                                          生成的变体数量庞大，严重浪费资源   |\n| Shader单独打包，shader_feature与multi_compile结合使用 | 能够有效控制变体数量                             |                                                                                                                            如何确定哪些变体需要生成，容易遗漏需要生成的变体|\n\n\n#### Shader编写规范\n\n1. 建议使用shader_feature时将定义语句写成完整模式，并且不要在一个语句中定义多个宏。\n完整模式：#pragma shader_feature _ A，不建议写成#pragma shader_feature A。\n不建议在一个语句中定义多个宏，如： #pragma shader_feature _ A B C，若一定要定义多个宏，请务必将其写成完整模式，不使用完整模式在切换shader时可能会与想要的效果不一致，具体原因尚未测得。\n\n2. 若在shader中使用shader_feature，请为这个shader指定一个CustomEditor\n每个使用shader_feature来定义Keyword的shader都需要再末尾加个 CusomEditor “xxxx”，并在代码中实现类xxxx(需继承自UnityEditor.ShaderGUI)，用来对Keywords定义进行设定。\n这么做是因为Material中的部分Keyword是由shader中的属性(Properties)所控制的。比如shader中含有_NormalMap的属性并且定义了与_NormalMap相关的Keyword，这个Keyword需要在Material含有NormalMap时添加，不含NormalMap时移除。这个功能可由自定义的CustomEidtor实现。\n具体如何写这个CustomEditor类可参考Unity builtin_shaders\\Editor\\StandardShaderGUI.cs。该文件可去Unity官网下载，下载时选择内置着色器即可。","source":"_posts/Shader Variant.md","raw":"---\ntitle: Shader Variant\ncategories:\n- Unity\n---\n\n#### multi_compile与shader_feature\n\nmulti_compile与shader_feature可在shader中定义宏。两者区别如下图所示：\n\n|              | multi_compile           | shader_feature           |\n| ------------ | ----------------------- | ------------------------ |\n| 定义方式     | #pragma multi_compile A | #pragma shader_feature A |\n| 宏的适用范围 | 大多数shader            | 一般仅针对shader自身     |\n| 变体的生成   | 生成所有的变体          | 可自定义生成何种变体     |\n| 默认定义的宏 | 默认定义首个宏          | 默认定义首个宏           |\n\n\n1. 定义方式\n定义方式中值得注意的是，#pragma shader_feature A其实是 #pragma shader_feature _ A的简写，下划线表示未定义宏(nokeyword)。因此此时shader其实对应了两个变体，一个是nokeyword，一个是定义了宏A的。\n而#pragma multi_compile A并不存在简写这一说，所以shader此时只对应A这个变体。若要表示未定义任何变体，则应写为 #pragma multi_compile __ A。\n\n2. 宏的适用范围\nmulti_compile定义的宏，如#pragma multi_compile_fog，#pragma multi_compile_fwdbase等，基本上适用于大部分shader，与shader自身所带的属性无关。\nshader_feature定义的宏多用于针对shader自身的属性。比如shader中有_NormalMap这个属性(Property)，便可通过#pragma shader_feature _NormalMap来定义宏，用来实现这个shader在material有无_NormalMap时可进行不同的处理。\n\n3. 变体的生成\n#pragma multi_compile A B C\n#pragma multi_compile D E\n则此时会生成 A D、A E、B D、B E、C D、C E这6中变体。\nshader_feature要生成何种变体可用shader variant collection进行自定义设置。\n\n4. 默认定义的宏\n当material中的keywords无法对应shader所生成的变体时，Unity便会默认定义宏定义语句中的首个宏，并运行相应的变体来为这个material进行渲染。\nmulti_compile与shader_feature都默认定义首个宏。\n\n#### 如何控制项目中Shader变体的生成\n\n| 生成方式                                              | 优点                                             | 缺点                                                                                                                       |\n| ----------------------------------------------------- | ------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------- |\n| shader与material打在一个包中                          | 变体根据material中的keywords自动生成             | 多个不同的material包中可能存在相同的shader变体，造成资源冗余，若在程序运行时动态改变material的keyword其变体可能并没有被生成 |\n| Shader单独打包，使用multi_compile定义全部宏           | 全部变体都被生成，不会发生需要的变体未生成的情况 |                                                                                                                          生成的变体数量庞大，严重浪费资源   |\n| Shader单独打包，shader_feature与multi_compile结合使用 | 能够有效控制变体数量                             |                                                                                                                            如何确定哪些变体需要生成，容易遗漏需要生成的变体|\n\n\n#### Shader编写规范\n\n1. 建议使用shader_feature时将定义语句写成完整模式，并且不要在一个语句中定义多个宏。\n完整模式：#pragma shader_feature _ A，不建议写成#pragma shader_feature A。\n不建议在一个语句中定义多个宏，如： #pragma shader_feature _ A B C，若一定要定义多个宏，请务必将其写成完整模式，不使用完整模式在切换shader时可能会与想要的效果不一致，具体原因尚未测得。\n\n2. 若在shader中使用shader_feature，请为这个shader指定一个CustomEditor\n每个使用shader_feature来定义Keyword的shader都需要再末尾加个 CusomEditor “xxxx”，并在代码中实现类xxxx(需继承自UnityEditor.ShaderGUI)，用来对Keywords定义进行设定。\n这么做是因为Material中的部分Keyword是由shader中的属性(Properties)所控制的。比如shader中含有_NormalMap的属性并且定义了与_NormalMap相关的Keyword，这个Keyword需要在Material含有NormalMap时添加，不含NormalMap时移除。这个功能可由自定义的CustomEidtor实现。\n具体如何写这个CustomEditor类可参考Unity builtin_shaders\\Editor\\StandardShaderGUI.cs。该文件可去Unity官网下载，下载时选择内置着色器即可。","slug":"Shader Variant","published":1,"date":"2020-09-08T03:23:20.715Z","updated":"2020-09-08T03:23:20.715Z","_id":"ckdpcluyh001y8sr3hu7vwo0o","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"multi-compile与shader-feature\"><a href=\"#multi-compile与shader-feature\" class=\"headerlink\" title=\"multi_compile与shader_feature\"></a>multi_compile与shader_feature</h4><p>multi_compile与shader_feature可在shader中定义宏。两者区别如下图所示：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>multi_compile</th>\n<th>shader_feature</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>定义方式</td>\n<td>#pragma multi_compile A</td>\n<td>#pragma shader_feature A</td>\n</tr>\n<tr>\n<td>宏的适用范围</td>\n<td>大多数shader</td>\n<td>一般仅针对shader自身</td>\n</tr>\n<tr>\n<td>变体的生成</td>\n<td>生成所有的变体</td>\n<td>可自定义生成何种变体</td>\n</tr>\n<tr>\n<td>默认定义的宏</td>\n<td>默认定义首个宏</td>\n<td>默认定义首个宏</td>\n</tr>\n</tbody></table>\n<ol>\n<li><p>定义方式<br>定义方式中值得注意的是，#pragma shader_feature A其实是 #pragma shader_feature _ A的简写，下划线表示未定义宏(nokeyword)。因此此时shader其实对应了两个变体，一个是nokeyword，一个是定义了宏A的。<br>而#pragma multi_compile A并不存在简写这一说，所以shader此时只对应A这个变体。若要表示未定义任何变体，则应写为 #pragma multi_compile __ A。</p>\n</li>\n<li><p>宏的适用范围<br>multi_compile定义的宏，如#pragma multi_compile_fog，#pragma multi_compile_fwdbase等，基本上适用于大部分shader，与shader自身所带的属性无关。<br>shader_feature定义的宏多用于针对shader自身的属性。比如shader中有_NormalMap这个属性(Property)，便可通过#pragma shader_feature _NormalMap来定义宏，用来实现这个shader在material有无_NormalMap时可进行不同的处理。</p>\n</li>\n<li><p>变体的生成<br>#pragma multi_compile A B C<br>#pragma multi_compile D E<br>则此时会生成 A D、A E、B D、B E、C D、C E这6中变体。<br>shader_feature要生成何种变体可用shader variant collection进行自定义设置。</p>\n</li>\n<li><p>默认定义的宏<br>当material中的keywords无法对应shader所生成的变体时，Unity便会默认定义宏定义语句中的首个宏，并运行相应的变体来为这个material进行渲染。<br>multi_compile与shader_feature都默认定义首个宏。</p>\n</li>\n</ol>\n<h4 id=\"如何控制项目中Shader变体的生成\"><a href=\"#如何控制项目中Shader变体的生成\" class=\"headerlink\" title=\"如何控制项目中Shader变体的生成\"></a>如何控制项目中Shader变体的生成</h4><table>\n<thead>\n<tr>\n<th>生成方式</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>shader与material打在一个包中</td>\n<td>变体根据material中的keywords自动生成</td>\n<td>多个不同的material包中可能存在相同的shader变体，造成资源冗余，若在程序运行时动态改变material的keyword其变体可能并没有被生成</td>\n</tr>\n<tr>\n<td>Shader单独打包，使用multi_compile定义全部宏</td>\n<td>全部变体都被生成，不会发生需要的变体未生成的情况</td>\n<td>生成的变体数量庞大，严重浪费资源</td>\n</tr>\n<tr>\n<td>Shader单独打包，shader_feature与multi_compile结合使用</td>\n<td>能够有效控制变体数量</td>\n<td>如何确定哪些变体需要生成，容易遗漏需要生成的变体</td>\n</tr>\n</tbody></table>\n<h4 id=\"Shader编写规范\"><a href=\"#Shader编写规范\" class=\"headerlink\" title=\"Shader编写规范\"></a>Shader编写规范</h4><ol>\n<li><p>建议使用shader_feature时将定义语句写成完整模式，并且不要在一个语句中定义多个宏。<br>完整模式：#pragma shader_feature _ A，不建议写成#pragma shader_feature A。<br>不建议在一个语句中定义多个宏，如： #pragma shader_feature _ A B C，若一定要定义多个宏，请务必将其写成完整模式，不使用完整模式在切换shader时可能会与想要的效果不一致，具体原因尚未测得。</p>\n</li>\n<li><p>若在shader中使用shader_feature，请为这个shader指定一个CustomEditor<br>每个使用shader_feature来定义Keyword的shader都需要再末尾加个 CusomEditor “xxxx”，并在代码中实现类xxxx(需继承自UnityEditor.ShaderGUI)，用来对Keywords定义进行设定。<br>这么做是因为Material中的部分Keyword是由shader中的属性(Properties)所控制的。比如shader中含有_NormalMap的属性并且定义了与_NormalMap相关的Keyword，这个Keyword需要在Material含有NormalMap时添加，不含NormalMap时移除。这个功能可由自定义的CustomEidtor实现。<br>具体如何写这个CustomEditor类可参考Unity builtin_shaders\\Editor\\StandardShaderGUI.cs。该文件可去Unity官网下载，下载时选择内置着色器即可。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"multi-compile与shader-feature\"><a href=\"#multi-compile与shader-feature\" class=\"headerlink\" title=\"multi_compile与shader_feature\"></a>multi_compile与shader_feature</h4><p>multi_compile与shader_feature可在shader中定义宏。两者区别如下图所示：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>multi_compile</th>\n<th>shader_feature</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>定义方式</td>\n<td>#pragma multi_compile A</td>\n<td>#pragma shader_feature A</td>\n</tr>\n<tr>\n<td>宏的适用范围</td>\n<td>大多数shader</td>\n<td>一般仅针对shader自身</td>\n</tr>\n<tr>\n<td>变体的生成</td>\n<td>生成所有的变体</td>\n<td>可自定义生成何种变体</td>\n</tr>\n<tr>\n<td>默认定义的宏</td>\n<td>默认定义首个宏</td>\n<td>默认定义首个宏</td>\n</tr>\n</tbody></table>\n<ol>\n<li><p>定义方式<br>定义方式中值得注意的是，#pragma shader_feature A其实是 #pragma shader_feature _ A的简写，下划线表示未定义宏(nokeyword)。因此此时shader其实对应了两个变体，一个是nokeyword，一个是定义了宏A的。<br>而#pragma multi_compile A并不存在简写这一说，所以shader此时只对应A这个变体。若要表示未定义任何变体，则应写为 #pragma multi_compile __ A。</p>\n</li>\n<li><p>宏的适用范围<br>multi_compile定义的宏，如#pragma multi_compile_fog，#pragma multi_compile_fwdbase等，基本上适用于大部分shader，与shader自身所带的属性无关。<br>shader_feature定义的宏多用于针对shader自身的属性。比如shader中有_NormalMap这个属性(Property)，便可通过#pragma shader_feature _NormalMap来定义宏，用来实现这个shader在material有无_NormalMap时可进行不同的处理。</p>\n</li>\n<li><p>变体的生成<br>#pragma multi_compile A B C<br>#pragma multi_compile D E<br>则此时会生成 A D、A E、B D、B E、C D、C E这6中变体。<br>shader_feature要生成何种变体可用shader variant collection进行自定义设置。</p>\n</li>\n<li><p>默认定义的宏<br>当material中的keywords无法对应shader所生成的变体时，Unity便会默认定义宏定义语句中的首个宏，并运行相应的变体来为这个material进行渲染。<br>multi_compile与shader_feature都默认定义首个宏。</p>\n</li>\n</ol>\n<h4 id=\"如何控制项目中Shader变体的生成\"><a href=\"#如何控制项目中Shader变体的生成\" class=\"headerlink\" title=\"如何控制项目中Shader变体的生成\"></a>如何控制项目中Shader变体的生成</h4><table>\n<thead>\n<tr>\n<th>生成方式</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>shader与material打在一个包中</td>\n<td>变体根据material中的keywords自动生成</td>\n<td>多个不同的material包中可能存在相同的shader变体，造成资源冗余，若在程序运行时动态改变material的keyword其变体可能并没有被生成</td>\n</tr>\n<tr>\n<td>Shader单独打包，使用multi_compile定义全部宏</td>\n<td>全部变体都被生成，不会发生需要的变体未生成的情况</td>\n<td>生成的变体数量庞大，严重浪费资源</td>\n</tr>\n<tr>\n<td>Shader单独打包，shader_feature与multi_compile结合使用</td>\n<td>能够有效控制变体数量</td>\n<td>如何确定哪些变体需要生成，容易遗漏需要生成的变体</td>\n</tr>\n</tbody></table>\n<h4 id=\"Shader编写规范\"><a href=\"#Shader编写规范\" class=\"headerlink\" title=\"Shader编写规范\"></a>Shader编写规范</h4><ol>\n<li><p>建议使用shader_feature时将定义语句写成完整模式，并且不要在一个语句中定义多个宏。<br>完整模式：#pragma shader_feature _ A，不建议写成#pragma shader_feature A。<br>不建议在一个语句中定义多个宏，如： #pragma shader_feature _ A B C，若一定要定义多个宏，请务必将其写成完整模式，不使用完整模式在切换shader时可能会与想要的效果不一致，具体原因尚未测得。</p>\n</li>\n<li><p>若在shader中使用shader_feature，请为这个shader指定一个CustomEditor<br>每个使用shader_feature来定义Keyword的shader都需要再末尾加个 CusomEditor “xxxx”，并在代码中实现类xxxx(需继承自UnityEditor.ShaderGUI)，用来对Keywords定义进行设定。<br>这么做是因为Material中的部分Keyword是由shader中的属性(Properties)所控制的。比如shader中含有_NormalMap的属性并且定义了与_NormalMap相关的Keyword，这个Keyword需要在Material含有NormalMap时添加，不含NormalMap时移除。这个功能可由自定义的CustomEidtor实现。<br>具体如何写这个CustomEditor类可参考Unity builtin_shaders\\Editor\\StandardShaderGUI.cs。该文件可去Unity官网下载，下载时选择内置着色器即可。</p>\n</li>\n</ol>\n"},{"title":"Python Note 3","_content":"# Python Note 3\n\n### Classes\n> Use Pacal naming convertion,not like variables/function use lower cases and underscore connection.\n> Basic usage:\n\n```python\nclass Point:\n\tdef draw(self):\n\t\tprint(\"draw\")\n\n\tdef print(self):\n\t\tprint(\"this is point\")\n\n\npoint1 = Point()\npoint1.x = 5\npoint1.draw()\nprint(point1.x)\n```\n\n### Constructor\n\n```python\nclass Point:\n\tdef __init__(self, x, y):\n\t\tself.x = x\n\t\tself.y = y\n\n\tdef draw(self):\n\t\tprint(\"draw\")\n\n\tdef print(self):\n\t\tprint(\"this is point\")\n\n\npoint1 = Point(10, 5)\npoint1.draw()\nprint(point1.x)\n\n#exercise\nclass Person:\n\tdef __init__(self, name):\n\t\tself.name = name\n\n\tdef talk(self):\n\t\tprint(f\"{self.name} is talking..\")\n\n\nwhile True:\n\tperson_name = str(input(\"Please enter person: \"))\n\tif person_name == \"Quit\":\n\t\tbreak\n\telif person_name != \"\":\n\t\tnew_person = Person(person_name)\n\t\tnew_person.talk()\n\telse:\n\t\tprint(\"You enter a empty!\")\n\n```\n\n### inheritance\n> use bracket to inherit parent class\n\n```python\nclass Mammal:\n\tdef walk(self):\n\t\tprint(\"walk\")\n\n\nclass Dog(Mammal):\n\tdef bark(self):\n\t\tprint(\"bark\")\n\n\nclass Cat(Mammal):\n\tpass  # tell python to pass this line\n\n\ndog1 = Dog()\ndog1.walk()\ndog1.bark()\n\n```\n\n### module\n> each file refer a module\n\n```python\nimport converters #to import converters.py\nfrom converters import kg_to_lbs\n\n#exercise\nimport  convertors\nfrom convertors import weight_to_lbs\n\nprint(weight_to_lbs())\nnumbers = [5,1,8,2]\nmaximum = convertors.find_max(numbers)\nprint(max(numbers))\n```\n\n### package\n> a set of modules: directory with \"__init__.py\" file\n\n```python\nfrom ecommerce.shopping import test\nfrom ecommerce import shopping\ntest()\nshopping.test()\n```\n\n### use python build-in module\n> search [python module index](https://docs.python.org/3/py-modindex.html)\n> PEP: python enhancement proposal\n\n```python\nimport  random\nmembers = [\"Jack\", \"Rose\", \"Bob\", \"Avery\", \"Mosh\"]\nm = random.choice(members)\nprint(m)\n\n#exercise\nimport random\nclass Dice: #will get PEP 8 warning\n    def roll(self):\n        r1 = random.randint(0, 5)\n        r2 = random.randint(0, 5)\n        return r1,r2  #Python will auto make it to Tuple\n\n\n\nmydice = Dice()\nprint(mydice.roll())\n```\n\n```python\nfrom pathlib import Path\n\npath = Path(\"pydemo2/ecommerce\")\nfor p in path.glob(\"*.py\"):\n    print(p)\n\n```\n\n### 使用type直接拿到类句柄\n\n+ 以type取得的值为句柄创建一个新的对象\n```python\nresult = type(self)(self.a)\n```","source":"_posts/Python_3.md","raw":"---\ntitle: Python Note 3\ncategories:\n- Python\ntags: \n- Python\n- Note\n---\n# Python Note 3\n\n### Classes\n> Use Pacal naming convertion,not like variables/function use lower cases and underscore connection.\n> Basic usage:\n\n```python\nclass Point:\n\tdef draw(self):\n\t\tprint(\"draw\")\n\n\tdef print(self):\n\t\tprint(\"this is point\")\n\n\npoint1 = Point()\npoint1.x = 5\npoint1.draw()\nprint(point1.x)\n```\n\n### Constructor\n\n```python\nclass Point:\n\tdef __init__(self, x, y):\n\t\tself.x = x\n\t\tself.y = y\n\n\tdef draw(self):\n\t\tprint(\"draw\")\n\n\tdef print(self):\n\t\tprint(\"this is point\")\n\n\npoint1 = Point(10, 5)\npoint1.draw()\nprint(point1.x)\n\n#exercise\nclass Person:\n\tdef __init__(self, name):\n\t\tself.name = name\n\n\tdef talk(self):\n\t\tprint(f\"{self.name} is talking..\")\n\n\nwhile True:\n\tperson_name = str(input(\"Please enter person: \"))\n\tif person_name == \"Quit\":\n\t\tbreak\n\telif person_name != \"\":\n\t\tnew_person = Person(person_name)\n\t\tnew_person.talk()\n\telse:\n\t\tprint(\"You enter a empty!\")\n\n```\n\n### inheritance\n> use bracket to inherit parent class\n\n```python\nclass Mammal:\n\tdef walk(self):\n\t\tprint(\"walk\")\n\n\nclass Dog(Mammal):\n\tdef bark(self):\n\t\tprint(\"bark\")\n\n\nclass Cat(Mammal):\n\tpass  # tell python to pass this line\n\n\ndog1 = Dog()\ndog1.walk()\ndog1.bark()\n\n```\n\n### module\n> each file refer a module\n\n```python\nimport converters #to import converters.py\nfrom converters import kg_to_lbs\n\n#exercise\nimport  convertors\nfrom convertors import weight_to_lbs\n\nprint(weight_to_lbs())\nnumbers = [5,1,8,2]\nmaximum = convertors.find_max(numbers)\nprint(max(numbers))\n```\n\n### package\n> a set of modules: directory with \"__init__.py\" file\n\n```python\nfrom ecommerce.shopping import test\nfrom ecommerce import shopping\ntest()\nshopping.test()\n```\n\n### use python build-in module\n> search [python module index](https://docs.python.org/3/py-modindex.html)\n> PEP: python enhancement proposal\n\n```python\nimport  random\nmembers = [\"Jack\", \"Rose\", \"Bob\", \"Avery\", \"Mosh\"]\nm = random.choice(members)\nprint(m)\n\n#exercise\nimport random\nclass Dice: #will get PEP 8 warning\n    def roll(self):\n        r1 = random.randint(0, 5)\n        r2 = random.randint(0, 5)\n        return r1,r2  #Python will auto make it to Tuple\n\n\n\nmydice = Dice()\nprint(mydice.roll())\n```\n\n```python\nfrom pathlib import Path\n\npath = Path(\"pydemo2/ecommerce\")\nfor p in path.glob(\"*.py\"):\n    print(p)\n\n```\n\n### 使用type直接拿到类句柄\n\n+ 以type取得的值为句柄创建一个新的对象\n```python\nresult = type(self)(self.a)\n```","slug":"Python_3","published":1,"date":"2020-09-08T03:23:20.715Z","updated":"2020-09-08T03:23:20.715Z","_id":"ckdpcluyi00218sr3ihztx7h1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Python-Note-3\"><a href=\"#Python-Note-3\" class=\"headerlink\" title=\"Python Note 3\"></a>Python Note 3</h1><h3 id=\"Classes\"><a href=\"#Classes\" class=\"headerlink\" title=\"Classes\"></a>Classes</h3><blockquote>\n<p>Use Pacal naming convertion,not like variables/function use lower cases and underscore connection.<br>Basic usage:</p>\n</blockquote>\n<pre><code class=\"python\">class Point:\n    def draw(self):\n        print(&quot;draw&quot;)\n\n    def print(self):\n        print(&quot;this is point&quot;)\n\n\npoint1 = Point()\npoint1.x = 5\npoint1.draw()\nprint(point1.x)</code></pre>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a>Constructor</h3><pre><code class=\"python\">class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def draw(self):\n        print(&quot;draw&quot;)\n\n    def print(self):\n        print(&quot;this is point&quot;)\n\n\npoint1 = Point(10, 5)\npoint1.draw()\nprint(point1.x)\n\n#exercise\nclass Person:\n    def __init__(self, name):\n        self.name = name\n\n    def talk(self):\n        print(f&quot;{self.name} is talking..&quot;)\n\n\nwhile True:\n    person_name = str(input(&quot;Please enter person: &quot;))\n    if person_name == &quot;Quit&quot;:\n        break\n    elif person_name != &quot;&quot;:\n        new_person = Person(person_name)\n        new_person.talk()\n    else:\n        print(&quot;You enter a empty!&quot;)\n</code></pre>\n<h3 id=\"inheritance\"><a href=\"#inheritance\" class=\"headerlink\" title=\"inheritance\"></a>inheritance</h3><blockquote>\n<p>use bracket to inherit parent class</p>\n</blockquote>\n<pre><code class=\"python\">class Mammal:\n    def walk(self):\n        print(&quot;walk&quot;)\n\n\nclass Dog(Mammal):\n    def bark(self):\n        print(&quot;bark&quot;)\n\n\nclass Cat(Mammal):\n    pass  # tell python to pass this line\n\n\ndog1 = Dog()\ndog1.walk()\ndog1.bark()\n</code></pre>\n<h3 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h3><blockquote>\n<p>each file refer a module</p>\n</blockquote>\n<pre><code class=\"python\">import converters #to import converters.py\nfrom converters import kg_to_lbs\n\n#exercise\nimport  convertors\nfrom convertors import weight_to_lbs\n\nprint(weight_to_lbs())\nnumbers = [5,1,8,2]\nmaximum = convertors.find_max(numbers)\nprint(max(numbers))</code></pre>\n<h3 id=\"package\"><a href=\"#package\" class=\"headerlink\" title=\"package\"></a>package</h3><blockquote>\n<p>a set of modules: directory with “<strong>init</strong>.py” file</p>\n</blockquote>\n<pre><code class=\"python\">from ecommerce.shopping import test\nfrom ecommerce import shopping\ntest()\nshopping.test()</code></pre>\n<h3 id=\"use-python-build-in-module\"><a href=\"#use-python-build-in-module\" class=\"headerlink\" title=\"use python build-in module\"></a>use python build-in module</h3><blockquote>\n<p>search <a href=\"https://docs.python.org/3/py-modindex.html\">python module index</a><br>PEP: python enhancement proposal</p>\n</blockquote>\n<pre><code class=\"python\">import  random\nmembers = [&quot;Jack&quot;, &quot;Rose&quot;, &quot;Bob&quot;, &quot;Avery&quot;, &quot;Mosh&quot;]\nm = random.choice(members)\nprint(m)\n\n#exercise\nimport random\nclass Dice: #will get PEP 8 warning\n    def roll(self):\n        r1 = random.randint(0, 5)\n        r2 = random.randint(0, 5)\n        return r1,r2  #Python will auto make it to Tuple\n\n\n\nmydice = Dice()\nprint(mydice.roll())</code></pre>\n<pre><code class=\"python\">from pathlib import Path\n\npath = Path(&quot;pydemo2/ecommerce&quot;)\nfor p in path.glob(&quot;*.py&quot;):\n    print(p)\n</code></pre>\n<h3 id=\"使用type直接拿到类句柄\"><a href=\"#使用type直接拿到类句柄\" class=\"headerlink\" title=\"使用type直接拿到类句柄\"></a>使用type直接拿到类句柄</h3><ul>\n<li>以type取得的值为句柄创建一个新的对象<pre><code class=\"python\">result = type(self)(self.a)</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Python-Note-3\"><a href=\"#Python-Note-3\" class=\"headerlink\" title=\"Python Note 3\"></a>Python Note 3</h1><h3 id=\"Classes\"><a href=\"#Classes\" class=\"headerlink\" title=\"Classes\"></a>Classes</h3><blockquote>\n<p>Use Pacal naming convertion,not like variables/function use lower cases and underscore connection.<br>Basic usage:</p>\n</blockquote>\n<pre><code class=\"python\">class Point:\n    def draw(self):\n        print(&quot;draw&quot;)\n\n    def print(self):\n        print(&quot;this is point&quot;)\n\n\npoint1 = Point()\npoint1.x = 5\npoint1.draw()\nprint(point1.x)</code></pre>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a>Constructor</h3><pre><code class=\"python\">class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def draw(self):\n        print(&quot;draw&quot;)\n\n    def print(self):\n        print(&quot;this is point&quot;)\n\n\npoint1 = Point(10, 5)\npoint1.draw()\nprint(point1.x)\n\n#exercise\nclass Person:\n    def __init__(self, name):\n        self.name = name\n\n    def talk(self):\n        print(f&quot;{self.name} is talking..&quot;)\n\n\nwhile True:\n    person_name = str(input(&quot;Please enter person: &quot;))\n    if person_name == &quot;Quit&quot;:\n        break\n    elif person_name != &quot;&quot;:\n        new_person = Person(person_name)\n        new_person.talk()\n    else:\n        print(&quot;You enter a empty!&quot;)\n</code></pre>\n<h3 id=\"inheritance\"><a href=\"#inheritance\" class=\"headerlink\" title=\"inheritance\"></a>inheritance</h3><blockquote>\n<p>use bracket to inherit parent class</p>\n</blockquote>\n<pre><code class=\"python\">class Mammal:\n    def walk(self):\n        print(&quot;walk&quot;)\n\n\nclass Dog(Mammal):\n    def bark(self):\n        print(&quot;bark&quot;)\n\n\nclass Cat(Mammal):\n    pass  # tell python to pass this line\n\n\ndog1 = Dog()\ndog1.walk()\ndog1.bark()\n</code></pre>\n<h3 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h3><blockquote>\n<p>each file refer a module</p>\n</blockquote>\n<pre><code class=\"python\">import converters #to import converters.py\nfrom converters import kg_to_lbs\n\n#exercise\nimport  convertors\nfrom convertors import weight_to_lbs\n\nprint(weight_to_lbs())\nnumbers = [5,1,8,2]\nmaximum = convertors.find_max(numbers)\nprint(max(numbers))</code></pre>\n<h3 id=\"package\"><a href=\"#package\" class=\"headerlink\" title=\"package\"></a>package</h3><blockquote>\n<p>a set of modules: directory with “<strong>init</strong>.py” file</p>\n</blockquote>\n<pre><code class=\"python\">from ecommerce.shopping import test\nfrom ecommerce import shopping\ntest()\nshopping.test()</code></pre>\n<h3 id=\"use-python-build-in-module\"><a href=\"#use-python-build-in-module\" class=\"headerlink\" title=\"use python build-in module\"></a>use python build-in module</h3><blockquote>\n<p>search <a href=\"https://docs.python.org/3/py-modindex.html\">python module index</a><br>PEP: python enhancement proposal</p>\n</blockquote>\n<pre><code class=\"python\">import  random\nmembers = [&quot;Jack&quot;, &quot;Rose&quot;, &quot;Bob&quot;, &quot;Avery&quot;, &quot;Mosh&quot;]\nm = random.choice(members)\nprint(m)\n\n#exercise\nimport random\nclass Dice: #will get PEP 8 warning\n    def roll(self):\n        r1 = random.randint(0, 5)\n        r2 = random.randint(0, 5)\n        return r1,r2  #Python will auto make it to Tuple\n\n\n\nmydice = Dice()\nprint(mydice.roll())</code></pre>\n<pre><code class=\"python\">from pathlib import Path\n\npath = Path(&quot;pydemo2/ecommerce&quot;)\nfor p in path.glob(&quot;*.py&quot;):\n    print(p)\n</code></pre>\n<h3 id=\"使用type直接拿到类句柄\"><a href=\"#使用type直接拿到类句柄\" class=\"headerlink\" title=\"使用type直接拿到类句柄\"></a>使用type直接拿到类句柄</h3><ul>\n<li>以type取得的值为句柄创建一个新的对象<pre><code class=\"python\">result = type(self)(self.a)</code></pre>\n</li>\n</ul>\n"},{"title":"Smargit  简单使用说明","_content":"\n## 下载安装\n\n* 打开网址：https://www.syntevo.com/smartgit/\n* 如图，点击Download，进入后选择自己自己的系统平台\n![enter description here](./images/1574504169104.png)\n\n![enter description here](./images/1574504183153.png)\n\n* 解压后，直接点击EXE文件安装，使用默认选项就行了。\n\n## 第一次打开\n\n1. 如果本地已经用过乌龟拉项目，smartgit会自动检测出项目，点击打开即可\n2. 如果没有项目，请直接选择克隆新项目\n![enter description here](./images/1574504408755.png)\n![](./images/1574504420111.png)\n![enter description here](./images/1574504426236.png)\n\n\n## 切换分支\n双击分支窗口的一个分支即可：\n![enter description here](./images/1574504495536.png)\n\n## 拉取最新\n![enter description here](./images/1574504516272.png)\n如果弹出窗口，选择“快进”的方式就可以了\n\n## 提交更改\n* 点亮来更改和新增的标识，来显示文件，如图：\n ![enter description here](./images/1574504592931.png)\n\n* 选择自己的更改项，点提交并推送就行\n![enter description here](./images/1574504634973.png)\n\n![enter description here](./images/1574504645523.png)\n\n## 建议\n\n1. 提交前先点一下拉取，获取到最新的代码\n2. 如果发现显示有问题，右击仓库窗口里的项目来刷新一下，如：\n![enter description here](./images/1574504738524.png)\n","source":"_posts/Smargit  简单使用说明.md","raw":"---\ntitle: Smargit  简单使用说明\ncategories:\n- 公司\ntags: \n- Git\n---\n\n## 下载安装\n\n* 打开网址：https://www.syntevo.com/smartgit/\n* 如图，点击Download，进入后选择自己自己的系统平台\n![enter description here](./images/1574504169104.png)\n\n![enter description here](./images/1574504183153.png)\n\n* 解压后，直接点击EXE文件安装，使用默认选项就行了。\n\n## 第一次打开\n\n1. 如果本地已经用过乌龟拉项目，smartgit会自动检测出项目，点击打开即可\n2. 如果没有项目，请直接选择克隆新项目\n![enter description here](./images/1574504408755.png)\n![](./images/1574504420111.png)\n![enter description here](./images/1574504426236.png)\n\n\n## 切换分支\n双击分支窗口的一个分支即可：\n![enter description here](./images/1574504495536.png)\n\n## 拉取最新\n![enter description here](./images/1574504516272.png)\n如果弹出窗口，选择“快进”的方式就可以了\n\n## 提交更改\n* 点亮来更改和新增的标识，来显示文件，如图：\n ![enter description here](./images/1574504592931.png)\n\n* 选择自己的更改项，点提交并推送就行\n![enter description here](./images/1574504634973.png)\n\n![enter description here](./images/1574504645523.png)\n\n## 建议\n\n1. 提交前先点一下拉取，获取到最新的代码\n2. 如果发现显示有问题，右击仓库窗口里的项目来刷新一下，如：\n![enter description here](./images/1574504738524.png)\n","slug":"Smargit  简单使用说明","published":1,"date":"2020-09-08T03:23:20.715Z","updated":"2020-09-08T03:23:20.715Z","_id":"ckdpcluyl00268sr3a2314s1c","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><ul>\n<li>打开网址：<a href=\"https://www.syntevo.com/smartgit/\">https://www.syntevo.com/smartgit/</a></li>\n<li>如图，点击Download，进入后选择自己自己的系统平台<br><img src=\"./images/1574504169104.png\" alt=\"enter description here\"></li>\n</ul>\n<p><img src=\"./images/1574504183153.png\" alt=\"enter description here\"></p>\n<ul>\n<li>解压后，直接点击EXE文件安装，使用默认选项就行了。</li>\n</ul>\n<h2 id=\"第一次打开\"><a href=\"#第一次打开\" class=\"headerlink\" title=\"第一次打开\"></a>第一次打开</h2><ol>\n<li>如果本地已经用过乌龟拉项目，smartgit会自动检测出项目，点击打开即可</li>\n<li>如果没有项目，请直接选择克隆新项目<br><img src=\"./images/1574504408755.png\" alt=\"enter description here\"><br><img src=\"./images/1574504420111.png\" alt=\"\"><br><img src=\"./images/1574504426236.png\" alt=\"enter description here\"></li>\n</ol>\n<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2><p>双击分支窗口的一个分支即可：<br><img src=\"./images/1574504495536.png\" alt=\"enter description here\"></p>\n<h2 id=\"拉取最新\"><a href=\"#拉取最新\" class=\"headerlink\" title=\"拉取最新\"></a>拉取最新</h2><p><img src=\"./images/1574504516272.png\" alt=\"enter description here\"><br>如果弹出窗口，选择“快进”的方式就可以了</p>\n<h2 id=\"提交更改\"><a href=\"#提交更改\" class=\"headerlink\" title=\"提交更改\"></a>提交更改</h2><ul>\n<li><p>点亮来更改和新增的标识，来显示文件，如图：<br><img src=\"./images/1574504592931.png\" alt=\"enter description here\"></p>\n</li>\n<li><p>选择自己的更改项，点提交并推送就行<br><img src=\"./images/1574504634973.png\" alt=\"enter description here\"></p>\n</li>\n</ul>\n<p><img src=\"./images/1574504645523.png\" alt=\"enter description here\"></p>\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><ol>\n<li>提交前先点一下拉取，获取到最新的代码</li>\n<li>如果发现显示有问题，右击仓库窗口里的项目来刷新一下，如：<br><img src=\"./images/1574504738524.png\" alt=\"enter description here\"></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><ul>\n<li>打开网址：<a href=\"https://www.syntevo.com/smartgit/\">https://www.syntevo.com/smartgit/</a></li>\n<li>如图，点击Download，进入后选择自己自己的系统平台<br><img src=\"./images/1574504169104.png\" alt=\"enter description here\"></li>\n</ul>\n<p><img src=\"./images/1574504183153.png\" alt=\"enter description here\"></p>\n<ul>\n<li>解压后，直接点击EXE文件安装，使用默认选项就行了。</li>\n</ul>\n<h2 id=\"第一次打开\"><a href=\"#第一次打开\" class=\"headerlink\" title=\"第一次打开\"></a>第一次打开</h2><ol>\n<li>如果本地已经用过乌龟拉项目，smartgit会自动检测出项目，点击打开即可</li>\n<li>如果没有项目，请直接选择克隆新项目<br><img src=\"./images/1574504408755.png\" alt=\"enter description here\"><br><img src=\"./images/1574504420111.png\" alt=\"\"><br><img src=\"./images/1574504426236.png\" alt=\"enter description here\"></li>\n</ol>\n<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2><p>双击分支窗口的一个分支即可：<br><img src=\"./images/1574504495536.png\" alt=\"enter description here\"></p>\n<h2 id=\"拉取最新\"><a href=\"#拉取最新\" class=\"headerlink\" title=\"拉取最新\"></a>拉取最新</h2><p><img src=\"./images/1574504516272.png\" alt=\"enter description here\"><br>如果弹出窗口，选择“快进”的方式就可以了</p>\n<h2 id=\"提交更改\"><a href=\"#提交更改\" class=\"headerlink\" title=\"提交更改\"></a>提交更改</h2><ul>\n<li><p>点亮来更改和新增的标识，来显示文件，如图：<br><img src=\"./images/1574504592931.png\" alt=\"enter description here\"></p>\n</li>\n<li><p>选择自己的更改项，点提交并推送就行<br><img src=\"./images/1574504634973.png\" alt=\"enter description here\"></p>\n</li>\n</ul>\n<p><img src=\"./images/1574504645523.png\" alt=\"enter description here\"></p>\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><ol>\n<li>提交前先点一下拉取，获取到最新的代码</li>\n<li>如果发现显示有问题，右击仓库窗口里的项目来刷新一下，如：<br><img src=\"./images/1574504738524.png\" alt=\"enter description here\"></li>\n</ol>\n"},{"title":"VS Code最佳插件","_content":"## 1.视图类的插件\n\n### Material Theme && Material Theme Icon\n\n\n### Prettier - code formatter\n\n### Bracket Pair Colorizer 2\n\n> 显示bracket的section.\n\n### indent-rainbow\n\n>彩虹式的显示缩进\n\n## 2. 功能类插件\n\n### Auto Rename Tag\n\n> 改一个tag自动变相联的tag头\n\n### REST Client\n\n> 测试后台接口\n\n![GET与POST测试](/img/1577068784300.png)\n\n### CSS Pick\n\n>自动从HTML中选择出CSS\n\n### HTML CSS Support\n\n> 自动提示CSS及补全HTML\n\n### Live Sass Compiler\n\n> 根据当前的CSS，自动生成CSS文件。\n\n### Live Server\n> 显示内置浏览器窗口","source":"_posts/VS Code最佳插件.md","raw":"---\ntitle: VS Code最佳插件\ncategories:\n- 杂项资料\ntags: \n- Note\n---\n## 1.视图类的插件\n\n### Material Theme && Material Theme Icon\n\n\n### Prettier - code formatter\n\n### Bracket Pair Colorizer 2\n\n> 显示bracket的section.\n\n### indent-rainbow\n\n>彩虹式的显示缩进\n\n## 2. 功能类插件\n\n### Auto Rename Tag\n\n> 改一个tag自动变相联的tag头\n\n### REST Client\n\n> 测试后台接口\n\n![GET与POST测试](/img/1577068784300.png)\n\n### CSS Pick\n\n>自动从HTML中选择出CSS\n\n### HTML CSS Support\n\n> 自动提示CSS及补全HTML\n\n### Live Sass Compiler\n\n> 根据当前的CSS，自动生成CSS文件。\n\n### Live Server\n> 显示内置浏览器窗口","slug":"VS Code最佳插件","published":1,"date":"2020-09-08T03:23:20.716Z","updated":"2020-09-08T03:23:20.716Z","_id":"ckdpcluym00298sr3xoq7okm4","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-视图类的插件\"><a href=\"#1-视图类的插件\" class=\"headerlink\" title=\"1.视图类的插件\"></a>1.视图类的插件</h2><h3 id=\"Material-Theme-amp-amp-Material-Theme-Icon\"><a href=\"#Material-Theme-amp-amp-Material-Theme-Icon\" class=\"headerlink\" title=\"Material Theme &amp;&amp; Material Theme Icon\"></a>Material Theme &amp;&amp; Material Theme Icon</h3><h3 id=\"Prettier-code-formatter\"><a href=\"#Prettier-code-formatter\" class=\"headerlink\" title=\"Prettier - code formatter\"></a>Prettier - code formatter</h3><h3 id=\"Bracket-Pair-Colorizer-2\"><a href=\"#Bracket-Pair-Colorizer-2\" class=\"headerlink\" title=\"Bracket Pair Colorizer 2\"></a>Bracket Pair Colorizer 2</h3><blockquote>\n<p>显示bracket的section.</p>\n</blockquote>\n<h3 id=\"indent-rainbow\"><a href=\"#indent-rainbow\" class=\"headerlink\" title=\"indent-rainbow\"></a>indent-rainbow</h3><blockquote>\n<p>彩虹式的显示缩进</p>\n</blockquote>\n<h2 id=\"2-功能类插件\"><a href=\"#2-功能类插件\" class=\"headerlink\" title=\"2. 功能类插件\"></a>2. 功能类插件</h2><h3 id=\"Auto-Rename-Tag\"><a href=\"#Auto-Rename-Tag\" class=\"headerlink\" title=\"Auto Rename Tag\"></a>Auto Rename Tag</h3><blockquote>\n<p>改一个tag自动变相联的tag头</p>\n</blockquote>\n<h3 id=\"REST-Client\"><a href=\"#REST-Client\" class=\"headerlink\" title=\"REST Client\"></a>REST Client</h3><blockquote>\n<p>测试后台接口</p>\n</blockquote>\n<p><img src=\"/img/1577068784300.png\" alt=\"GET与POST测试\"></p>\n<h3 id=\"CSS-Pick\"><a href=\"#CSS-Pick\" class=\"headerlink\" title=\"CSS Pick\"></a>CSS Pick</h3><blockquote>\n<p>自动从HTML中选择出CSS</p>\n</blockquote>\n<h3 id=\"HTML-CSS-Support\"><a href=\"#HTML-CSS-Support\" class=\"headerlink\" title=\"HTML CSS Support\"></a>HTML CSS Support</h3><blockquote>\n<p>自动提示CSS及补全HTML</p>\n</blockquote>\n<h3 id=\"Live-Sass-Compiler\"><a href=\"#Live-Sass-Compiler\" class=\"headerlink\" title=\"Live Sass Compiler\"></a>Live Sass Compiler</h3><blockquote>\n<p>根据当前的CSS，自动生成CSS文件。</p>\n</blockquote>\n<h3 id=\"Live-Server\"><a href=\"#Live-Server\" class=\"headerlink\" title=\"Live Server\"></a>Live Server</h3><blockquote>\n<p>显示内置浏览器窗口</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-视图类的插件\"><a href=\"#1-视图类的插件\" class=\"headerlink\" title=\"1.视图类的插件\"></a>1.视图类的插件</h2><h3 id=\"Material-Theme-amp-amp-Material-Theme-Icon\"><a href=\"#Material-Theme-amp-amp-Material-Theme-Icon\" class=\"headerlink\" title=\"Material Theme &amp;&amp; Material Theme Icon\"></a>Material Theme &amp;&amp; Material Theme Icon</h3><h3 id=\"Prettier-code-formatter\"><a href=\"#Prettier-code-formatter\" class=\"headerlink\" title=\"Prettier - code formatter\"></a>Prettier - code formatter</h3><h3 id=\"Bracket-Pair-Colorizer-2\"><a href=\"#Bracket-Pair-Colorizer-2\" class=\"headerlink\" title=\"Bracket Pair Colorizer 2\"></a>Bracket Pair Colorizer 2</h3><blockquote>\n<p>显示bracket的section.</p>\n</blockquote>\n<h3 id=\"indent-rainbow\"><a href=\"#indent-rainbow\" class=\"headerlink\" title=\"indent-rainbow\"></a>indent-rainbow</h3><blockquote>\n<p>彩虹式的显示缩进</p>\n</blockquote>\n<h2 id=\"2-功能类插件\"><a href=\"#2-功能类插件\" class=\"headerlink\" title=\"2. 功能类插件\"></a>2. 功能类插件</h2><h3 id=\"Auto-Rename-Tag\"><a href=\"#Auto-Rename-Tag\" class=\"headerlink\" title=\"Auto Rename Tag\"></a>Auto Rename Tag</h3><blockquote>\n<p>改一个tag自动变相联的tag头</p>\n</blockquote>\n<h3 id=\"REST-Client\"><a href=\"#REST-Client\" class=\"headerlink\" title=\"REST Client\"></a>REST Client</h3><blockquote>\n<p>测试后台接口</p>\n</blockquote>\n<p><img src=\"/img/1577068784300.png\" alt=\"GET与POST测试\"></p>\n<h3 id=\"CSS-Pick\"><a href=\"#CSS-Pick\" class=\"headerlink\" title=\"CSS Pick\"></a>CSS Pick</h3><blockquote>\n<p>自动从HTML中选择出CSS</p>\n</blockquote>\n<h3 id=\"HTML-CSS-Support\"><a href=\"#HTML-CSS-Support\" class=\"headerlink\" title=\"HTML CSS Support\"></a>HTML CSS Support</h3><blockquote>\n<p>自动提示CSS及补全HTML</p>\n</blockquote>\n<h3 id=\"Live-Sass-Compiler\"><a href=\"#Live-Sass-Compiler\" class=\"headerlink\" title=\"Live Sass Compiler\"></a>Live Sass Compiler</h3><blockquote>\n<p>根据当前的CSS，自动生成CSS文件。</p>\n</blockquote>\n<h3 id=\"Live-Server\"><a href=\"#Live-Server\" class=\"headerlink\" title=\"Live Server\"></a>Live Server</h3><blockquote>\n<p>显示内置浏览器窗口</p>\n</blockquote>\n"},{"title":"Python Note 1","_content":"# Python Note 1\n\n+ 逻辑运算符的使用：\n+ and or not 会将几个值作为False ：0 None \"\" []\n\n+ 多变量赋值\n```python\nminValue, maxValue = 10 , 20\n```\n\n+ 命名规范\n+ 变量名，函数名： 小驼峰或下划线小写的形式\n+ 常量：全大写\n+ 类名：大驼峰\n\n+ 代码换行：\n+ 当一行写不完时，使用 \\ 将代码延续\n```python\nproduct  = max(100,200) \\\n\t\t\t\t\t*30\n```\n\n+ 输出：\n+ 以% 输出\n+ 字符宽度指定：\"%3d\" 右对齐数字， “%-3d”左对齐数字。换成s则为字符串。 \n+ 小数精度指定：%<field_width>.<precision>f  ，注意字符宽度将包含.\n```python\na = 10\nprint(\"%d\"%a)\nb = 100.025\nprint(\"%0.2f\"%b)\nprint(\"%-10.3f\"%b)\n```\n\n+ 自动转义的函数\n+ \"greater\".__len__() 等价于len(\"greater\")\n+ \"a\"+\"b\" 等价于\"a\".__add__(\"b\")\n+ \"e\" in \"great\" 等价于 \"great\".__contains__(\"e\")\n\n\n+ ==获取对象可用函数列表==\n+ dir(str) \n\n+ ==获取函数文档==\n+ help(str.upper)\n\n+ 以独立程序加载的python文件\n+ 使用“main”标记为模块name的名字\n```python\nif __name__ == \"__main__\"\n\tmain()\n```\n\n+ ### while结构\n 注： \"\"\"  多行string\n\n```python\nn = 0\nwhile n < 5:\n\tprint(\"\"\"\nThis is test!\nThis is test2!\nThis is test3!\n\t\"\"\")\n\tn = n + 1\n```\n\n+ ### For结构\n * 普通使用\n \n ```python\n for i in range(5):\n \tprint()\n ```\n * Use curly braces, 显示变量\n\n```python\n for i in range(5):\n \tprint(f\"i:{i}\")\n ```\n * 使用重复*个数输出字符\n\n```python\n for i in range(5):\n \tprint(f\"i:{i}\"*4)\n ```\n\n+ ### List\n+ 注意List的切片和连接运算符返回的就是一个新的数组\n* 普遍用法\n\n```python\nnames = ['John', 'Bob', 'Mosh', 'Sarah', 'Mary']\nprint(names[2:])  #Print will start from 'Mosh'''\nprint(names[:])  #Print all'\nnames[0] = 'Joh' #Change item\nprint(names)  #output\n# 2d list\nmatrix = [\n   [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nmatrix[0][-3] = 20\nprint(matrix)\n```\n\n* 编辑类\n\n```python\nnumbers = [5,2,1,7]\nnumbers.insert(-2,20)\nnumbers.remove(2)\nnumbers.append(45)\nnumbers.pop() #remove the last and return it\nprint(numbers.index(5))\nnumbers.sort()\nnumbers.reverse() #get deasc order\nif 5 in numbers:\n    print(numbers.index(5))\nnumbers2 = numbers.copy()\nnumbers.append(45)\nprint(numbers)\nprint(numbers2)\n\n#去重复\nnumbers = [5,20,1,5,7,5,6,4,5]\nuniques = []\nfor i in numbers:\n    if i not in uniques:\n        uniques.append(i)\nprint(uniques)\n```\n\n+ ### Tuple\n+ 类似于List，但不可修改\n\n```python\nnumbers = (5,20,1,5,7,5,6,4,5)\nnumbers[0] = 1 #TypeError: 'tuple' object does not support item assignment\n```\n\n+ ### Unpacking\n+ 映射数组成员\n\n```python\ncoordinates = (1,2,3)\na = coordinates[0]\nb = coordinates[1]\nc = coordinates[2]\n\n# use Unpacking feature, unpacking the tuple/list to three variable\nx, y, z = coordinates\nprint(f\"{a},{b},{c} <=> {x}, {y}, {z}\")\n```\n\n+ ### Dictionary\n\n```python\ncustomer = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"is_verified\": True\n}\nprint(customer[\"name\"])\n# print(customer[\"Name\"]) #KeyError,don't contain\n# print(customer[\"birthdate\"])#KeyError,don't contain\nprint(customer.get(\"name\"))\nprint(customer.get(\"Name\",\"Hey\")) #Print,with default value:'Hey'\ncustomer[\"name\"] = \"AA\"\nprint(customer.get(\"name\"))\n\n#Exercise\ninput_str = str(input(\"Phone:\"))\ndigits_map = {\n    \"1\":\"One\",\n    \"2\":\"Two\",\n    \"3\":\"Three\",\n    \"4\":\"Four\",\n}\noutput = ''\nfor s in input_str:\n    output += digits_map.get(s,\"\") + \" \"\n\nprint(output)\n```\n+ [mac]ctrl+cmd+space>> to show emojis\n\n+ ### 函数\n+ 注释：\n+ 三个引号的注释，意为文档注释，使用help函数时显示\n+ 无返回函数，默认返回为None\n\n+ 递归函数：\n+ 输出的小技巧：使用“ ” * 递归序号的形式生成缩进的日志，这样就有一个层级的输出结构了。\n\n+ 函数之中也可嵌套函数！\n\n+ 高阶函数：filter函数与map函数，reduce函数\n+ map将第二个列表中的值放到第一个参数的函数中逐个执行。最后把结果映射成map出来\n+ filter将把第二个列表中的值逐个放到第一个参数的函数中进行运算得出 True的放到一个结果里。\n+ reduce函数是每一个参数是一个带双参的函数，第一个参为下一项，第二参为上一次的结果。\n```python\ndef is_no_zero(v):\n    if v != 0:\n        return True\n    return False\n\noldlist = [5,0,3,5,0,8,6,4,0,3,9,1]\n\nnewlist = list(filter(is_no_zero, oldlist))\nnewlist = list(map(str, oldlist))\nprint(newlist)\n\nimport  functools\noldlist = [5,0,3,5,0,8,6,4,0,3,9,1]\nresult = functools.reduce(lambda x,y:x+y, oldlist)\nprint(result)\n```\n\n+ lambda做内联函数\n```python\n# lambda x,y:x+y\n```\n\n\n+ 使用pickle 读写对象\n+ 文件读写类型如：\n模式\t描述\nt\t文本模式 (默认)。\nx\t写模式，新建一个文件，如果该文件已存在则会报错。\nb\t二进制模式。\n\\+\t打开一个文件进行更新(可读可写)。\nU\t通用换行模式（不推荐）。\nr\t以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。\nrb\t以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。\nr+\t打开一个文件用于读写。文件指针将会放在文件的开头。\nrb+\t以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。\nw\t打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。\nwb\t以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。\nw+\t打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。\nwb+\t以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。\na\t打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。\nab\t以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。\na+\t打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。\nab+\t以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。\n\n```python\n\nmylist = [5, 6, \"abc\", 7]\nf = open(\"myfile.txt\", \"w\")\n\nfor n in mylist:\n    print(\"写入数据：\", n)\n    pickle.dump(n, f)\n    # f.write(n)\nf.close()\n\nmylist = list()\nf = open(\"myfile.txt\", \"r\")\nwhile True:\n    try:\n        item = pickle.load(f)\n        # item = f.read()\n        mylist.append(item)\n    except EOFError:\n        f.close()\n        break\nprint(\"读出的结果：\", mylist)\n\n```\n\n+ 常用三种运算符说明\n+ //运算符执行地板除法(向下取整除),它会返回整除结果的整数部分\n```print(7//2)```\n>#3\n>这里整除后会返回3.5\n\n+ 同样的，执行取幂运算，ab会返回a的b次方\n```print(2**10)```\n\n>#1024\n+ 最后，%执行取模运算，返回除法的余数\n```python\nprint(13%7)#6\nprint(3.5%1.5)#0.5\n```\n\n+ ### 使用Profiler探测\n+ 安装Profiler库\n+ 度量算法性能。","source":"_posts/python_1.md","raw":"---\ntitle: Python Note 1\ncategories:\n- Python\ntags: \n- Python\n- Note\n---\n# Python Note 1\n\n+ 逻辑运算符的使用：\n+ and or not 会将几个值作为False ：0 None \"\" []\n\n+ 多变量赋值\n```python\nminValue, maxValue = 10 , 20\n```\n\n+ 命名规范\n+ 变量名，函数名： 小驼峰或下划线小写的形式\n+ 常量：全大写\n+ 类名：大驼峰\n\n+ 代码换行：\n+ 当一行写不完时，使用 \\ 将代码延续\n```python\nproduct  = max(100,200) \\\n\t\t\t\t\t*30\n```\n\n+ 输出：\n+ 以% 输出\n+ 字符宽度指定：\"%3d\" 右对齐数字， “%-3d”左对齐数字。换成s则为字符串。 \n+ 小数精度指定：%<field_width>.<precision>f  ，注意字符宽度将包含.\n```python\na = 10\nprint(\"%d\"%a)\nb = 100.025\nprint(\"%0.2f\"%b)\nprint(\"%-10.3f\"%b)\n```\n\n+ 自动转义的函数\n+ \"greater\".__len__() 等价于len(\"greater\")\n+ \"a\"+\"b\" 等价于\"a\".__add__(\"b\")\n+ \"e\" in \"great\" 等价于 \"great\".__contains__(\"e\")\n\n\n+ ==获取对象可用函数列表==\n+ dir(str) \n\n+ ==获取函数文档==\n+ help(str.upper)\n\n+ 以独立程序加载的python文件\n+ 使用“main”标记为模块name的名字\n```python\nif __name__ == \"__main__\"\n\tmain()\n```\n\n+ ### while结构\n 注： \"\"\"  多行string\n\n```python\nn = 0\nwhile n < 5:\n\tprint(\"\"\"\nThis is test!\nThis is test2!\nThis is test3!\n\t\"\"\")\n\tn = n + 1\n```\n\n+ ### For结构\n * 普通使用\n \n ```python\n for i in range(5):\n \tprint()\n ```\n * Use curly braces, 显示变量\n\n```python\n for i in range(5):\n \tprint(f\"i:{i}\")\n ```\n * 使用重复*个数输出字符\n\n```python\n for i in range(5):\n \tprint(f\"i:{i}\"*4)\n ```\n\n+ ### List\n+ 注意List的切片和连接运算符返回的就是一个新的数组\n* 普遍用法\n\n```python\nnames = ['John', 'Bob', 'Mosh', 'Sarah', 'Mary']\nprint(names[2:])  #Print will start from 'Mosh'''\nprint(names[:])  #Print all'\nnames[0] = 'Joh' #Change item\nprint(names)  #output\n# 2d list\nmatrix = [\n   [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nmatrix[0][-3] = 20\nprint(matrix)\n```\n\n* 编辑类\n\n```python\nnumbers = [5,2,1,7]\nnumbers.insert(-2,20)\nnumbers.remove(2)\nnumbers.append(45)\nnumbers.pop() #remove the last and return it\nprint(numbers.index(5))\nnumbers.sort()\nnumbers.reverse() #get deasc order\nif 5 in numbers:\n    print(numbers.index(5))\nnumbers2 = numbers.copy()\nnumbers.append(45)\nprint(numbers)\nprint(numbers2)\n\n#去重复\nnumbers = [5,20,1,5,7,5,6,4,5]\nuniques = []\nfor i in numbers:\n    if i not in uniques:\n        uniques.append(i)\nprint(uniques)\n```\n\n+ ### Tuple\n+ 类似于List，但不可修改\n\n```python\nnumbers = (5,20,1,5,7,5,6,4,5)\nnumbers[0] = 1 #TypeError: 'tuple' object does not support item assignment\n```\n\n+ ### Unpacking\n+ 映射数组成员\n\n```python\ncoordinates = (1,2,3)\na = coordinates[0]\nb = coordinates[1]\nc = coordinates[2]\n\n# use Unpacking feature, unpacking the tuple/list to three variable\nx, y, z = coordinates\nprint(f\"{a},{b},{c} <=> {x}, {y}, {z}\")\n```\n\n+ ### Dictionary\n\n```python\ncustomer = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"is_verified\": True\n}\nprint(customer[\"name\"])\n# print(customer[\"Name\"]) #KeyError,don't contain\n# print(customer[\"birthdate\"])#KeyError,don't contain\nprint(customer.get(\"name\"))\nprint(customer.get(\"Name\",\"Hey\")) #Print,with default value:'Hey'\ncustomer[\"name\"] = \"AA\"\nprint(customer.get(\"name\"))\n\n#Exercise\ninput_str = str(input(\"Phone:\"))\ndigits_map = {\n    \"1\":\"One\",\n    \"2\":\"Two\",\n    \"3\":\"Three\",\n    \"4\":\"Four\",\n}\noutput = ''\nfor s in input_str:\n    output += digits_map.get(s,\"\") + \" \"\n\nprint(output)\n```\n+ [mac]ctrl+cmd+space>> to show emojis\n\n+ ### 函数\n+ 注释：\n+ 三个引号的注释，意为文档注释，使用help函数时显示\n+ 无返回函数，默认返回为None\n\n+ 递归函数：\n+ 输出的小技巧：使用“ ” * 递归序号的形式生成缩进的日志，这样就有一个层级的输出结构了。\n\n+ 函数之中也可嵌套函数！\n\n+ 高阶函数：filter函数与map函数，reduce函数\n+ map将第二个列表中的值放到第一个参数的函数中逐个执行。最后把结果映射成map出来\n+ filter将把第二个列表中的值逐个放到第一个参数的函数中进行运算得出 True的放到一个结果里。\n+ reduce函数是每一个参数是一个带双参的函数，第一个参为下一项，第二参为上一次的结果。\n```python\ndef is_no_zero(v):\n    if v != 0:\n        return True\n    return False\n\noldlist = [5,0,3,5,0,8,6,4,0,3,9,1]\n\nnewlist = list(filter(is_no_zero, oldlist))\nnewlist = list(map(str, oldlist))\nprint(newlist)\n\nimport  functools\noldlist = [5,0,3,5,0,8,6,4,0,3,9,1]\nresult = functools.reduce(lambda x,y:x+y, oldlist)\nprint(result)\n```\n\n+ lambda做内联函数\n```python\n# lambda x,y:x+y\n```\n\n\n+ 使用pickle 读写对象\n+ 文件读写类型如：\n模式\t描述\nt\t文本模式 (默认)。\nx\t写模式，新建一个文件，如果该文件已存在则会报错。\nb\t二进制模式。\n\\+\t打开一个文件进行更新(可读可写)。\nU\t通用换行模式（不推荐）。\nr\t以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。\nrb\t以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。\nr+\t打开一个文件用于读写。文件指针将会放在文件的开头。\nrb+\t以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。\nw\t打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。\nwb\t以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。\nw+\t打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。\nwb+\t以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。\na\t打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。\nab\t以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。\na+\t打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。\nab+\t以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。\n\n```python\n\nmylist = [5, 6, \"abc\", 7]\nf = open(\"myfile.txt\", \"w\")\n\nfor n in mylist:\n    print(\"写入数据：\", n)\n    pickle.dump(n, f)\n    # f.write(n)\nf.close()\n\nmylist = list()\nf = open(\"myfile.txt\", \"r\")\nwhile True:\n    try:\n        item = pickle.load(f)\n        # item = f.read()\n        mylist.append(item)\n    except EOFError:\n        f.close()\n        break\nprint(\"读出的结果：\", mylist)\n\n```\n\n+ 常用三种运算符说明\n+ //运算符执行地板除法(向下取整除),它会返回整除结果的整数部分\n```print(7//2)```\n>#3\n>这里整除后会返回3.5\n\n+ 同样的，执行取幂运算，ab会返回a的b次方\n```print(2**10)```\n\n>#1024\n+ 最后，%执行取模运算，返回除法的余数\n```python\nprint(13%7)#6\nprint(3.5%1.5)#0.5\n```\n\n+ ### 使用Profiler探测\n+ 安装Profiler库\n+ 度量算法性能。","slug":"python_1","published":1,"date":"2020-09-08T03:23:20.889Z","updated":"2020-09-08T03:23:20.889Z","_id":"ckdpcluyp002e8sr3lt63pzat","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Python-Note-1\"><a href=\"#Python-Note-1\" class=\"headerlink\" title=\"Python Note 1\"></a>Python Note 1</h1><ul>\n<li><p>逻辑运算符的使用：</p>\n</li>\n<li><p>and or not 会将几个值作为False ：0 None “” []</p>\n</li>\n<li><p>多变量赋值</p>\n<pre><code class=\"python\">minValue, maxValue = 10 , 20</code></pre>\n</li>\n<li><p>命名规范</p>\n</li>\n<li><p>变量名，函数名： 小驼峰或下划线小写的形式</p>\n</li>\n<li><p>常量：全大写</p>\n</li>\n<li><p>类名：大驼峰</p>\n</li>\n<li><p>代码换行：</p>\n</li>\n<li><p>当一行写不完时，使用 \\ 将代码延续</p>\n<pre><code class=\"python\">product  = max(100,200) \\\n                  *30</code></pre>\n</li>\n<li><p>输出：</p>\n</li>\n<li><p>以% 输出</p>\n</li>\n<li><p>字符宽度指定：”%3d” 右对齐数字， “%-3d”左对齐数字。换成s则为字符串。 </p>\n</li>\n<li><p>小数精度指定：%<field_width>.<precision>f  ，注意字符宽度将包含.</p>\n<pre><code class=\"python\">a = 10\nprint(&quot;%d&quot;%a)\nb = 100.025\nprint(&quot;%0.2f&quot;%b)\nprint(&quot;%-10.3f&quot;%b)</code></pre>\n</li>\n<li><p>自动转义的函数</p>\n</li>\n<li><p>“greater”.<strong>len</strong>() 等价于len(“greater”)</p>\n</li>\n<li><p>“a”+”b” 等价于”a”.<strong>add</strong>(“b”)</p>\n</li>\n<li><p>“e” in “great” 等价于 “great”.<strong>contains</strong>(“e”)</p>\n</li>\n</ul>\n<ul>\n<li><p>==获取对象可用函数列表==</p>\n</li>\n<li><p>dir(str) </p>\n</li>\n<li><p>==获取函数文档==</p>\n</li>\n<li><p>help(str.upper)</p>\n</li>\n<li><p>以独立程序加载的python文件</p>\n</li>\n<li><p>使用“main”标记为模块name的名字</p>\n<pre><code class=\"python\">if __name__ == &quot;__main__&quot;\n  main()</code></pre>\n</li>\n<li><h3 id=\"while结构\"><a href=\"#while结构\" class=\"headerlink\" title=\"while结构\"></a>while结构</h3><p>注： “””  多行string</p>\n</li>\n</ul>\n<pre><code class=\"python\">n = 0\nwhile n &lt; 5:\n    print(&quot;&quot;&quot;\nThis is test!\nThis is test2!\nThis is test3!\n    &quot;&quot;&quot;)\n    n = n + 1</code></pre>\n<ul>\n<li><h3 id=\"For结构\"><a href=\"#For结构\" class=\"headerlink\" title=\"For结构\"></a>For结构</h3><ul>\n<li>普通使用</li>\n</ul>\n<pre><code class=\"python\">for i in range(5):\n   print()</code></pre>\n<ul>\n<li>Use curly braces, 显示变量</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"python\"> for i in range(5):\n     print(f&quot;i:{i}&quot;)</code></pre>\n<ul>\n<li>使用重复*个数输出字符</li>\n</ul>\n<pre><code class=\"python\"> for i in range(5):\n     print(f&quot;i:{i}&quot;*4)</code></pre>\n<ul>\n<li><h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3></li>\n<li>注意List的切片和连接运算符返回的就是一个新的数组</li>\n</ul>\n<ul>\n<li>普遍用法</li>\n</ul>\n<pre><code class=\"python\">names = [&#39;John&#39;, &#39;Bob&#39;, &#39;Mosh&#39;, &#39;Sarah&#39;, &#39;Mary&#39;]\nprint(names[2:])  #Print will start from &#39;Mosh&#39;&#39;&#39;\nprint(names[:])  #Print all&#39;\nnames[0] = &#39;Joh&#39; #Change item\nprint(names)  #output\n# 2d list\nmatrix = [\n   [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nmatrix[0][-3] = 20\nprint(matrix)</code></pre>\n<ul>\n<li>编辑类</li>\n</ul>\n<pre><code class=\"python\">numbers = [5,2,1,7]\nnumbers.insert(-2,20)\nnumbers.remove(2)\nnumbers.append(45)\nnumbers.pop() #remove the last and return it\nprint(numbers.index(5))\nnumbers.sort()\nnumbers.reverse() #get deasc order\nif 5 in numbers:\n    print(numbers.index(5))\nnumbers2 = numbers.copy()\nnumbers.append(45)\nprint(numbers)\nprint(numbers2)\n\n#去重复\nnumbers = [5,20,1,5,7,5,6,4,5]\nuniques = []\nfor i in numbers:\n    if i not in uniques:\n        uniques.append(i)\nprint(uniques)</code></pre>\n<ul>\n<li><h3 id=\"Tuple\"><a href=\"#Tuple\" class=\"headerlink\" title=\"Tuple\"></a>Tuple</h3></li>\n<li>类似于List，但不可修改</li>\n</ul>\n<pre><code class=\"python\">numbers = (5,20,1,5,7,5,6,4,5)\nnumbers[0] = 1 #TypeError: &#39;tuple&#39; object does not support item assignment</code></pre>\n<ul>\n<li><h3 id=\"Unpacking\"><a href=\"#Unpacking\" class=\"headerlink\" title=\"Unpacking\"></a>Unpacking</h3></li>\n<li>映射数组成员</li>\n</ul>\n<pre><code class=\"python\">coordinates = (1,2,3)\na = coordinates[0]\nb = coordinates[1]\nc = coordinates[2]\n\n# use Unpacking feature, unpacking the tuple/list to three variable\nx, y, z = coordinates\nprint(f&quot;{a},{b},{c} &lt;=&gt; {x}, {y}, {z}&quot;)</code></pre>\n<ul>\n<li><h3 id=\"Dictionary\"><a href=\"#Dictionary\" class=\"headerlink\" title=\"Dictionary\"></a>Dictionary</h3></li>\n</ul>\n<pre><code class=\"python\">customer = {\n    &quot;name&quot;: &quot;John&quot;,\n    &quot;age&quot;: 30,\n    &quot;is_verified&quot;: True\n}\nprint(customer[&quot;name&quot;])\n# print(customer[&quot;Name&quot;]) #KeyError,don&#39;t contain\n# print(customer[&quot;birthdate&quot;])#KeyError,don&#39;t contain\nprint(customer.get(&quot;name&quot;))\nprint(customer.get(&quot;Name&quot;,&quot;Hey&quot;)) #Print,with default value:&#39;Hey&#39;\ncustomer[&quot;name&quot;] = &quot;AA&quot;\nprint(customer.get(&quot;name&quot;))\n\n#Exercise\ninput_str = str(input(&quot;Phone:&quot;))\ndigits_map = {\n    &quot;1&quot;:&quot;One&quot;,\n    &quot;2&quot;:&quot;Two&quot;,\n    &quot;3&quot;:&quot;Three&quot;,\n    &quot;4&quot;:&quot;Four&quot;,\n}\noutput = &#39;&#39;\nfor s in input_str:\n    output += digits_map.get(s,&quot;&quot;) + &quot; &quot;\n\nprint(output)</code></pre>\n<ul>\n<li><p>[mac]ctrl+cmd+space&gt;&gt; to show emojis</p>\n</li>\n<li><h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3></li>\n<li><p>注释：</p>\n</li>\n<li><p>三个引号的注释，意为文档注释，使用help函数时显示</p>\n</li>\n<li><p>无返回函数，默认返回为None</p>\n</li>\n<li><p>递归函数：</p>\n</li>\n<li><p>输出的小技巧：使用“ ” * 递归序号的形式生成缩进的日志，这样就有一个层级的输出结构了。</p>\n</li>\n<li><p>函数之中也可嵌套函数！</p>\n</li>\n<li><p>高阶函数：filter函数与map函数，reduce函数</p>\n</li>\n<li><p>map将第二个列表中的值放到第一个参数的函数中逐个执行。最后把结果映射成map出来</p>\n</li>\n<li><p>filter将把第二个列表中的值逐个放到第一个参数的函数中进行运算得出 True的放到一个结果里。</p>\n</li>\n<li><p>reduce函数是每一个参数是一个带双参的函数，第一个参为下一项，第二参为上一次的结果。</p>\n<pre><code class=\"python\">def is_no_zero(v):\n  if v != 0:\n      return True\n  return False\n</code></pre>\n</li>\n</ul>\n<p>oldlist = [5,0,3,5,0,8,6,4,0,3,9,1]</p>\n<p>newlist = list(filter(is_no_zero, oldlist))<br>newlist = list(map(str, oldlist))<br>print(newlist)</p>\n<p>import  functools<br>oldlist = [5,0,3,5,0,8,6,4,0,3,9,1]<br>result = functools.reduce(lambda x,y:x+y, oldlist)<br>print(result)</p>\n<pre><code>\n+ lambda做内联函数\n```python\n# lambda x,y:x+y</code></pre><ul>\n<li>使用pickle 读写对象</li>\n<li>文件读写类型如：<br>模式    描述<br>t    文本模式 (默认)。<br>x    写模式，新建一个文件，如果该文件已存在则会报错。<br>b    二进制模式。<br>+    打开一个文件进行更新(可读可写)。<br>U    通用换行模式（不推荐）。<br>r    以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。<br>rb    以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。<br>r+    打开一个文件用于读写。文件指针将会放在文件的开头。<br>rb+    以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。<br>w    打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。<br>wb    以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。<br>w+    打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。<br>wb+    以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。<br>a    打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。<br>ab    以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。<br>a+    打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。<br>ab+    以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</li>\n</ul>\n<pre><code class=\"python\">\nmylist = [5, 6, &quot;abc&quot;, 7]\nf = open(&quot;myfile.txt&quot;, &quot;w&quot;)\n\nfor n in mylist:\n    print(&quot;写入数据：&quot;, n)\n    pickle.dump(n, f)\n    # f.write(n)\nf.close()\n\nmylist = list()\nf = open(&quot;myfile.txt&quot;, &quot;r&quot;)\nwhile True:\n    try:\n        item = pickle.load(f)\n        # item = f.read()\n        mylist.append(item)\n    except EOFError:\n        f.close()\n        break\nprint(&quot;读出的结果：&quot;, mylist)\n</code></pre>\n<ul>\n<li><p>常用三种运算符说明</p>\n</li>\n<li><p>//运算符执行地板除法(向下取整除),它会返回整除结果的整数部分<br><code>print(7//2)</code></p>\n<blockquote>\n<p>#3<br>这里整除后会返回3.5</p>\n</blockquote>\n</li>\n<li><p>同样的，执行取幂运算，ab会返回a的b次方<br><code>print(2**10)</code></p>\n</li>\n</ul>\n<blockquote>\n<p>#1024</p>\n</blockquote>\n<ul>\n<li><p>最后，%执行取模运算，返回除法的余数</p>\n<pre><code class=\"python\">print(13%7)#6\nprint(3.5%1.5)#0.5</code></pre>\n</li>\n<li><h3 id=\"使用Profiler探测\"><a href=\"#使用Profiler探测\" class=\"headerlink\" title=\"使用Profiler探测\"></a>使用Profiler探测</h3></li>\n<li><p>安装Profiler库</p>\n</li>\n<li><p>度量算法性能。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Python-Note-1\"><a href=\"#Python-Note-1\" class=\"headerlink\" title=\"Python Note 1\"></a>Python Note 1</h1><ul>\n<li><p>逻辑运算符的使用：</p>\n</li>\n<li><p>and or not 会将几个值作为False ：0 None “” []</p>\n</li>\n<li><p>多变量赋值</p>\n<pre><code class=\"python\">minValue, maxValue = 10 , 20</code></pre>\n</li>\n<li><p>命名规范</p>\n</li>\n<li><p>变量名，函数名： 小驼峰或下划线小写的形式</p>\n</li>\n<li><p>常量：全大写</p>\n</li>\n<li><p>类名：大驼峰</p>\n</li>\n<li><p>代码换行：</p>\n</li>\n<li><p>当一行写不完时，使用 \\ 将代码延续</p>\n<pre><code class=\"python\">product  = max(100,200) \\\n                  *30</code></pre>\n</li>\n<li><p>输出：</p>\n</li>\n<li><p>以% 输出</p>\n</li>\n<li><p>字符宽度指定：”%3d” 右对齐数字， “%-3d”左对齐数字。换成s则为字符串。 </p>\n</li>\n<li><p>小数精度指定：%<field_width>.<precision>f  ，注意字符宽度将包含.</p>\n<pre><code class=\"python\">a = 10\nprint(&quot;%d&quot;%a)\nb = 100.025\nprint(&quot;%0.2f&quot;%b)\nprint(&quot;%-10.3f&quot;%b)</code></pre>\n</li>\n<li><p>自动转义的函数</p>\n</li>\n<li><p>“greater”.<strong>len</strong>() 等价于len(“greater”)</p>\n</li>\n<li><p>“a”+”b” 等价于”a”.<strong>add</strong>(“b”)</p>\n</li>\n<li><p>“e” in “great” 等价于 “great”.<strong>contains</strong>(“e”)</p>\n</li>\n</ul>\n<ul>\n<li><p>==获取对象可用函数列表==</p>\n</li>\n<li><p>dir(str) </p>\n</li>\n<li><p>==获取函数文档==</p>\n</li>\n<li><p>help(str.upper)</p>\n</li>\n<li><p>以独立程序加载的python文件</p>\n</li>\n<li><p>使用“main”标记为模块name的名字</p>\n<pre><code class=\"python\">if __name__ == &quot;__main__&quot;\n  main()</code></pre>\n</li>\n<li><h3 id=\"while结构\"><a href=\"#while结构\" class=\"headerlink\" title=\"while结构\"></a>while结构</h3><p>注： “””  多行string</p>\n</li>\n</ul>\n<pre><code class=\"python\">n = 0\nwhile n &lt; 5:\n    print(&quot;&quot;&quot;\nThis is test!\nThis is test2!\nThis is test3!\n    &quot;&quot;&quot;)\n    n = n + 1</code></pre>\n<ul>\n<li><h3 id=\"For结构\"><a href=\"#For结构\" class=\"headerlink\" title=\"For结构\"></a>For结构</h3><ul>\n<li>普通使用</li>\n</ul>\n<pre><code class=\"python\">for i in range(5):\n   print()</code></pre>\n<ul>\n<li>Use curly braces, 显示变量</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"python\"> for i in range(5):\n     print(f&quot;i:{i}&quot;)</code></pre>\n<ul>\n<li>使用重复*个数输出字符</li>\n</ul>\n<pre><code class=\"python\"> for i in range(5):\n     print(f&quot;i:{i}&quot;*4)</code></pre>\n<ul>\n<li><h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3></li>\n<li>注意List的切片和连接运算符返回的就是一个新的数组</li>\n</ul>\n<ul>\n<li>普遍用法</li>\n</ul>\n<pre><code class=\"python\">names = [&#39;John&#39;, &#39;Bob&#39;, &#39;Mosh&#39;, &#39;Sarah&#39;, &#39;Mary&#39;]\nprint(names[2:])  #Print will start from &#39;Mosh&#39;&#39;&#39;\nprint(names[:])  #Print all&#39;\nnames[0] = &#39;Joh&#39; #Change item\nprint(names)  #output\n# 2d list\nmatrix = [\n   [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nmatrix[0][-3] = 20\nprint(matrix)</code></pre>\n<ul>\n<li>编辑类</li>\n</ul>\n<pre><code class=\"python\">numbers = [5,2,1,7]\nnumbers.insert(-2,20)\nnumbers.remove(2)\nnumbers.append(45)\nnumbers.pop() #remove the last and return it\nprint(numbers.index(5))\nnumbers.sort()\nnumbers.reverse() #get deasc order\nif 5 in numbers:\n    print(numbers.index(5))\nnumbers2 = numbers.copy()\nnumbers.append(45)\nprint(numbers)\nprint(numbers2)\n\n#去重复\nnumbers = [5,20,1,5,7,5,6,4,5]\nuniques = []\nfor i in numbers:\n    if i not in uniques:\n        uniques.append(i)\nprint(uniques)</code></pre>\n<ul>\n<li><h3 id=\"Tuple\"><a href=\"#Tuple\" class=\"headerlink\" title=\"Tuple\"></a>Tuple</h3></li>\n<li>类似于List，但不可修改</li>\n</ul>\n<pre><code class=\"python\">numbers = (5,20,1,5,7,5,6,4,5)\nnumbers[0] = 1 #TypeError: &#39;tuple&#39; object does not support item assignment</code></pre>\n<ul>\n<li><h3 id=\"Unpacking\"><a href=\"#Unpacking\" class=\"headerlink\" title=\"Unpacking\"></a>Unpacking</h3></li>\n<li>映射数组成员</li>\n</ul>\n<pre><code class=\"python\">coordinates = (1,2,3)\na = coordinates[0]\nb = coordinates[1]\nc = coordinates[2]\n\n# use Unpacking feature, unpacking the tuple/list to three variable\nx, y, z = coordinates\nprint(f&quot;{a},{b},{c} &lt;=&gt; {x}, {y}, {z}&quot;)</code></pre>\n<ul>\n<li><h3 id=\"Dictionary\"><a href=\"#Dictionary\" class=\"headerlink\" title=\"Dictionary\"></a>Dictionary</h3></li>\n</ul>\n<pre><code class=\"python\">customer = {\n    &quot;name&quot;: &quot;John&quot;,\n    &quot;age&quot;: 30,\n    &quot;is_verified&quot;: True\n}\nprint(customer[&quot;name&quot;])\n# print(customer[&quot;Name&quot;]) #KeyError,don&#39;t contain\n# print(customer[&quot;birthdate&quot;])#KeyError,don&#39;t contain\nprint(customer.get(&quot;name&quot;))\nprint(customer.get(&quot;Name&quot;,&quot;Hey&quot;)) #Print,with default value:&#39;Hey&#39;\ncustomer[&quot;name&quot;] = &quot;AA&quot;\nprint(customer.get(&quot;name&quot;))\n\n#Exercise\ninput_str = str(input(&quot;Phone:&quot;))\ndigits_map = {\n    &quot;1&quot;:&quot;One&quot;,\n    &quot;2&quot;:&quot;Two&quot;,\n    &quot;3&quot;:&quot;Three&quot;,\n    &quot;4&quot;:&quot;Four&quot;,\n}\noutput = &#39;&#39;\nfor s in input_str:\n    output += digits_map.get(s,&quot;&quot;) + &quot; &quot;\n\nprint(output)</code></pre>\n<ul>\n<li><p>[mac]ctrl+cmd+space&gt;&gt; to show emojis</p>\n</li>\n<li><h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3></li>\n<li><p>注释：</p>\n</li>\n<li><p>三个引号的注释，意为文档注释，使用help函数时显示</p>\n</li>\n<li><p>无返回函数，默认返回为None</p>\n</li>\n<li><p>递归函数：</p>\n</li>\n<li><p>输出的小技巧：使用“ ” * 递归序号的形式生成缩进的日志，这样就有一个层级的输出结构了。</p>\n</li>\n<li><p>函数之中也可嵌套函数！</p>\n</li>\n<li><p>高阶函数：filter函数与map函数，reduce函数</p>\n</li>\n<li><p>map将第二个列表中的值放到第一个参数的函数中逐个执行。最后把结果映射成map出来</p>\n</li>\n<li><p>filter将把第二个列表中的值逐个放到第一个参数的函数中进行运算得出 True的放到一个结果里。</p>\n</li>\n<li><p>reduce函数是每一个参数是一个带双参的函数，第一个参为下一项，第二参为上一次的结果。</p>\n<pre><code class=\"python\">def is_no_zero(v):\n  if v != 0:\n      return True\n  return False\n</code></pre>\n</li>\n</ul>\n<p>oldlist = [5,0,3,5,0,8,6,4,0,3,9,1]</p>\n<p>newlist = list(filter(is_no_zero, oldlist))<br>newlist = list(map(str, oldlist))<br>print(newlist)</p>\n<p>import  functools<br>oldlist = [5,0,3,5,0,8,6,4,0,3,9,1]<br>result = functools.reduce(lambda x,y:x+y, oldlist)<br>print(result)</p>\n<pre><code>\n+ lambda做内联函数\n```python\n# lambda x,y:x+y</code></pre><ul>\n<li>使用pickle 读写对象</li>\n<li>文件读写类型如：<br>模式    描述<br>t    文本模式 (默认)。<br>x    写模式，新建一个文件，如果该文件已存在则会报错。<br>b    二进制模式。<br>+    打开一个文件进行更新(可读可写)。<br>U    通用换行模式（不推荐）。<br>r    以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。<br>rb    以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。<br>r+    打开一个文件用于读写。文件指针将会放在文件的开头。<br>rb+    以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。<br>w    打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。<br>wb    以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。<br>w+    打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。<br>wb+    以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。<br>a    打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。<br>ab    以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。<br>a+    打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。<br>ab+    以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</li>\n</ul>\n<pre><code class=\"python\">\nmylist = [5, 6, &quot;abc&quot;, 7]\nf = open(&quot;myfile.txt&quot;, &quot;w&quot;)\n\nfor n in mylist:\n    print(&quot;写入数据：&quot;, n)\n    pickle.dump(n, f)\n    # f.write(n)\nf.close()\n\nmylist = list()\nf = open(&quot;myfile.txt&quot;, &quot;r&quot;)\nwhile True:\n    try:\n        item = pickle.load(f)\n        # item = f.read()\n        mylist.append(item)\n    except EOFError:\n        f.close()\n        break\nprint(&quot;读出的结果：&quot;, mylist)\n</code></pre>\n<ul>\n<li><p>常用三种运算符说明</p>\n</li>\n<li><p>//运算符执行地板除法(向下取整除),它会返回整除结果的整数部分<br><code>print(7//2)</code></p>\n<blockquote>\n<p>#3<br>这里整除后会返回3.5</p>\n</blockquote>\n</li>\n<li><p>同样的，执行取幂运算，ab会返回a的b次方<br><code>print(2**10)</code></p>\n</li>\n</ul>\n<blockquote>\n<p>#1024</p>\n</blockquote>\n<ul>\n<li><p>最后，%执行取模运算，返回除法的余数</p>\n<pre><code class=\"python\">print(13%7)#6\nprint(3.5%1.5)#0.5</code></pre>\n</li>\n<li><h3 id=\"使用Profiler探测\"><a href=\"#使用Profiler探测\" class=\"headerlink\" title=\"使用Profiler探测\"></a>使用Profiler探测</h3></li>\n<li><p>安装Profiler库</p>\n</li>\n<li><p>度量算法性能。</p>\n</li>\n</ul>\n"},{"title":"Twisted  介绍","_content":"\n## Twisted\n\n\n### Python Twisted介绍\nTwisted是用Python实现的基于事件驱动的网络引擎框架。Twisted诞生于2000年初，在当时的网络游戏开发者看来，无论他们使用哪种语言，手中都鲜有可兼顾扩展性及跨平台的网络库。Twisted的作者试图在当时现有的环境下开发游戏，这一步走的非常艰难，他们迫切地需要一个可扩展性高、基于事件驱动、跨平台的网络开发框架，为此他们决定自己实现一个，并从那些之前的游戏和网络应用程序的开发者中学习，汲取他们的经验教训。\n\nTwisted支持许多常见的传输及应用层协议，包括TCP、UDP、SSL/TLS、HTTP、IMAP、SSH、IRC以及FTP。就像python一样，Twisted也具有“内置电池”（batteries-included）的特点。Twisted对于其支持的所有协议都带有客户端和服务器实现，同时附带有基于命令行的工具，使得配置和部署产品级的Twisted应用变得非常方便。\n\n### 为什么需要Twisted\n2000年时，Twisted的作者Glyph正在开发一个名为Twisted Reality的基于文本方式的多人在线游戏。这个游戏采用Java开发，里面尽是一堆线程——每个连接就有3个线程处理。处理输入的线程会在读操作上阻塞，处理输出的线程将在一些写操作上阻塞，还有一个“逻辑”线程将在等待定时器超时或者事件入队列时休眠。随着玩家们在虚拟世界中移动并交互时，线程出现死锁，缓存被污染，程序中的加锁逻辑几乎从来就没对过——采用多线程使得整个软件变得复杂、漏洞百出而且极难扩展。\n\n为了寻求其他的解决方案，作者发现了Python，特别是Python中用于对流式对象比如socket和pipe进行多路I/O复用的select模块（UNIX规范第3版（SUSv3）描述了select）。那时，Java并没有提供操作系统的select接口或者任何其他的异步I/O API（针对非阻塞式I/O的包java.nio已经在J2SE 1.4中加入了，2002年发布）。通过用Python中的select模块快速搭建起游戏的原型，这迅速降低了程序的复杂度，并且比多线程版本要更加可靠。\n\nGlyph迅速转向了Python、select以及基于事件驱动的编程。他使用Python的select模块为游戏编写了客户端和服务器。但他想要的还不止于此。从根本上说，他希望能将网络行为转变为对游戏中的对象的方法调用。如果你能在游戏中收取邮件会怎样，就像Nethack mailer这种守护进程一样？如果游戏中的每位玩家都拥有一个主页呢？Glyph发现他需要优秀的IMAP以及HTTP客户端和服务器的Python实现，而这些都要采用select。\n\n他首先转向了Medusa，这是一个在90年代中期开发的平台，在这里可以采用Python中的asyncore模块来编写网络服务。asyncore是一个异步化处理socket的模块，在操作系统的select API之上构建了一个调度器和回调接口。\n\n这对于Glyph来说是个激动人心的发现，但Medusa有两个缺点：\n1. 这个项目到2001年就不再维护了，那正是glyph开发Twisted Reality的时候。\n2. asyncore只是对socket的一个薄封装层，应用程序的编写者仍然需要直接操作socket。这意味着程序可移植性的担子仍然落在程序员自己身上。此外，那时asyncore对Windows的支持还有问题，Glyph希望能在Windows上运行一个带有图形用户界面的客户端。\nGlyph需要自己实现一个网络引擎平台，而且他意识到Twisted Reality已经打开了问题的大门，这和他的游戏一样有趣。\n\n随着时间的推移，Twisted Reality这个游戏就演化成了Twisted网络引擎平台。它可以做到当时Python中已有的网络平台所无法做到的事情：\n+ 使用基于事件驱动的编程模型，而不是多线程模型。\n+ 跨平台：为主流操作系统平台暴露出的事件通知系统提供统一的接口。\n+ “内置电池”的能力：提供流行的应用层协议实现，因此Twisted马上就可为开发人员所用。\n+ 符合RFC规范，已经通过健壮的测试套件证明了其一致性。\n+ 能很容易的配合多个网络协议一起使用。\n+ 可扩展。\n\n### Twisted架构概览\nTwisted是一个事件驱动型的网络引擎。由于事件驱动编程模型在Twisted的设计哲学中占有重要的地位，因此这里有必要花点时间来回顾一下究竟事件驱动意味着什么。\n\n事件驱动编程是一种编程范式，这里程序的执行流由外部事件来决定。它的特点是包含一个事件循环，当外部事件发生时使用回调机制来触发相应的处理。另外两种常见的编程范式是（单线程）同步以及多线程编程。\n\n在单线程同步模型中，任务按照顺序执行。如果某个任务因为I/O而阻塞，其他所有的任务都必须等待，直到它完成之后它们才能依次执行。这种明确的执行顺序和串行化处理的行为是很容易推断得出的。如果任务之间并没有互相依赖的关系，但仍然需要互相等待的话这就使得程序不必要的降低了运行速度。\n\n在多线程版本中，这3个任务分别在独立的线程中执行。这些线程由操作系统来管理，在多处理器系统上可以并行处理，或者在单处理器系统上交错执行。这使得当某个线程阻塞在某个资源的同时其他线程得以继续执行。与完成类似功能的同步程序相比，这种方式更有效率，但程序员必须写代码来保护共享资源，防止其被多个线程同时访问。多线程程序更加难以推断，因为这类程序不得不通过线程同步机制如锁、可重入函数、线程局部存储或者其他机制来处理线程安全问题，如果实现不当就会导致出现微妙且令人痛不欲生的bug。\n\n在事件驱动版本的程序中，3个任务**交错执行**，但仍然在一个单独的线程控制中。当处理I/O或者其他昂贵的操作时，注册一个回调到事件循环中，然后当I/O操作完成时继续执行。回调描述了该如何处理某个事件。事件循环轮询所有的事件，当事件到来时将它们分配给等待处理事件的回调函数。这种方式让程序尽可能的得以执行而不需要用到额外的线程。事件驱动型程序比多线程程序更容易推断出行为，因为程序员不需要关心线程安全问题。\n\n当我们面对如下的环境时，事件驱动模型通常是一个好的选择：\n\n程序中有许多任务，而且…\n1. 任务之间高度独立（因此它们不需要互相通信，或者等待彼此）而且…\n2. 在等待事件到来时，某些任务会阻塞。\n3. 当应用程序需要在任务间共享可变的数据时，这也是一个不错的选择，因为这里不需要采用同步处理。\n\n网络应用程序通常都有上述这些特点，这使得它们能够很好的契合事件驱动编程模型。\n\n###### **重用已有的应用**\n在Twisted创建之前就已经有了许多针对多种流行的网络协议的客户端和服务器实现了。为什么Glyph不直接用Apache、IRCd、BIND、OpenSSH或者任何其他已有的应用，而要为Twisted从头开始重新实现各个协议的客户端和服务器呢？\n\n问题在于所有这些已有的实现都存在有从头写起的网络层代码，通常都是C代码。而应用层代码直接同网络层耦合在一起，这使得它们非常难以以库的形式来复用。当要一起使用这些组件时，如果希望在多个协议中暴露相同的数据，则它们必须以黑盒的形式来看待，这使得开发者根本没机会重用代码。此外，服务器和客户端的实现通常是分离的，彼此之间不共享代码。要扩展这些应用，维护跨平台的客户端-服务器兼容性的难度本不至于这么大。\n\nTwisted中的客户端和服务器是用Python开发的，采用了一致性的接口。这使得开发新的客户端和服务器变得很容易实现，可以在客户端和服务器之间共享代码，在协议之间共享应用逻辑，以及对某个实现的代码做测试。\n\n###### **React模式**\nTwisted实现了设计模式中的反应堆（reactor）模式，这种模式在单线程环境中调度多个事件源产生的事件到它们各自的事件处理例程中去。\n\nTwisted的核心就是reactor事件循环。Reactor可以感知网络、文件系统以及定时器事件。它等待然后处理这些事件，从特定于平台的行为中抽象出来，并提供统一的接口，使得在网络协议栈的任何位置对事件做出响应都变得简单。\n\n基本上reactor完成的任务就是：\n\n```python\nwhile True:\n    timeout = time_until_next_timed_event()\n    events = wait_for_events(timeout)\n    events += timed_events_until(now())\n    for event in events:\n        event.process()\n```\n\nTwisted目前在所有平台上的默认reactor都是基于poll API的（UNIX规范第3版（SUSv3）中描述）。此外，Twisted还支持一些特定于平台的高容量多路复用API。这些reactor包括基于FreeBSD中kqueue机制的KQueue reactor，支持epoll接口的系统（目前是Linux 2.6）中的epoll reactor，以及基于Windows下的输入输出完成端口的IOCP reactor。\n\n在实现轮询的相关细节中，Twisted需要考虑的包括：\n\n+ 网络和文件系统的限制\n+ 缓冲行为\n+ 如何检测连接丢失\n+ 出现错误时的返回值\n\nTwisted的reactor实现同时也考虑了正确使用底层的非阻塞式API，并正确处理各种边界情况。由于Python中没有暴露出IOCP API，因此Twisted需要维护自己的实现。\n\n###### **管理回调链**\n\n回调是事件驱动编程模型中的基础，也是reactor通知应用程序事件已经处理完成的方式。随着程序规模不断扩大，基于事件驱动的程序需要同时处理事件处理成功和出错的情况，这使得程序变得越来越复杂。若没有注册一个合适的回调，程序就会阻塞，因为这个事件处理的过程绝不会发生。出现错误时需要通过应用程序的不同层次从网络栈向上传递回调链。\n\n下面是两段Python伪码，分别是同步和异步模式下获取URL的玩具代码。让我们相互比较一下这两个版本，看看基于事件驱动的程序有什么缺陷：\n\n以同步的方式获取URL：\n\n```python\nimport getPage\n\ndef processPage(page):\n    print page\n\ndef logError(error):\n    print error\n\ndef finishProcessing(value):\n    print \"Shutting down...\"\n    exit(0)\n\nurl = \"http://google.com\"\ntry:\n    page = getPage(url)\n    processPage(page)\nexcept Error, e:\n    logError(error)\nfinally:\n    finishProcessing()\n```\n以异步的方式获取URL：\n\n```python\nfrom twisted.internet import reactor\nimport getPage\n\ndef processPage(page):\n    print page\n    finishProcessing()\n\ndef logError(error):\n    print error\n    finishProcessing()\n\ndef finishProcessing(value):\n    print \"Shutting down...\"\n    reactor.stop()\n\nurl = \"http://google.com\"\n# getPage takes: url, \n# success callback, error callback\ngetPage(url, processPage, logError)\n\nreactor.run()\n```\n\n在异步版的URL获取器中，reactor.run()启动reactor事件循环。在同步和异步版程序中，我们假定getPage函数处理获取页面的工作。如果获取成功就调用processPage，如果尝试获取页面时出现了Exception（异常），logError就得到调用。无论哪种情况，最后都要调用finishProcessing。\n\n异步版中的logError回调正对应于同步版中的try/except块。对processPage的回调对应于else块，无条件回调的finishProcessing就对应于finally块。\n\n在同步版中，代码结构直接显示出有一个try/except块，logError和processPage这两者间只会取其一调用一次，而finishProcessing总是会被调用一次。在异步版中需要由程序员自己负责正确调用成功和失败情况下的回调链。如果由于编程错误，在processPage或者logError的回调链之后没有调用finishProcessing，reactor事件循环将永远不会停止，程序就会卡住。\n\n这个玩具式的例子告诉我们在开发Twisted的头几年里这种复杂性令程序员感到非常沮丧。而Twisted应对这种复杂性的方式是新增一个称为Deferred（延迟）的对象。\n\n###### Deferreds\nDeferred对象以抽象化的方式表达了一种思想，即结果还尚不存在。它同样能够帮助管理产生这个结果所需要的回调链。当从函数中返回时，Deferred对象承诺在某个时刻函数将产生一个结果。返回的Deferred对象中包含所有注册到事件上的回调引用，因此在函数间只需要传递这一个对象即可，跟踪这个对象比单独管理所有的回调要简单的多。\n\nDeferred对象包含一对回调链，一个是针对操作成功的回调，一个是针对操作失败的回调。初始状态下Deferred对象的两条链都为空。在事件处理的过程中，每个阶段都为其添加处理成功的回调和处理失败的回调。当一个异步结果到来时，Deferred对象就被“激活”，那么处理成功的回调和处理失败的回调就可以以合适的方式按照它们添加进来的顺序依次得到调用。\n\n异步版URL获取器采用Deferred对象后的代码如下：\n\n```python\nfrom twisted.internet import reactor\nimport getPage\n\ndef processPage(page):\n    print page\n\ndef logError(error):\n    print error\n\ndef finishProcessing(value):\n    print \"Shutting down...\"\n    reactor.stop()\n\nurl = \"http://google.com\"\ndeferred = getPage(url) # getPage returns a Deferred\ndeferred.addCallbacks(success, failure)\ndeferred.addBoth(stop)\n\nreactor.run()\n```\n\n在这个版本中调用的事件处理函数与之前相同，但它们都注册到了一个单独的Deferred对象上，而不是分散在代码各处再以参数形式传递给getPage。\n\nDeferred对象创建时包含两个添加回调的阶段。第一阶段，addCallbacks将 processPage和logError添加到它们各自归属的回调链中。然后addBoth再将finishProcessing同时添加到这两个回调链上。用图解的方式来看，回调链应该如图所示：\n![Deferred 流程示例](/img/1570783134086.png)\n\nDeferred对象只能被激活一次，如果试图重复激活将引发一个异常。这使得Deferred对象的语义相当接近于同步版中的try/except块。从而让异步事件的处理能更容易推断，避免由于针对单个事件的回调调用多了一个或少了一个而产生微妙的bug。\n\n理解Deferred对象对于理解Twisted程序的执行流是非常重要的。然而当使用Twisted为我们提供的针对网络协议的高层抽象时，通常情况下我们完全不需要直接使用Deferred对象。\n\nDeferred对象所包含的抽象概念是非常强大的，这种思想已经被许多其他的事件驱动平台所借用，包括jQuery、Dojo和Mochikit。\n\n\n###### Transports\nTransports代表网络中两个通信结点之间的连接。Transports负责描述连接的细节，比如连接是面向流式的还是面向数据报的，流控以及可靠性。TCP、UDP和Unix套接字可作为transports的例子。它们被设计为“满足最小功能单元，同时具有最大程度的可复用性”，而且从协议实现中分离出来，这让许多协议可以采用相同类型的传输。Transports实现了ITransports接口，它包含如下的方法：\n\n>write                   以非阻塞的方式按顺序依次将数据写到物理连接上\nwriteSequence           将一个字符串列表写到物理连接上\nloseConnection          将所有挂起的数据写入，然后关闭连接\ngetPeer                 取得连接中对端的地址信息\ngetHost                 取得连接中本端的地址信息\n\n将transports从协议中分离出来也使得对这两个层次的测试变得更加简单。可以通过简单地写入一个字符串来模拟传输，用这种方式来检查。\n\n###### Protocols\n\nProtocols描述了如何以异步的方式处理网络中的事件。HTTP、DNS以及IMAP是应用层协议中的例子。Protocols实现了IProtocol接口，它包含如下的方法：\n>makeConnection               在transport对象和服务器之间建立一条连接\nconnectionMade               连接建立起来后调用\ndataReceived                 接收数据时调用\nconnectionLost               关闭连接时调用\n\n我们最好以一个例子来说明reactor、protocols以及transports这三者之间的关系。以下是完整的echo服务器和客户端的实现，首先来看看服务器部分：\n\n```python\nfrom twisted.internet import protocol, reactor\n\nclass Echo(protocol.Protocol):\n    def dataReceived(self, data):\n        # As soon as any data is received, write it back\n        self.transport.write(data)\n\nclass EchoFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return Echo()\n\nreactor.listenTCP(8000, EchoFactory())\nreactor.run()\n```\n接着是客户端部分：\n\n```python\nfrom twisted.internet import reactor, protocol\n\nclass EchoClient(protocol.Protocol):\n    def connectionMade(self):\n        self.transport.write(\"hello, world!\")\n\ndef dataReceived(self, data):\n    print \"Server said:\", data\n        self.transport.loseConnection()\n\ndef connectionLost(self, reason):\n    print \"connection lost\"\n\nclass EchoFactory(protocol.ClientFactory):\n    def buildProtocol(self, addr):\n        return EchoClient()\n\ndef clientConnectionFailed(self, connector, reason):\n    print \"Connection failed - goodbye!\"\n        reactor.stop()\n\ndef clientConnectionLost(self, connector, reason):\n    print \"Connection lost - goodbye!\"\n        reactor.stop()\n\nreactor.connectTCP(\"localhost\", 8000, EchoFactory())\nreactor.run()\n```\n运行服务器端脚本将启动一个TCP服务器，监听端口8000上的连接。服务器采用的是Echo协议，数据经TCP transport对象写出。运行客户端脚本将对服务器发起一个TCP连接，回显服务器端的回应然后终止连接并停止reactor事件循环。这里的Factory用来对连接的双方生成protocol对象实例。两端的通信是异步的，connectTCP负责注册回调函数到reactor事件循环中，当socket上有数据可读时通知回调处理。\n\n###### Applications\nTwisted是用来创建具有可扩展性、跨平台的网络服务器和客户端的引擎。在生产环境中，以标准化的方式简化部署这些应用的过程对于Twisted这种被广泛采用的平台来说是非常重要的一环。为此，Twisted开发了一套应用程序基础组件，采用可重用、可配置的方式来部署Twisted应用。这种方式使程序员避免堆砌千篇一律的代码来将应用程序同已有的工具整合在一起，这包括精灵化进程（daemonization）、日志处理、使用自定义的reactor循环、对代码做性能剖析等。\n\n应用程序基础组件包含4个主要部分：服务（Service）、应用（Application）、配置管理（通过TAC文件和插件）以及twistd命令行程序。为了说明这个基础组件，我们将上一节的Echo服务器转变成一个应用。\n\n+ **Service**\nService就是IService接口下实现的可以启动和停止的组件。Twisted自带有TCP、FTP、HTTP、SSH、DNS等服务以及其他协议的实现。其中许多Service都可以注册到单独的应用中。IService接口的核心是：\n>startService    启动服务。可能包含加载配置数据，设定数据库连接或者监听某个端口\nstopService     关闭服务。可能包含将状态保存到磁盘，关闭数据库连接或者停止监听端口\n\n我们的Echo服务使用TCP协议，因此我们可以使用Twisted中IService接口下默认的TCPServer实现。\n\n+ **Application**\nApplication是处于最顶层的Service，代表了整个Twisted应用程序。Service需要将其自身同Application注册，然后就可以用下面我们将介绍的部署工具twistd搜索并运行应用程序。我们将创建一个可以同Echo Service注册的Echo应用。\n+ **TAC文件**\n当在一个普通的Python文件中管理Twisted应用程序时，需要由开发者负责编写启动和停止reactor事件循环以及配置应用程序的代码。在Twisted的基础组件中，协议的实现都是在一个模块中完成的，需要使用到这些协议的Service可以注册到一个Twisted应用程序配置文件中（TAC文件）去，这样reactor事件循环和程序配置就可以由外部组件来进行管理。\n\n要将我们的Echo服务器转变成一个Echo应用，我们可以按照以下几个简单的步骤来完成：\n\n1. 将Echo服务器的Protocol部分移到它们自己所归属的模块中去。\n\n2. 在TAC文件中：\n\n\t1. 创建一个Echo应用。\n\t2. 创建一个TCPServer的Service实例，它将使用我们的EchoFactory，然后同前面创建的应用完成注册。\n\t\n管理reactor事件循环的代码将由twistd来负责，我们下面会对此进行讨论。这样，应用程序的代码就变成这样了：\necho.py文件：\n\n```python\nfrom twisted.internet import protocol, reactor\n\nclass Echo(protocol.Protocol):\n    def dataReceived(self, data):\n        self.transport.write(data)\n\nclass EchoFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return Echo()\n```\n\n+ **twistd**\ntwistd（读作“twist-dee”）是一个跨平台的用来部署Twisted应用程序的工具。它执行TAC文件并负责处理启动和停止应用程序。作为Twisted在网络编程中具有“内置电池”能力的一部分，twistd自带有一些非常有用的配置标志，包括将应用程序转变为守护进程、定义日志文件的路径、设定特权级别、在chroot下运行、使用非默认的reactor，甚至是在profiler下运行应用程序。\n\n我们可以像这样运行这个Echo服务应用：\n\n```python\n$ twistd –y echo_server.tac\n```\n\n在这个简单的例子里，twistd将这个应用程序作为守护进程来启动，日志记录在twistd.log文件中。启动和停止应用后，日志文件内容如下：\n\n```python\n2011-11-19 22:23:07-0500 [-] Log opened.\n2011-11-19 22:23:07-0500 [-] twistd 11.0.0 (/usr/bin/python 2.7.1) starting up.\n2011-11-19 22:23:07-0500 [-] reactor class: twisted.internet.selectreactor.SelectReactor.\n2011-11-19 22:23:07-0500 [-] echo.EchoFactory starting on 8000\n2011-11-19 22:23:07-0500 [-] Starting factory <echo.EchoFactory instance at 0x12d8670>\n2011-11-19 22:23:20-0500 [-] Received SIGTERM, shutting down.\n2011-11-19 22:23:20-0500 [-] (TCP Port 8000 Closed)\n2011-11-19 22:23:20-0500 [-] Stopping factory <echo.EchoFactory instance at 0x12d8670>\n2011-11-19 22:23:20-0500 [-] Main loop terminated.\n2011-11-19 22:23:20-0500 [-] Server Shut Down.\n```\n\n通过使用Twisted框架中的基础组件来运行服务，这么做使得开发人员能够不用再编写类似守护进程和记录日志这样的冗余代码了。这同样也为部署应用程序建立了一个标准的命令行接口。\n\n###### Plugins\n\n对于运行Twisted应用程序的方法，除了基于TAC文件外还有一种可选的方法，这就是插件系统。TAC系统可以很方便的将Twisted预定义的服务同应用程序配置文件注册，而插件系统能够方便的将用户自定义的服务注册为twistd工具的子命令，然后扩展应用程序的命令行接口。\n\n在使用插件系统时：\n\n1. 由于只有plugin API需要保持稳定，这使得第三方开发者能很容易地扩展软件。\n\n2. 插件发现能力已经集成到系统中了。插件可以在程序首次运行时加载并保存，每次程序启动时会重新触发插件发现过程，或者也可以在程序运行期间反复轮询新插件，这使得在程序已经启动后我们还可以判断是否有新的插件安装上了。\n\n当使用Twisted插件系统来扩展软件时，我们要做的就是创建IPlugin接口下实现的对象并将它们放到一个特定的位置中，这里插件系统知道该如何去找到它们。\n\n我们已经将Echo服务转换为一个Twisted应用程序了，而将其转换为一个Twisted插件也是非常简单直接的。在我们之前的Echo模块中，除了包含有Echo协议和EchoFactory的定义之外，现在我们还要添加一个名为twistd的目录，其中还包含着一个名为plugins的子目录，这里正是我们需要定义echo插件的地方。通过这个插件，我们可以启动一个echo服务，并将需要使用的端口号作为参数指定给twistd工具。\n\n```python\nfrom zope.interface import implements\n\nfrom twisted.python import usage\nfrom twisted.plugin import IPlugin\nfrom twisted.application.service import IServiceMaker\nfrom twisted.application import internet\n\nfrom echo import EchoFactory\n\nclass Options(usage.Options):\n    optParameters = [[\"port\", \"p\", 8000, \"The port number to listen on.\"]]\n\nclass EchoServiceMaker(object):\n    implements(IServiceMaker, IPlugin)\n    tapname = \"echo\"\n    description = \"A TCP-based echo server.\"\n    options = Options\n\ndef makeService(self, options):\n    \"\"\"\n    Construct a TCPServer from a factory defined in myproject.\n    \"\"\"\n    return internet.TCPServer(int(options[\"port\"]), EchoFactory())\n\nserviceMaker = EchoServiceMaker()\n```\n\n现在，我们的Echo服务器将作为一个服务选项出现在twistd –help的输出中。运行twistd echo –port=1235将在端口1235上启动一个Echo服务器。\n\nTwisted还带有一个可拔插的针对服务器端认证的模块twisted.cred，插件系统常见的用途就是为应用程序添加一个认证模式。我们可以使用twisted.cred中现成的AuthOptionMixin类来添加针对各种认证的命令行支持，或者是添加新的认证类型。比如，我们可以使用插件系统来添加基于本地Unix密码数据库或者是基于LDAP服务器的认证方式。\n\ntwistd工具中附带有许多Twisted所支持的协议插件，只用一条单独的命令就可以完成启动服务器的工作了。这里有一些通过twistd启动服务器的例子：\n\n```python\ntwistd web –port 8080 –path .\n```\n\n这条命令将在8080端口启动一个HTTP服务器，在当前目录中负责处理静态和动态页面请求。\n\n```python\ntwistd dns –p 5553 –hosts-file=hosts\n```\n\n\n这条命令在端口5553上启动一个DNS服务器，解析指定的文件hosts中的域名，这个文件的内容格式同/etc/hosts一样。\n\n```python\nsudo twistd conch –p tcp:2222\n```\n\n这条命令在端口2222上启动一个SSH服务器。ssh的密钥必须独立设定。\n\n```python\ntwistd mail –E –H localhost –d localhost=emails\n```\n\n这条命令启动一个ESMTP POP3服务器，为本地主机接收邮件并保存到指定的emails目录下。\n\n我们可以方便的通过twistd来搭建一个用于测试客户端功能的服务器，但它同样是可装载的、产品级的服务器实现。\n\n在部署应用程序的方式上，Twisted通过TAC文件、插件以及命令行工具twistd的部署方式已经获得了成功。但是有趣的是，对于大多数大型Twisted应用程序来说，部署它们仍然需要重写一些这类管理和监控组件；Twisted的架构并没有对系统管理员的需求呈现出太多的友好性。这也反映了一个事实，那就是对于系统管理员来说Twisted历来就没有太多架构可言，而这些系统管理员才是部署和维护应用程序的专家。在这方面，Twisted在未来架构设计的决策上需要更积极的征求这类专家级用户的反馈意见。\n\n[本文内容引用自此处](https://www.cnblogs.com/xianguang/p/7027661.html)","source":"_posts/Twisted  介绍.md","raw":"---\ntitle: Twisted  介绍\ncategories:\n- Python\ntags: \n- Python\n- Core Programming\n- Note\n---\n\n## Twisted\n\n\n### Python Twisted介绍\nTwisted是用Python实现的基于事件驱动的网络引擎框架。Twisted诞生于2000年初，在当时的网络游戏开发者看来，无论他们使用哪种语言，手中都鲜有可兼顾扩展性及跨平台的网络库。Twisted的作者试图在当时现有的环境下开发游戏，这一步走的非常艰难，他们迫切地需要一个可扩展性高、基于事件驱动、跨平台的网络开发框架，为此他们决定自己实现一个，并从那些之前的游戏和网络应用程序的开发者中学习，汲取他们的经验教训。\n\nTwisted支持许多常见的传输及应用层协议，包括TCP、UDP、SSL/TLS、HTTP、IMAP、SSH、IRC以及FTP。就像python一样，Twisted也具有“内置电池”（batteries-included）的特点。Twisted对于其支持的所有协议都带有客户端和服务器实现，同时附带有基于命令行的工具，使得配置和部署产品级的Twisted应用变得非常方便。\n\n### 为什么需要Twisted\n2000年时，Twisted的作者Glyph正在开发一个名为Twisted Reality的基于文本方式的多人在线游戏。这个游戏采用Java开发，里面尽是一堆线程——每个连接就有3个线程处理。处理输入的线程会在读操作上阻塞，处理输出的线程将在一些写操作上阻塞，还有一个“逻辑”线程将在等待定时器超时或者事件入队列时休眠。随着玩家们在虚拟世界中移动并交互时，线程出现死锁，缓存被污染，程序中的加锁逻辑几乎从来就没对过——采用多线程使得整个软件变得复杂、漏洞百出而且极难扩展。\n\n为了寻求其他的解决方案，作者发现了Python，特别是Python中用于对流式对象比如socket和pipe进行多路I/O复用的select模块（UNIX规范第3版（SUSv3）描述了select）。那时，Java并没有提供操作系统的select接口或者任何其他的异步I/O API（针对非阻塞式I/O的包java.nio已经在J2SE 1.4中加入了，2002年发布）。通过用Python中的select模块快速搭建起游戏的原型，这迅速降低了程序的复杂度，并且比多线程版本要更加可靠。\n\nGlyph迅速转向了Python、select以及基于事件驱动的编程。他使用Python的select模块为游戏编写了客户端和服务器。但他想要的还不止于此。从根本上说，他希望能将网络行为转变为对游戏中的对象的方法调用。如果你能在游戏中收取邮件会怎样，就像Nethack mailer这种守护进程一样？如果游戏中的每位玩家都拥有一个主页呢？Glyph发现他需要优秀的IMAP以及HTTP客户端和服务器的Python实现，而这些都要采用select。\n\n他首先转向了Medusa，这是一个在90年代中期开发的平台，在这里可以采用Python中的asyncore模块来编写网络服务。asyncore是一个异步化处理socket的模块，在操作系统的select API之上构建了一个调度器和回调接口。\n\n这对于Glyph来说是个激动人心的发现，但Medusa有两个缺点：\n1. 这个项目到2001年就不再维护了，那正是glyph开发Twisted Reality的时候。\n2. asyncore只是对socket的一个薄封装层，应用程序的编写者仍然需要直接操作socket。这意味着程序可移植性的担子仍然落在程序员自己身上。此外，那时asyncore对Windows的支持还有问题，Glyph希望能在Windows上运行一个带有图形用户界面的客户端。\nGlyph需要自己实现一个网络引擎平台，而且他意识到Twisted Reality已经打开了问题的大门，这和他的游戏一样有趣。\n\n随着时间的推移，Twisted Reality这个游戏就演化成了Twisted网络引擎平台。它可以做到当时Python中已有的网络平台所无法做到的事情：\n+ 使用基于事件驱动的编程模型，而不是多线程模型。\n+ 跨平台：为主流操作系统平台暴露出的事件通知系统提供统一的接口。\n+ “内置电池”的能力：提供流行的应用层协议实现，因此Twisted马上就可为开发人员所用。\n+ 符合RFC规范，已经通过健壮的测试套件证明了其一致性。\n+ 能很容易的配合多个网络协议一起使用。\n+ 可扩展。\n\n### Twisted架构概览\nTwisted是一个事件驱动型的网络引擎。由于事件驱动编程模型在Twisted的设计哲学中占有重要的地位，因此这里有必要花点时间来回顾一下究竟事件驱动意味着什么。\n\n事件驱动编程是一种编程范式，这里程序的执行流由外部事件来决定。它的特点是包含一个事件循环，当外部事件发生时使用回调机制来触发相应的处理。另外两种常见的编程范式是（单线程）同步以及多线程编程。\n\n在单线程同步模型中，任务按照顺序执行。如果某个任务因为I/O而阻塞，其他所有的任务都必须等待，直到它完成之后它们才能依次执行。这种明确的执行顺序和串行化处理的行为是很容易推断得出的。如果任务之间并没有互相依赖的关系，但仍然需要互相等待的话这就使得程序不必要的降低了运行速度。\n\n在多线程版本中，这3个任务分别在独立的线程中执行。这些线程由操作系统来管理，在多处理器系统上可以并行处理，或者在单处理器系统上交错执行。这使得当某个线程阻塞在某个资源的同时其他线程得以继续执行。与完成类似功能的同步程序相比，这种方式更有效率，但程序员必须写代码来保护共享资源，防止其被多个线程同时访问。多线程程序更加难以推断，因为这类程序不得不通过线程同步机制如锁、可重入函数、线程局部存储或者其他机制来处理线程安全问题，如果实现不当就会导致出现微妙且令人痛不欲生的bug。\n\n在事件驱动版本的程序中，3个任务**交错执行**，但仍然在一个单独的线程控制中。当处理I/O或者其他昂贵的操作时，注册一个回调到事件循环中，然后当I/O操作完成时继续执行。回调描述了该如何处理某个事件。事件循环轮询所有的事件，当事件到来时将它们分配给等待处理事件的回调函数。这种方式让程序尽可能的得以执行而不需要用到额外的线程。事件驱动型程序比多线程程序更容易推断出行为，因为程序员不需要关心线程安全问题。\n\n当我们面对如下的环境时，事件驱动模型通常是一个好的选择：\n\n程序中有许多任务，而且…\n1. 任务之间高度独立（因此它们不需要互相通信，或者等待彼此）而且…\n2. 在等待事件到来时，某些任务会阻塞。\n3. 当应用程序需要在任务间共享可变的数据时，这也是一个不错的选择，因为这里不需要采用同步处理。\n\n网络应用程序通常都有上述这些特点，这使得它们能够很好的契合事件驱动编程模型。\n\n###### **重用已有的应用**\n在Twisted创建之前就已经有了许多针对多种流行的网络协议的客户端和服务器实现了。为什么Glyph不直接用Apache、IRCd、BIND、OpenSSH或者任何其他已有的应用，而要为Twisted从头开始重新实现各个协议的客户端和服务器呢？\n\n问题在于所有这些已有的实现都存在有从头写起的网络层代码，通常都是C代码。而应用层代码直接同网络层耦合在一起，这使得它们非常难以以库的形式来复用。当要一起使用这些组件时，如果希望在多个协议中暴露相同的数据，则它们必须以黑盒的形式来看待，这使得开发者根本没机会重用代码。此外，服务器和客户端的实现通常是分离的，彼此之间不共享代码。要扩展这些应用，维护跨平台的客户端-服务器兼容性的难度本不至于这么大。\n\nTwisted中的客户端和服务器是用Python开发的，采用了一致性的接口。这使得开发新的客户端和服务器变得很容易实现，可以在客户端和服务器之间共享代码，在协议之间共享应用逻辑，以及对某个实现的代码做测试。\n\n###### **React模式**\nTwisted实现了设计模式中的反应堆（reactor）模式，这种模式在单线程环境中调度多个事件源产生的事件到它们各自的事件处理例程中去。\n\nTwisted的核心就是reactor事件循环。Reactor可以感知网络、文件系统以及定时器事件。它等待然后处理这些事件，从特定于平台的行为中抽象出来，并提供统一的接口，使得在网络协议栈的任何位置对事件做出响应都变得简单。\n\n基本上reactor完成的任务就是：\n\n```python\nwhile True:\n    timeout = time_until_next_timed_event()\n    events = wait_for_events(timeout)\n    events += timed_events_until(now())\n    for event in events:\n        event.process()\n```\n\nTwisted目前在所有平台上的默认reactor都是基于poll API的（UNIX规范第3版（SUSv3）中描述）。此外，Twisted还支持一些特定于平台的高容量多路复用API。这些reactor包括基于FreeBSD中kqueue机制的KQueue reactor，支持epoll接口的系统（目前是Linux 2.6）中的epoll reactor，以及基于Windows下的输入输出完成端口的IOCP reactor。\n\n在实现轮询的相关细节中，Twisted需要考虑的包括：\n\n+ 网络和文件系统的限制\n+ 缓冲行为\n+ 如何检测连接丢失\n+ 出现错误时的返回值\n\nTwisted的reactor实现同时也考虑了正确使用底层的非阻塞式API，并正确处理各种边界情况。由于Python中没有暴露出IOCP API，因此Twisted需要维护自己的实现。\n\n###### **管理回调链**\n\n回调是事件驱动编程模型中的基础，也是reactor通知应用程序事件已经处理完成的方式。随着程序规模不断扩大，基于事件驱动的程序需要同时处理事件处理成功和出错的情况，这使得程序变得越来越复杂。若没有注册一个合适的回调，程序就会阻塞，因为这个事件处理的过程绝不会发生。出现错误时需要通过应用程序的不同层次从网络栈向上传递回调链。\n\n下面是两段Python伪码，分别是同步和异步模式下获取URL的玩具代码。让我们相互比较一下这两个版本，看看基于事件驱动的程序有什么缺陷：\n\n以同步的方式获取URL：\n\n```python\nimport getPage\n\ndef processPage(page):\n    print page\n\ndef logError(error):\n    print error\n\ndef finishProcessing(value):\n    print \"Shutting down...\"\n    exit(0)\n\nurl = \"http://google.com\"\ntry:\n    page = getPage(url)\n    processPage(page)\nexcept Error, e:\n    logError(error)\nfinally:\n    finishProcessing()\n```\n以异步的方式获取URL：\n\n```python\nfrom twisted.internet import reactor\nimport getPage\n\ndef processPage(page):\n    print page\n    finishProcessing()\n\ndef logError(error):\n    print error\n    finishProcessing()\n\ndef finishProcessing(value):\n    print \"Shutting down...\"\n    reactor.stop()\n\nurl = \"http://google.com\"\n# getPage takes: url, \n# success callback, error callback\ngetPage(url, processPage, logError)\n\nreactor.run()\n```\n\n在异步版的URL获取器中，reactor.run()启动reactor事件循环。在同步和异步版程序中，我们假定getPage函数处理获取页面的工作。如果获取成功就调用processPage，如果尝试获取页面时出现了Exception（异常），logError就得到调用。无论哪种情况，最后都要调用finishProcessing。\n\n异步版中的logError回调正对应于同步版中的try/except块。对processPage的回调对应于else块，无条件回调的finishProcessing就对应于finally块。\n\n在同步版中，代码结构直接显示出有一个try/except块，logError和processPage这两者间只会取其一调用一次，而finishProcessing总是会被调用一次。在异步版中需要由程序员自己负责正确调用成功和失败情况下的回调链。如果由于编程错误，在processPage或者logError的回调链之后没有调用finishProcessing，reactor事件循环将永远不会停止，程序就会卡住。\n\n这个玩具式的例子告诉我们在开发Twisted的头几年里这种复杂性令程序员感到非常沮丧。而Twisted应对这种复杂性的方式是新增一个称为Deferred（延迟）的对象。\n\n###### Deferreds\nDeferred对象以抽象化的方式表达了一种思想，即结果还尚不存在。它同样能够帮助管理产生这个结果所需要的回调链。当从函数中返回时，Deferred对象承诺在某个时刻函数将产生一个结果。返回的Deferred对象中包含所有注册到事件上的回调引用，因此在函数间只需要传递这一个对象即可，跟踪这个对象比单独管理所有的回调要简单的多。\n\nDeferred对象包含一对回调链，一个是针对操作成功的回调，一个是针对操作失败的回调。初始状态下Deferred对象的两条链都为空。在事件处理的过程中，每个阶段都为其添加处理成功的回调和处理失败的回调。当一个异步结果到来时，Deferred对象就被“激活”，那么处理成功的回调和处理失败的回调就可以以合适的方式按照它们添加进来的顺序依次得到调用。\n\n异步版URL获取器采用Deferred对象后的代码如下：\n\n```python\nfrom twisted.internet import reactor\nimport getPage\n\ndef processPage(page):\n    print page\n\ndef logError(error):\n    print error\n\ndef finishProcessing(value):\n    print \"Shutting down...\"\n    reactor.stop()\n\nurl = \"http://google.com\"\ndeferred = getPage(url) # getPage returns a Deferred\ndeferred.addCallbacks(success, failure)\ndeferred.addBoth(stop)\n\nreactor.run()\n```\n\n在这个版本中调用的事件处理函数与之前相同，但它们都注册到了一个单独的Deferred对象上，而不是分散在代码各处再以参数形式传递给getPage。\n\nDeferred对象创建时包含两个添加回调的阶段。第一阶段，addCallbacks将 processPage和logError添加到它们各自归属的回调链中。然后addBoth再将finishProcessing同时添加到这两个回调链上。用图解的方式来看，回调链应该如图所示：\n![Deferred 流程示例](/img/1570783134086.png)\n\nDeferred对象只能被激活一次，如果试图重复激活将引发一个异常。这使得Deferred对象的语义相当接近于同步版中的try/except块。从而让异步事件的处理能更容易推断，避免由于针对单个事件的回调调用多了一个或少了一个而产生微妙的bug。\n\n理解Deferred对象对于理解Twisted程序的执行流是非常重要的。然而当使用Twisted为我们提供的针对网络协议的高层抽象时，通常情况下我们完全不需要直接使用Deferred对象。\n\nDeferred对象所包含的抽象概念是非常强大的，这种思想已经被许多其他的事件驱动平台所借用，包括jQuery、Dojo和Mochikit。\n\n\n###### Transports\nTransports代表网络中两个通信结点之间的连接。Transports负责描述连接的细节，比如连接是面向流式的还是面向数据报的，流控以及可靠性。TCP、UDP和Unix套接字可作为transports的例子。它们被设计为“满足最小功能单元，同时具有最大程度的可复用性”，而且从协议实现中分离出来，这让许多协议可以采用相同类型的传输。Transports实现了ITransports接口，它包含如下的方法：\n\n>write                   以非阻塞的方式按顺序依次将数据写到物理连接上\nwriteSequence           将一个字符串列表写到物理连接上\nloseConnection          将所有挂起的数据写入，然后关闭连接\ngetPeer                 取得连接中对端的地址信息\ngetHost                 取得连接中本端的地址信息\n\n将transports从协议中分离出来也使得对这两个层次的测试变得更加简单。可以通过简单地写入一个字符串来模拟传输，用这种方式来检查。\n\n###### Protocols\n\nProtocols描述了如何以异步的方式处理网络中的事件。HTTP、DNS以及IMAP是应用层协议中的例子。Protocols实现了IProtocol接口，它包含如下的方法：\n>makeConnection               在transport对象和服务器之间建立一条连接\nconnectionMade               连接建立起来后调用\ndataReceived                 接收数据时调用\nconnectionLost               关闭连接时调用\n\n我们最好以一个例子来说明reactor、protocols以及transports这三者之间的关系。以下是完整的echo服务器和客户端的实现，首先来看看服务器部分：\n\n```python\nfrom twisted.internet import protocol, reactor\n\nclass Echo(protocol.Protocol):\n    def dataReceived(self, data):\n        # As soon as any data is received, write it back\n        self.transport.write(data)\n\nclass EchoFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return Echo()\n\nreactor.listenTCP(8000, EchoFactory())\nreactor.run()\n```\n接着是客户端部分：\n\n```python\nfrom twisted.internet import reactor, protocol\n\nclass EchoClient(protocol.Protocol):\n    def connectionMade(self):\n        self.transport.write(\"hello, world!\")\n\ndef dataReceived(self, data):\n    print \"Server said:\", data\n        self.transport.loseConnection()\n\ndef connectionLost(self, reason):\n    print \"connection lost\"\n\nclass EchoFactory(protocol.ClientFactory):\n    def buildProtocol(self, addr):\n        return EchoClient()\n\ndef clientConnectionFailed(self, connector, reason):\n    print \"Connection failed - goodbye!\"\n        reactor.stop()\n\ndef clientConnectionLost(self, connector, reason):\n    print \"Connection lost - goodbye!\"\n        reactor.stop()\n\nreactor.connectTCP(\"localhost\", 8000, EchoFactory())\nreactor.run()\n```\n运行服务器端脚本将启动一个TCP服务器，监听端口8000上的连接。服务器采用的是Echo协议，数据经TCP transport对象写出。运行客户端脚本将对服务器发起一个TCP连接，回显服务器端的回应然后终止连接并停止reactor事件循环。这里的Factory用来对连接的双方生成protocol对象实例。两端的通信是异步的，connectTCP负责注册回调函数到reactor事件循环中，当socket上有数据可读时通知回调处理。\n\n###### Applications\nTwisted是用来创建具有可扩展性、跨平台的网络服务器和客户端的引擎。在生产环境中，以标准化的方式简化部署这些应用的过程对于Twisted这种被广泛采用的平台来说是非常重要的一环。为此，Twisted开发了一套应用程序基础组件，采用可重用、可配置的方式来部署Twisted应用。这种方式使程序员避免堆砌千篇一律的代码来将应用程序同已有的工具整合在一起，这包括精灵化进程（daemonization）、日志处理、使用自定义的reactor循环、对代码做性能剖析等。\n\n应用程序基础组件包含4个主要部分：服务（Service）、应用（Application）、配置管理（通过TAC文件和插件）以及twistd命令行程序。为了说明这个基础组件，我们将上一节的Echo服务器转变成一个应用。\n\n+ **Service**\nService就是IService接口下实现的可以启动和停止的组件。Twisted自带有TCP、FTP、HTTP、SSH、DNS等服务以及其他协议的实现。其中许多Service都可以注册到单独的应用中。IService接口的核心是：\n>startService    启动服务。可能包含加载配置数据，设定数据库连接或者监听某个端口\nstopService     关闭服务。可能包含将状态保存到磁盘，关闭数据库连接或者停止监听端口\n\n我们的Echo服务使用TCP协议，因此我们可以使用Twisted中IService接口下默认的TCPServer实现。\n\n+ **Application**\nApplication是处于最顶层的Service，代表了整个Twisted应用程序。Service需要将其自身同Application注册，然后就可以用下面我们将介绍的部署工具twistd搜索并运行应用程序。我们将创建一个可以同Echo Service注册的Echo应用。\n+ **TAC文件**\n当在一个普通的Python文件中管理Twisted应用程序时，需要由开发者负责编写启动和停止reactor事件循环以及配置应用程序的代码。在Twisted的基础组件中，协议的实现都是在一个模块中完成的，需要使用到这些协议的Service可以注册到一个Twisted应用程序配置文件中（TAC文件）去，这样reactor事件循环和程序配置就可以由外部组件来进行管理。\n\n要将我们的Echo服务器转变成一个Echo应用，我们可以按照以下几个简单的步骤来完成：\n\n1. 将Echo服务器的Protocol部分移到它们自己所归属的模块中去。\n\n2. 在TAC文件中：\n\n\t1. 创建一个Echo应用。\n\t2. 创建一个TCPServer的Service实例，它将使用我们的EchoFactory，然后同前面创建的应用完成注册。\n\t\n管理reactor事件循环的代码将由twistd来负责，我们下面会对此进行讨论。这样，应用程序的代码就变成这样了：\necho.py文件：\n\n```python\nfrom twisted.internet import protocol, reactor\n\nclass Echo(protocol.Protocol):\n    def dataReceived(self, data):\n        self.transport.write(data)\n\nclass EchoFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return Echo()\n```\n\n+ **twistd**\ntwistd（读作“twist-dee”）是一个跨平台的用来部署Twisted应用程序的工具。它执行TAC文件并负责处理启动和停止应用程序。作为Twisted在网络编程中具有“内置电池”能力的一部分，twistd自带有一些非常有用的配置标志，包括将应用程序转变为守护进程、定义日志文件的路径、设定特权级别、在chroot下运行、使用非默认的reactor，甚至是在profiler下运行应用程序。\n\n我们可以像这样运行这个Echo服务应用：\n\n```python\n$ twistd –y echo_server.tac\n```\n\n在这个简单的例子里，twistd将这个应用程序作为守护进程来启动，日志记录在twistd.log文件中。启动和停止应用后，日志文件内容如下：\n\n```python\n2011-11-19 22:23:07-0500 [-] Log opened.\n2011-11-19 22:23:07-0500 [-] twistd 11.0.0 (/usr/bin/python 2.7.1) starting up.\n2011-11-19 22:23:07-0500 [-] reactor class: twisted.internet.selectreactor.SelectReactor.\n2011-11-19 22:23:07-0500 [-] echo.EchoFactory starting on 8000\n2011-11-19 22:23:07-0500 [-] Starting factory <echo.EchoFactory instance at 0x12d8670>\n2011-11-19 22:23:20-0500 [-] Received SIGTERM, shutting down.\n2011-11-19 22:23:20-0500 [-] (TCP Port 8000 Closed)\n2011-11-19 22:23:20-0500 [-] Stopping factory <echo.EchoFactory instance at 0x12d8670>\n2011-11-19 22:23:20-0500 [-] Main loop terminated.\n2011-11-19 22:23:20-0500 [-] Server Shut Down.\n```\n\n通过使用Twisted框架中的基础组件来运行服务，这么做使得开发人员能够不用再编写类似守护进程和记录日志这样的冗余代码了。这同样也为部署应用程序建立了一个标准的命令行接口。\n\n###### Plugins\n\n对于运行Twisted应用程序的方法，除了基于TAC文件外还有一种可选的方法，这就是插件系统。TAC系统可以很方便的将Twisted预定义的服务同应用程序配置文件注册，而插件系统能够方便的将用户自定义的服务注册为twistd工具的子命令，然后扩展应用程序的命令行接口。\n\n在使用插件系统时：\n\n1. 由于只有plugin API需要保持稳定，这使得第三方开发者能很容易地扩展软件。\n\n2. 插件发现能力已经集成到系统中了。插件可以在程序首次运行时加载并保存，每次程序启动时会重新触发插件发现过程，或者也可以在程序运行期间反复轮询新插件，这使得在程序已经启动后我们还可以判断是否有新的插件安装上了。\n\n当使用Twisted插件系统来扩展软件时，我们要做的就是创建IPlugin接口下实现的对象并将它们放到一个特定的位置中，这里插件系统知道该如何去找到它们。\n\n我们已经将Echo服务转换为一个Twisted应用程序了，而将其转换为一个Twisted插件也是非常简单直接的。在我们之前的Echo模块中，除了包含有Echo协议和EchoFactory的定义之外，现在我们还要添加一个名为twistd的目录，其中还包含着一个名为plugins的子目录，这里正是我们需要定义echo插件的地方。通过这个插件，我们可以启动一个echo服务，并将需要使用的端口号作为参数指定给twistd工具。\n\n```python\nfrom zope.interface import implements\n\nfrom twisted.python import usage\nfrom twisted.plugin import IPlugin\nfrom twisted.application.service import IServiceMaker\nfrom twisted.application import internet\n\nfrom echo import EchoFactory\n\nclass Options(usage.Options):\n    optParameters = [[\"port\", \"p\", 8000, \"The port number to listen on.\"]]\n\nclass EchoServiceMaker(object):\n    implements(IServiceMaker, IPlugin)\n    tapname = \"echo\"\n    description = \"A TCP-based echo server.\"\n    options = Options\n\ndef makeService(self, options):\n    \"\"\"\n    Construct a TCPServer from a factory defined in myproject.\n    \"\"\"\n    return internet.TCPServer(int(options[\"port\"]), EchoFactory())\n\nserviceMaker = EchoServiceMaker()\n```\n\n现在，我们的Echo服务器将作为一个服务选项出现在twistd –help的输出中。运行twistd echo –port=1235将在端口1235上启动一个Echo服务器。\n\nTwisted还带有一个可拔插的针对服务器端认证的模块twisted.cred，插件系统常见的用途就是为应用程序添加一个认证模式。我们可以使用twisted.cred中现成的AuthOptionMixin类来添加针对各种认证的命令行支持，或者是添加新的认证类型。比如，我们可以使用插件系统来添加基于本地Unix密码数据库或者是基于LDAP服务器的认证方式。\n\ntwistd工具中附带有许多Twisted所支持的协议插件，只用一条单独的命令就可以完成启动服务器的工作了。这里有一些通过twistd启动服务器的例子：\n\n```python\ntwistd web –port 8080 –path .\n```\n\n这条命令将在8080端口启动一个HTTP服务器，在当前目录中负责处理静态和动态页面请求。\n\n```python\ntwistd dns –p 5553 –hosts-file=hosts\n```\n\n\n这条命令在端口5553上启动一个DNS服务器，解析指定的文件hosts中的域名，这个文件的内容格式同/etc/hosts一样。\n\n```python\nsudo twistd conch –p tcp:2222\n```\n\n这条命令在端口2222上启动一个SSH服务器。ssh的密钥必须独立设定。\n\n```python\ntwistd mail –E –H localhost –d localhost=emails\n```\n\n这条命令启动一个ESMTP POP3服务器，为本地主机接收邮件并保存到指定的emails目录下。\n\n我们可以方便的通过twistd来搭建一个用于测试客户端功能的服务器，但它同样是可装载的、产品级的服务器实现。\n\n在部署应用程序的方式上，Twisted通过TAC文件、插件以及命令行工具twistd的部署方式已经获得了成功。但是有趣的是，对于大多数大型Twisted应用程序来说，部署它们仍然需要重写一些这类管理和监控组件；Twisted的架构并没有对系统管理员的需求呈现出太多的友好性。这也反映了一个事实，那就是对于系统管理员来说Twisted历来就没有太多架构可言，而这些系统管理员才是部署和维护应用程序的专家。在这方面，Twisted在未来架构设计的决策上需要更积极的征求这类专家级用户的反馈意见。\n\n[本文内容引用自此处](https://www.cnblogs.com/xianguang/p/7027661.html)","slug":"Twisted  介绍","published":1,"date":"2020-08-11T01:59:40.427Z","updated":"2020-08-11T01:59:40.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpcluyq002h8sr3qboz6pp0","content":"<h2 id=\"Twisted\"><a href=\"#Twisted\" class=\"headerlink\" title=\"Twisted\"></a>Twisted</h2><h3 id=\"Python-Twisted介绍\"><a href=\"#Python-Twisted介绍\" class=\"headerlink\" title=\"Python Twisted介绍\"></a>Python Twisted介绍</h3><p>Twisted是用Python实现的基于事件驱动的网络引擎框架。Twisted诞生于2000年初，在当时的网络游戏开发者看来，无论他们使用哪种语言，手中都鲜有可兼顾扩展性及跨平台的网络库。Twisted的作者试图在当时现有的环境下开发游戏，这一步走的非常艰难，他们迫切地需要一个可扩展性高、基于事件驱动、跨平台的网络开发框架，为此他们决定自己实现一个，并从那些之前的游戏和网络应用程序的开发者中学习，汲取他们的经验教训。</p>\n<p>Twisted支持许多常见的传输及应用层协议，包括TCP、UDP、SSL/TLS、HTTP、IMAP、SSH、IRC以及FTP。就像python一样，Twisted也具有“内置电池”（batteries-included）的特点。Twisted对于其支持的所有协议都带有客户端和服务器实现，同时附带有基于命令行的工具，使得配置和部署产品级的Twisted应用变得非常方便。</p>\n<h3 id=\"为什么需要Twisted\"><a href=\"#为什么需要Twisted\" class=\"headerlink\" title=\"为什么需要Twisted\"></a>为什么需要Twisted</h3><p>2000年时，Twisted的作者Glyph正在开发一个名为Twisted Reality的基于文本方式的多人在线游戏。这个游戏采用Java开发，里面尽是一堆线程——每个连接就有3个线程处理。处理输入的线程会在读操作上阻塞，处理输出的线程将在一些写操作上阻塞，还有一个“逻辑”线程将在等待定时器超时或者事件入队列时休眠。随着玩家们在虚拟世界中移动并交互时，线程出现死锁，缓存被污染，程序中的加锁逻辑几乎从来就没对过——采用多线程使得整个软件变得复杂、漏洞百出而且极难扩展。</p>\n<p>为了寻求其他的解决方案，作者发现了Python，特别是Python中用于对流式对象比如socket和pipe进行多路I/O复用的select模块（UNIX规范第3版（SUSv3）描述了select）。那时，Java并没有提供操作系统的select接口或者任何其他的异步I/O API（针对非阻塞式I/O的包java.nio已经在J2SE 1.4中加入了，2002年发布）。通过用Python中的select模块快速搭建起游戏的原型，这迅速降低了程序的复杂度，并且比多线程版本要更加可靠。</p>\n<p>Glyph迅速转向了Python、select以及基于事件驱动的编程。他使用Python的select模块为游戏编写了客户端和服务器。但他想要的还不止于此。从根本上说，他希望能将网络行为转变为对游戏中的对象的方法调用。如果你能在游戏中收取邮件会怎样，就像Nethack mailer这种守护进程一样？如果游戏中的每位玩家都拥有一个主页呢？Glyph发现他需要优秀的IMAP以及HTTP客户端和服务器的Python实现，而这些都要采用select。</p>\n<p>他首先转向了Medusa，这是一个在90年代中期开发的平台，在这里可以采用Python中的asyncore模块来编写网络服务。asyncore是一个异步化处理socket的模块，在操作系统的select API之上构建了一个调度器和回调接口。</p>\n<p>这对于Glyph来说是个激动人心的发现，但Medusa有两个缺点：</p>\n<ol>\n<li>这个项目到2001年就不再维护了，那正是glyph开发Twisted Reality的时候。</li>\n<li>asyncore只是对socket的一个薄封装层，应用程序的编写者仍然需要直接操作socket。这意味着程序可移植性的担子仍然落在程序员自己身上。此外，那时asyncore对Windows的支持还有问题，Glyph希望能在Windows上运行一个带有图形用户界面的客户端。<br>Glyph需要自己实现一个网络引擎平台，而且他意识到Twisted Reality已经打开了问题的大门，这和他的游戏一样有趣。</li>\n</ol>\n<p>随着时间的推移，Twisted Reality这个游戏就演化成了Twisted网络引擎平台。它可以做到当时Python中已有的网络平台所无法做到的事情：</p>\n<ul>\n<li>使用基于事件驱动的编程模型，而不是多线程模型。</li>\n<li>跨平台：为主流操作系统平台暴露出的事件通知系统提供统一的接口。</li>\n<li>“内置电池”的能力：提供流行的应用层协议实现，因此Twisted马上就可为开发人员所用。</li>\n<li>符合RFC规范，已经通过健壮的测试套件证明了其一致性。</li>\n<li>能很容易的配合多个网络协议一起使用。</li>\n<li>可扩展。</li>\n</ul>\n<h3 id=\"Twisted架构概览\"><a href=\"#Twisted架构概览\" class=\"headerlink\" title=\"Twisted架构概览\"></a>Twisted架构概览</h3><p>Twisted是一个事件驱动型的网络引擎。由于事件驱动编程模型在Twisted的设计哲学中占有重要的地位，因此这里有必要花点时间来回顾一下究竟事件驱动意味着什么。</p>\n<p>事件驱动编程是一种编程范式，这里程序的执行流由外部事件来决定。它的特点是包含一个事件循环，当外部事件发生时使用回调机制来触发相应的处理。另外两种常见的编程范式是（单线程）同步以及多线程编程。</p>\n<p>在单线程同步模型中，任务按照顺序执行。如果某个任务因为I/O而阻塞，其他所有的任务都必须等待，直到它完成之后它们才能依次执行。这种明确的执行顺序和串行化处理的行为是很容易推断得出的。如果任务之间并没有互相依赖的关系，但仍然需要互相等待的话这就使得程序不必要的降低了运行速度。</p>\n<p>在多线程版本中，这3个任务分别在独立的线程中执行。这些线程由操作系统来管理，在多处理器系统上可以并行处理，或者在单处理器系统上交错执行。这使得当某个线程阻塞在某个资源的同时其他线程得以继续执行。与完成类似功能的同步程序相比，这种方式更有效率，但程序员必须写代码来保护共享资源，防止其被多个线程同时访问。多线程程序更加难以推断，因为这类程序不得不通过线程同步机制如锁、可重入函数、线程局部存储或者其他机制来处理线程安全问题，如果实现不当就会导致出现微妙且令人痛不欲生的bug。</p>\n<p>在事件驱动版本的程序中，3个任务<strong>交错执行</strong>，但仍然在一个单独的线程控制中。当处理I/O或者其他昂贵的操作时，注册一个回调到事件循环中，然后当I/O操作完成时继续执行。回调描述了该如何处理某个事件。事件循环轮询所有的事件，当事件到来时将它们分配给等待处理事件的回调函数。这种方式让程序尽可能的得以执行而不需要用到额外的线程。事件驱动型程序比多线程程序更容易推断出行为，因为程序员不需要关心线程安全问题。</p>\n<p>当我们面对如下的环境时，事件驱动模型通常是一个好的选择：</p>\n<p>程序中有许多任务，而且…</p>\n<ol>\n<li>任务之间高度独立（因此它们不需要互相通信，或者等待彼此）而且…</li>\n<li>在等待事件到来时，某些任务会阻塞。</li>\n<li>当应用程序需要在任务间共享可变的数据时，这也是一个不错的选择，因为这里不需要采用同步处理。</li>\n</ol>\n<p>网络应用程序通常都有上述这些特点，这使得它们能够很好的契合事件驱动编程模型。</p>\n<h6 id=\"重用已有的应用\"><a href=\"#重用已有的应用\" class=\"headerlink\" title=\"重用已有的应用\"></a><strong>重用已有的应用</strong></h6><p>在Twisted创建之前就已经有了许多针对多种流行的网络协议的客户端和服务器实现了。为什么Glyph不直接用Apache、IRCd、BIND、OpenSSH或者任何其他已有的应用，而要为Twisted从头开始重新实现各个协议的客户端和服务器呢？</p>\n<p>问题在于所有这些已有的实现都存在有从头写起的网络层代码，通常都是C代码。而应用层代码直接同网络层耦合在一起，这使得它们非常难以以库的形式来复用。当要一起使用这些组件时，如果希望在多个协议中暴露相同的数据，则它们必须以黑盒的形式来看待，这使得开发者根本没机会重用代码。此外，服务器和客户端的实现通常是分离的，彼此之间不共享代码。要扩展这些应用，维护跨平台的客户端-服务器兼容性的难度本不至于这么大。</p>\n<p>Twisted中的客户端和服务器是用Python开发的，采用了一致性的接口。这使得开发新的客户端和服务器变得很容易实现，可以在客户端和服务器之间共享代码，在协议之间共享应用逻辑，以及对某个实现的代码做测试。</p>\n<h6 id=\"React模式\"><a href=\"#React模式\" class=\"headerlink\" title=\"React模式\"></a><strong>React模式</strong></h6><p>Twisted实现了设计模式中的反应堆（reactor）模式，这种模式在单线程环境中调度多个事件源产生的事件到它们各自的事件处理例程中去。</p>\n<p>Twisted的核心就是reactor事件循环。Reactor可以感知网络、文件系统以及定时器事件。它等待然后处理这些事件，从特定于平台的行为中抽象出来，并提供统一的接口，使得在网络协议栈的任何位置对事件做出响应都变得简单。</p>\n<p>基本上reactor完成的任务就是：</p>\n<pre><code class=\"python\">while True:\n    timeout = time_until_next_timed_event()\n    events = wait_for_events(timeout)\n    events += timed_events_until(now())\n    for event in events:\n        event.process()</code></pre>\n<p>Twisted目前在所有平台上的默认reactor都是基于poll API的（UNIX规范第3版（SUSv3）中描述）。此外，Twisted还支持一些特定于平台的高容量多路复用API。这些reactor包括基于FreeBSD中kqueue机制的KQueue reactor，支持epoll接口的系统（目前是Linux 2.6）中的epoll reactor，以及基于Windows下的输入输出完成端口的IOCP reactor。</p>\n<p>在实现轮询的相关细节中，Twisted需要考虑的包括：</p>\n<ul>\n<li>网络和文件系统的限制</li>\n<li>缓冲行为</li>\n<li>如何检测连接丢失</li>\n<li>出现错误时的返回值</li>\n</ul>\n<p>Twisted的reactor实现同时也考虑了正确使用底层的非阻塞式API，并正确处理各种边界情况。由于Python中没有暴露出IOCP API，因此Twisted需要维护自己的实现。</p>\n<h6 id=\"管理回调链\"><a href=\"#管理回调链\" class=\"headerlink\" title=\"管理回调链\"></a><strong>管理回调链</strong></h6><p>回调是事件驱动编程模型中的基础，也是reactor通知应用程序事件已经处理完成的方式。随着程序规模不断扩大，基于事件驱动的程序需要同时处理事件处理成功和出错的情况，这使得程序变得越来越复杂。若没有注册一个合适的回调，程序就会阻塞，因为这个事件处理的过程绝不会发生。出现错误时需要通过应用程序的不同层次从网络栈向上传递回调链。</p>\n<p>下面是两段Python伪码，分别是同步和异步模式下获取URL的玩具代码。让我们相互比较一下这两个版本，看看基于事件驱动的程序有什么缺陷：</p>\n<p>以同步的方式获取URL：</p>\n<pre><code class=\"python\">import getPage\n\ndef processPage(page):\n    print page\n\ndef logError(error):\n    print error\n\ndef finishProcessing(value):\n    print &quot;Shutting down...&quot;\n    exit(0)\n\nurl = &quot;http://google.com&quot;\ntry:\n    page = getPage(url)\n    processPage(page)\nexcept Error, e:\n    logError(error)\nfinally:\n    finishProcessing()</code></pre>\n<p>以异步的方式获取URL：</p>\n<pre><code class=\"python\">from twisted.internet import reactor\nimport getPage\n\ndef processPage(page):\n    print page\n    finishProcessing()\n\ndef logError(error):\n    print error\n    finishProcessing()\n\ndef finishProcessing(value):\n    print &quot;Shutting down...&quot;\n    reactor.stop()\n\nurl = &quot;http://google.com&quot;\n# getPage takes: url, \n# success callback, error callback\ngetPage(url, processPage, logError)\n\nreactor.run()</code></pre>\n<p>在异步版的URL获取器中，reactor.run()启动reactor事件循环。在同步和异步版程序中，我们假定getPage函数处理获取页面的工作。如果获取成功就调用processPage，如果尝试获取页面时出现了Exception（异常），logError就得到调用。无论哪种情况，最后都要调用finishProcessing。</p>\n<p>异步版中的logError回调正对应于同步版中的try/except块。对processPage的回调对应于else块，无条件回调的finishProcessing就对应于finally块。</p>\n<p>在同步版中，代码结构直接显示出有一个try/except块，logError和processPage这两者间只会取其一调用一次，而finishProcessing总是会被调用一次。在异步版中需要由程序员自己负责正确调用成功和失败情况下的回调链。如果由于编程错误，在processPage或者logError的回调链之后没有调用finishProcessing，reactor事件循环将永远不会停止，程序就会卡住。</p>\n<p>这个玩具式的例子告诉我们在开发Twisted的头几年里这种复杂性令程序员感到非常沮丧。而Twisted应对这种复杂性的方式是新增一个称为Deferred（延迟）的对象。</p>\n<h6 id=\"Deferreds\"><a href=\"#Deferreds\" class=\"headerlink\" title=\"Deferreds\"></a>Deferreds</h6><p>Deferred对象以抽象化的方式表达了一种思想，即结果还尚不存在。它同样能够帮助管理产生这个结果所需要的回调链。当从函数中返回时，Deferred对象承诺在某个时刻函数将产生一个结果。返回的Deferred对象中包含所有注册到事件上的回调引用，因此在函数间只需要传递这一个对象即可，跟踪这个对象比单独管理所有的回调要简单的多。</p>\n<p>Deferred对象包含一对回调链，一个是针对操作成功的回调，一个是针对操作失败的回调。初始状态下Deferred对象的两条链都为空。在事件处理的过程中，每个阶段都为其添加处理成功的回调和处理失败的回调。当一个异步结果到来时，Deferred对象就被“激活”，那么处理成功的回调和处理失败的回调就可以以合适的方式按照它们添加进来的顺序依次得到调用。</p>\n<p>异步版URL获取器采用Deferred对象后的代码如下：</p>\n<pre><code class=\"python\">from twisted.internet import reactor\nimport getPage\n\ndef processPage(page):\n    print page\n\ndef logError(error):\n    print error\n\ndef finishProcessing(value):\n    print &quot;Shutting down...&quot;\n    reactor.stop()\n\nurl = &quot;http://google.com&quot;\ndeferred = getPage(url) # getPage returns a Deferred\ndeferred.addCallbacks(success, failure)\ndeferred.addBoth(stop)\n\nreactor.run()</code></pre>\n<p>在这个版本中调用的事件处理函数与之前相同，但它们都注册到了一个单独的Deferred对象上，而不是分散在代码各处再以参数形式传递给getPage。</p>\n<p>Deferred对象创建时包含两个添加回调的阶段。第一阶段，addCallbacks将 processPage和logError添加到它们各自归属的回调链中。然后addBoth再将finishProcessing同时添加到这两个回调链上。用图解的方式来看，回调链应该如图所示：<br><img src=\"/img/1570783134086.png\" alt=\"Deferred 流程示例\"></p>\n<p>Deferred对象只能被激活一次，如果试图重复激活将引发一个异常。这使得Deferred对象的语义相当接近于同步版中的try/except块。从而让异步事件的处理能更容易推断，避免由于针对单个事件的回调调用多了一个或少了一个而产生微妙的bug。</p>\n<p>理解Deferred对象对于理解Twisted程序的执行流是非常重要的。然而当使用Twisted为我们提供的针对网络协议的高层抽象时，通常情况下我们完全不需要直接使用Deferred对象。</p>\n<p>Deferred对象所包含的抽象概念是非常强大的，这种思想已经被许多其他的事件驱动平台所借用，包括jQuery、Dojo和Mochikit。</p>\n<h6 id=\"Transports\"><a href=\"#Transports\" class=\"headerlink\" title=\"Transports\"></a>Transports</h6><p>Transports代表网络中两个通信结点之间的连接。Transports负责描述连接的细节，比如连接是面向流式的还是面向数据报的，流控以及可靠性。TCP、UDP和Unix套接字可作为transports的例子。它们被设计为“满足最小功能单元，同时具有最大程度的可复用性”，而且从协议实现中分离出来，这让许多协议可以采用相同类型的传输。Transports实现了ITransports接口，它包含如下的方法：</p>\n<blockquote>\n<p>write                   以非阻塞的方式按顺序依次将数据写到物理连接上<br>writeSequence           将一个字符串列表写到物理连接上<br>loseConnection          将所有挂起的数据写入，然后关闭连接<br>getPeer                 取得连接中对端的地址信息<br>getHost                 取得连接中本端的地址信息</p>\n</blockquote>\n<p>将transports从协议中分离出来也使得对这两个层次的测试变得更加简单。可以通过简单地写入一个字符串来模拟传输，用这种方式来检查。</p>\n<h6 id=\"Protocols\"><a href=\"#Protocols\" class=\"headerlink\" title=\"Protocols\"></a>Protocols</h6><p>Protocols描述了如何以异步的方式处理网络中的事件。HTTP、DNS以及IMAP是应用层协议中的例子。Protocols实现了IProtocol接口，它包含如下的方法：</p>\n<blockquote>\n<p>makeConnection               在transport对象和服务器之间建立一条连接<br>connectionMade               连接建立起来后调用<br>dataReceived                 接收数据时调用<br>connectionLost               关闭连接时调用</p>\n</blockquote>\n<p>我们最好以一个例子来说明reactor、protocols以及transports这三者之间的关系。以下是完整的echo服务器和客户端的实现，首先来看看服务器部分：</p>\n<pre><code class=\"python\">from twisted.internet import protocol, reactor\n\nclass Echo(protocol.Protocol):\n    def dataReceived(self, data):\n        # As soon as any data is received, write it back\n        self.transport.write(data)\n\nclass EchoFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return Echo()\n\nreactor.listenTCP(8000, EchoFactory())\nreactor.run()</code></pre>\n<p>接着是客户端部分：</p>\n<pre><code class=\"python\">from twisted.internet import reactor, protocol\n\nclass EchoClient(protocol.Protocol):\n    def connectionMade(self):\n        self.transport.write(&quot;hello, world!&quot;)\n\ndef dataReceived(self, data):\n    print &quot;Server said:&quot;, data\n        self.transport.loseConnection()\n\ndef connectionLost(self, reason):\n    print &quot;connection lost&quot;\n\nclass EchoFactory(protocol.ClientFactory):\n    def buildProtocol(self, addr):\n        return EchoClient()\n\ndef clientConnectionFailed(self, connector, reason):\n    print &quot;Connection failed - goodbye!&quot;\n        reactor.stop()\n\ndef clientConnectionLost(self, connector, reason):\n    print &quot;Connection lost - goodbye!&quot;\n        reactor.stop()\n\nreactor.connectTCP(&quot;localhost&quot;, 8000, EchoFactory())\nreactor.run()</code></pre>\n<p>运行服务器端脚本将启动一个TCP服务器，监听端口8000上的连接。服务器采用的是Echo协议，数据经TCP transport对象写出。运行客户端脚本将对服务器发起一个TCP连接，回显服务器端的回应然后终止连接并停止reactor事件循环。这里的Factory用来对连接的双方生成protocol对象实例。两端的通信是异步的，connectTCP负责注册回调函数到reactor事件循环中，当socket上有数据可读时通知回调处理。</p>\n<h6 id=\"Applications\"><a href=\"#Applications\" class=\"headerlink\" title=\"Applications\"></a>Applications</h6><p>Twisted是用来创建具有可扩展性、跨平台的网络服务器和客户端的引擎。在生产环境中，以标准化的方式简化部署这些应用的过程对于Twisted这种被广泛采用的平台来说是非常重要的一环。为此，Twisted开发了一套应用程序基础组件，采用可重用、可配置的方式来部署Twisted应用。这种方式使程序员避免堆砌千篇一律的代码来将应用程序同已有的工具整合在一起，这包括精灵化进程（daemonization）、日志处理、使用自定义的reactor循环、对代码做性能剖析等。</p>\n<p>应用程序基础组件包含4个主要部分：服务（Service）、应用（Application）、配置管理（通过TAC文件和插件）以及twistd命令行程序。为了说明这个基础组件，我们将上一节的Echo服务器转变成一个应用。</p>\n<ul>\n<li><strong>Service</strong><br>Service就是IService接口下实现的可以启动和停止的组件。Twisted自带有TCP、FTP、HTTP、SSH、DNS等服务以及其他协议的实现。其中许多Service都可以注册到单独的应用中。IService接口的核心是：<blockquote>\n<p>startService    启动服务。可能包含加载配置数据，设定数据库连接或者监听某个端口<br>stopService     关闭服务。可能包含将状态保存到磁盘，关闭数据库连接或者停止监听端口</p>\n</blockquote>\n</li>\n</ul>\n<p>我们的Echo服务使用TCP协议，因此我们可以使用Twisted中IService接口下默认的TCPServer实现。</p>\n<ul>\n<li><strong>Application</strong><br>Application是处于最顶层的Service，代表了整个Twisted应用程序。Service需要将其自身同Application注册，然后就可以用下面我们将介绍的部署工具twistd搜索并运行应用程序。我们将创建一个可以同Echo Service注册的Echo应用。</li>\n<li><strong>TAC文件</strong><br>当在一个普通的Python文件中管理Twisted应用程序时，需要由开发者负责编写启动和停止reactor事件循环以及配置应用程序的代码。在Twisted的基础组件中，协议的实现都是在一个模块中完成的，需要使用到这些协议的Service可以注册到一个Twisted应用程序配置文件中（TAC文件）去，这样reactor事件循环和程序配置就可以由外部组件来进行管理。</li>\n</ul>\n<p>要将我们的Echo服务器转变成一个Echo应用，我们可以按照以下几个简单的步骤来完成：</p>\n<ol>\n<li><p>将Echo服务器的Protocol部分移到它们自己所归属的模块中去。</p>\n</li>\n<li><p>在TAC文件中：</p>\n<ol>\n<li>创建一个Echo应用。</li>\n<li>创建一个TCPServer的Service实例，它将使用我们的EchoFactory，然后同前面创建的应用完成注册。</li>\n</ol>\n</li>\n</ol>\n<p>管理reactor事件循环的代码将由twistd来负责，我们下面会对此进行讨论。这样，应用程序的代码就变成这样了：<br>echo.py文件：</p>\n<pre><code class=\"python\">from twisted.internet import protocol, reactor\n\nclass Echo(protocol.Protocol):\n    def dataReceived(self, data):\n        self.transport.write(data)\n\nclass EchoFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return Echo()</code></pre>\n<ul>\n<li><strong>twistd</strong><br>twistd（读作“twist-dee”）是一个跨平台的用来部署Twisted应用程序的工具。它执行TAC文件并负责处理启动和停止应用程序。作为Twisted在网络编程中具有“内置电池”能力的一部分，twistd自带有一些非常有用的配置标志，包括将应用程序转变为守护进程、定义日志文件的路径、设定特权级别、在chroot下运行、使用非默认的reactor，甚至是在profiler下运行应用程序。</li>\n</ul>\n<p>我们可以像这样运行这个Echo服务应用：</p>\n<pre><code class=\"python\">$ twistd –y echo_server.tac</code></pre>\n<p>在这个简单的例子里，twistd将这个应用程序作为守护进程来启动，日志记录在twistd.log文件中。启动和停止应用后，日志文件内容如下：</p>\n<pre><code class=\"python\">2011-11-19 22:23:07-0500 [-] Log opened.\n2011-11-19 22:23:07-0500 [-] twistd 11.0.0 (/usr/bin/python 2.7.1) starting up.\n2011-11-19 22:23:07-0500 [-] reactor class: twisted.internet.selectreactor.SelectReactor.\n2011-11-19 22:23:07-0500 [-] echo.EchoFactory starting on 8000\n2011-11-19 22:23:07-0500 [-] Starting factory &lt;echo.EchoFactory instance at 0x12d8670&gt;\n2011-11-19 22:23:20-0500 [-] Received SIGTERM, shutting down.\n2011-11-19 22:23:20-0500 [-] (TCP Port 8000 Closed)\n2011-11-19 22:23:20-0500 [-] Stopping factory &lt;echo.EchoFactory instance at 0x12d8670&gt;\n2011-11-19 22:23:20-0500 [-] Main loop terminated.\n2011-11-19 22:23:20-0500 [-] Server Shut Down.</code></pre>\n<p>通过使用Twisted框架中的基础组件来运行服务，这么做使得开发人员能够不用再编写类似守护进程和记录日志这样的冗余代码了。这同样也为部署应用程序建立了一个标准的命令行接口。</p>\n<h6 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h6><p>对于运行Twisted应用程序的方法，除了基于TAC文件外还有一种可选的方法，这就是插件系统。TAC系统可以很方便的将Twisted预定义的服务同应用程序配置文件注册，而插件系统能够方便的将用户自定义的服务注册为twistd工具的子命令，然后扩展应用程序的命令行接口。</p>\n<p>在使用插件系统时：</p>\n<ol>\n<li><p>由于只有plugin API需要保持稳定，这使得第三方开发者能很容易地扩展软件。</p>\n</li>\n<li><p>插件发现能力已经集成到系统中了。插件可以在程序首次运行时加载并保存，每次程序启动时会重新触发插件发现过程，或者也可以在程序运行期间反复轮询新插件，这使得在程序已经启动后我们还可以判断是否有新的插件安装上了。</p>\n</li>\n</ol>\n<p>当使用Twisted插件系统来扩展软件时，我们要做的就是创建IPlugin接口下实现的对象并将它们放到一个特定的位置中，这里插件系统知道该如何去找到它们。</p>\n<p>我们已经将Echo服务转换为一个Twisted应用程序了，而将其转换为一个Twisted插件也是非常简单直接的。在我们之前的Echo模块中，除了包含有Echo协议和EchoFactory的定义之外，现在我们还要添加一个名为twistd的目录，其中还包含着一个名为plugins的子目录，这里正是我们需要定义echo插件的地方。通过这个插件，我们可以启动一个echo服务，并将需要使用的端口号作为参数指定给twistd工具。</p>\n<pre><code class=\"python\">from zope.interface import implements\n\nfrom twisted.python import usage\nfrom twisted.plugin import IPlugin\nfrom twisted.application.service import IServiceMaker\nfrom twisted.application import internet\n\nfrom echo import EchoFactory\n\nclass Options(usage.Options):\n    optParameters = [[&quot;port&quot;, &quot;p&quot;, 8000, &quot;The port number to listen on.&quot;]]\n\nclass EchoServiceMaker(object):\n    implements(IServiceMaker, IPlugin)\n    tapname = &quot;echo&quot;\n    description = &quot;A TCP-based echo server.&quot;\n    options = Options\n\ndef makeService(self, options):\n    &quot;&quot;&quot;\n    Construct a TCPServer from a factory defined in myproject.\n    &quot;&quot;&quot;\n    return internet.TCPServer(int(options[&quot;port&quot;]), EchoFactory())\n\nserviceMaker = EchoServiceMaker()</code></pre>\n<p>现在，我们的Echo服务器将作为一个服务选项出现在twistd –help的输出中。运行twistd echo –port=1235将在端口1235上启动一个Echo服务器。</p>\n<p>Twisted还带有一个可拔插的针对服务器端认证的模块twisted.cred，插件系统常见的用途就是为应用程序添加一个认证模式。我们可以使用twisted.cred中现成的AuthOptionMixin类来添加针对各种认证的命令行支持，或者是添加新的认证类型。比如，我们可以使用插件系统来添加基于本地Unix密码数据库或者是基于LDAP服务器的认证方式。</p>\n<p>twistd工具中附带有许多Twisted所支持的协议插件，只用一条单独的命令就可以完成启动服务器的工作了。这里有一些通过twistd启动服务器的例子：</p>\n<pre><code class=\"python\">twistd web –port 8080 –path .</code></pre>\n<p>这条命令将在8080端口启动一个HTTP服务器，在当前目录中负责处理静态和动态页面请求。</p>\n<pre><code class=\"python\">twistd dns –p 5553 –hosts-file=hosts</code></pre>\n<p>这条命令在端口5553上启动一个DNS服务器，解析指定的文件hosts中的域名，这个文件的内容格式同/etc/hosts一样。</p>\n<pre><code class=\"python\">sudo twistd conch –p tcp:2222</code></pre>\n<p>这条命令在端口2222上启动一个SSH服务器。ssh的密钥必须独立设定。</p>\n<pre><code class=\"python\">twistd mail –E –H localhost –d localhost=emails</code></pre>\n<p>这条命令启动一个ESMTP POP3服务器，为本地主机接收邮件并保存到指定的emails目录下。</p>\n<p>我们可以方便的通过twistd来搭建一个用于测试客户端功能的服务器，但它同样是可装载的、产品级的服务器实现。</p>\n<p>在部署应用程序的方式上，Twisted通过TAC文件、插件以及命令行工具twistd的部署方式已经获得了成功。但是有趣的是，对于大多数大型Twisted应用程序来说，部署它们仍然需要重写一些这类管理和监控组件；Twisted的架构并没有对系统管理员的需求呈现出太多的友好性。这也反映了一个事实，那就是对于系统管理员来说Twisted历来就没有太多架构可言，而这些系统管理员才是部署和维护应用程序的专家。在这方面，Twisted在未来架构设计的决策上需要更积极的征求这类专家级用户的反馈意见。</p>\n<p><a href=\"https://www.cnblogs.com/xianguang/p/7027661.html\">本文内容引用自此处</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Twisted\"><a href=\"#Twisted\" class=\"headerlink\" title=\"Twisted\"></a>Twisted</h2><h3 id=\"Python-Twisted介绍\"><a href=\"#Python-Twisted介绍\" class=\"headerlink\" title=\"Python Twisted介绍\"></a>Python Twisted介绍</h3><p>Twisted是用Python实现的基于事件驱动的网络引擎框架。Twisted诞生于2000年初，在当时的网络游戏开发者看来，无论他们使用哪种语言，手中都鲜有可兼顾扩展性及跨平台的网络库。Twisted的作者试图在当时现有的环境下开发游戏，这一步走的非常艰难，他们迫切地需要一个可扩展性高、基于事件驱动、跨平台的网络开发框架，为此他们决定自己实现一个，并从那些之前的游戏和网络应用程序的开发者中学习，汲取他们的经验教训。</p>\n<p>Twisted支持许多常见的传输及应用层协议，包括TCP、UDP、SSL/TLS、HTTP、IMAP、SSH、IRC以及FTP。就像python一样，Twisted也具有“内置电池”（batteries-included）的特点。Twisted对于其支持的所有协议都带有客户端和服务器实现，同时附带有基于命令行的工具，使得配置和部署产品级的Twisted应用变得非常方便。</p>\n<h3 id=\"为什么需要Twisted\"><a href=\"#为什么需要Twisted\" class=\"headerlink\" title=\"为什么需要Twisted\"></a>为什么需要Twisted</h3><p>2000年时，Twisted的作者Glyph正在开发一个名为Twisted Reality的基于文本方式的多人在线游戏。这个游戏采用Java开发，里面尽是一堆线程——每个连接就有3个线程处理。处理输入的线程会在读操作上阻塞，处理输出的线程将在一些写操作上阻塞，还有一个“逻辑”线程将在等待定时器超时或者事件入队列时休眠。随着玩家们在虚拟世界中移动并交互时，线程出现死锁，缓存被污染，程序中的加锁逻辑几乎从来就没对过——采用多线程使得整个软件变得复杂、漏洞百出而且极难扩展。</p>\n<p>为了寻求其他的解决方案，作者发现了Python，特别是Python中用于对流式对象比如socket和pipe进行多路I/O复用的select模块（UNIX规范第3版（SUSv3）描述了select）。那时，Java并没有提供操作系统的select接口或者任何其他的异步I/O API（针对非阻塞式I/O的包java.nio已经在J2SE 1.4中加入了，2002年发布）。通过用Python中的select模块快速搭建起游戏的原型，这迅速降低了程序的复杂度，并且比多线程版本要更加可靠。</p>\n<p>Glyph迅速转向了Python、select以及基于事件驱动的编程。他使用Python的select模块为游戏编写了客户端和服务器。但他想要的还不止于此。从根本上说，他希望能将网络行为转变为对游戏中的对象的方法调用。如果你能在游戏中收取邮件会怎样，就像Nethack mailer这种守护进程一样？如果游戏中的每位玩家都拥有一个主页呢？Glyph发现他需要优秀的IMAP以及HTTP客户端和服务器的Python实现，而这些都要采用select。</p>\n<p>他首先转向了Medusa，这是一个在90年代中期开发的平台，在这里可以采用Python中的asyncore模块来编写网络服务。asyncore是一个异步化处理socket的模块，在操作系统的select API之上构建了一个调度器和回调接口。</p>\n<p>这对于Glyph来说是个激动人心的发现，但Medusa有两个缺点：</p>\n<ol>\n<li>这个项目到2001年就不再维护了，那正是glyph开发Twisted Reality的时候。</li>\n<li>asyncore只是对socket的一个薄封装层，应用程序的编写者仍然需要直接操作socket。这意味着程序可移植性的担子仍然落在程序员自己身上。此外，那时asyncore对Windows的支持还有问题，Glyph希望能在Windows上运行一个带有图形用户界面的客户端。<br>Glyph需要自己实现一个网络引擎平台，而且他意识到Twisted Reality已经打开了问题的大门，这和他的游戏一样有趣。</li>\n</ol>\n<p>随着时间的推移，Twisted Reality这个游戏就演化成了Twisted网络引擎平台。它可以做到当时Python中已有的网络平台所无法做到的事情：</p>\n<ul>\n<li>使用基于事件驱动的编程模型，而不是多线程模型。</li>\n<li>跨平台：为主流操作系统平台暴露出的事件通知系统提供统一的接口。</li>\n<li>“内置电池”的能力：提供流行的应用层协议实现，因此Twisted马上就可为开发人员所用。</li>\n<li>符合RFC规范，已经通过健壮的测试套件证明了其一致性。</li>\n<li>能很容易的配合多个网络协议一起使用。</li>\n<li>可扩展。</li>\n</ul>\n<h3 id=\"Twisted架构概览\"><a href=\"#Twisted架构概览\" class=\"headerlink\" title=\"Twisted架构概览\"></a>Twisted架构概览</h3><p>Twisted是一个事件驱动型的网络引擎。由于事件驱动编程模型在Twisted的设计哲学中占有重要的地位，因此这里有必要花点时间来回顾一下究竟事件驱动意味着什么。</p>\n<p>事件驱动编程是一种编程范式，这里程序的执行流由外部事件来决定。它的特点是包含一个事件循环，当外部事件发生时使用回调机制来触发相应的处理。另外两种常见的编程范式是（单线程）同步以及多线程编程。</p>\n<p>在单线程同步模型中，任务按照顺序执行。如果某个任务因为I/O而阻塞，其他所有的任务都必须等待，直到它完成之后它们才能依次执行。这种明确的执行顺序和串行化处理的行为是很容易推断得出的。如果任务之间并没有互相依赖的关系，但仍然需要互相等待的话这就使得程序不必要的降低了运行速度。</p>\n<p>在多线程版本中，这3个任务分别在独立的线程中执行。这些线程由操作系统来管理，在多处理器系统上可以并行处理，或者在单处理器系统上交错执行。这使得当某个线程阻塞在某个资源的同时其他线程得以继续执行。与完成类似功能的同步程序相比，这种方式更有效率，但程序员必须写代码来保护共享资源，防止其被多个线程同时访问。多线程程序更加难以推断，因为这类程序不得不通过线程同步机制如锁、可重入函数、线程局部存储或者其他机制来处理线程安全问题，如果实现不当就会导致出现微妙且令人痛不欲生的bug。</p>\n<p>在事件驱动版本的程序中，3个任务<strong>交错执行</strong>，但仍然在一个单独的线程控制中。当处理I/O或者其他昂贵的操作时，注册一个回调到事件循环中，然后当I/O操作完成时继续执行。回调描述了该如何处理某个事件。事件循环轮询所有的事件，当事件到来时将它们分配给等待处理事件的回调函数。这种方式让程序尽可能的得以执行而不需要用到额外的线程。事件驱动型程序比多线程程序更容易推断出行为，因为程序员不需要关心线程安全问题。</p>\n<p>当我们面对如下的环境时，事件驱动模型通常是一个好的选择：</p>\n<p>程序中有许多任务，而且…</p>\n<ol>\n<li>任务之间高度独立（因此它们不需要互相通信，或者等待彼此）而且…</li>\n<li>在等待事件到来时，某些任务会阻塞。</li>\n<li>当应用程序需要在任务间共享可变的数据时，这也是一个不错的选择，因为这里不需要采用同步处理。</li>\n</ol>\n<p>网络应用程序通常都有上述这些特点，这使得它们能够很好的契合事件驱动编程模型。</p>\n<h6 id=\"重用已有的应用\"><a href=\"#重用已有的应用\" class=\"headerlink\" title=\"重用已有的应用\"></a><strong>重用已有的应用</strong></h6><p>在Twisted创建之前就已经有了许多针对多种流行的网络协议的客户端和服务器实现了。为什么Glyph不直接用Apache、IRCd、BIND、OpenSSH或者任何其他已有的应用，而要为Twisted从头开始重新实现各个协议的客户端和服务器呢？</p>\n<p>问题在于所有这些已有的实现都存在有从头写起的网络层代码，通常都是C代码。而应用层代码直接同网络层耦合在一起，这使得它们非常难以以库的形式来复用。当要一起使用这些组件时，如果希望在多个协议中暴露相同的数据，则它们必须以黑盒的形式来看待，这使得开发者根本没机会重用代码。此外，服务器和客户端的实现通常是分离的，彼此之间不共享代码。要扩展这些应用，维护跨平台的客户端-服务器兼容性的难度本不至于这么大。</p>\n<p>Twisted中的客户端和服务器是用Python开发的，采用了一致性的接口。这使得开发新的客户端和服务器变得很容易实现，可以在客户端和服务器之间共享代码，在协议之间共享应用逻辑，以及对某个实现的代码做测试。</p>\n<h6 id=\"React模式\"><a href=\"#React模式\" class=\"headerlink\" title=\"React模式\"></a><strong>React模式</strong></h6><p>Twisted实现了设计模式中的反应堆（reactor）模式，这种模式在单线程环境中调度多个事件源产生的事件到它们各自的事件处理例程中去。</p>\n<p>Twisted的核心就是reactor事件循环。Reactor可以感知网络、文件系统以及定时器事件。它等待然后处理这些事件，从特定于平台的行为中抽象出来，并提供统一的接口，使得在网络协议栈的任何位置对事件做出响应都变得简单。</p>\n<p>基本上reactor完成的任务就是：</p>\n<pre><code class=\"python\">while True:\n    timeout = time_until_next_timed_event()\n    events = wait_for_events(timeout)\n    events += timed_events_until(now())\n    for event in events:\n        event.process()</code></pre>\n<p>Twisted目前在所有平台上的默认reactor都是基于poll API的（UNIX规范第3版（SUSv3）中描述）。此外，Twisted还支持一些特定于平台的高容量多路复用API。这些reactor包括基于FreeBSD中kqueue机制的KQueue reactor，支持epoll接口的系统（目前是Linux 2.6）中的epoll reactor，以及基于Windows下的输入输出完成端口的IOCP reactor。</p>\n<p>在实现轮询的相关细节中，Twisted需要考虑的包括：</p>\n<ul>\n<li>网络和文件系统的限制</li>\n<li>缓冲行为</li>\n<li>如何检测连接丢失</li>\n<li>出现错误时的返回值</li>\n</ul>\n<p>Twisted的reactor实现同时也考虑了正确使用底层的非阻塞式API，并正确处理各种边界情况。由于Python中没有暴露出IOCP API，因此Twisted需要维护自己的实现。</p>\n<h6 id=\"管理回调链\"><a href=\"#管理回调链\" class=\"headerlink\" title=\"管理回调链\"></a><strong>管理回调链</strong></h6><p>回调是事件驱动编程模型中的基础，也是reactor通知应用程序事件已经处理完成的方式。随着程序规模不断扩大，基于事件驱动的程序需要同时处理事件处理成功和出错的情况，这使得程序变得越来越复杂。若没有注册一个合适的回调，程序就会阻塞，因为这个事件处理的过程绝不会发生。出现错误时需要通过应用程序的不同层次从网络栈向上传递回调链。</p>\n<p>下面是两段Python伪码，分别是同步和异步模式下获取URL的玩具代码。让我们相互比较一下这两个版本，看看基于事件驱动的程序有什么缺陷：</p>\n<p>以同步的方式获取URL：</p>\n<pre><code class=\"python\">import getPage\n\ndef processPage(page):\n    print page\n\ndef logError(error):\n    print error\n\ndef finishProcessing(value):\n    print &quot;Shutting down...&quot;\n    exit(0)\n\nurl = &quot;http://google.com&quot;\ntry:\n    page = getPage(url)\n    processPage(page)\nexcept Error, e:\n    logError(error)\nfinally:\n    finishProcessing()</code></pre>\n<p>以异步的方式获取URL：</p>\n<pre><code class=\"python\">from twisted.internet import reactor\nimport getPage\n\ndef processPage(page):\n    print page\n    finishProcessing()\n\ndef logError(error):\n    print error\n    finishProcessing()\n\ndef finishProcessing(value):\n    print &quot;Shutting down...&quot;\n    reactor.stop()\n\nurl = &quot;http://google.com&quot;\n# getPage takes: url, \n# success callback, error callback\ngetPage(url, processPage, logError)\n\nreactor.run()</code></pre>\n<p>在异步版的URL获取器中，reactor.run()启动reactor事件循环。在同步和异步版程序中，我们假定getPage函数处理获取页面的工作。如果获取成功就调用processPage，如果尝试获取页面时出现了Exception（异常），logError就得到调用。无论哪种情况，最后都要调用finishProcessing。</p>\n<p>异步版中的logError回调正对应于同步版中的try/except块。对processPage的回调对应于else块，无条件回调的finishProcessing就对应于finally块。</p>\n<p>在同步版中，代码结构直接显示出有一个try/except块，logError和processPage这两者间只会取其一调用一次，而finishProcessing总是会被调用一次。在异步版中需要由程序员自己负责正确调用成功和失败情况下的回调链。如果由于编程错误，在processPage或者logError的回调链之后没有调用finishProcessing，reactor事件循环将永远不会停止，程序就会卡住。</p>\n<p>这个玩具式的例子告诉我们在开发Twisted的头几年里这种复杂性令程序员感到非常沮丧。而Twisted应对这种复杂性的方式是新增一个称为Deferred（延迟）的对象。</p>\n<h6 id=\"Deferreds\"><a href=\"#Deferreds\" class=\"headerlink\" title=\"Deferreds\"></a>Deferreds</h6><p>Deferred对象以抽象化的方式表达了一种思想，即结果还尚不存在。它同样能够帮助管理产生这个结果所需要的回调链。当从函数中返回时，Deferred对象承诺在某个时刻函数将产生一个结果。返回的Deferred对象中包含所有注册到事件上的回调引用，因此在函数间只需要传递这一个对象即可，跟踪这个对象比单独管理所有的回调要简单的多。</p>\n<p>Deferred对象包含一对回调链，一个是针对操作成功的回调，一个是针对操作失败的回调。初始状态下Deferred对象的两条链都为空。在事件处理的过程中，每个阶段都为其添加处理成功的回调和处理失败的回调。当一个异步结果到来时，Deferred对象就被“激活”，那么处理成功的回调和处理失败的回调就可以以合适的方式按照它们添加进来的顺序依次得到调用。</p>\n<p>异步版URL获取器采用Deferred对象后的代码如下：</p>\n<pre><code class=\"python\">from twisted.internet import reactor\nimport getPage\n\ndef processPage(page):\n    print page\n\ndef logError(error):\n    print error\n\ndef finishProcessing(value):\n    print &quot;Shutting down...&quot;\n    reactor.stop()\n\nurl = &quot;http://google.com&quot;\ndeferred = getPage(url) # getPage returns a Deferred\ndeferred.addCallbacks(success, failure)\ndeferred.addBoth(stop)\n\nreactor.run()</code></pre>\n<p>在这个版本中调用的事件处理函数与之前相同，但它们都注册到了一个单独的Deferred对象上，而不是分散在代码各处再以参数形式传递给getPage。</p>\n<p>Deferred对象创建时包含两个添加回调的阶段。第一阶段，addCallbacks将 processPage和logError添加到它们各自归属的回调链中。然后addBoth再将finishProcessing同时添加到这两个回调链上。用图解的方式来看，回调链应该如图所示：<br><img src=\"/img/1570783134086.png\" alt=\"Deferred 流程示例\"></p>\n<p>Deferred对象只能被激活一次，如果试图重复激活将引发一个异常。这使得Deferred对象的语义相当接近于同步版中的try/except块。从而让异步事件的处理能更容易推断，避免由于针对单个事件的回调调用多了一个或少了一个而产生微妙的bug。</p>\n<p>理解Deferred对象对于理解Twisted程序的执行流是非常重要的。然而当使用Twisted为我们提供的针对网络协议的高层抽象时，通常情况下我们完全不需要直接使用Deferred对象。</p>\n<p>Deferred对象所包含的抽象概念是非常强大的，这种思想已经被许多其他的事件驱动平台所借用，包括jQuery、Dojo和Mochikit。</p>\n<h6 id=\"Transports\"><a href=\"#Transports\" class=\"headerlink\" title=\"Transports\"></a>Transports</h6><p>Transports代表网络中两个通信结点之间的连接。Transports负责描述连接的细节，比如连接是面向流式的还是面向数据报的，流控以及可靠性。TCP、UDP和Unix套接字可作为transports的例子。它们被设计为“满足最小功能单元，同时具有最大程度的可复用性”，而且从协议实现中分离出来，这让许多协议可以采用相同类型的传输。Transports实现了ITransports接口，它包含如下的方法：</p>\n<blockquote>\n<p>write                   以非阻塞的方式按顺序依次将数据写到物理连接上<br>writeSequence           将一个字符串列表写到物理连接上<br>loseConnection          将所有挂起的数据写入，然后关闭连接<br>getPeer                 取得连接中对端的地址信息<br>getHost                 取得连接中本端的地址信息</p>\n</blockquote>\n<p>将transports从协议中分离出来也使得对这两个层次的测试变得更加简单。可以通过简单地写入一个字符串来模拟传输，用这种方式来检查。</p>\n<h6 id=\"Protocols\"><a href=\"#Protocols\" class=\"headerlink\" title=\"Protocols\"></a>Protocols</h6><p>Protocols描述了如何以异步的方式处理网络中的事件。HTTP、DNS以及IMAP是应用层协议中的例子。Protocols实现了IProtocol接口，它包含如下的方法：</p>\n<blockquote>\n<p>makeConnection               在transport对象和服务器之间建立一条连接<br>connectionMade               连接建立起来后调用<br>dataReceived                 接收数据时调用<br>connectionLost               关闭连接时调用</p>\n</blockquote>\n<p>我们最好以一个例子来说明reactor、protocols以及transports这三者之间的关系。以下是完整的echo服务器和客户端的实现，首先来看看服务器部分：</p>\n<pre><code class=\"python\">from twisted.internet import protocol, reactor\n\nclass Echo(protocol.Protocol):\n    def dataReceived(self, data):\n        # As soon as any data is received, write it back\n        self.transport.write(data)\n\nclass EchoFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return Echo()\n\nreactor.listenTCP(8000, EchoFactory())\nreactor.run()</code></pre>\n<p>接着是客户端部分：</p>\n<pre><code class=\"python\">from twisted.internet import reactor, protocol\n\nclass EchoClient(protocol.Protocol):\n    def connectionMade(self):\n        self.transport.write(&quot;hello, world!&quot;)\n\ndef dataReceived(self, data):\n    print &quot;Server said:&quot;, data\n        self.transport.loseConnection()\n\ndef connectionLost(self, reason):\n    print &quot;connection lost&quot;\n\nclass EchoFactory(protocol.ClientFactory):\n    def buildProtocol(self, addr):\n        return EchoClient()\n\ndef clientConnectionFailed(self, connector, reason):\n    print &quot;Connection failed - goodbye!&quot;\n        reactor.stop()\n\ndef clientConnectionLost(self, connector, reason):\n    print &quot;Connection lost - goodbye!&quot;\n        reactor.stop()\n\nreactor.connectTCP(&quot;localhost&quot;, 8000, EchoFactory())\nreactor.run()</code></pre>\n<p>运行服务器端脚本将启动一个TCP服务器，监听端口8000上的连接。服务器采用的是Echo协议，数据经TCP transport对象写出。运行客户端脚本将对服务器发起一个TCP连接，回显服务器端的回应然后终止连接并停止reactor事件循环。这里的Factory用来对连接的双方生成protocol对象实例。两端的通信是异步的，connectTCP负责注册回调函数到reactor事件循环中，当socket上有数据可读时通知回调处理。</p>\n<h6 id=\"Applications\"><a href=\"#Applications\" class=\"headerlink\" title=\"Applications\"></a>Applications</h6><p>Twisted是用来创建具有可扩展性、跨平台的网络服务器和客户端的引擎。在生产环境中，以标准化的方式简化部署这些应用的过程对于Twisted这种被广泛采用的平台来说是非常重要的一环。为此，Twisted开发了一套应用程序基础组件，采用可重用、可配置的方式来部署Twisted应用。这种方式使程序员避免堆砌千篇一律的代码来将应用程序同已有的工具整合在一起，这包括精灵化进程（daemonization）、日志处理、使用自定义的reactor循环、对代码做性能剖析等。</p>\n<p>应用程序基础组件包含4个主要部分：服务（Service）、应用（Application）、配置管理（通过TAC文件和插件）以及twistd命令行程序。为了说明这个基础组件，我们将上一节的Echo服务器转变成一个应用。</p>\n<ul>\n<li><strong>Service</strong><br>Service就是IService接口下实现的可以启动和停止的组件。Twisted自带有TCP、FTP、HTTP、SSH、DNS等服务以及其他协议的实现。其中许多Service都可以注册到单独的应用中。IService接口的核心是：<blockquote>\n<p>startService    启动服务。可能包含加载配置数据，设定数据库连接或者监听某个端口<br>stopService     关闭服务。可能包含将状态保存到磁盘，关闭数据库连接或者停止监听端口</p>\n</blockquote>\n</li>\n</ul>\n<p>我们的Echo服务使用TCP协议，因此我们可以使用Twisted中IService接口下默认的TCPServer实现。</p>\n<ul>\n<li><strong>Application</strong><br>Application是处于最顶层的Service，代表了整个Twisted应用程序。Service需要将其自身同Application注册，然后就可以用下面我们将介绍的部署工具twistd搜索并运行应用程序。我们将创建一个可以同Echo Service注册的Echo应用。</li>\n<li><strong>TAC文件</strong><br>当在一个普通的Python文件中管理Twisted应用程序时，需要由开发者负责编写启动和停止reactor事件循环以及配置应用程序的代码。在Twisted的基础组件中，协议的实现都是在一个模块中完成的，需要使用到这些协议的Service可以注册到一个Twisted应用程序配置文件中（TAC文件）去，这样reactor事件循环和程序配置就可以由外部组件来进行管理。</li>\n</ul>\n<p>要将我们的Echo服务器转变成一个Echo应用，我们可以按照以下几个简单的步骤来完成：</p>\n<ol>\n<li><p>将Echo服务器的Protocol部分移到它们自己所归属的模块中去。</p>\n</li>\n<li><p>在TAC文件中：</p>\n<ol>\n<li>创建一个Echo应用。</li>\n<li>创建一个TCPServer的Service实例，它将使用我们的EchoFactory，然后同前面创建的应用完成注册。</li>\n</ol>\n</li>\n</ol>\n<p>管理reactor事件循环的代码将由twistd来负责，我们下面会对此进行讨论。这样，应用程序的代码就变成这样了：<br>echo.py文件：</p>\n<pre><code class=\"python\">from twisted.internet import protocol, reactor\n\nclass Echo(protocol.Protocol):\n    def dataReceived(self, data):\n        self.transport.write(data)\n\nclass EchoFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return Echo()</code></pre>\n<ul>\n<li><strong>twistd</strong><br>twistd（读作“twist-dee”）是一个跨平台的用来部署Twisted应用程序的工具。它执行TAC文件并负责处理启动和停止应用程序。作为Twisted在网络编程中具有“内置电池”能力的一部分，twistd自带有一些非常有用的配置标志，包括将应用程序转变为守护进程、定义日志文件的路径、设定特权级别、在chroot下运行、使用非默认的reactor，甚至是在profiler下运行应用程序。</li>\n</ul>\n<p>我们可以像这样运行这个Echo服务应用：</p>\n<pre><code class=\"python\">$ twistd –y echo_server.tac</code></pre>\n<p>在这个简单的例子里，twistd将这个应用程序作为守护进程来启动，日志记录在twistd.log文件中。启动和停止应用后，日志文件内容如下：</p>\n<pre><code class=\"python\">2011-11-19 22:23:07-0500 [-] Log opened.\n2011-11-19 22:23:07-0500 [-] twistd 11.0.0 (/usr/bin/python 2.7.1) starting up.\n2011-11-19 22:23:07-0500 [-] reactor class: twisted.internet.selectreactor.SelectReactor.\n2011-11-19 22:23:07-0500 [-] echo.EchoFactory starting on 8000\n2011-11-19 22:23:07-0500 [-] Starting factory &lt;echo.EchoFactory instance at 0x12d8670&gt;\n2011-11-19 22:23:20-0500 [-] Received SIGTERM, shutting down.\n2011-11-19 22:23:20-0500 [-] (TCP Port 8000 Closed)\n2011-11-19 22:23:20-0500 [-] Stopping factory &lt;echo.EchoFactory instance at 0x12d8670&gt;\n2011-11-19 22:23:20-0500 [-] Main loop terminated.\n2011-11-19 22:23:20-0500 [-] Server Shut Down.</code></pre>\n<p>通过使用Twisted框架中的基础组件来运行服务，这么做使得开发人员能够不用再编写类似守护进程和记录日志这样的冗余代码了。这同样也为部署应用程序建立了一个标准的命令行接口。</p>\n<h6 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h6><p>对于运行Twisted应用程序的方法，除了基于TAC文件外还有一种可选的方法，这就是插件系统。TAC系统可以很方便的将Twisted预定义的服务同应用程序配置文件注册，而插件系统能够方便的将用户自定义的服务注册为twistd工具的子命令，然后扩展应用程序的命令行接口。</p>\n<p>在使用插件系统时：</p>\n<ol>\n<li><p>由于只有plugin API需要保持稳定，这使得第三方开发者能很容易地扩展软件。</p>\n</li>\n<li><p>插件发现能力已经集成到系统中了。插件可以在程序首次运行时加载并保存，每次程序启动时会重新触发插件发现过程，或者也可以在程序运行期间反复轮询新插件，这使得在程序已经启动后我们还可以判断是否有新的插件安装上了。</p>\n</li>\n</ol>\n<p>当使用Twisted插件系统来扩展软件时，我们要做的就是创建IPlugin接口下实现的对象并将它们放到一个特定的位置中，这里插件系统知道该如何去找到它们。</p>\n<p>我们已经将Echo服务转换为一个Twisted应用程序了，而将其转换为一个Twisted插件也是非常简单直接的。在我们之前的Echo模块中，除了包含有Echo协议和EchoFactory的定义之外，现在我们还要添加一个名为twistd的目录，其中还包含着一个名为plugins的子目录，这里正是我们需要定义echo插件的地方。通过这个插件，我们可以启动一个echo服务，并将需要使用的端口号作为参数指定给twistd工具。</p>\n<pre><code class=\"python\">from zope.interface import implements\n\nfrom twisted.python import usage\nfrom twisted.plugin import IPlugin\nfrom twisted.application.service import IServiceMaker\nfrom twisted.application import internet\n\nfrom echo import EchoFactory\n\nclass Options(usage.Options):\n    optParameters = [[&quot;port&quot;, &quot;p&quot;, 8000, &quot;The port number to listen on.&quot;]]\n\nclass EchoServiceMaker(object):\n    implements(IServiceMaker, IPlugin)\n    tapname = &quot;echo&quot;\n    description = &quot;A TCP-based echo server.&quot;\n    options = Options\n\ndef makeService(self, options):\n    &quot;&quot;&quot;\n    Construct a TCPServer from a factory defined in myproject.\n    &quot;&quot;&quot;\n    return internet.TCPServer(int(options[&quot;port&quot;]), EchoFactory())\n\nserviceMaker = EchoServiceMaker()</code></pre>\n<p>现在，我们的Echo服务器将作为一个服务选项出现在twistd –help的输出中。运行twistd echo –port=1235将在端口1235上启动一个Echo服务器。</p>\n<p>Twisted还带有一个可拔插的针对服务器端认证的模块twisted.cred，插件系统常见的用途就是为应用程序添加一个认证模式。我们可以使用twisted.cred中现成的AuthOptionMixin类来添加针对各种认证的命令行支持，或者是添加新的认证类型。比如，我们可以使用插件系统来添加基于本地Unix密码数据库或者是基于LDAP服务器的认证方式。</p>\n<p>twistd工具中附带有许多Twisted所支持的协议插件，只用一条单独的命令就可以完成启动服务器的工作了。这里有一些通过twistd启动服务器的例子：</p>\n<pre><code class=\"python\">twistd web –port 8080 –path .</code></pre>\n<p>这条命令将在8080端口启动一个HTTP服务器，在当前目录中负责处理静态和动态页面请求。</p>\n<pre><code class=\"python\">twistd dns –p 5553 –hosts-file=hosts</code></pre>\n<p>这条命令在端口5553上启动一个DNS服务器，解析指定的文件hosts中的域名，这个文件的内容格式同/etc/hosts一样。</p>\n<pre><code class=\"python\">sudo twistd conch –p tcp:2222</code></pre>\n<p>这条命令在端口2222上启动一个SSH服务器。ssh的密钥必须独立设定。</p>\n<pre><code class=\"python\">twistd mail –E –H localhost –d localhost=emails</code></pre>\n<p>这条命令启动一个ESMTP POP3服务器，为本地主机接收邮件并保存到指定的emails目录下。</p>\n<p>我们可以方便的通过twistd来搭建一个用于测试客户端功能的服务器，但它同样是可装载的、产品级的服务器实现。</p>\n<p>在部署应用程序的方式上，Twisted通过TAC文件、插件以及命令行工具twistd的部署方式已经获得了成功。但是有趣的是，对于大多数大型Twisted应用程序来说，部署它们仍然需要重写一些这类管理和监控组件；Twisted的架构并没有对系统管理员的需求呈现出太多的友好性。这也反映了一个事实，那就是对于系统管理员来说Twisted历来就没有太多架构可言，而这些系统管理员才是部署和维护应用程序的专家。在这方面，Twisted在未来架构设计的决策上需要更积极的征求这类专家级用户的反馈意见。</p>\n<p><a href=\"https://www.cnblogs.com/xianguang/p/7027661.html\">本文内容引用自此处</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2020-09-08T03:23:20.716Z","updated":"2020-09-08T03:23:20.716Z","_id":"ckdpcluys002l8sr3tbb89lfv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"UI系统制作流程","_content":"\n\t\t\t* [一、准备UI预制](#一-准备ui预制)\n\t\t\t* [二、控制脚本](#二-控制脚本)\n\t\t\t* [三、UI系统的对象池](#三-ui系统的对象池)\n\t\t\t* [三、配入UI表](#三-配入ui表)\n\t\t\t* [四、窗口的显示或关闭](#四-窗口的显示或关闭)\n\n#### 一、准备UI预制\n先准备好效果图和资源图集\n* 1.新建空场景，在目录下建好资源图集\n* 2.找到 ***LoginUI.prefab*** ， 施入场景后，Unpack prefab completed完全解除关联\n* 3.清空根结点的Animator组件和Reference Collector组件，并改名， 以 #Name#UI 的方式\n* 4.清空Panel下所有内容，让结构保持为Bg, Panel两个一级子结点\n*  *5.复制Bg结点，放入美术做好的效果图\n* 5.根据UGUI规则完成预制制作\n* 6.根结点添加Reference Collector Group组件\n* 7.完成后交由特效师添加动画\n* 8.将资源放入Addressable Groups的UI组里，右键使用Simplify Addressable Name, 将名字简化\n\n#### 二、控制脚本\n1.创建： 在Hotfix 建立文件夹，名字以功能命名，建立Compoents文件夹，新建控制脚本，命名以   UI#Name#Window的方式，如LoginUI，脚本名应为UILoginWindow.cs\n2.类的规则以 UIClickWindow.cs为参考。\n3.必须有的构造，以指明加载需要的预制名\n```csharp\npublic UIClickWindow():base()\n{\n\tmPrefabName = #Name#;//TODO\n}\n```\n4.必须重写有如下函数：\n```csharp\n/// <summary>\n/// 界面资源加载完成， 一会用于获取各预制及组件，每次新建UI预制将调用\n/// </summary>\nprotected virtual void InitUI()\n\n/// <summary>\n/// 界面显示，一般处理每次显示需要即时更新的逻辑，每次setActive将调用\n/// </summary>\nprotected virtual void ResetUI()\n\n/// <summary>\n/// 界面关闭，隐藏时调用的，一般与ResetUI放置成对的逻辑\n/// </summary>\nprotected virtual void HideUI()\n\n/// <summary>\n/// 界面资源销毁，在预制将销毁时调用与InitUI成对。\n/// </summary>\nprotected virtual void UnInitUI()\n```\n\n5. 可选的函数\n```csharp\n/// <summary>\n/// 界面Update更新\n/// </summary>\npublic virtual void Update()\n```\n#### 三、UI系统的对象池\n1.命名池子模板对象的key于头部，如：\n```csharp\nprivate const string TaskItemTemplate = \"UICarnivalWindow_TaskItemTemplate\";\nprivate const string NormalCardItemTemplate = \"UICarnivalWindow_NormalCardItemTemplate\";\nprivate const string HighlightCardItemTemplate = \"UICarnivalWindow_HighlightCardItemTemplate\";\n```\n2.添加对象为模板，让底层创建一个以模板为基的池子\n```csharp\nAddTemplate(NormalCardItemTemplate, normalItemObj);\nAddTemplate(HighlightCardItemTemplate, highlightItemObj);\nAddTemplate(TaskItemTemplate, taskItemObj);\n```\n\n3.获取： 仅获取一个对象\n\n```csharp\nGetTemplateInstance(string name, Transform parent, bool isActive)\n```\n传入1.定义的模板名字，父对象，是否隐藏就决定获取出来后是否立即隐藏。\n\n4.定义对应模板对象的控制类\n* 必须继承UIBaseComponent类\n* 继承覆写函数：\n```csharp\n///初始化函数，每次设置预制时都将会自动调用一次\npublic virtual void InitObjs()\n\n//销毁时调用\npublic virtual void Dispose() \n```\n5.获取: 获取一个带对象控制器的类对象（将同时生成一个对象放在类的Root）\n\n```csharp\nGetTemplateComponent<T>(string name, Transform parent, bool isActive) where T : UIBaseComponent\n```\n传入1.定义的模板名字，父对象，是否隐藏就决定获取出来后是否立即隐藏。\n\n6.回收\n* 回收预制：`FreeTemplateInstance(NormalCardItemTemplate);`\n* 回收预制管理类，不会回收预制：`FreeTemplateComponent(NormalCardItemTemplate);`\n所以一般两个需要成对调用，如：\n```csharp\n FreeTemplateInstance(NormalCardItemTemplate);\nFreeTemplateComponent(NormalCardItemTemplate);\nFreeTemplateInstance(HighlightCardItemTemplate);\nFreeTemplateComponent(HighlightCardItemTemplate);\nFreeTemplateInstance(TaskItemTemplate);\nFreeTemplateComponent(TaskItemTemplate);\n```\n\n７.销毁池子\n* 使用UIBaseWindow自带函数销毁单个模板的池子\n```csharp\n/// 移除模板\nvoid RemoveTemplate(string name)\n```\nWindow在销毁时将调用DestroyAllTemplates() 先回收所有的预制，再清空池子。**因此一般不需要在逻辑里手动移除池子.**\n\n#### 三、配入UI表\n\n1.找到资源表 fgame_ui_config.elsx 按表内的说明配置UI的参数\n2.导表\n\n#### 四、窗口的显示或关闭\n\n* 使用UIManager提供的函数显示或关闭一个Window，如：\n\n```csharp\n//同步函数显示一个Window\nUIManager.Instance.ShowWindowSync(\"UIClickWindow\");\n//异步函数\nawait UIManager.Instance.ShowWindow(\"UIClickWindow\");\n\n//关闭窗口\nUIManager.Instance.CloseWindow(\"UIClickWindow\");\n\n```\n","source":"_posts/UI系统制作流程.md","raw":"---\ntitle: UI系统制作流程\ncategories:\n- 公司\ntags: \n---\n\n\t\t\t* [一、准备UI预制](#一-准备ui预制)\n\t\t\t* [二、控制脚本](#二-控制脚本)\n\t\t\t* [三、UI系统的对象池](#三-ui系统的对象池)\n\t\t\t* [三、配入UI表](#三-配入ui表)\n\t\t\t* [四、窗口的显示或关闭](#四-窗口的显示或关闭)\n\n#### 一、准备UI预制\n先准备好效果图和资源图集\n* 1.新建空场景，在目录下建好资源图集\n* 2.找到 ***LoginUI.prefab*** ， 施入场景后，Unpack prefab completed完全解除关联\n* 3.清空根结点的Animator组件和Reference Collector组件，并改名， 以 #Name#UI 的方式\n* 4.清空Panel下所有内容，让结构保持为Bg, Panel两个一级子结点\n*  *5.复制Bg结点，放入美术做好的效果图\n* 5.根据UGUI规则完成预制制作\n* 6.根结点添加Reference Collector Group组件\n* 7.完成后交由特效师添加动画\n* 8.将资源放入Addressable Groups的UI组里，右键使用Simplify Addressable Name, 将名字简化\n\n#### 二、控制脚本\n1.创建： 在Hotfix 建立文件夹，名字以功能命名，建立Compoents文件夹，新建控制脚本，命名以   UI#Name#Window的方式，如LoginUI，脚本名应为UILoginWindow.cs\n2.类的规则以 UIClickWindow.cs为参考。\n3.必须有的构造，以指明加载需要的预制名\n```csharp\npublic UIClickWindow():base()\n{\n\tmPrefabName = #Name#;//TODO\n}\n```\n4.必须重写有如下函数：\n```csharp\n/// <summary>\n/// 界面资源加载完成， 一会用于获取各预制及组件，每次新建UI预制将调用\n/// </summary>\nprotected virtual void InitUI()\n\n/// <summary>\n/// 界面显示，一般处理每次显示需要即时更新的逻辑，每次setActive将调用\n/// </summary>\nprotected virtual void ResetUI()\n\n/// <summary>\n/// 界面关闭，隐藏时调用的，一般与ResetUI放置成对的逻辑\n/// </summary>\nprotected virtual void HideUI()\n\n/// <summary>\n/// 界面资源销毁，在预制将销毁时调用与InitUI成对。\n/// </summary>\nprotected virtual void UnInitUI()\n```\n\n5. 可选的函数\n```csharp\n/// <summary>\n/// 界面Update更新\n/// </summary>\npublic virtual void Update()\n```\n#### 三、UI系统的对象池\n1.命名池子模板对象的key于头部，如：\n```csharp\nprivate const string TaskItemTemplate = \"UICarnivalWindow_TaskItemTemplate\";\nprivate const string NormalCardItemTemplate = \"UICarnivalWindow_NormalCardItemTemplate\";\nprivate const string HighlightCardItemTemplate = \"UICarnivalWindow_HighlightCardItemTemplate\";\n```\n2.添加对象为模板，让底层创建一个以模板为基的池子\n```csharp\nAddTemplate(NormalCardItemTemplate, normalItemObj);\nAddTemplate(HighlightCardItemTemplate, highlightItemObj);\nAddTemplate(TaskItemTemplate, taskItemObj);\n```\n\n3.获取： 仅获取一个对象\n\n```csharp\nGetTemplateInstance(string name, Transform parent, bool isActive)\n```\n传入1.定义的模板名字，父对象，是否隐藏就决定获取出来后是否立即隐藏。\n\n4.定义对应模板对象的控制类\n* 必须继承UIBaseComponent类\n* 继承覆写函数：\n```csharp\n///初始化函数，每次设置预制时都将会自动调用一次\npublic virtual void InitObjs()\n\n//销毁时调用\npublic virtual void Dispose() \n```\n5.获取: 获取一个带对象控制器的类对象（将同时生成一个对象放在类的Root）\n\n```csharp\nGetTemplateComponent<T>(string name, Transform parent, bool isActive) where T : UIBaseComponent\n```\n传入1.定义的模板名字，父对象，是否隐藏就决定获取出来后是否立即隐藏。\n\n6.回收\n* 回收预制：`FreeTemplateInstance(NormalCardItemTemplate);`\n* 回收预制管理类，不会回收预制：`FreeTemplateComponent(NormalCardItemTemplate);`\n所以一般两个需要成对调用，如：\n```csharp\n FreeTemplateInstance(NormalCardItemTemplate);\nFreeTemplateComponent(NormalCardItemTemplate);\nFreeTemplateInstance(HighlightCardItemTemplate);\nFreeTemplateComponent(HighlightCardItemTemplate);\nFreeTemplateInstance(TaskItemTemplate);\nFreeTemplateComponent(TaskItemTemplate);\n```\n\n７.销毁池子\n* 使用UIBaseWindow自带函数销毁单个模板的池子\n```csharp\n/// 移除模板\nvoid RemoveTemplate(string name)\n```\nWindow在销毁时将调用DestroyAllTemplates() 先回收所有的预制，再清空池子。**因此一般不需要在逻辑里手动移除池子.**\n\n#### 三、配入UI表\n\n1.找到资源表 fgame_ui_config.elsx 按表内的说明配置UI的参数\n2.导表\n\n#### 四、窗口的显示或关闭\n\n* 使用UIManager提供的函数显示或关闭一个Window，如：\n\n```csharp\n//同步函数显示一个Window\nUIManager.Instance.ShowWindowSync(\"UIClickWindow\");\n//异步函数\nawait UIManager.Instance.ShowWindow(\"UIClickWindow\");\n\n//关闭窗口\nUIManager.Instance.CloseWindow(\"UIClickWindow\");\n\n```\n","slug":"UI系统制作流程","published":1,"date":"2020-09-08T03:23:20.716Z","updated":"2020-09-08T03:23:20.716Z","_id":"ckdpcluyu002p8sr3y4kg81eo","comments":1,"layout":"post","photos":[],"link":"","content":"<pre><code>        * [一、准备UI预制](#一-准备ui预制)\n        * [二、控制脚本](#二-控制脚本)\n        * [三、UI系统的对象池](#三-ui系统的对象池)\n        * [三、配入UI表](#三-配入ui表)\n        * [四、窗口的显示或关闭](#四-窗口的显示或关闭)</code></pre><h4 id=\"一、准备UI预制\"><a href=\"#一、准备UI预制\" class=\"headerlink\" title=\"一、准备UI预制\"></a>一、准备UI预制</h4><p>先准备好效果图和资源图集</p>\n<ul>\n<li>1.新建空场景，在目录下建好资源图集</li>\n<li>2.找到 <strong><em>LoginUI.prefab</em></strong> ， 施入场景后，Unpack prefab completed完全解除关联</li>\n<li>3.清空根结点的Animator组件和Reference Collector组件，并改名， 以 #Name#UI 的方式</li>\n<li>4.清空Panel下所有内容，让结构保持为Bg, Panel两个一级子结点</li>\n<li>*5.复制Bg结点，放入美术做好的效果图</li>\n<li>5.根据UGUI规则完成预制制作</li>\n<li>6.根结点添加Reference Collector Group组件</li>\n<li>7.完成后交由特效师添加动画</li>\n<li>8.将资源放入Addressable Groups的UI组里，右键使用Simplify Addressable Name, 将名字简化</li>\n</ul>\n<h4 id=\"二、控制脚本\"><a href=\"#二、控制脚本\" class=\"headerlink\" title=\"二、控制脚本\"></a>二、控制脚本</h4><p>1.创建： 在Hotfix 建立文件夹，名字以功能命名，建立Compoents文件夹，新建控制脚本，命名以   UI#Name#Window的方式，如LoginUI，脚本名应为UILoginWindow.cs<br>2.类的规则以 UIClickWindow.cs为参考。<br>3.必须有的构造，以指明加载需要的预制名</p>\n<pre><code class=\"csharp\">public UIClickWindow():base()\n{\n    mPrefabName = #Name#;//TODO\n}</code></pre>\n<p>4.必须重写有如下函数：</p>\n<pre><code class=\"csharp\">/// &lt;summary&gt;\n/// 界面资源加载完成， 一会用于获取各预制及组件，每次新建UI预制将调用\n/// &lt;/summary&gt;\nprotected virtual void InitUI()\n\n/// &lt;summary&gt;\n/// 界面显示，一般处理每次显示需要即时更新的逻辑，每次setActive将调用\n/// &lt;/summary&gt;\nprotected virtual void ResetUI()\n\n/// &lt;summary&gt;\n/// 界面关闭，隐藏时调用的，一般与ResetUI放置成对的逻辑\n/// &lt;/summary&gt;\nprotected virtual void HideUI()\n\n/// &lt;summary&gt;\n/// 界面资源销毁，在预制将销毁时调用与InitUI成对。\n/// &lt;/summary&gt;\nprotected virtual void UnInitUI()</code></pre>\n<ol start=\"5\">\n<li>可选的函数<pre><code class=\"csharp\">/// &lt;summary&gt;\n/// 界面Update更新\n/// &lt;/summary&gt;\npublic virtual void Update()</code></pre>\n<h4 id=\"三、UI系统的对象池\"><a href=\"#三、UI系统的对象池\" class=\"headerlink\" title=\"三、UI系统的对象池\"></a>三、UI系统的对象池</h4></li>\n<li>命名池子模板对象的key于头部，如：<pre><code class=\"csharp\">private const string TaskItemTemplate = &quot;UICarnivalWindow_TaskItemTemplate&quot;;\nprivate const string NormalCardItemTemplate = &quot;UICarnivalWindow_NormalCardItemTemplate&quot;;\nprivate const string HighlightCardItemTemplate = &quot;UICarnivalWindow_HighlightCardItemTemplate&quot;;</code></pre>\n</li>\n<li>添加对象为模板，让底层创建一个以模板为基的池子<pre><code class=\"csharp\">AddTemplate(NormalCardItemTemplate, normalItemObj);\nAddTemplate(HighlightCardItemTemplate, highlightItemObj);\nAddTemplate(TaskItemTemplate, taskItemObj);</code></pre>\n</li>\n</ol>\n<p>3.获取： 仅获取一个对象</p>\n<pre><code class=\"csharp\">GetTemplateInstance(string name, Transform parent, bool isActive)</code></pre>\n<p>传入1.定义的模板名字，父对象，是否隐藏就决定获取出来后是否立即隐藏。</p>\n<p>4.定义对应模板对象的控制类</p>\n<ul>\n<li>必须继承UIBaseComponent类</li>\n<li>继承覆写函数：<pre><code class=\"csharp\">///初始化函数，每次设置预制时都将会自动调用一次\npublic virtual void InitObjs()\n</code></pre>\n</li>\n</ul>\n<p>//销毁时调用<br>public virtual void Dispose() </p>\n<pre><code>5.获取: 获取一个带对象控制器的类对象（将同时生成一个对象放在类的Root）\n\n```csharp\nGetTemplateComponent&lt;T&gt;(string name, Transform parent, bool isActive) where T : UIBaseComponent</code></pre><p>传入1.定义的模板名字，父对象，是否隐藏就决定获取出来后是否立即隐藏。</p>\n<p>6.回收</p>\n<ul>\n<li>回收预制：<code>FreeTemplateInstance(NormalCardItemTemplate);</code></li>\n<li>回收预制管理类，不会回收预制：<code>FreeTemplateComponent(NormalCardItemTemplate);</code><br>所以一般两个需要成对调用，如：<pre><code class=\"csharp\">FreeTemplateInstance(NormalCardItemTemplate);\nFreeTemplateComponent(NormalCardItemTemplate);\nFreeTemplateInstance(HighlightCardItemTemplate);\nFreeTemplateComponent(HighlightCardItemTemplate);\nFreeTemplateInstance(TaskItemTemplate);\nFreeTemplateComponent(TaskItemTemplate);</code></pre>\n</li>\n</ul>\n<p>７.销毁池子</p>\n<ul>\n<li>使用UIBaseWindow自带函数销毁单个模板的池子<pre><code class=\"csharp\">/// 移除模板\nvoid RemoveTemplate(string name)</code></pre>\nWindow在销毁时将调用DestroyAllTemplates() 先回收所有的预制，再清空池子。<strong>因此一般不需要在逻辑里手动移除池子.</strong></li>\n</ul>\n<h4 id=\"三、配入UI表\"><a href=\"#三、配入UI表\" class=\"headerlink\" title=\"三、配入UI表\"></a>三、配入UI表</h4><p>1.找到资源表 fgame_ui_config.elsx 按表内的说明配置UI的参数<br>2.导表</p>\n<h4 id=\"四、窗口的显示或关闭\"><a href=\"#四、窗口的显示或关闭\" class=\"headerlink\" title=\"四、窗口的显示或关闭\"></a>四、窗口的显示或关闭</h4><ul>\n<li>使用UIManager提供的函数显示或关闭一个Window，如：</li>\n</ul>\n<pre><code class=\"csharp\">//同步函数显示一个Window\nUIManager.Instance.ShowWindowSync(&quot;UIClickWindow&quot;);\n//异步函数\nawait UIManager.Instance.ShowWindow(&quot;UIClickWindow&quot;);\n\n//关闭窗口\nUIManager.Instance.CloseWindow(&quot;UIClickWindow&quot;);\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>        * [一、准备UI预制](#一-准备ui预制)\n        * [二、控制脚本](#二-控制脚本)\n        * [三、UI系统的对象池](#三-ui系统的对象池)\n        * [三、配入UI表](#三-配入ui表)\n        * [四、窗口的显示或关闭](#四-窗口的显示或关闭)</code></pre><h4 id=\"一、准备UI预制\"><a href=\"#一、准备UI预制\" class=\"headerlink\" title=\"一、准备UI预制\"></a>一、准备UI预制</h4><p>先准备好效果图和资源图集</p>\n<ul>\n<li>1.新建空场景，在目录下建好资源图集</li>\n<li>2.找到 <strong><em>LoginUI.prefab</em></strong> ， 施入场景后，Unpack prefab completed完全解除关联</li>\n<li>3.清空根结点的Animator组件和Reference Collector组件，并改名， 以 #Name#UI 的方式</li>\n<li>4.清空Panel下所有内容，让结构保持为Bg, Panel两个一级子结点</li>\n<li>*5.复制Bg结点，放入美术做好的效果图</li>\n<li>5.根据UGUI规则完成预制制作</li>\n<li>6.根结点添加Reference Collector Group组件</li>\n<li>7.完成后交由特效师添加动画</li>\n<li>8.将资源放入Addressable Groups的UI组里，右键使用Simplify Addressable Name, 将名字简化</li>\n</ul>\n<h4 id=\"二、控制脚本\"><a href=\"#二、控制脚本\" class=\"headerlink\" title=\"二、控制脚本\"></a>二、控制脚本</h4><p>1.创建： 在Hotfix 建立文件夹，名字以功能命名，建立Compoents文件夹，新建控制脚本，命名以   UI#Name#Window的方式，如LoginUI，脚本名应为UILoginWindow.cs<br>2.类的规则以 UIClickWindow.cs为参考。<br>3.必须有的构造，以指明加载需要的预制名</p>\n<pre><code class=\"csharp\">public UIClickWindow():base()\n{\n    mPrefabName = #Name#;//TODO\n}</code></pre>\n<p>4.必须重写有如下函数：</p>\n<pre><code class=\"csharp\">/// &lt;summary&gt;\n/// 界面资源加载完成， 一会用于获取各预制及组件，每次新建UI预制将调用\n/// &lt;/summary&gt;\nprotected virtual void InitUI()\n\n/// &lt;summary&gt;\n/// 界面显示，一般处理每次显示需要即时更新的逻辑，每次setActive将调用\n/// &lt;/summary&gt;\nprotected virtual void ResetUI()\n\n/// &lt;summary&gt;\n/// 界面关闭，隐藏时调用的，一般与ResetUI放置成对的逻辑\n/// &lt;/summary&gt;\nprotected virtual void HideUI()\n\n/// &lt;summary&gt;\n/// 界面资源销毁，在预制将销毁时调用与InitUI成对。\n/// &lt;/summary&gt;\nprotected virtual void UnInitUI()</code></pre>\n<ol start=\"5\">\n<li>可选的函数<pre><code class=\"csharp\">/// &lt;summary&gt;\n/// 界面Update更新\n/// &lt;/summary&gt;\npublic virtual void Update()</code></pre>\n<h4 id=\"三、UI系统的对象池\"><a href=\"#三、UI系统的对象池\" class=\"headerlink\" title=\"三、UI系统的对象池\"></a>三、UI系统的对象池</h4></li>\n<li>命名池子模板对象的key于头部，如：<pre><code class=\"csharp\">private const string TaskItemTemplate = &quot;UICarnivalWindow_TaskItemTemplate&quot;;\nprivate const string NormalCardItemTemplate = &quot;UICarnivalWindow_NormalCardItemTemplate&quot;;\nprivate const string HighlightCardItemTemplate = &quot;UICarnivalWindow_HighlightCardItemTemplate&quot;;</code></pre>\n</li>\n<li>添加对象为模板，让底层创建一个以模板为基的池子<pre><code class=\"csharp\">AddTemplate(NormalCardItemTemplate, normalItemObj);\nAddTemplate(HighlightCardItemTemplate, highlightItemObj);\nAddTemplate(TaskItemTemplate, taskItemObj);</code></pre>\n</li>\n</ol>\n<p>3.获取： 仅获取一个对象</p>\n<pre><code class=\"csharp\">GetTemplateInstance(string name, Transform parent, bool isActive)</code></pre>\n<p>传入1.定义的模板名字，父对象，是否隐藏就决定获取出来后是否立即隐藏。</p>\n<p>4.定义对应模板对象的控制类</p>\n<ul>\n<li>必须继承UIBaseComponent类</li>\n<li>继承覆写函数：<pre><code class=\"csharp\">///初始化函数，每次设置预制时都将会自动调用一次\npublic virtual void InitObjs()\n</code></pre>\n</li>\n</ul>\n<p>//销毁时调用<br>public virtual void Dispose() </p>\n<pre><code>5.获取: 获取一个带对象控制器的类对象（将同时生成一个对象放在类的Root）\n\n```csharp\nGetTemplateComponent&lt;T&gt;(string name, Transform parent, bool isActive) where T : UIBaseComponent</code></pre><p>传入1.定义的模板名字，父对象，是否隐藏就决定获取出来后是否立即隐藏。</p>\n<p>6.回收</p>\n<ul>\n<li>回收预制：<code>FreeTemplateInstance(NormalCardItemTemplate);</code></li>\n<li>回收预制管理类，不会回收预制：<code>FreeTemplateComponent(NormalCardItemTemplate);</code><br>所以一般两个需要成对调用，如：<pre><code class=\"csharp\">FreeTemplateInstance(NormalCardItemTemplate);\nFreeTemplateComponent(NormalCardItemTemplate);\nFreeTemplateInstance(HighlightCardItemTemplate);\nFreeTemplateComponent(HighlightCardItemTemplate);\nFreeTemplateInstance(TaskItemTemplate);\nFreeTemplateComponent(TaskItemTemplate);</code></pre>\n</li>\n</ul>\n<p>７.销毁池子</p>\n<ul>\n<li>使用UIBaseWindow自带函数销毁单个模板的池子<pre><code class=\"csharp\">/// 移除模板\nvoid RemoveTemplate(string name)</code></pre>\nWindow在销毁时将调用DestroyAllTemplates() 先回收所有的预制，再清空池子。<strong>因此一般不需要在逻辑里手动移除池子.</strong></li>\n</ul>\n<h4 id=\"三、配入UI表\"><a href=\"#三、配入UI表\" class=\"headerlink\" title=\"三、配入UI表\"></a>三、配入UI表</h4><p>1.找到资源表 fgame_ui_config.elsx 按表内的说明配置UI的参数<br>2.导表</p>\n<h4 id=\"四、窗口的显示或关闭\"><a href=\"#四、窗口的显示或关闭\" class=\"headerlink\" title=\"四、窗口的显示或关闭\"></a>四、窗口的显示或关闭</h4><ul>\n<li>使用UIManager提供的函数显示或关闭一个Window，如：</li>\n</ul>\n<pre><code class=\"csharp\">//同步函数显示一个Window\nUIManager.Instance.ShowWindowSync(&quot;UIClickWindow&quot;);\n//异步函数\nawait UIManager.Instance.ShowWindow(&quot;UIClickWindow&quot;);\n\n//关闭窗口\nUIManager.Instance.CloseWindow(&quot;UIClickWindow&quot;);\n</code></pre>\n"},{"title":"Python Note 2","_content":"# Python Note 2\n\nPython中每一个数据类型实际上都是一个类。\n\n+ ### Function definition\n+ As python recommended, left two blank lines after function\n\n```python\ndef greet_user():\n    print(\"GO\")\n    print(\"Hi THERE!\")\n\n\ngreet_user()\n```\n\n+ ### Function parameters\n\n```python\ndef greet_user(name):\n    print(f\"GO:{name}\")\n    print(\"Hi THERE!\")\n\n\ngreet_user(\"John\")\ngreet_user() #Error, no parameter\n\ndef greet_user2(first_name,second_name):\n    print(f\"GO:{first_name} {second_name}\")\n    print(\"Hi THERE!\")\n\n\ngreet_user2(\"John\",\"Smith\")\ngreet_user2(second_name=\"John\",first_name=\"Smith\") #使用keyword形式作为参数，\ngreet_user2(second_name=\"John\",\"Smith\") #错误，混合情况必须先用position形式再用keyword形式\n```\n\n+ ### Funtion Returns\n+ By default, python return none.\n\n```python\ndef square(number):\n\treturn number * number\n\n\nresult = square(3)\nprint(result)\n```\n\n+ ### Error Handling\n+ try except\n\n```python\ntry:\n\tday = int(input(\"input day:\"))\n\tincome = 2000 / day\n\tprint(day)\nexcept ZeroDivisionError:\n\tprint(\"day can't be zero\")\nexcept ValueError:\n\tprint(\"Invalid input\")\n```\n\n+ ### Comments\n+ User comment to explain why and how, not what!\n\n+ ### UML 复习\n+ 线->空心菱形：表示聚合关系\n+ 实心箭头<-实线：表示父子类关系\n+ 实心箭头<-虚线：表示接口实现关系","source":"_posts/python_2.md","raw":"---\ntitle: Python Note 2\ncategories:\n- Python\ntags: \n- Python\n- Note\n---\n# Python Note 2\n\nPython中每一个数据类型实际上都是一个类。\n\n+ ### Function definition\n+ As python recommended, left two blank lines after function\n\n```python\ndef greet_user():\n    print(\"GO\")\n    print(\"Hi THERE!\")\n\n\ngreet_user()\n```\n\n+ ### Function parameters\n\n```python\ndef greet_user(name):\n    print(f\"GO:{name}\")\n    print(\"Hi THERE!\")\n\n\ngreet_user(\"John\")\ngreet_user() #Error, no parameter\n\ndef greet_user2(first_name,second_name):\n    print(f\"GO:{first_name} {second_name}\")\n    print(\"Hi THERE!\")\n\n\ngreet_user2(\"John\",\"Smith\")\ngreet_user2(second_name=\"John\",first_name=\"Smith\") #使用keyword形式作为参数，\ngreet_user2(second_name=\"John\",\"Smith\") #错误，混合情况必须先用position形式再用keyword形式\n```\n\n+ ### Funtion Returns\n+ By default, python return none.\n\n```python\ndef square(number):\n\treturn number * number\n\n\nresult = square(3)\nprint(result)\n```\n\n+ ### Error Handling\n+ try except\n\n```python\ntry:\n\tday = int(input(\"input day:\"))\n\tincome = 2000 / day\n\tprint(day)\nexcept ZeroDivisionError:\n\tprint(\"day can't be zero\")\nexcept ValueError:\n\tprint(\"Invalid input\")\n```\n\n+ ### Comments\n+ User comment to explain why and how, not what!\n\n+ ### UML 复习\n+ 线->空心菱形：表示聚合关系\n+ 实心箭头<-实线：表示父子类关系\n+ 实心箭头<-虚线：表示接口实现关系","slug":"python_2","published":1,"date":"2020-09-08T03:23:20.889Z","updated":"2020-09-08T03:23:20.889Z","_id":"ckdpcluyw002t8sr3n5xa5x4c","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Python-Note-2\"><a href=\"#Python-Note-2\" class=\"headerlink\" title=\"Python Note 2\"></a>Python Note 2</h1><p>Python中每一个数据类型实际上都是一个类。</p>\n<ul>\n<li><h3 id=\"Function-definition\"><a href=\"#Function-definition\" class=\"headerlink\" title=\"Function definition\"></a>Function definition</h3></li>\n<li>As python recommended, left two blank lines after function</li>\n</ul>\n<pre><code class=\"python\">def greet_user():\n    print(&quot;GO&quot;)\n    print(&quot;Hi THERE!&quot;)\n\n\ngreet_user()</code></pre>\n<ul>\n<li><h3 id=\"Function-parameters\"><a href=\"#Function-parameters\" class=\"headerlink\" title=\"Function parameters\"></a>Function parameters</h3></li>\n</ul>\n<pre><code class=\"python\">def greet_user(name):\n    print(f&quot;GO:{name}&quot;)\n    print(&quot;Hi THERE!&quot;)\n\n\ngreet_user(&quot;John&quot;)\ngreet_user() #Error, no parameter\n\ndef greet_user2(first_name,second_name):\n    print(f&quot;GO:{first_name} {second_name}&quot;)\n    print(&quot;Hi THERE!&quot;)\n\n\ngreet_user2(&quot;John&quot;,&quot;Smith&quot;)\ngreet_user2(second_name=&quot;John&quot;,first_name=&quot;Smith&quot;) #使用keyword形式作为参数，\ngreet_user2(second_name=&quot;John&quot;,&quot;Smith&quot;) #错误，混合情况必须先用position形式再用keyword形式</code></pre>\n<ul>\n<li><h3 id=\"Funtion-Returns\"><a href=\"#Funtion-Returns\" class=\"headerlink\" title=\"Funtion Returns\"></a>Funtion Returns</h3></li>\n<li>By default, python return none.</li>\n</ul>\n<pre><code class=\"python\">def square(number):\n    return number * number\n\n\nresult = square(3)\nprint(result)</code></pre>\n<ul>\n<li><h3 id=\"Error-Handling\"><a href=\"#Error-Handling\" class=\"headerlink\" title=\"Error Handling\"></a>Error Handling</h3></li>\n<li>try except</li>\n</ul>\n<pre><code class=\"python\">try:\n    day = int(input(&quot;input day:&quot;))\n    income = 2000 / day\n    print(day)\nexcept ZeroDivisionError:\n    print(&quot;day can&#39;t be zero&quot;)\nexcept ValueError:\n    print(&quot;Invalid input&quot;)</code></pre>\n<ul>\n<li><h3 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h3></li>\n<li><p>User comment to explain why and how, not what!</p>\n</li>\n<li><h3 id=\"UML-复习\"><a href=\"#UML-复习\" class=\"headerlink\" title=\"UML 复习\"></a>UML 复习</h3></li>\n<li><p>线-&gt;空心菱形：表示聚合关系</p>\n</li>\n<li><p>实心箭头&lt;-实线：表示父子类关系</p>\n</li>\n<li><p>实心箭头&lt;-虚线：表示接口实现关系</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Python-Note-2\"><a href=\"#Python-Note-2\" class=\"headerlink\" title=\"Python Note 2\"></a>Python Note 2</h1><p>Python中每一个数据类型实际上都是一个类。</p>\n<ul>\n<li><h3 id=\"Function-definition\"><a href=\"#Function-definition\" class=\"headerlink\" title=\"Function definition\"></a>Function definition</h3></li>\n<li>As python recommended, left two blank lines after function</li>\n</ul>\n<pre><code class=\"python\">def greet_user():\n    print(&quot;GO&quot;)\n    print(&quot;Hi THERE!&quot;)\n\n\ngreet_user()</code></pre>\n<ul>\n<li><h3 id=\"Function-parameters\"><a href=\"#Function-parameters\" class=\"headerlink\" title=\"Function parameters\"></a>Function parameters</h3></li>\n</ul>\n<pre><code class=\"python\">def greet_user(name):\n    print(f&quot;GO:{name}&quot;)\n    print(&quot;Hi THERE!&quot;)\n\n\ngreet_user(&quot;John&quot;)\ngreet_user() #Error, no parameter\n\ndef greet_user2(first_name,second_name):\n    print(f&quot;GO:{first_name} {second_name}&quot;)\n    print(&quot;Hi THERE!&quot;)\n\n\ngreet_user2(&quot;John&quot;,&quot;Smith&quot;)\ngreet_user2(second_name=&quot;John&quot;,first_name=&quot;Smith&quot;) #使用keyword形式作为参数，\ngreet_user2(second_name=&quot;John&quot;,&quot;Smith&quot;) #错误，混合情况必须先用position形式再用keyword形式</code></pre>\n<ul>\n<li><h3 id=\"Funtion-Returns\"><a href=\"#Funtion-Returns\" class=\"headerlink\" title=\"Funtion Returns\"></a>Funtion Returns</h3></li>\n<li>By default, python return none.</li>\n</ul>\n<pre><code class=\"python\">def square(number):\n    return number * number\n\n\nresult = square(3)\nprint(result)</code></pre>\n<ul>\n<li><h3 id=\"Error-Handling\"><a href=\"#Error-Handling\" class=\"headerlink\" title=\"Error Handling\"></a>Error Handling</h3></li>\n<li>try except</li>\n</ul>\n<pre><code class=\"python\">try:\n    day = int(input(&quot;input day:&quot;))\n    income = 2000 / day\n    print(day)\nexcept ZeroDivisionError:\n    print(&quot;day can&#39;t be zero&quot;)\nexcept ValueError:\n    print(&quot;Invalid input&quot;)</code></pre>\n<ul>\n<li><h3 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h3></li>\n<li><p>User comment to explain why and how, not what!</p>\n</li>\n<li><h3 id=\"UML-复习\"><a href=\"#UML-复习\" class=\"headerlink\" title=\"UML 复习\"></a>UML 复习</h3></li>\n<li><p>线-&gt;空心菱形：表示聚合关系</p>\n</li>\n<li><p>实心箭头&lt;-实线：表示父子类关系</p>\n</li>\n<li><p>实心箭头&lt;-虚线：表示接口实现关系</p>\n</li>\n</ul>\n"},{"title":"内存管理","_content":"\n## 物理内存\n\n当指令不连贯时，将会产生大量的时间浪费，DOTS和ECS从这个方面优化了内存的访问性能。\n\n![DOTS的目的](/img/1578646439353.png)\n\n> 日志常见： OOM，显存大小无法分配过来的报错信息\n![移动设备的区别](/img/1578646594733.png)\n\n> 三级缓存：\n> 台式：主流在8~16MB\n> 移动端：高端如845，2M\n\n## 虚拟内存\n\n\n![虚拟内存](/img/1578646743161.png)\n> 交换内存： 当操作系统内存不够时，尝试把不用的内存(deadmemory)交换到硬盘上，从而节省出更多物理内存。\n> 为什么移动端没有内存交换：移动设备IO速度慢，存储器的可擦写次数较台式少。\n> IOS提供了把不活跃的内存压缩起来放到一个特定空间。Virtual memory 很大。\n\n\n## 内存寻址范围\n\n可简单认为64位CPU寻址范围大。\n\n## 安卓内存管理\n\n![安卓内存](/img/1578647010062.png)\n\n> Page: 一般4K一个Page\n> 回收和分配以page为单位\n> 用户态和内核态\n\n> LMK, low memeory killer\n> 分类：\n> Native： adbd等，adb的守护线程\n> System: 系统服务\n> Persistent: 电话，信息，蓝牙等等\n> Foreground: 应用\n> Perceptible: 搜索等等\n> Services： 服务，云服务等\n> Home:主界面\n> Previous: 之前上一个应用\n> Cached:　后台\n\n> 从低层开始往上杀。 Foreground其实就是闪退的表现。杀到System就重启了。\n![优化级](/img/1578651845843.png)\n\n## 安卓内存指标\n\n![内存指标](/img/1578652129043.png)\n\n> RSS: 当前APP所使用的所有内存\n> PSS: 公共库分配出来的内存\n> USS：只有自己使用的内存，一般在此处优化\n\n> procrank 指令\n\n\n\n## Unity内存管理\n\n![Unity引擎](/img/1578652476304.png)\n\n#### 1. Unity 内存按照分配方式分为：\n - Native Memory\n- Managed Memory\n- Editor & Runtime 是不同的\n    - 不止是统计看到的内存大小不同，甚至是内存分配时机和方式也不同\n    - Asset 在 Runtime 中如果不读取，是不会进内存的，但 Editor 打开就占内存。因为 Editor 不注重 Runtime 的表现，更注重编辑器中编辑时的流畅。\n\t- 但如果游戏庞大到几十个 G，如果第一次打开项目，会消耗很多时间，有的大的会几天，甚至到一周。\n\n#### 2. Unity 内存按照管理者分为：\n- 引擎管理内存，开发者一般使用不到\n- 用户管理内存（应优先考虑）\n\n#### 3. Unity 检测不到的内存\n用户分配的 native 内存\n- 自己写的 Native 插件（C++ 插件）， Unity 无法分析已经编译过的 C++ 是如何去分配和使用内存的。\n- Lua 完全由自己管理内存，Unity 无法统计到内部的使用情况。\n\n#### 4. Unity Native Memory 管理\n\nUnity 重载了所有分配内存的操作符（C++ alloc、new），使用这些重载的时候，会需要一个额外的 memory label （Profiler-shaderlab-object-memory-detail-snapshot，里面的名字就是 label：指当前内存要分配到哪一个类型池里面）\n\n- Allocator: 使用重载过的分配符去分配内存时，Allocator 会根据你的 memory label 分配到不同 Allocator 池里面，每个 Allocator 池 单独做自己的跟踪。因此当我们去 Runtime get memory label 下面的池时就可以问 Allocator，里面有多少东西 多少兆。\n- NewAsRoot: Allocator 在 NewAsRoot （Memory  “island”（没听清）） 中生成。在这个 Memory Root 下面会有很多子内存：shader：当我们加载一个 Shader 进内存的时候，会生成一个 Shader 的 root。Shader 底下有很多数据：sub shader、Pass 等会作为 memory “island” (root) 的成员去依次分配。因此当我们最后统计 Runtime 的时候，我们会统计 Root，而不会统计成员，因为太多了没法统计。\n- 及时返给unity: 因为是 C++ 的，因此当我们 delete、free 一个内存的时候会立刻返回内存给系统，与托管内存堆不一样。\n\n#### 5. 最佳实践 Native 内存\n\n- Scene\n    - Unity 是一个 C++ 引擎，所有实体最终都会反映在 C++ 上，而不是托管堆里面。因此当我们实例化一个 GameObject 的时候，在 Unity 底层会构建一个或多个 Object 来存储这个 GameObject 的信息，例如很多 Components。因此当 Scene 有过多 GameObject 的时候，Native 内存就会显著上升。\n    - 当我们看 Profiler，发现 Native 内存大量上升的时候，应先去检查 Scene。\n- Audio\n    - DSP buffer （声音的缓冲）\n        - 当一个声音要播放的时候，它需要向 CPU 去发送指令——我要播放声音。但如果声音的数据量非常小，就会造成频繁地向 CPU 发送指令，会造成 I\\O。\n        - 当 Unity 用到 FMOD 声音引擎时（Unity 底层也用到 FMOD），会有一个 Buffer，当 Buffer 填充满了，才会向 CPU 发送“我要播放声音”的指令。\n        - DSP buffer 会导致两种问题：\n            - 如果（设置的） buffer 过大，会导致声音的延迟。要填充满 buffer 是要很多声音数据的，但声音数据又没这么大，因此会导致一定的**声音延迟**。\n            - 如果 DSP buffer 太小，会导致 CPU 负担上升，满了就发，消耗增加。\n\n            [Audio](https://docs.unity3d.com/Manual/class-AudioManager.html)\n\n    - Force to mono\n        - 在导入声音的时候有一个设置，很多音效师为了声音质量，会把声音设为双声道。但 95% 的声音，左右声道放的是完全一样的数据。这导致了 1M 的声音会变成 2M，体现在包体里和内存里。因此一般对于声音不是很敏感的游戏，会建议改成 Force to mono，强制单声道。\n    - Format\n    - Compression Format（看文档，有使用建议）\n    \n\t\n - Code Size\n    - C++ 模板泛型的滥用会影响到 Code Size、打包的速度。\n- AssetBundle\n    - TypeTree\n        - Unity 的每一种类型都有很多数据结构的改变，为了对此做兼容，Unity 会在生成数据类型序列化的时候，顺便会生成 TypeTree：当前我这一个版本里用到了哪些变量，对应的数据类型是什么。在反序列化的时候，会根据 TypeTree 来进行反序列化。\n            - 如果上一个版本的类型在这个版本中没有，TypeTree 就没有它，因此不会碰到它。\n            - 如果要用一个新的类型，但在这个版本中不存在，会用一个默认值来序列化，从而保证了不会在不同的版本序列化中出错，这个就是 TypeTree 的作用。\n        - Build AssetBundle 中有开关可以关掉 TypeTree。当你确认当前 AssetBundle 的使用和 Build Unity 的版本一模一样，这时候可以把 TypeTree 关掉。\n            - 例如如果用同样的 Unity 打出来的 AssetBundle 和 APP，TypeTree 则完全可以关掉。\n        - TypeTree 好处：\n            - 内存减少。TypeTree 本身是数据，也要占内存。\n            - 包大小会减少，因为 TypeTree 会序列化到 AssetBundle 包中，以便读取。\n            - Build 和运行时会变快。源代码中可以看到，因为每一次 Serialize 东西的时候，如果发现需要 Serialize TypeTree，则会 Serialize 两次：\n                - 第一次先把 TypeTree Serialize 出来\n                - 第二次把实际的东西 Serialize 出来\n                - 反序列化也会做同样的事情，1. TypeTree 反序列化，2. 实际的东西反序列化。\n            - 因此如果确定 TypeTree 不会对兼容性造成影响，可以把它关掉。这样对 Size 大小和 Build Runtime 都会获得收益。\n\n    - 压缩方式：\n        - Lz4\n\n            [BuildCompression.LZ4](https://docs.unity3d.com/2019.3/Documentation/ScriptReference/BuildCompression.LZ4.html)\n\n            - LZ4HC \"Chunk Based\" Compression. 非常快\n            - 和 Lzma 相比，平均压缩比率差 30%。也就是说会导致包体大一点，但是（作者说）速度能快 10 倍以上。\n        - Lzma\n\n            [BuildCompression.LZMA](https://docs.unity3d.com/2019.3/Documentation/ScriptReference/BuildCompression.LZMA.html)\n\n            - Lzma 基本上就不要用了，因为解压和读取速度上都会比较慢。\n            - 还会占大量内存\n                - 因为是 Steam based 而不是 Chunk Based 的，因此需要一次全解压\n                - Chunk Based 可以一块一块解压\n                    - 如果发现一个文件在第 5-10 块，那么 LZ4 会依次将 第 5 6 7 8 9 10 块分别解压出来，每次（chunk 的）解压会重用之前的内存，来减少内存的峰值。\n        - 预告：中国版 Unity 会在下个版本（1月5号或2月份）推出新的功能：基于 LZ4 的 AssetBundle 加密，只支持 LZ4。\n        - Size & count\n            - AssetBundle 包打多大是很玄学的问题，但每一个 Asset 打一个 Bundle 这样不太好。\n                - 有一种减图片大小的方式，把 png 的头都提出来。因为头的色板是通用的，而数据不通用。AssetBundle 也一样，一部分是它的头，一部分是实际打包的部分。因此如果每个 Asset 都打 Bundle 会导致 AssetBundle 的头比数据还要大。\n            - 官方的建议是每个 AssetBundle 包大概 1M~2M 左右大小，考虑的是网络带宽。但现在 5G 的时候，可以考虑适当把包体加大。还是要看实际用户的情况。\n\n- Resource 文件夹（**Do not use it**. 除非在 debug 的时候）\n    - Resource 和 AssetBundle 一样，也有头来索引。Resource  在打进包的时候会做一个红黑树，来帮助 Resource 来检索资源在什么位置，\n    - 如果 Resource 非常大，那么红黑树也会非常大。\n    - 红黑树是不可卸载的。在刚开始游戏的时候就会加载进内存中，会持续对游戏造成内存压力。\n    - 会极大拖慢游戏的启动时间。因为红黑树没加载完，游戏不能启动。\n- Texture\n    - upload buffer，和声音的很像：填满多大，就向 CPU push 一次。\n    - r/w\n        - Texture 没必要就不要开 read and write。正常 Texture 读进内存，解析完了，放到 upload buffer 里后，内存里的就会 delete 掉。\n        - 但如果检测到你开了 r/w 就不会 delete 了，就会在显存和内存中各一份。\n    - Mip Maps\n        - UI 没必要开，可以省大量内存。\n    - Mesh\n        - r/w\n        - compression\n            - 有些版本 Compression 开了不如不开，内存占用可能更严重，具体需要自己试。\n    - Assets\n        - Assets 的数量实际上和 asset 整个的纹理是有关系的。（？）\n\n        [Memory Management in Unity - Unity Learn](https://learn.unity.com/tutorial/memory-management-in-unity)\n\t\t\n\t\t\n\t\t\n#### 6. Unity Managed Memory\n\n[Understanding the managed heap](https://docs.unity3d.com/Manual/BestPracticeUnderstandingPerformanceInUnity4-1.html)\n\n- VM 内存池\n    - mono 虚拟机的内存池\n    - VM 会返还内存给 OS 吗？\n        - **会**\n    - 返还条件是什么？\n        - GC 不会把内存返还给系统\n        - 内存也是以 Block 来管理的。当一个 Block 连续六次 GC 没有被访问到，这块内存才会被返还到系统。（mono runtime 基本看不到，IL2cpp runtime 可能会看到多一点）\n    - 不会频繁地分配内存，而是一次分配一大块。\n- GC 机制（BOEHM Non-generational 不分代的）\n    - GC 机制考量\n        - Throughput(（回收能力）\n            - 一次回收，会回收多少内存\n        - Pause times（暂停时长）==mark text==\n            - 进行回收的时候，对主线程的影响有多大\n        - Fragmentation（碎片化）\n            - 回收内存后，会对整体回收内存池的贡献有多少\n        - Mutator overhead（额外消耗）\n            - 回收本身有 overhead，要做很多统计、标记的工作\n        - Scalability（可扩展性）\n            - 扩展到多核、多线程会不会有 bug\n        - Protability（可移植性）\n            - 不同平台是否可以使用\n    - BOEHM\n        - Non-generational（不分代的）\n\n            ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8934bc1f-3e98-4544-b6de-6ea5b80e2850/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8934bc1f-3e98-4544-b6de-6ea5b80e2850/Untitled.png)\n\n            - 分代是指：大块内存、小内存、超小内存是分在不同内存区域来进行管理的。还有长久内存，当有一个内存很久没动的时候会移到长久内存区域中，从而省出内存给更频繁分配的内存。\n        - Non-compacting（非压缩式）\n\n            ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/33a4002e-f37e-4405-b9b3-815c0f43caba/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/33a4002e-f37e-4405-b9b3-815c0f43caba/Untitled.png)\n\n            - 当有内存被回收的时候，压缩内存会把上图空的地方重新排布。\n            - 但 Unity 的 BOEHM 不会！它是非压缩式的。空着就空着，下次要用了再填进去。\n                - 历史原因：Unity 和 Mono 合作上，Mono 并不是一直开源免费的，因此 Unity 选择不升级 Mono，与实际 Mono 版本有差距。\n                - 下一代 GC\n                    - ==Incremental GC（渐进式 GC） #F44336==\n                        - 现在如果我们要进行一次 GC，主线程被迫要停下来，遍历所有 GC Memory “island”（没听清），来决定哪些 GC 可以回收。\n                        - ==Incremental GC 把暂停主线程的事分帧做了。一点一点分析，主线程不会有峰值。总体 GC 时间不变，但会改善 GC 对主线程的卡顿影响。 #F44336==\n                    - SGen 或者升级 Boehm？\n                        - SGen 是分代的，能避免内存碎片化问题，调动策略，速度较快\n                    - IL2CPP\n                        - 现在 IL2CPP 的 GC 机制是 Unity 自己重新写的，是升级版的 Boehm\n    - Memory fragmentation 内存碎片化\n\n        ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/96caa361-8d1a-4f8e-a0b6-87d521bb7f14/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/96caa361-8d1a-4f8e-a0b6-87d521bb7f14/Untitled.png)\n\n        - 为什么内存下降了，但总体内存池还是上升了？\n            - 因为内存太大了，内存池没地方放它，虽然有很多内存可用。（内存已被严重碎片化）\n        - 当开发者大量加载小内存，使用释放*N，例如配置表、巨大数组，GC 会涨一大截。\n            - 建议==先操作大内存，再操作小内存，以保证内存以最大效率被重复利用。 #F44336==\n    - Zombie Memory（僵尸内存）\n        - 内存泄露说法是不对的，内存只是没有任何人能够管理到，但实际上内存没有被泄露，一直在内存池中，被 zombie 掉了，这种叫 Zombie 内存。\n        - 无用内容\n            - Coding 时候或者团队配合的时候有问题，加载了一个东西进来，结果从头到尾只用了一次。\n            - 有些开发者写了队列调度策略，但是策略写的不好，导致一些他觉得会被释放的东西，没有被释放掉。\n            - 找是否有活跃度实际上并不高的内存。\n        - 没有释放\n        - 通过代码管理和性能工具分析\n    - 最佳实践\n        - Don't Null it, but Destroy it（显式用 Destory，别用 Null）\n        - Class VS Struct\n        - Pool In Pool（池中池）\n            - VM 本身有内存池，但建议开发者对高频使用的小部件，自己建一个内存池。例如子弹等。\n        - Closures and anonymous methods（闭包和匿名函数）\n            - 如果看 IL，所有匿名函数和闭包会 new 成一个 class，因此所有变量和要 new 的东西都是要占内存的。这样会导致协程。\n                - 有些开发者会在游戏开始启用一个协程，直到游戏结束才释放，这是错误的。\n                - 只要协程不被释放掉，所有内存都会在内存里。\n        - Coroutines（协程）\n            - 可看做闭包和匿名函数的一个特例\n            - 最佳实践：用的时候生产一个，不用的时候 destroy 掉。\n        - Configurations（配置表）\n            - 不要把整个配置表都扔进去，是否能通过啥来切分下配置表\n        - Singleton\n            - 慎用\n            - 游戏一开始到游戏死掉，一直在内存中。\n- UPR 工具\n\n    [Unite 2019 | Unity UPR性能报告功能介绍 - Unity Connect](https://connect.unity.com/p/unite-2019-unity-uprxing-neng-bao-gao-gong-neng-jie-shao)\n\n    - 免费，在中国增强版里","source":"_posts/内存管理.md","raw":"---\ntitle: 内存管理\ncategories:\n- Unity学习\ntags: \n- Unity学习\n---\n\n## 物理内存\n\n当指令不连贯时，将会产生大量的时间浪费，DOTS和ECS从这个方面优化了内存的访问性能。\n\n![DOTS的目的](/img/1578646439353.png)\n\n> 日志常见： OOM，显存大小无法分配过来的报错信息\n![移动设备的区别](/img/1578646594733.png)\n\n> 三级缓存：\n> 台式：主流在8~16MB\n> 移动端：高端如845，2M\n\n## 虚拟内存\n\n\n![虚拟内存](/img/1578646743161.png)\n> 交换内存： 当操作系统内存不够时，尝试把不用的内存(deadmemory)交换到硬盘上，从而节省出更多物理内存。\n> 为什么移动端没有内存交换：移动设备IO速度慢，存储器的可擦写次数较台式少。\n> IOS提供了把不活跃的内存压缩起来放到一个特定空间。Virtual memory 很大。\n\n\n## 内存寻址范围\n\n可简单认为64位CPU寻址范围大。\n\n## 安卓内存管理\n\n![安卓内存](/img/1578647010062.png)\n\n> Page: 一般4K一个Page\n> 回收和分配以page为单位\n> 用户态和内核态\n\n> LMK, low memeory killer\n> 分类：\n> Native： adbd等，adb的守护线程\n> System: 系统服务\n> Persistent: 电话，信息，蓝牙等等\n> Foreground: 应用\n> Perceptible: 搜索等等\n> Services： 服务，云服务等\n> Home:主界面\n> Previous: 之前上一个应用\n> Cached:　后台\n\n> 从低层开始往上杀。 Foreground其实就是闪退的表现。杀到System就重启了。\n![优化级](/img/1578651845843.png)\n\n## 安卓内存指标\n\n![内存指标](/img/1578652129043.png)\n\n> RSS: 当前APP所使用的所有内存\n> PSS: 公共库分配出来的内存\n> USS：只有自己使用的内存，一般在此处优化\n\n> procrank 指令\n\n\n\n## Unity内存管理\n\n![Unity引擎](/img/1578652476304.png)\n\n#### 1. Unity 内存按照分配方式分为：\n - Native Memory\n- Managed Memory\n- Editor & Runtime 是不同的\n    - 不止是统计看到的内存大小不同，甚至是内存分配时机和方式也不同\n    - Asset 在 Runtime 中如果不读取，是不会进内存的，但 Editor 打开就占内存。因为 Editor 不注重 Runtime 的表现，更注重编辑器中编辑时的流畅。\n\t- 但如果游戏庞大到几十个 G，如果第一次打开项目，会消耗很多时间，有的大的会几天，甚至到一周。\n\n#### 2. Unity 内存按照管理者分为：\n- 引擎管理内存，开发者一般使用不到\n- 用户管理内存（应优先考虑）\n\n#### 3. Unity 检测不到的内存\n用户分配的 native 内存\n- 自己写的 Native 插件（C++ 插件）， Unity 无法分析已经编译过的 C++ 是如何去分配和使用内存的。\n- Lua 完全由自己管理内存，Unity 无法统计到内部的使用情况。\n\n#### 4. Unity Native Memory 管理\n\nUnity 重载了所有分配内存的操作符（C++ alloc、new），使用这些重载的时候，会需要一个额外的 memory label （Profiler-shaderlab-object-memory-detail-snapshot，里面的名字就是 label：指当前内存要分配到哪一个类型池里面）\n\n- Allocator: 使用重载过的分配符去分配内存时，Allocator 会根据你的 memory label 分配到不同 Allocator 池里面，每个 Allocator 池 单独做自己的跟踪。因此当我们去 Runtime get memory label 下面的池时就可以问 Allocator，里面有多少东西 多少兆。\n- NewAsRoot: Allocator 在 NewAsRoot （Memory  “island”（没听清）） 中生成。在这个 Memory Root 下面会有很多子内存：shader：当我们加载一个 Shader 进内存的时候，会生成一个 Shader 的 root。Shader 底下有很多数据：sub shader、Pass 等会作为 memory “island” (root) 的成员去依次分配。因此当我们最后统计 Runtime 的时候，我们会统计 Root，而不会统计成员，因为太多了没法统计。\n- 及时返给unity: 因为是 C++ 的，因此当我们 delete、free 一个内存的时候会立刻返回内存给系统，与托管内存堆不一样。\n\n#### 5. 最佳实践 Native 内存\n\n- Scene\n    - Unity 是一个 C++ 引擎，所有实体最终都会反映在 C++ 上，而不是托管堆里面。因此当我们实例化一个 GameObject 的时候，在 Unity 底层会构建一个或多个 Object 来存储这个 GameObject 的信息，例如很多 Components。因此当 Scene 有过多 GameObject 的时候，Native 内存就会显著上升。\n    - 当我们看 Profiler，发现 Native 内存大量上升的时候，应先去检查 Scene。\n- Audio\n    - DSP buffer （声音的缓冲）\n        - 当一个声音要播放的时候，它需要向 CPU 去发送指令——我要播放声音。但如果声音的数据量非常小，就会造成频繁地向 CPU 发送指令，会造成 I\\O。\n        - 当 Unity 用到 FMOD 声音引擎时（Unity 底层也用到 FMOD），会有一个 Buffer，当 Buffer 填充满了，才会向 CPU 发送“我要播放声音”的指令。\n        - DSP buffer 会导致两种问题：\n            - 如果（设置的） buffer 过大，会导致声音的延迟。要填充满 buffer 是要很多声音数据的，但声音数据又没这么大，因此会导致一定的**声音延迟**。\n            - 如果 DSP buffer 太小，会导致 CPU 负担上升，满了就发，消耗增加。\n\n            [Audio](https://docs.unity3d.com/Manual/class-AudioManager.html)\n\n    - Force to mono\n        - 在导入声音的时候有一个设置，很多音效师为了声音质量，会把声音设为双声道。但 95% 的声音，左右声道放的是完全一样的数据。这导致了 1M 的声音会变成 2M，体现在包体里和内存里。因此一般对于声音不是很敏感的游戏，会建议改成 Force to mono，强制单声道。\n    - Format\n    - Compression Format（看文档，有使用建议）\n    \n\t\n - Code Size\n    - C++ 模板泛型的滥用会影响到 Code Size、打包的速度。\n- AssetBundle\n    - TypeTree\n        - Unity 的每一种类型都有很多数据结构的改变，为了对此做兼容，Unity 会在生成数据类型序列化的时候，顺便会生成 TypeTree：当前我这一个版本里用到了哪些变量，对应的数据类型是什么。在反序列化的时候，会根据 TypeTree 来进行反序列化。\n            - 如果上一个版本的类型在这个版本中没有，TypeTree 就没有它，因此不会碰到它。\n            - 如果要用一个新的类型，但在这个版本中不存在，会用一个默认值来序列化，从而保证了不会在不同的版本序列化中出错，这个就是 TypeTree 的作用。\n        - Build AssetBundle 中有开关可以关掉 TypeTree。当你确认当前 AssetBundle 的使用和 Build Unity 的版本一模一样，这时候可以把 TypeTree 关掉。\n            - 例如如果用同样的 Unity 打出来的 AssetBundle 和 APP，TypeTree 则完全可以关掉。\n        - TypeTree 好处：\n            - 内存减少。TypeTree 本身是数据，也要占内存。\n            - 包大小会减少，因为 TypeTree 会序列化到 AssetBundle 包中，以便读取。\n            - Build 和运行时会变快。源代码中可以看到，因为每一次 Serialize 东西的时候，如果发现需要 Serialize TypeTree，则会 Serialize 两次：\n                - 第一次先把 TypeTree Serialize 出来\n                - 第二次把实际的东西 Serialize 出来\n                - 反序列化也会做同样的事情，1. TypeTree 反序列化，2. 实际的东西反序列化。\n            - 因此如果确定 TypeTree 不会对兼容性造成影响，可以把它关掉。这样对 Size 大小和 Build Runtime 都会获得收益。\n\n    - 压缩方式：\n        - Lz4\n\n            [BuildCompression.LZ4](https://docs.unity3d.com/2019.3/Documentation/ScriptReference/BuildCompression.LZ4.html)\n\n            - LZ4HC \"Chunk Based\" Compression. 非常快\n            - 和 Lzma 相比，平均压缩比率差 30%。也就是说会导致包体大一点，但是（作者说）速度能快 10 倍以上。\n        - Lzma\n\n            [BuildCompression.LZMA](https://docs.unity3d.com/2019.3/Documentation/ScriptReference/BuildCompression.LZMA.html)\n\n            - Lzma 基本上就不要用了，因为解压和读取速度上都会比较慢。\n            - 还会占大量内存\n                - 因为是 Steam based 而不是 Chunk Based 的，因此需要一次全解压\n                - Chunk Based 可以一块一块解压\n                    - 如果发现一个文件在第 5-10 块，那么 LZ4 会依次将 第 5 6 7 8 9 10 块分别解压出来，每次（chunk 的）解压会重用之前的内存，来减少内存的峰值。\n        - 预告：中国版 Unity 会在下个版本（1月5号或2月份）推出新的功能：基于 LZ4 的 AssetBundle 加密，只支持 LZ4。\n        - Size & count\n            - AssetBundle 包打多大是很玄学的问题，但每一个 Asset 打一个 Bundle 这样不太好。\n                - 有一种减图片大小的方式，把 png 的头都提出来。因为头的色板是通用的，而数据不通用。AssetBundle 也一样，一部分是它的头，一部分是实际打包的部分。因此如果每个 Asset 都打 Bundle 会导致 AssetBundle 的头比数据还要大。\n            - 官方的建议是每个 AssetBundle 包大概 1M~2M 左右大小，考虑的是网络带宽。但现在 5G 的时候，可以考虑适当把包体加大。还是要看实际用户的情况。\n\n- Resource 文件夹（**Do not use it**. 除非在 debug 的时候）\n    - Resource 和 AssetBundle 一样，也有头来索引。Resource  在打进包的时候会做一个红黑树，来帮助 Resource 来检索资源在什么位置，\n    - 如果 Resource 非常大，那么红黑树也会非常大。\n    - 红黑树是不可卸载的。在刚开始游戏的时候就会加载进内存中，会持续对游戏造成内存压力。\n    - 会极大拖慢游戏的启动时间。因为红黑树没加载完，游戏不能启动。\n- Texture\n    - upload buffer，和声音的很像：填满多大，就向 CPU push 一次。\n    - r/w\n        - Texture 没必要就不要开 read and write。正常 Texture 读进内存，解析完了，放到 upload buffer 里后，内存里的就会 delete 掉。\n        - 但如果检测到你开了 r/w 就不会 delete 了，就会在显存和内存中各一份。\n    - Mip Maps\n        - UI 没必要开，可以省大量内存。\n    - Mesh\n        - r/w\n        - compression\n            - 有些版本 Compression 开了不如不开，内存占用可能更严重，具体需要自己试。\n    - Assets\n        - Assets 的数量实际上和 asset 整个的纹理是有关系的。（？）\n\n        [Memory Management in Unity - Unity Learn](https://learn.unity.com/tutorial/memory-management-in-unity)\n\t\t\n\t\t\n\t\t\n#### 6. Unity Managed Memory\n\n[Understanding the managed heap](https://docs.unity3d.com/Manual/BestPracticeUnderstandingPerformanceInUnity4-1.html)\n\n- VM 内存池\n    - mono 虚拟机的内存池\n    - VM 会返还内存给 OS 吗？\n        - **会**\n    - 返还条件是什么？\n        - GC 不会把内存返还给系统\n        - 内存也是以 Block 来管理的。当一个 Block 连续六次 GC 没有被访问到，这块内存才会被返还到系统。（mono runtime 基本看不到，IL2cpp runtime 可能会看到多一点）\n    - 不会频繁地分配内存，而是一次分配一大块。\n- GC 机制（BOEHM Non-generational 不分代的）\n    - GC 机制考量\n        - Throughput(（回收能力）\n            - 一次回收，会回收多少内存\n        - Pause times（暂停时长）==mark text==\n            - 进行回收的时候，对主线程的影响有多大\n        - Fragmentation（碎片化）\n            - 回收内存后，会对整体回收内存池的贡献有多少\n        - Mutator overhead（额外消耗）\n            - 回收本身有 overhead，要做很多统计、标记的工作\n        - Scalability（可扩展性）\n            - 扩展到多核、多线程会不会有 bug\n        - Protability（可移植性）\n            - 不同平台是否可以使用\n    - BOEHM\n        - Non-generational（不分代的）\n\n            ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8934bc1f-3e98-4544-b6de-6ea5b80e2850/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8934bc1f-3e98-4544-b6de-6ea5b80e2850/Untitled.png)\n\n            - 分代是指：大块内存、小内存、超小内存是分在不同内存区域来进行管理的。还有长久内存，当有一个内存很久没动的时候会移到长久内存区域中，从而省出内存给更频繁分配的内存。\n        - Non-compacting（非压缩式）\n\n            ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/33a4002e-f37e-4405-b9b3-815c0f43caba/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/33a4002e-f37e-4405-b9b3-815c0f43caba/Untitled.png)\n\n            - 当有内存被回收的时候，压缩内存会把上图空的地方重新排布。\n            - 但 Unity 的 BOEHM 不会！它是非压缩式的。空着就空着，下次要用了再填进去。\n                - 历史原因：Unity 和 Mono 合作上，Mono 并不是一直开源免费的，因此 Unity 选择不升级 Mono，与实际 Mono 版本有差距。\n                - 下一代 GC\n                    - ==Incremental GC（渐进式 GC） #F44336==\n                        - 现在如果我们要进行一次 GC，主线程被迫要停下来，遍历所有 GC Memory “island”（没听清），来决定哪些 GC 可以回收。\n                        - ==Incremental GC 把暂停主线程的事分帧做了。一点一点分析，主线程不会有峰值。总体 GC 时间不变，但会改善 GC 对主线程的卡顿影响。 #F44336==\n                    - SGen 或者升级 Boehm？\n                        - SGen 是分代的，能避免内存碎片化问题，调动策略，速度较快\n                    - IL2CPP\n                        - 现在 IL2CPP 的 GC 机制是 Unity 自己重新写的，是升级版的 Boehm\n    - Memory fragmentation 内存碎片化\n\n        ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/96caa361-8d1a-4f8e-a0b6-87d521bb7f14/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/96caa361-8d1a-4f8e-a0b6-87d521bb7f14/Untitled.png)\n\n        - 为什么内存下降了，但总体内存池还是上升了？\n            - 因为内存太大了，内存池没地方放它，虽然有很多内存可用。（内存已被严重碎片化）\n        - 当开发者大量加载小内存，使用释放*N，例如配置表、巨大数组，GC 会涨一大截。\n            - 建议==先操作大内存，再操作小内存，以保证内存以最大效率被重复利用。 #F44336==\n    - Zombie Memory（僵尸内存）\n        - 内存泄露说法是不对的，内存只是没有任何人能够管理到，但实际上内存没有被泄露，一直在内存池中，被 zombie 掉了，这种叫 Zombie 内存。\n        - 无用内容\n            - Coding 时候或者团队配合的时候有问题，加载了一个东西进来，结果从头到尾只用了一次。\n            - 有些开发者写了队列调度策略，但是策略写的不好，导致一些他觉得会被释放的东西，没有被释放掉。\n            - 找是否有活跃度实际上并不高的内存。\n        - 没有释放\n        - 通过代码管理和性能工具分析\n    - 最佳实践\n        - Don't Null it, but Destroy it（显式用 Destory，别用 Null）\n        - Class VS Struct\n        - Pool In Pool（池中池）\n            - VM 本身有内存池，但建议开发者对高频使用的小部件，自己建一个内存池。例如子弹等。\n        - Closures and anonymous methods（闭包和匿名函数）\n            - 如果看 IL，所有匿名函数和闭包会 new 成一个 class，因此所有变量和要 new 的东西都是要占内存的。这样会导致协程。\n                - 有些开发者会在游戏开始启用一个协程，直到游戏结束才释放，这是错误的。\n                - 只要协程不被释放掉，所有内存都会在内存里。\n        - Coroutines（协程）\n            - 可看做闭包和匿名函数的一个特例\n            - 最佳实践：用的时候生产一个，不用的时候 destroy 掉。\n        - Configurations（配置表）\n            - 不要把整个配置表都扔进去，是否能通过啥来切分下配置表\n        - Singleton\n            - 慎用\n            - 游戏一开始到游戏死掉，一直在内存中。\n- UPR 工具\n\n    [Unite 2019 | Unity UPR性能报告功能介绍 - Unity Connect](https://connect.unity.com/p/unite-2019-unity-uprxing-neng-bao-gao-gong-neng-jie-shao)\n\n    - 免费，在中国增强版里","slug":"内存管理","published":1,"date":"2020-09-08T03:23:20.889Z","updated":"2020-09-08T03:23:20.889Z","_id":"ckdpcluyx002w8sr38akz1rid","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"物理内存\"><a href=\"#物理内存\" class=\"headerlink\" title=\"物理内存\"></a>物理内存</h2><p>当指令不连贯时，将会产生大量的时间浪费，DOTS和ECS从这个方面优化了内存的访问性能。</p>\n<p><img src=\"/img/1578646439353.png\" alt=\"DOTS的目的\"></p>\n<blockquote>\n<p>日志常见： OOM，显存大小无法分配过来的报错信息<br><img src=\"/img/1578646594733.png\" alt=\"移动设备的区别\"></p>\n</blockquote>\n<blockquote>\n<p>三级缓存：<br>台式：主流在8~16MB<br>移动端：高端如845，2M</p>\n</blockquote>\n<h2 id=\"虚拟内存\"><a href=\"#虚拟内存\" class=\"headerlink\" title=\"虚拟内存\"></a>虚拟内存</h2><p><img src=\"/img/1578646743161.png\" alt=\"虚拟内存\"></p>\n<blockquote>\n<p>交换内存： 当操作系统内存不够时，尝试把不用的内存(deadmemory)交换到硬盘上，从而节省出更多物理内存。<br>为什么移动端没有内存交换：移动设备IO速度慢，存储器的可擦写次数较台式少。<br>IOS提供了把不活跃的内存压缩起来放到一个特定空间。Virtual memory 很大。</p>\n</blockquote>\n<h2 id=\"内存寻址范围\"><a href=\"#内存寻址范围\" class=\"headerlink\" title=\"内存寻址范围\"></a>内存寻址范围</h2><p>可简单认为64位CPU寻址范围大。</p>\n<h2 id=\"安卓内存管理\"><a href=\"#安卓内存管理\" class=\"headerlink\" title=\"安卓内存管理\"></a>安卓内存管理</h2><p><img src=\"/img/1578647010062.png\" alt=\"安卓内存\"></p>\n<blockquote>\n<p>Page: 一般4K一个Page<br>回收和分配以page为单位<br>用户态和内核态</p>\n</blockquote>\n<blockquote>\n<p>LMK, low memeory killer<br>分类：<br>Native： adbd等，adb的守护线程<br>System: 系统服务<br>Persistent: 电话，信息，蓝牙等等<br>Foreground: 应用<br>Perceptible: 搜索等等<br>Services： 服务，云服务等<br>Home:主界面<br>Previous: 之前上一个应用<br>Cached:　后台</p>\n</blockquote>\n<blockquote>\n<p>从低层开始往上杀。 Foreground其实就是闪退的表现。杀到System就重启了。<br><img src=\"/img/1578651845843.png\" alt=\"优化级\"></p>\n</blockquote>\n<h2 id=\"安卓内存指标\"><a href=\"#安卓内存指标\" class=\"headerlink\" title=\"安卓内存指标\"></a>安卓内存指标</h2><p><img src=\"/img/1578652129043.png\" alt=\"内存指标\"></p>\n<blockquote>\n<p>RSS: 当前APP所使用的所有内存<br>PSS: 公共库分配出来的内存<br>USS：只有自己使用的内存，一般在此处优化</p>\n</blockquote>\n<blockquote>\n<p>procrank 指令</p>\n</blockquote>\n<h2 id=\"Unity内存管理\"><a href=\"#Unity内存管理\" class=\"headerlink\" title=\"Unity内存管理\"></a>Unity内存管理</h2><p><img src=\"/img/1578652476304.png\" alt=\"Unity引擎\"></p>\n<h4 id=\"1-Unity-内存按照分配方式分为：\"><a href=\"#1-Unity-内存按照分配方式分为：\" class=\"headerlink\" title=\"1. Unity 内存按照分配方式分为：\"></a>1. Unity 内存按照分配方式分为：</h4><ul>\n<li>Native Memory<ul>\n<li>Managed Memory</li>\n<li>Editor &amp; Runtime 是不同的<ul>\n<li>不止是统计看到的内存大小不同，甚至是内存分配时机和方式也不同</li>\n<li>Asset 在 Runtime 中如果不读取，是不会进内存的，但 Editor 打开就占内存。因为 Editor 不注重 Runtime 的表现，更注重编辑器中编辑时的流畅。</li>\n<li>但如果游戏庞大到几十个 G，如果第一次打开项目，会消耗很多时间，有的大的会几天，甚至到一周。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-Unity-内存按照管理者分为：\"><a href=\"#2-Unity-内存按照管理者分为：\" class=\"headerlink\" title=\"2. Unity 内存按照管理者分为：\"></a>2. Unity 内存按照管理者分为：</h4><ul>\n<li>引擎管理内存，开发者一般使用不到</li>\n<li>用户管理内存（应优先考虑）</li>\n</ul>\n<h4 id=\"3-Unity-检测不到的内存\"><a href=\"#3-Unity-检测不到的内存\" class=\"headerlink\" title=\"3. Unity 检测不到的内存\"></a>3. Unity 检测不到的内存</h4><p>用户分配的 native 内存</p>\n<ul>\n<li>自己写的 Native 插件（C++ 插件）， Unity 无法分析已经编译过的 C++ 是如何去分配和使用内存的。</li>\n<li>Lua 完全由自己管理内存，Unity 无法统计到内部的使用情况。</li>\n</ul>\n<h4 id=\"4-Unity-Native-Memory-管理\"><a href=\"#4-Unity-Native-Memory-管理\" class=\"headerlink\" title=\"4. Unity Native Memory 管理\"></a>4. Unity Native Memory 管理</h4><p>Unity 重载了所有分配内存的操作符（C++ alloc、new），使用这些重载的时候，会需要一个额外的 memory label （Profiler-shaderlab-object-memory-detail-snapshot，里面的名字就是 label：指当前内存要分配到哪一个类型池里面）</p>\n<ul>\n<li>Allocator: 使用重载过的分配符去分配内存时，Allocator 会根据你的 memory label 分配到不同 Allocator 池里面，每个 Allocator 池 单独做自己的跟踪。因此当我们去 Runtime get memory label 下面的池时就可以问 Allocator，里面有多少东西 多少兆。</li>\n<li>NewAsRoot: Allocator 在 NewAsRoot （Memory  “island”（没听清）） 中生成。在这个 Memory Root 下面会有很多子内存：shader：当我们加载一个 Shader 进内存的时候，会生成一个 Shader 的 root。Shader 底下有很多数据：sub shader、Pass 等会作为 memory “island” (root) 的成员去依次分配。因此当我们最后统计 Runtime 的时候，我们会统计 Root，而不会统计成员，因为太多了没法统计。</li>\n<li>及时返给unity: 因为是 C++ 的，因此当我们 delete、free 一个内存的时候会立刻返回内存给系统，与托管内存堆不一样。</li>\n</ul>\n<h4 id=\"5-最佳实践-Native-内存\"><a href=\"#5-最佳实践-Native-内存\" class=\"headerlink\" title=\"5. 最佳实践 Native 内存\"></a>5. 最佳实践 Native 内存</h4><ul>\n<li><p>Scene</p>\n<ul>\n<li>Unity 是一个 C++ 引擎，所有实体最终都会反映在 C++ 上，而不是托管堆里面。因此当我们实例化一个 GameObject 的时候，在 Unity 底层会构建一个或多个 Object 来存储这个 GameObject 的信息，例如很多 Components。因此当 Scene 有过多 GameObject 的时候，Native 内存就会显著上升。</li>\n<li>当我们看 Profiler，发现 Native 内存大量上升的时候，应先去检查 Scene。</li>\n</ul>\n</li>\n<li><p>Audio</p>\n<ul>\n<li><p>DSP buffer （声音的缓冲）</p>\n<ul>\n<li><p>当一个声音要播放的时候，它需要向 CPU 去发送指令——我要播放声音。但如果声音的数据量非常小，就会造成频繁地向 CPU 发送指令，会造成 I\\O。</p>\n</li>\n<li><p>当 Unity 用到 FMOD 声音引擎时（Unity 底层也用到 FMOD），会有一个 Buffer，当 Buffer 填充满了，才会向 CPU 发送“我要播放声音”的指令。</p>\n</li>\n<li><p>DSP buffer 会导致两种问题：</p>\n<ul>\n<li><p>如果（设置的） buffer 过大，会导致声音的延迟。要填充满 buffer 是要很多声音数据的，但声音数据又没这么大，因此会导致一定的<strong>声音延迟</strong>。</p>\n</li>\n<li><p>如果 DSP buffer 太小，会导致 CPU 负担上升，满了就发，消耗增加。</p>\n<p><a href=\"https://docs.unity3d.com/Manual/class-AudioManager.html\">Audio</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Force to mono</p>\n<ul>\n<li>在导入声音的时候有一个设置，很多音效师为了声音质量，会把声音设为双声道。但 95% 的声音，左右声道放的是完全一样的数据。这导致了 1M 的声音会变成 2M，体现在包体里和内存里。因此一般对于声音不是很敏感的游戏，会建议改成 Force to mono，强制单声道。</li>\n</ul>\n</li>\n<li><p>Format</p>\n</li>\n<li><p>Compression Format（看文档，有使用建议）</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Code Size</p>\n<ul>\n<li><p>C++ 模板泛型的滥用会影响到 Code Size、打包的速度。</p>\n<ul>\n<li>AssetBundle</li>\n</ul>\n</li>\n<li><p>TypeTree</p>\n<ul>\n<li>Unity 的每一种类型都有很多数据结构的改变，为了对此做兼容，Unity 会在生成数据类型序列化的时候，顺便会生成 TypeTree：当前我这一个版本里用到了哪些变量，对应的数据类型是什么。在反序列化的时候，会根据 TypeTree 来进行反序列化。<ul>\n<li>如果上一个版本的类型在这个版本中没有，TypeTree 就没有它，因此不会碰到它。</li>\n<li>如果要用一个新的类型，但在这个版本中不存在，会用一个默认值来序列化，从而保证了不会在不同的版本序列化中出错，这个就是 TypeTree 的作用。</li>\n</ul>\n</li>\n<li>Build AssetBundle 中有开关可以关掉 TypeTree。当你确认当前 AssetBundle 的使用和 Build Unity 的版本一模一样，这时候可以把 TypeTree 关掉。<ul>\n<li>例如如果用同样的 Unity 打出来的 AssetBundle 和 APP，TypeTree 则完全可以关掉。</li>\n</ul>\n</li>\n<li>TypeTree 好处：<ul>\n<li>内存减少。TypeTree 本身是数据，也要占内存。</li>\n<li>包大小会减少，因为 TypeTree 会序列化到 AssetBundle 包中，以便读取。</li>\n<li>Build 和运行时会变快。源代码中可以看到，因为每一次 Serialize 东西的时候，如果发现需要 Serialize TypeTree，则会 Serialize 两次：<ul>\n<li>第一次先把 TypeTree Serialize 出来</li>\n<li>第二次把实际的东西 Serialize 出来</li>\n<li>反序列化也会做同样的事情，1. TypeTree 反序列化，2. 实际的东西反序列化。</li>\n</ul>\n</li>\n<li>因此如果确定 TypeTree 不会对兼容性造成影响，可以把它关掉。这样对 Size 大小和 Build Runtime 都会获得收益。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>压缩方式：</p>\n<ul>\n<li><p>Lz4</p>\n<p>  <a href=\"https://docs.unity3d.com/2019.3/Documentation/ScriptReference/BuildCompression.LZ4.html\">BuildCompression.LZ4</a></p>\n<ul>\n<li>LZ4HC “Chunk Based” Compression. 非常快</li>\n<li>和 Lzma 相比，平均压缩比率差 30%。也就是说会导致包体大一点，但是（作者说）速度能快 10 倍以上。</li>\n</ul>\n</li>\n<li><p>Lzma</p>\n<p>  <a href=\"https://docs.unity3d.com/2019.3/Documentation/ScriptReference/BuildCompression.LZMA.html\">BuildCompression.LZMA</a></p>\n<ul>\n<li>Lzma 基本上就不要用了，因为解压和读取速度上都会比较慢。</li>\n<li>还会占大量内存<ul>\n<li>因为是 Steam based 而不是 Chunk Based 的，因此需要一次全解压</li>\n<li>Chunk Based 可以一块一块解压<ul>\n<li>如果发现一个文件在第 5-10 块，那么 LZ4 会依次将 第 5 6 7 8 9 10 块分别解压出来，每次（chunk 的）解压会重用之前的内存，来减少内存的峰值。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>预告：中国版 Unity 会在下个版本（1月5号或2月份）推出新的功能：基于 LZ4 的 AssetBundle 加密，只支持 LZ4。</p>\n</li>\n<li><p>Size &amp; count</p>\n<ul>\n<li>AssetBundle 包打多大是很玄学的问题，但每一个 Asset 打一个 Bundle 这样不太好。<ul>\n<li>有一种减图片大小的方式，把 png 的头都提出来。因为头的色板是通用的，而数据不通用。AssetBundle 也一样，一部分是它的头，一部分是实际打包的部分。因此如果每个 Asset 都打 Bundle 会导致 AssetBundle 的头比数据还要大。</li>\n</ul>\n</li>\n<li>官方的建议是每个 AssetBundle 包大概 1M~2M 左右大小，考虑的是网络带宽。但现在 5G 的时候，可以考虑适当把包体加大。还是要看实际用户的情况。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Resource 文件夹（<strong>Do not use it</strong>. 除非在 debug 的时候）</p>\n<ul>\n<li>Resource 和 AssetBundle 一样，也有头来索引。Resource  在打进包的时候会做一个红黑树，来帮助 Resource 来检索资源在什么位置，</li>\n<li>如果 Resource 非常大，那么红黑树也会非常大。</li>\n<li>红黑树是不可卸载的。在刚开始游戏的时候就会加载进内存中，会持续对游戏造成内存压力。</li>\n<li>会极大拖慢游戏的启动时间。因为红黑树没加载完，游戏不能启动。</li>\n</ul>\n</li>\n<li><p>Texture</p>\n<ul>\n<li><p>upload buffer，和声音的很像：填满多大，就向 CPU push 一次。</p>\n</li>\n<li><p>r/w</p>\n<ul>\n<li>Texture 没必要就不要开 read and write。正常 Texture 读进内存，解析完了，放到 upload buffer 里后，内存里的就会 delete 掉。</li>\n<li>但如果检测到你开了 r/w 就不会 delete 了，就会在显存和内存中各一份。</li>\n</ul>\n</li>\n<li><p>Mip Maps</p>\n<ul>\n<li>UI 没必要开，可以省大量内存。</li>\n</ul>\n</li>\n<li><p>Mesh</p>\n<ul>\n<li>r/w</li>\n<li>compression<ul>\n<li>有些版本 Compression 开了不如不开，内存占用可能更严重，具体需要自己试。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Assets</p>\n<ul>\n<li><p>Assets 的数量实际上和 asset 整个的纹理是有关系的。（？）</p>\n<p><a href=\"https://learn.unity.com/tutorial/memory-management-in-unity\">Memory Management in Unity - Unity Learn</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-Unity-Managed-Memory\"><a href=\"#6-Unity-Managed-Memory\" class=\"headerlink\" title=\"6. Unity Managed Memory\"></a>6. Unity Managed Memory</h4><p><a href=\"https://docs.unity3d.com/Manual/BestPracticeUnderstandingPerformanceInUnity4-1.html\">Understanding the managed heap</a></p>\n<ul>\n<li><p>VM 内存池</p>\n<ul>\n<li>mono 虚拟机的内存池</li>\n<li>VM 会返还内存给 OS 吗？<ul>\n<li><strong>会</strong></li>\n</ul>\n</li>\n<li>返还条件是什么？<ul>\n<li>GC 不会把内存返还给系统</li>\n<li>内存也是以 Block 来管理的。当一个 Block 连续六次 GC 没有被访问到，这块内存才会被返还到系统。（mono runtime 基本看不到，IL2cpp runtime 可能会看到多一点）</li>\n</ul>\n</li>\n<li>不会频繁地分配内存，而是一次分配一大块。</li>\n</ul>\n</li>\n<li><p>GC 机制（BOEHM Non-generational 不分代的）</p>\n<ul>\n<li><p>GC 机制考量</p>\n<ul>\n<li>Throughput(（回收能力）<ul>\n<li>一次回收，会回收多少内存</li>\n</ul>\n</li>\n<li>Pause times（暂停时长）==mark text==<ul>\n<li>进行回收的时候，对主线程的影响有多大</li>\n</ul>\n</li>\n<li>Fragmentation（碎片化）<ul>\n<li>回收内存后，会对整体回收内存池的贡献有多少</li>\n</ul>\n</li>\n<li>Mutator overhead（额外消耗）<ul>\n<li>回收本身有 overhead，要做很多统计、标记的工作</li>\n</ul>\n</li>\n<li>Scalability（可扩展性）<ul>\n<li>扩展到多核、多线程会不会有 bug</li>\n</ul>\n</li>\n<li>Protability（可移植性）<ul>\n<li>不同平台是否可以使用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>BOEHM</p>\n<ul>\n<li><p>Non-generational（不分代的）</p>\n<p>  <img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8934bc1f-3e98-4544-b6de-6ea5b80e2850/Untitled.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8934bc1f-3e98-4544-b6de-6ea5b80e2850/Untitled.png\"></p>\n<ul>\n<li>分代是指：大块内存、小内存、超小内存是分在不同内存区域来进行管理的。还有长久内存，当有一个内存很久没动的时候会移到长久内存区域中，从而省出内存给更频繁分配的内存。</li>\n</ul>\n</li>\n<li><p>Non-compacting（非压缩式）</p>\n<p>  <img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/33a4002e-f37e-4405-b9b3-815c0f43caba/Untitled.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/33a4002e-f37e-4405-b9b3-815c0f43caba/Untitled.png\"></p>\n<ul>\n<li>当有内存被回收的时候，压缩内存会把上图空的地方重新排布。</li>\n<li>但 Unity 的 BOEHM 不会！它是非压缩式的。空着就空着，下次要用了再填进去。<ul>\n<li>历史原因：Unity 和 Mono 合作上，Mono 并不是一直开源免费的，因此 Unity 选择不升级 Mono，与实际 Mono 版本有差距。</li>\n<li>下一代 GC<ul>\n<li>==Incremental GC（渐进式 GC） #F44336==<ul>\n<li>现在如果我们要进行一次 GC，主线程被迫要停下来，遍历所有 GC Memory “island”（没听清），来决定哪些 GC 可以回收。</li>\n<li>==Incremental GC 把暂停主线程的事分帧做了。一点一点分析，主线程不会有峰值。总体 GC 时间不变，但会改善 GC 对主线程的卡顿影响。 #F44336==</li>\n</ul>\n</li>\n<li>SGen 或者升级 Boehm？<ul>\n<li>SGen 是分代的，能避免内存碎片化问题，调动策略，速度较快</li>\n</ul>\n</li>\n<li>IL2CPP<ul>\n<li>现在 IL2CPP 的 GC 机制是 Unity 自己重新写的，是升级版的 Boehm</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Memory fragmentation 内存碎片化</p>\n<p>  <img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/96caa361-8d1a-4f8e-a0b6-87d521bb7f14/Untitled.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/96caa361-8d1a-4f8e-a0b6-87d521bb7f14/Untitled.png\"></p>\n<ul>\n<li>为什么内存下降了，但总体内存池还是上升了？<ul>\n<li>因为内存太大了，内存池没地方放它，虽然有很多内存可用。（内存已被严重碎片化）</li>\n</ul>\n</li>\n<li>当开发者大量加载小内存，使用释放*N，例如配置表、巨大数组，GC 会涨一大截。<ul>\n<li>建议==先操作大内存，再操作小内存，以保证内存以最大效率被重复利用。 #F44336==</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Zombie Memory（僵尸内存）</p>\n<ul>\n<li>内存泄露说法是不对的，内存只是没有任何人能够管理到，但实际上内存没有被泄露，一直在内存池中，被 zombie 掉了，这种叫 Zombie 内存。</li>\n<li>无用内容<ul>\n<li>Coding 时候或者团队配合的时候有问题，加载了一个东西进来，结果从头到尾只用了一次。</li>\n<li>有些开发者写了队列调度策略，但是策略写的不好，导致一些他觉得会被释放的东西，没有被释放掉。</li>\n<li>找是否有活跃度实际上并不高的内存。</li>\n</ul>\n</li>\n<li>没有释放</li>\n<li>通过代码管理和性能工具分析</li>\n</ul>\n</li>\n<li><p>最佳实践</p>\n<ul>\n<li>Don’t Null it, but Destroy it（显式用 Destory，别用 Null）</li>\n<li>Class VS Struct</li>\n<li>Pool In Pool（池中池）<ul>\n<li>VM 本身有内存池，但建议开发者对高频使用的小部件，自己建一个内存池。例如子弹等。</li>\n</ul>\n</li>\n<li>Closures and anonymous methods（闭包和匿名函数）<ul>\n<li>如果看 IL，所有匿名函数和闭包会 new 成一个 class，因此所有变量和要 new 的东西都是要占内存的。这样会导致协程。<ul>\n<li>有些开发者会在游戏开始启用一个协程，直到游戏结束才释放，这是错误的。</li>\n<li>只要协程不被释放掉，所有内存都会在内存里。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Coroutines（协程）<ul>\n<li>可看做闭包和匿名函数的一个特例</li>\n<li>最佳实践：用的时候生产一个，不用的时候 destroy 掉。</li>\n</ul>\n</li>\n<li>Configurations（配置表）<ul>\n<li>不要把整个配置表都扔进去，是否能通过啥来切分下配置表</li>\n</ul>\n</li>\n<li>Singleton<ul>\n<li>慎用</li>\n<li>游戏一开始到游戏死掉，一直在内存中。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>UPR 工具</p>\n<p>  <a href=\"https://connect.unity.com/p/unite-2019-unity-uprxing-neng-bao-gao-gong-neng-jie-shao\">Unite 2019 | Unity UPR性能报告功能介绍 - Unity Connect</a></p>\n<ul>\n<li>免费，在中国增强版里</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"物理内存\"><a href=\"#物理内存\" class=\"headerlink\" title=\"物理内存\"></a>物理内存</h2><p>当指令不连贯时，将会产生大量的时间浪费，DOTS和ECS从这个方面优化了内存的访问性能。</p>\n<p><img src=\"/img/1578646439353.png\" alt=\"DOTS的目的\"></p>\n<blockquote>\n<p>日志常见： OOM，显存大小无法分配过来的报错信息<br><img src=\"/img/1578646594733.png\" alt=\"移动设备的区别\"></p>\n</blockquote>\n<blockquote>\n<p>三级缓存：<br>台式：主流在8~16MB<br>移动端：高端如845，2M</p>\n</blockquote>\n<h2 id=\"虚拟内存\"><a href=\"#虚拟内存\" class=\"headerlink\" title=\"虚拟内存\"></a>虚拟内存</h2><p><img src=\"/img/1578646743161.png\" alt=\"虚拟内存\"></p>\n<blockquote>\n<p>交换内存： 当操作系统内存不够时，尝试把不用的内存(deadmemory)交换到硬盘上，从而节省出更多物理内存。<br>为什么移动端没有内存交换：移动设备IO速度慢，存储器的可擦写次数较台式少。<br>IOS提供了把不活跃的内存压缩起来放到一个特定空间。Virtual memory 很大。</p>\n</blockquote>\n<h2 id=\"内存寻址范围\"><a href=\"#内存寻址范围\" class=\"headerlink\" title=\"内存寻址范围\"></a>内存寻址范围</h2><p>可简单认为64位CPU寻址范围大。</p>\n<h2 id=\"安卓内存管理\"><a href=\"#安卓内存管理\" class=\"headerlink\" title=\"安卓内存管理\"></a>安卓内存管理</h2><p><img src=\"/img/1578647010062.png\" alt=\"安卓内存\"></p>\n<blockquote>\n<p>Page: 一般4K一个Page<br>回收和分配以page为单位<br>用户态和内核态</p>\n</blockquote>\n<blockquote>\n<p>LMK, low memeory killer<br>分类：<br>Native： adbd等，adb的守护线程<br>System: 系统服务<br>Persistent: 电话，信息，蓝牙等等<br>Foreground: 应用<br>Perceptible: 搜索等等<br>Services： 服务，云服务等<br>Home:主界面<br>Previous: 之前上一个应用<br>Cached:　后台</p>\n</blockquote>\n<blockquote>\n<p>从低层开始往上杀。 Foreground其实就是闪退的表现。杀到System就重启了。<br><img src=\"/img/1578651845843.png\" alt=\"优化级\"></p>\n</blockquote>\n<h2 id=\"安卓内存指标\"><a href=\"#安卓内存指标\" class=\"headerlink\" title=\"安卓内存指标\"></a>安卓内存指标</h2><p><img src=\"/img/1578652129043.png\" alt=\"内存指标\"></p>\n<blockquote>\n<p>RSS: 当前APP所使用的所有内存<br>PSS: 公共库分配出来的内存<br>USS：只有自己使用的内存，一般在此处优化</p>\n</blockquote>\n<blockquote>\n<p>procrank 指令</p>\n</blockquote>\n<h2 id=\"Unity内存管理\"><a href=\"#Unity内存管理\" class=\"headerlink\" title=\"Unity内存管理\"></a>Unity内存管理</h2><p><img src=\"/img/1578652476304.png\" alt=\"Unity引擎\"></p>\n<h4 id=\"1-Unity-内存按照分配方式分为：\"><a href=\"#1-Unity-内存按照分配方式分为：\" class=\"headerlink\" title=\"1. Unity 内存按照分配方式分为：\"></a>1. Unity 内存按照分配方式分为：</h4><ul>\n<li>Native Memory<ul>\n<li>Managed Memory</li>\n<li>Editor &amp; Runtime 是不同的<ul>\n<li>不止是统计看到的内存大小不同，甚至是内存分配时机和方式也不同</li>\n<li>Asset 在 Runtime 中如果不读取，是不会进内存的，但 Editor 打开就占内存。因为 Editor 不注重 Runtime 的表现，更注重编辑器中编辑时的流畅。</li>\n<li>但如果游戏庞大到几十个 G，如果第一次打开项目，会消耗很多时间，有的大的会几天，甚至到一周。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-Unity-内存按照管理者分为：\"><a href=\"#2-Unity-内存按照管理者分为：\" class=\"headerlink\" title=\"2. Unity 内存按照管理者分为：\"></a>2. Unity 内存按照管理者分为：</h4><ul>\n<li>引擎管理内存，开发者一般使用不到</li>\n<li>用户管理内存（应优先考虑）</li>\n</ul>\n<h4 id=\"3-Unity-检测不到的内存\"><a href=\"#3-Unity-检测不到的内存\" class=\"headerlink\" title=\"3. Unity 检测不到的内存\"></a>3. Unity 检测不到的内存</h4><p>用户分配的 native 内存</p>\n<ul>\n<li>自己写的 Native 插件（C++ 插件）， Unity 无法分析已经编译过的 C++ 是如何去分配和使用内存的。</li>\n<li>Lua 完全由自己管理内存，Unity 无法统计到内部的使用情况。</li>\n</ul>\n<h4 id=\"4-Unity-Native-Memory-管理\"><a href=\"#4-Unity-Native-Memory-管理\" class=\"headerlink\" title=\"4. Unity Native Memory 管理\"></a>4. Unity Native Memory 管理</h4><p>Unity 重载了所有分配内存的操作符（C++ alloc、new），使用这些重载的时候，会需要一个额外的 memory label （Profiler-shaderlab-object-memory-detail-snapshot，里面的名字就是 label：指当前内存要分配到哪一个类型池里面）</p>\n<ul>\n<li>Allocator: 使用重载过的分配符去分配内存时，Allocator 会根据你的 memory label 分配到不同 Allocator 池里面，每个 Allocator 池 单独做自己的跟踪。因此当我们去 Runtime get memory label 下面的池时就可以问 Allocator，里面有多少东西 多少兆。</li>\n<li>NewAsRoot: Allocator 在 NewAsRoot （Memory  “island”（没听清）） 中生成。在这个 Memory Root 下面会有很多子内存：shader：当我们加载一个 Shader 进内存的时候，会生成一个 Shader 的 root。Shader 底下有很多数据：sub shader、Pass 等会作为 memory “island” (root) 的成员去依次分配。因此当我们最后统计 Runtime 的时候，我们会统计 Root，而不会统计成员，因为太多了没法统计。</li>\n<li>及时返给unity: 因为是 C++ 的，因此当我们 delete、free 一个内存的时候会立刻返回内存给系统，与托管内存堆不一样。</li>\n</ul>\n<h4 id=\"5-最佳实践-Native-内存\"><a href=\"#5-最佳实践-Native-内存\" class=\"headerlink\" title=\"5. 最佳实践 Native 内存\"></a>5. 最佳实践 Native 内存</h4><ul>\n<li><p>Scene</p>\n<ul>\n<li>Unity 是一个 C++ 引擎，所有实体最终都会反映在 C++ 上，而不是托管堆里面。因此当我们实例化一个 GameObject 的时候，在 Unity 底层会构建一个或多个 Object 来存储这个 GameObject 的信息，例如很多 Components。因此当 Scene 有过多 GameObject 的时候，Native 内存就会显著上升。</li>\n<li>当我们看 Profiler，发现 Native 内存大量上升的时候，应先去检查 Scene。</li>\n</ul>\n</li>\n<li><p>Audio</p>\n<ul>\n<li><p>DSP buffer （声音的缓冲）</p>\n<ul>\n<li><p>当一个声音要播放的时候，它需要向 CPU 去发送指令——我要播放声音。但如果声音的数据量非常小，就会造成频繁地向 CPU 发送指令，会造成 I\\O。</p>\n</li>\n<li><p>当 Unity 用到 FMOD 声音引擎时（Unity 底层也用到 FMOD），会有一个 Buffer，当 Buffer 填充满了，才会向 CPU 发送“我要播放声音”的指令。</p>\n</li>\n<li><p>DSP buffer 会导致两种问题：</p>\n<ul>\n<li><p>如果（设置的） buffer 过大，会导致声音的延迟。要填充满 buffer 是要很多声音数据的，但声音数据又没这么大，因此会导致一定的<strong>声音延迟</strong>。</p>\n</li>\n<li><p>如果 DSP buffer 太小，会导致 CPU 负担上升，满了就发，消耗增加。</p>\n<p><a href=\"https://docs.unity3d.com/Manual/class-AudioManager.html\">Audio</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Force to mono</p>\n<ul>\n<li>在导入声音的时候有一个设置，很多音效师为了声音质量，会把声音设为双声道。但 95% 的声音，左右声道放的是完全一样的数据。这导致了 1M 的声音会变成 2M，体现在包体里和内存里。因此一般对于声音不是很敏感的游戏，会建议改成 Force to mono，强制单声道。</li>\n</ul>\n</li>\n<li><p>Format</p>\n</li>\n<li><p>Compression Format（看文档，有使用建议）</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Code Size</p>\n<ul>\n<li><p>C++ 模板泛型的滥用会影响到 Code Size、打包的速度。</p>\n<ul>\n<li>AssetBundle</li>\n</ul>\n</li>\n<li><p>TypeTree</p>\n<ul>\n<li>Unity 的每一种类型都有很多数据结构的改变，为了对此做兼容，Unity 会在生成数据类型序列化的时候，顺便会生成 TypeTree：当前我这一个版本里用到了哪些变量，对应的数据类型是什么。在反序列化的时候，会根据 TypeTree 来进行反序列化。<ul>\n<li>如果上一个版本的类型在这个版本中没有，TypeTree 就没有它，因此不会碰到它。</li>\n<li>如果要用一个新的类型，但在这个版本中不存在，会用一个默认值来序列化，从而保证了不会在不同的版本序列化中出错，这个就是 TypeTree 的作用。</li>\n</ul>\n</li>\n<li>Build AssetBundle 中有开关可以关掉 TypeTree。当你确认当前 AssetBundle 的使用和 Build Unity 的版本一模一样，这时候可以把 TypeTree 关掉。<ul>\n<li>例如如果用同样的 Unity 打出来的 AssetBundle 和 APP，TypeTree 则完全可以关掉。</li>\n</ul>\n</li>\n<li>TypeTree 好处：<ul>\n<li>内存减少。TypeTree 本身是数据，也要占内存。</li>\n<li>包大小会减少，因为 TypeTree 会序列化到 AssetBundle 包中，以便读取。</li>\n<li>Build 和运行时会变快。源代码中可以看到，因为每一次 Serialize 东西的时候，如果发现需要 Serialize TypeTree，则会 Serialize 两次：<ul>\n<li>第一次先把 TypeTree Serialize 出来</li>\n<li>第二次把实际的东西 Serialize 出来</li>\n<li>反序列化也会做同样的事情，1. TypeTree 反序列化，2. 实际的东西反序列化。</li>\n</ul>\n</li>\n<li>因此如果确定 TypeTree 不会对兼容性造成影响，可以把它关掉。这样对 Size 大小和 Build Runtime 都会获得收益。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>压缩方式：</p>\n<ul>\n<li><p>Lz4</p>\n<p>  <a href=\"https://docs.unity3d.com/2019.3/Documentation/ScriptReference/BuildCompression.LZ4.html\">BuildCompression.LZ4</a></p>\n<ul>\n<li>LZ4HC “Chunk Based” Compression. 非常快</li>\n<li>和 Lzma 相比，平均压缩比率差 30%。也就是说会导致包体大一点，但是（作者说）速度能快 10 倍以上。</li>\n</ul>\n</li>\n<li><p>Lzma</p>\n<p>  <a href=\"https://docs.unity3d.com/2019.3/Documentation/ScriptReference/BuildCompression.LZMA.html\">BuildCompression.LZMA</a></p>\n<ul>\n<li>Lzma 基本上就不要用了，因为解压和读取速度上都会比较慢。</li>\n<li>还会占大量内存<ul>\n<li>因为是 Steam based 而不是 Chunk Based 的，因此需要一次全解压</li>\n<li>Chunk Based 可以一块一块解压<ul>\n<li>如果发现一个文件在第 5-10 块，那么 LZ4 会依次将 第 5 6 7 8 9 10 块分别解压出来，每次（chunk 的）解压会重用之前的内存，来减少内存的峰值。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>预告：中国版 Unity 会在下个版本（1月5号或2月份）推出新的功能：基于 LZ4 的 AssetBundle 加密，只支持 LZ4。</p>\n</li>\n<li><p>Size &amp; count</p>\n<ul>\n<li>AssetBundle 包打多大是很玄学的问题，但每一个 Asset 打一个 Bundle 这样不太好。<ul>\n<li>有一种减图片大小的方式，把 png 的头都提出来。因为头的色板是通用的，而数据不通用。AssetBundle 也一样，一部分是它的头，一部分是实际打包的部分。因此如果每个 Asset 都打 Bundle 会导致 AssetBundle 的头比数据还要大。</li>\n</ul>\n</li>\n<li>官方的建议是每个 AssetBundle 包大概 1M~2M 左右大小，考虑的是网络带宽。但现在 5G 的时候，可以考虑适当把包体加大。还是要看实际用户的情况。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Resource 文件夹（<strong>Do not use it</strong>. 除非在 debug 的时候）</p>\n<ul>\n<li>Resource 和 AssetBundle 一样，也有头来索引。Resource  在打进包的时候会做一个红黑树，来帮助 Resource 来检索资源在什么位置，</li>\n<li>如果 Resource 非常大，那么红黑树也会非常大。</li>\n<li>红黑树是不可卸载的。在刚开始游戏的时候就会加载进内存中，会持续对游戏造成内存压力。</li>\n<li>会极大拖慢游戏的启动时间。因为红黑树没加载完，游戏不能启动。</li>\n</ul>\n</li>\n<li><p>Texture</p>\n<ul>\n<li><p>upload buffer，和声音的很像：填满多大，就向 CPU push 一次。</p>\n</li>\n<li><p>r/w</p>\n<ul>\n<li>Texture 没必要就不要开 read and write。正常 Texture 读进内存，解析完了，放到 upload buffer 里后，内存里的就会 delete 掉。</li>\n<li>但如果检测到你开了 r/w 就不会 delete 了，就会在显存和内存中各一份。</li>\n</ul>\n</li>\n<li><p>Mip Maps</p>\n<ul>\n<li>UI 没必要开，可以省大量内存。</li>\n</ul>\n</li>\n<li><p>Mesh</p>\n<ul>\n<li>r/w</li>\n<li>compression<ul>\n<li>有些版本 Compression 开了不如不开，内存占用可能更严重，具体需要自己试。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Assets</p>\n<ul>\n<li><p>Assets 的数量实际上和 asset 整个的纹理是有关系的。（？）</p>\n<p><a href=\"https://learn.unity.com/tutorial/memory-management-in-unity\">Memory Management in Unity - Unity Learn</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-Unity-Managed-Memory\"><a href=\"#6-Unity-Managed-Memory\" class=\"headerlink\" title=\"6. Unity Managed Memory\"></a>6. Unity Managed Memory</h4><p><a href=\"https://docs.unity3d.com/Manual/BestPracticeUnderstandingPerformanceInUnity4-1.html\">Understanding the managed heap</a></p>\n<ul>\n<li><p>VM 内存池</p>\n<ul>\n<li>mono 虚拟机的内存池</li>\n<li>VM 会返还内存给 OS 吗？<ul>\n<li><strong>会</strong></li>\n</ul>\n</li>\n<li>返还条件是什么？<ul>\n<li>GC 不会把内存返还给系统</li>\n<li>内存也是以 Block 来管理的。当一个 Block 连续六次 GC 没有被访问到，这块内存才会被返还到系统。（mono runtime 基本看不到，IL2cpp runtime 可能会看到多一点）</li>\n</ul>\n</li>\n<li>不会频繁地分配内存，而是一次分配一大块。</li>\n</ul>\n</li>\n<li><p>GC 机制（BOEHM Non-generational 不分代的）</p>\n<ul>\n<li><p>GC 机制考量</p>\n<ul>\n<li>Throughput(（回收能力）<ul>\n<li>一次回收，会回收多少内存</li>\n</ul>\n</li>\n<li>Pause times（暂停时长）==mark text==<ul>\n<li>进行回收的时候，对主线程的影响有多大</li>\n</ul>\n</li>\n<li>Fragmentation（碎片化）<ul>\n<li>回收内存后，会对整体回收内存池的贡献有多少</li>\n</ul>\n</li>\n<li>Mutator overhead（额外消耗）<ul>\n<li>回收本身有 overhead，要做很多统计、标记的工作</li>\n</ul>\n</li>\n<li>Scalability（可扩展性）<ul>\n<li>扩展到多核、多线程会不会有 bug</li>\n</ul>\n</li>\n<li>Protability（可移植性）<ul>\n<li>不同平台是否可以使用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>BOEHM</p>\n<ul>\n<li><p>Non-generational（不分代的）</p>\n<p>  <img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8934bc1f-3e98-4544-b6de-6ea5b80e2850/Untitled.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8934bc1f-3e98-4544-b6de-6ea5b80e2850/Untitled.png\"></p>\n<ul>\n<li>分代是指：大块内存、小内存、超小内存是分在不同内存区域来进行管理的。还有长久内存，当有一个内存很久没动的时候会移到长久内存区域中，从而省出内存给更频繁分配的内存。</li>\n</ul>\n</li>\n<li><p>Non-compacting（非压缩式）</p>\n<p>  <img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/33a4002e-f37e-4405-b9b3-815c0f43caba/Untitled.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/33a4002e-f37e-4405-b9b3-815c0f43caba/Untitled.png\"></p>\n<ul>\n<li>当有内存被回收的时候，压缩内存会把上图空的地方重新排布。</li>\n<li>但 Unity 的 BOEHM 不会！它是非压缩式的。空着就空着，下次要用了再填进去。<ul>\n<li>历史原因：Unity 和 Mono 合作上，Mono 并不是一直开源免费的，因此 Unity 选择不升级 Mono，与实际 Mono 版本有差距。</li>\n<li>下一代 GC<ul>\n<li>==Incremental GC（渐进式 GC） #F44336==<ul>\n<li>现在如果我们要进行一次 GC，主线程被迫要停下来，遍历所有 GC Memory “island”（没听清），来决定哪些 GC 可以回收。</li>\n<li>==Incremental GC 把暂停主线程的事分帧做了。一点一点分析，主线程不会有峰值。总体 GC 时间不变，但会改善 GC 对主线程的卡顿影响。 #F44336==</li>\n</ul>\n</li>\n<li>SGen 或者升级 Boehm？<ul>\n<li>SGen 是分代的，能避免内存碎片化问题，调动策略，速度较快</li>\n</ul>\n</li>\n<li>IL2CPP<ul>\n<li>现在 IL2CPP 的 GC 机制是 Unity 自己重新写的，是升级版的 Boehm</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Memory fragmentation 内存碎片化</p>\n<p>  <img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/96caa361-8d1a-4f8e-a0b6-87d521bb7f14/Untitled.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/96caa361-8d1a-4f8e-a0b6-87d521bb7f14/Untitled.png\"></p>\n<ul>\n<li>为什么内存下降了，但总体内存池还是上升了？<ul>\n<li>因为内存太大了，内存池没地方放它，虽然有很多内存可用。（内存已被严重碎片化）</li>\n</ul>\n</li>\n<li>当开发者大量加载小内存，使用释放*N，例如配置表、巨大数组，GC 会涨一大截。<ul>\n<li>建议==先操作大内存，再操作小内存，以保证内存以最大效率被重复利用。 #F44336==</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Zombie Memory（僵尸内存）</p>\n<ul>\n<li>内存泄露说法是不对的，内存只是没有任何人能够管理到，但实际上内存没有被泄露，一直在内存池中，被 zombie 掉了，这种叫 Zombie 内存。</li>\n<li>无用内容<ul>\n<li>Coding 时候或者团队配合的时候有问题，加载了一个东西进来，结果从头到尾只用了一次。</li>\n<li>有些开发者写了队列调度策略，但是策略写的不好，导致一些他觉得会被释放的东西，没有被释放掉。</li>\n<li>找是否有活跃度实际上并不高的内存。</li>\n</ul>\n</li>\n<li>没有释放</li>\n<li>通过代码管理和性能工具分析</li>\n</ul>\n</li>\n<li><p>最佳实践</p>\n<ul>\n<li>Don’t Null it, but Destroy it（显式用 Destory，别用 Null）</li>\n<li>Class VS Struct</li>\n<li>Pool In Pool（池中池）<ul>\n<li>VM 本身有内存池，但建议开发者对高频使用的小部件，自己建一个内存池。例如子弹等。</li>\n</ul>\n</li>\n<li>Closures and anonymous methods（闭包和匿名函数）<ul>\n<li>如果看 IL，所有匿名函数和闭包会 new 成一个 class，因此所有变量和要 new 的东西都是要占内存的。这样会导致协程。<ul>\n<li>有些开发者会在游戏开始启用一个协程，直到游戏结束才释放，这是错误的。</li>\n<li>只要协程不被释放掉，所有内存都会在内存里。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Coroutines（协程）<ul>\n<li>可看做闭包和匿名函数的一个特例</li>\n<li>最佳实践：用的时候生产一个，不用的时候 destroy 掉。</li>\n</ul>\n</li>\n<li>Configurations（配置表）<ul>\n<li>不要把整个配置表都扔进去，是否能通过啥来切分下配置表</li>\n</ul>\n</li>\n<li>Singleton<ul>\n<li>慎用</li>\n<li>游戏一开始到游戏死掉，一直在内存中。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>UPR 工具</p>\n<p>  <a href=\"https://connect.unity.com/p/unite-2019-unity-uprxing-neng-bao-gao-gong-neng-jie-shao\">Unite 2019 | Unity UPR性能报告功能介绍 - Unity Connect</a></p>\n<ul>\n<li>免费，在中国增强版里</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Python Note 4","_content":"# Python Note 4\n\n### Pypi & Pip\n+ [pypi](https://pypi.org/)\n+ use as : pip install openpyxl  to install \n\n### Use openpyxl\n\n```python\nimport openpyxl as xl\nfrom openpyxl.chart import BarChart, Reference\nwb = xl.load_workbook(\"pydemo2/transactions.xlsx\")\nsheet = wb[\"Sheet1\"]\nfor row in range(2, sheet.max_row + 1):\n    cell = sheet.cell(row, 3)\n    real_val = cell.value * 0.9\n    real_val_cell = sheet.cell(row, 4)\n    real_val_cell.value = real_val\n\nvalues = Reference(sheet, min_row=2, max_row=sheet.max_row, min_col=4, max_col=4)\nchart = BarChart()\nchart.add_data(values)\nsheet.add_chart(chart, 'e2')\nwb.save('pydemo2/transactions_n2.xlsx')\n```\n\n### Machine learning\n\n+ Self-driving Cars\n+ Robotics\n+ Language Processing\n+ Vision Processing\n+ Forecasting Stock Market Trends","source":"_posts/python_4.md","raw":"---\ntitle: Python Note 4\ncategories:\n- Python\ntags: \n- Python\n- Note\n---\n# Python Note 4\n\n### Pypi & Pip\n+ [pypi](https://pypi.org/)\n+ use as : pip install openpyxl  to install \n\n### Use openpyxl\n\n```python\nimport openpyxl as xl\nfrom openpyxl.chart import BarChart, Reference\nwb = xl.load_workbook(\"pydemo2/transactions.xlsx\")\nsheet = wb[\"Sheet1\"]\nfor row in range(2, sheet.max_row + 1):\n    cell = sheet.cell(row, 3)\n    real_val = cell.value * 0.9\n    real_val_cell = sheet.cell(row, 4)\n    real_val_cell.value = real_val\n\nvalues = Reference(sheet, min_row=2, max_row=sheet.max_row, min_col=4, max_col=4)\nchart = BarChart()\nchart.add_data(values)\nsheet.add_chart(chart, 'e2')\nwb.save('pydemo2/transactions_n2.xlsx')\n```\n\n### Machine learning\n\n+ Self-driving Cars\n+ Robotics\n+ Language Processing\n+ Vision Processing\n+ Forecasting Stock Market Trends","slug":"python_4","published":1,"date":"2020-08-11T01:59:40.741Z","updated":"2020-08-11T01:59:40.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpcluyz00308sr36x7ugw7k","content":"<h1 id=\"Python-Note-4\"><a href=\"#Python-Note-4\" class=\"headerlink\" title=\"Python Note 4\"></a>Python Note 4</h1><h3 id=\"Pypi-amp-Pip\"><a href=\"#Pypi-amp-Pip\" class=\"headerlink\" title=\"Pypi &amp; Pip\"></a>Pypi &amp; Pip</h3><ul>\n<li><a href=\"https://pypi.org/\">pypi</a></li>\n<li>use as : pip install openpyxl  to install </li>\n</ul>\n<h3 id=\"Use-openpyxl\"><a href=\"#Use-openpyxl\" class=\"headerlink\" title=\"Use openpyxl\"></a>Use openpyxl</h3><pre><code class=\"python\">import openpyxl as xl\nfrom openpyxl.chart import BarChart, Reference\nwb = xl.load_workbook(&quot;pydemo2/transactions.xlsx&quot;)\nsheet = wb[&quot;Sheet1&quot;]\nfor row in range(2, sheet.max_row + 1):\n    cell = sheet.cell(row, 3)\n    real_val = cell.value * 0.9\n    real_val_cell = sheet.cell(row, 4)\n    real_val_cell.value = real_val\n\nvalues = Reference(sheet, min_row=2, max_row=sheet.max_row, min_col=4, max_col=4)\nchart = BarChart()\nchart.add_data(values)\nsheet.add_chart(chart, &#39;e2&#39;)\nwb.save(&#39;pydemo2/transactions_n2.xlsx&#39;)</code></pre>\n<h3 id=\"Machine-learning\"><a href=\"#Machine-learning\" class=\"headerlink\" title=\"Machine learning\"></a>Machine learning</h3><ul>\n<li>Self-driving Cars</li>\n<li>Robotics</li>\n<li>Language Processing</li>\n<li>Vision Processing</li>\n<li>Forecasting Stock Market Trends</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Python-Note-4\"><a href=\"#Python-Note-4\" class=\"headerlink\" title=\"Python Note 4\"></a>Python Note 4</h1><h3 id=\"Pypi-amp-Pip\"><a href=\"#Pypi-amp-Pip\" class=\"headerlink\" title=\"Pypi &amp; Pip\"></a>Pypi &amp; Pip</h3><ul>\n<li><a href=\"https://pypi.org/\">pypi</a></li>\n<li>use as : pip install openpyxl  to install </li>\n</ul>\n<h3 id=\"Use-openpyxl\"><a href=\"#Use-openpyxl\" class=\"headerlink\" title=\"Use openpyxl\"></a>Use openpyxl</h3><pre><code class=\"python\">import openpyxl as xl\nfrom openpyxl.chart import BarChart, Reference\nwb = xl.load_workbook(&quot;pydemo2/transactions.xlsx&quot;)\nsheet = wb[&quot;Sheet1&quot;]\nfor row in range(2, sheet.max_row + 1):\n    cell = sheet.cell(row, 3)\n    real_val = cell.value * 0.9\n    real_val_cell = sheet.cell(row, 4)\n    real_val_cell.value = real_val\n\nvalues = Reference(sheet, min_row=2, max_row=sheet.max_row, min_col=4, max_col=4)\nchart = BarChart()\nchart.add_data(values)\nsheet.add_chart(chart, &#39;e2&#39;)\nwb.save(&#39;pydemo2/transactions_n2.xlsx&#39;)</code></pre>\n<h3 id=\"Machine-learning\"><a href=\"#Machine-learning\" class=\"headerlink\" title=\"Machine learning\"></a>Machine learning</h3><ul>\n<li>Self-driving Cars</li>\n<li>Robotics</li>\n<li>Language Processing</li>\n<li>Vision Processing</li>\n<li>Forecasting Stock Market Trends</li>\n</ul>\n"},{"title":"动态规划","_content":"\n#### DP-Dynamic Programing \n* 试用场景：\n大部分用于求最小值，最大值，最优，计数等的问题\n\n* 一般步骤：递归+记忆化\n* 1.寻找递归式：由大化小\n* 2.先写递归式，记忆重复项以优化算法复杂度。解决子问题重叠求解。\n* 3.优化为非递归： 由小到大，由大到小（记忆）。\n\n#### 面试常见类型：\n* 1.矩阵坐标型 30%\n* 2.序列型：单序列，双序列  50%\n> 单序列：LIS：longest increasing sequence 最长上升序列\n> 双序列：LCS: longest common sequence 最长公共序列\n* 3.Knapsack变种 20%\n> subset sum. 硬币类题\n* 4.区间型  <10%\n> 矩阵相乘，optimised BST.","source":"_posts/动态规划.md","raw":"---\ntitle: 动态规划\ncategories:\n- 算法\n---\n\n#### DP-Dynamic Programing \n* 试用场景：\n大部分用于求最小值，最大值，最优，计数等的问题\n\n* 一般步骤：递归+记忆化\n* 1.寻找递归式：由大化小\n* 2.先写递归式，记忆重复项以优化算法复杂度。解决子问题重叠求解。\n* 3.优化为非递归： 由小到大，由大到小（记忆）。\n\n#### 面试常见类型：\n* 1.矩阵坐标型 30%\n* 2.序列型：单序列，双序列  50%\n> 单序列：LIS：longest increasing sequence 最长上升序列\n> 双序列：LCS: longest common sequence 最长公共序列\n* 3.Knapsack变种 20%\n> subset sum. 硬币类题\n* 4.区间型  <10%\n> 矩阵相乘，optimised BST.","slug":"动态规划","published":1,"date":"2020-09-08T03:23:20.889Z","updated":"2020-09-08T03:23:20.889Z","_id":"ckdpcluz000338sr3rmctxk4s","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"DP-Dynamic-Programing\"><a href=\"#DP-Dynamic-Programing\" class=\"headerlink\" title=\"DP-Dynamic Programing\"></a>DP-Dynamic Programing</h4><ul>\n<li><p>试用场景：<br>大部分用于求最小值，最大值，最优，计数等的问题</p>\n</li>\n<li><p>一般步骤：递归+记忆化</p>\n</li>\n<li><p>1.寻找递归式：由大化小</p>\n</li>\n<li><p>2.先写递归式，记忆重复项以优化算法复杂度。解决子问题重叠求解。</p>\n</li>\n<li><p>3.优化为非递归： 由小到大，由大到小（记忆）。</p>\n</li>\n</ul>\n<h4 id=\"面试常见类型：\"><a href=\"#面试常见类型：\" class=\"headerlink\" title=\"面试常见类型：\"></a>面试常见类型：</h4><ul>\n<li>1.矩阵坐标型 30%</li>\n<li>2.序列型：单序列，双序列  50%<blockquote>\n<p>单序列：LIS：longest increasing sequence 最长上升序列<br>双序列：LCS: longest common sequence 最长公共序列</p>\n</blockquote>\n</li>\n<li>3.Knapsack变种 20%<blockquote>\n<p>subset sum. 硬币类题</p>\n</blockquote>\n</li>\n<li>4.区间型  &lt;10%<blockquote>\n<p>矩阵相乘，optimised BST.</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"DP-Dynamic-Programing\"><a href=\"#DP-Dynamic-Programing\" class=\"headerlink\" title=\"DP-Dynamic Programing\"></a>DP-Dynamic Programing</h4><ul>\n<li><p>试用场景：<br>大部分用于求最小值，最大值，最优，计数等的问题</p>\n</li>\n<li><p>一般步骤：递归+记忆化</p>\n</li>\n<li><p>1.寻找递归式：由大化小</p>\n</li>\n<li><p>2.先写递归式，记忆重复项以优化算法复杂度。解决子问题重叠求解。</p>\n</li>\n<li><p>3.优化为非递归： 由小到大，由大到小（记忆）。</p>\n</li>\n</ul>\n<h4 id=\"面试常见类型：\"><a href=\"#面试常见类型：\" class=\"headerlink\" title=\"面试常见类型：\"></a>面试常见类型：</h4><ul>\n<li>1.矩阵坐标型 30%</li>\n<li>2.序列型：单序列，双序列  50%<blockquote>\n<p>单序列：LIS：longest increasing sequence 最长上升序列<br>双序列：LCS: longest common sequence 最长公共序列</p>\n</blockquote>\n</li>\n<li>3.Knapsack变种 20%<blockquote>\n<p>subset sum. 硬币类题</p>\n</blockquote>\n</li>\n<li>4.区间型  &lt;10%<blockquote>\n<p>矩阵相乘，optimised BST.</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"力扣刷题顺序","_content":"\n#### 概述\n![enter description here](/img/1587017641511.png)\n\n\n#### 分类总述\n\n![树的题目推荐](/img/1587018007123.png)\n![分治](/img/1587018034122.png)\n![链表](/img/1587018052146.png)\n![二叉搜索树](/img/1587018065979.png)\n![图论](/img/1587018079539.png)\n![搜索与回溯](/img/1587018086814.png)\n![二分搜索](/img/1587018118278.png)\n![双指针](/img/1587018132041.png)\n![高级](/img/1587018141563.png)\n![动态规划](/img/1587018151039.png)\n\n","source":"_posts/力扣刷题顺序.md","raw":"---\ntitle: 力扣刷题顺序\ncategories:\n- 算法\n---\n\n#### 概述\n![enter description here](/img/1587017641511.png)\n\n\n#### 分类总述\n\n![树的题目推荐](/img/1587018007123.png)\n![分治](/img/1587018034122.png)\n![链表](/img/1587018052146.png)\n![二叉搜索树](/img/1587018065979.png)\n![图论](/img/1587018079539.png)\n![搜索与回溯](/img/1587018086814.png)\n![二分搜索](/img/1587018118278.png)\n![双指针](/img/1587018132041.png)\n![高级](/img/1587018141563.png)\n![动态规划](/img/1587018151039.png)\n\n","slug":"力扣刷题顺序","published":1,"date":"2020-09-08T03:23:20.889Z","updated":"2020-09-08T03:23:20.889Z","_id":"ckdpcluz200378sr34h9kmru2","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p><img src=\"/img/1587017641511.png\" alt=\"enter description here\"></p>\n<h4 id=\"分类总述\"><a href=\"#分类总述\" class=\"headerlink\" title=\"分类总述\"></a>分类总述</h4><p><img src=\"/img/1587018007123.png\" alt=\"树的题目推荐\"><br><img src=\"/img/1587018034122.png\" alt=\"分治\"><br><img src=\"/img/1587018052146.png\" alt=\"链表\"><br><img src=\"/img/1587018065979.png\" alt=\"二叉搜索树\"><br><img src=\"/img/1587018079539.png\" alt=\"图论\"><br><img src=\"/img/1587018086814.png\" alt=\"搜索与回溯\"><br><img src=\"/img/1587018118278.png\" alt=\"二分搜索\"><br><img src=\"/img/1587018132041.png\" alt=\"双指针\"><br><img src=\"/img/1587018141563.png\" alt=\"高级\"><br><img src=\"/img/1587018151039.png\" alt=\"动态规划\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p><img src=\"/img/1587017641511.png\" alt=\"enter description here\"></p>\n<h4 id=\"分类总述\"><a href=\"#分类总述\" class=\"headerlink\" title=\"分类总述\"></a>分类总述</h4><p><img src=\"/img/1587018007123.png\" alt=\"树的题目推荐\"><br><img src=\"/img/1587018034122.png\" alt=\"分治\"><br><img src=\"/img/1587018052146.png\" alt=\"链表\"><br><img src=\"/img/1587018065979.png\" alt=\"二叉搜索树\"><br><img src=\"/img/1587018079539.png\" alt=\"图论\"><br><img src=\"/img/1587018086814.png\" alt=\"搜索与回溯\"><br><img src=\"/img/1587018118278.png\" alt=\"二分搜索\"><br><img src=\"/img/1587018132041.png\" alt=\"双指针\"><br><img src=\"/img/1587018141563.png\" alt=\"高级\"><br><img src=\"/img/1587018151039.png\" alt=\"动态规划\"></p>\n"},{"title":"天天生鲜项目实例P1","_content":"\n## 相关背景概念\n\n> B2B, O2O, B2C, C2C..\n\n## 数据库设计\n![enter description here](/img/1573441070020.png)\n\n> 对数据库进行授权\n> ![enter description here](/img/1573442010455.png)\n\n> 使用后台管理\n>![enter description here](/img/1573442404015.png)\n\n\n## 项目搭建\n\n**1.一个模块对应一个APP**\n**2.将所有app归类到一个apps文件夹**\n**3.\\[可选\\]  设置一个系统路径，这样就不用注册APP时添加前缀文件夹**\n\t\n``` python\nsys.path.insert(0, os.path.join(BASE_DIR, 'apps'))\n```\n\n**4.添加templates包和static包**\n>TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')\n>TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [TEMPLATES_DIR],\n\t\t...\n> STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n\n**5.添加templates和static路径到setting**\n\n**6.配置数据库为Mysql**\n\n>   'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'dailyfresh',\n        'USER': 'root',\n        'PASSWORD':'bk102435',\n        'HOST':'39.97.170.176',\n        'PORT':3306,\n\t\n**7.设置语言**\n\n```python\nLANGUAGE_CODE = 'zh-hans'\nTIME_ZONE = 'Asia/Shanghai'\n```\n\n**8.配置项目总的urls**\n**9.为各应用创建urls**\n\n**10.数据层准备，创建db包，创建basemodel.py**\n\n**11.\\[可选\\]创建各models 或 链接现有数据库**\n\n> Inpectdb 也可针对某张表：\n> python manage.py inspectdb TableName > output.py\n> 链接： https://www.jianshu.com/p/037bd7e20a7a\n\n**12.指定django认证系统的模型**\n这样superuser的模型表就被指定到自己的user表\n> settings.py中加入 \n> AUTH_USER_MODEL = ‘user.User’\n\n###  13.  可能出现的问题\n不确定是不是使用pymysql导致的，这里会有两个问题\n*  1.现在django使用mysqlclient，而且恶心的是会在启动时自动验证版本号，pymysql最高只到0.9.3。这里根据报错直接那代码注释即可！\n*  2.makemigration出错，提示在django代码里的operations.py中的last_executed_query函数，由于python3与Python2的decode与encode函数区别，这里也需要把.decode..去掉。\n\n\n\n\n## User模块 - 注册\n\n**1.准备views函数**\n* views.py添加相应函数\nregister函数为接收跳转网页, register_handler函数接收处理及逻辑\n\n```python\ndef register():\n\tpass\ndef register_handle():\n\tpass\n```\n\n* urls.py配置对应view函数路径\n\n```python\npath('register',views.register,name='register')\npath('register_handle',views.register_handle,name='register_handle')\n```\n\n\n**2.templates里放入html信息**\n\n* 编辑表单\\<form\\>\n\t添加method,action.\n\t写法升级：\n\n```python\naction=\"{% url 'user:detail' %}\" \n```\n\n旧的写法:\n\n```python\naction = \"/user/register_handle\"\n```\n\n> 注意事项：\n> 1. 网页使用跳转，需要在urls.py中指定name:\n> 如下：所对应的地址段需要设置不同的正则\n> \n> ```python\n> path('add/', calc_views.add, name='add'),  # new\n> path('add/<int:a>/<int:b>/', calc_views.old_add2_redirect,name='add'),\n> ```\n> 2.使用shell, 用reverse测试\n> 地址反射的机制：django.urls reverse\n> 3.定义一个跳转函数来做：\n> \n> ```python\n> urls.py中加入如下：\n>  path('add/<int:a>/<int:b>/', calc_views.old_add2_redirect,name='add'),\n> path('new_add/<int:a>/<int:b>/', calc_views.add2, name='add2'),\n>\n> views.py中加入如下：\n> def old_add2_redirect(request):\n> return HttpResponseRedirect(\n>        reverse('add2', args=(a, b))\n>    )\n> 测试网址： http://127.0.0.1:8000/add/5/6/ \n> 这时最终就将跳到美术http://127.0.0.1:8000/new_add/5/6/\n> ```\n\n\n\t\n**3.使用类视图**\n\n> 1.优化去register_handle函数，使用get/post判断实现不同的跳转类型\n> 2.基于1的优化，使用类视图方式加载\n\n```python\nfrom django.views.generic import View\n\nclass RegisterView(View):\n\n    def get(self, request):\n        pass\n\n    def post(self, request):\n\t\tpass\n```\n\n**3.激活用户**\n\n1. 使用itsdangerous为网址进行加密签名\n2. 调用django.core.mail 的send_mail来发送邮件，把链接成文本发送过去\n\n```python\nfrom django.conf import settings\nfrom django.core.mail import send_mail\nimport time\n\ndef send_register_active_email(to_email, username, token):\n    '''send active email'''\n    subject = \"天天生鲜欢迎消息\"\n    message = \"\"\n    sender = settings.DEFAULT_FROM_EMAIL\n    receiver = [to_email]\n    html_message = \"<h1>%s, 欢迎你</h1>请点击下面链接激活<br/><a href=\\\"http://127.0.0.1:8000/user/active/%s\\\">http://127.0.0.1:8000/user/active/%s</a>\" % (\n    username, token, token)\n    send_mail(subject, message, sender, receiver, html_message=html_message)\n    time.sleep(5)\n```\n>也可使用Python的发email库\n\n>```python\n>  def active_email(self, email_addr, active_code):\n>      # 第三方 SMTP 服务 # 授权码：cmatkgceuuxcbddc\n>      mail_host = \"smtp.qq.com\"  # 设置服务器\n>      mail_user = \"1024037035@qq.com\"  # 用户名\n>      mail_pass = \"cmatkgceuuxcbddc\"  # 口令\n>      sender = '1024037035@qq.com'\n>      receivers = [email_addr]  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n >       # 三个参数：第一个为文本内容，第二个 plain 设置文本格式，第三个 utf-8 设置编码\n>      try:\n>          smtp_obj = smtplib.SMTP()\n>          smtp_obj.connect(mail_host, 25)  # 25 为 SMTP 端口号\n>          smtp_obj.login(mail_user, mail_pass)\n>          smtp_obj.sendmail(sender, receivers, message.as_string())\n>          return True\n>          \"邮件发送成功\"\n>      except smtplib.SMTPException:\n >           return False\n>            \"Error: 无法发送邮件\"\n>```\n\n3. 在Url中配置激活的功能\n\n```python\npath('active/<token>',ActiveView.as_view(), name='active'),\n```\n\n4. 在views.py中写一个ActiveView的视图来处理激活\n \n```python\nclass ActiveView(View):\n    def get(self, request, token):\n        try:\n            serializer = Serializer(settings.SECRET_KEY, 3600)\n            # print(type(token))\n            token = token.encode()\n            info = serializer.loads(token)\n            user_id = info['confirm']\n            user = User.objects.get(id=user_id)\n            user.is_active = 1\n            user.save()\n\n            # 跳转到登陆页面\n            return redirect(reverse('user:login'))\n        except SignatureExpired as e:\n            # 激活链接过期\n            return HttpResponse('激活链接已过期')\n```\n\n\n**4.使用celery做为异步处理**\n\n![enter description here](/img/1574171584470.png)\n\n1.配置一个项目目录为：celery_tasks/tasks.py的文件\n2.在tasks.py写入配置如 \n\n```python\n# use celery\nfrom celery import Celery\n# create celery instance\napp = Celery('celery_tasks.tasks', broker='redis://:pwd@39.97.170.176:6379/8')\n\n# define task function\n@app.task\ndef send_register_active_email(to_email, username, token):\n\tpass\n```\n3.执行的脚本函数里写入：\n\n```python\n        # 发送邮件1\n        send_register_active_email.delay(email, username, secret_info)\n```\n\n4.在有redis的电脑上\n\n* 复制项目代码\n* 在tasks.py中加入初始化django的代码\n* \n```python\nimport os\nimport django\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dailyfresh.settings')\ndjango.setup()\n```\n* 启动worker\n\n```\ncelery -A celery_tasks.tasks worker -l info\n```\n* 启动redis , 大功告成，测试\n\n> 可能出现的问题\n> 在windows系统中：\n>  使用这种方式来启动worker: pip install eventlet -> celery -A your_app_name worker --pool=eventlet\n>  或： celery -A your_app_name worker --pool=solo -l info\n>  或：\n>  at worker side:\nset FORKED_BY_MULTIPROCESSING = 1\nthen\ncelery -A myworker worker --loglevel=info\n\n## User模块 - 登录\n\n**LoginView，使用自带的授权**\n\n授权，如果成功则会返回user对象：：\n\n```\nuser = authenticate(username=username, password=pwd)\n```\n\n登录：\n\n```python\nlogin(request, user)\n```\n\n添加URL及表单部分，参考注册流程\n\n**为减少数据库操作，使用redis存储**\n\n1.安装 django-redis\n2.settings加入如下配置即可：\n\n```python\n#Django 缓存配置\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": \"redis://127.0.0.1:6379/9\", #服务器地址\n        \"OPTIONS\": {\n            \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n            \"CONNECTION_POOL_KWARGS\": {\"max_connections\": 100}, # 最大连接数\n            \"PASSWORD\": \"bk102435\",\n        }\n    }\n}\n#配置session存储\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'\nSESSION_CACHE_ALIAS = 'default'\n```\n\n**把用户名记在cookie**\n\n1.登录成功时，把username字段存在cookie中\n\n```python\nresponse = redirect(reverse('goods:index'))\nremember = request.POST.get('remember')\n\nif remember == 'on':\n\tresponse.set_cookie('username', username, max_age=7*24*3600)\nelse:\n\tresponse.delete_cookie('username')\n```\n\n2.get方法中取出cookie数据\n\n```\nif 'username' in request.COOKIES:\n\tusername = request.COOKIES.get('username')\n\tchecked = 'checked'\nelse:\n\tusername = ''\n\tchecked = ''\nreturn render(request, 'login.html', {'username':username, 'checked':checked})\n```\n## User 模块 - 用户中心\n\n**从模板网页中抽象**\n\n1. 将共同部分放在一个html， 不同部分使用{% block body%}{% endblock %}\n\nbase_user_center.html:\n\n![enter description here](/img/1574937645193.png)\n\n2.在对应的功能页面继承\n\n![enter description here](/img/1574937788143.png)\n\n**使用if 做功能块显示隐藏**\n\n如上方的：\n\n![enter description here](/img/1574937430699.png)\n\n**使用官方提供的授权管理**\n\n有些页面需要登录后才能显示，如这里的用户中心页\n使用django的login_required装饰器来做\n\nhttps://docs.djangoproject.com/en/2.2/topics/auth/default/\n\n1. 当用户已登录过，将直接跳转至所需页面\n2. 当未登录，将默认跳转至/accounts/login/?next=/polls/3/.\n3. login_url可在settings.LOGIN_URL中配置 或login_url参数中配置\n4. next可在redirect_field_name参数中配置\n\n```python\nfrom django.contrib.auth.decorators import login_required\n\n@login_required(login_url='/accounts/login/')\ndef my_view(request):\n```\n\n5. 处理用户通过非登录界面过来的\n```python\n  # 处理通过跳转的请求值#\n                # 设置下一步自动跳转 #\n                next_url = request.GET.get('next', reverse('goods:index'))\n                response = redirect(reverse(next_url))\n```\n\n> 注意：需要将form表单的action设成无action，这样提交的内容将按当前内容来指定！\n\n\n6.使用Mixin优化写法\n\n* 新建utils文件夹，新建一个LoginRequireMixin类\n\n```python\nclass LoginRequiredMixin(object):\n    @classmethod\n    def as_view(cls, **initkwargs):\n        view = super(LoginRequiredMixin, cls).as_view(**initkwargs)\n        return login_required(view)\n```\n\n在所有view函数中继承\n\n```python\nclass AddressView(LoginRequiredMixin, View):\n\tpass\n```\n> Mixin的原理是，执行一个子类没有的函数，Python继承规则是第一个父类先找，找到cls所代表的类的父类，再调用其as_view\n> super(A,cls) 找到A的父类，并将cls转成父类对象！\n\n**使用官方提供的是否登录标识**\n\n\n```python\nif request.user.is_authenticated:\n    # Do something for authenticated users.\n    ...\nelse:\n    # Do something for anonymous users.\n    ...\n```\n因此在html中加入如下代码：\n\n![enter description here](/img/1574937768754.png)\n\n\n**使用官方提供的退出登录**\n\nlogout函数\n\n```html\n<a href=\"{% url 'user:logout' %}\">退出</a>\n```\n\n```python\nclass LogoutView(View):\n    def get(self, request):\n        logout(request)\n        return redirect(reverse('goods:index'))\n```\n\n**实现地址页的功能**\n\n>1.使用request.user拿到user对象\n>2.Address.objects.create/get 来操作数据库\n>3.post请求中收到后再进行操作\n>4.Post请求完毕后，在get请求中再取数据库的地址来到html\n>5.显示get请求的结果到html\n\n**抽象Model里的管理器**\n\nmodel.py里：\n\n需要继承manager\n```python\nclass AddressManager(models.Manager):\n    '''自定义模型管理器'''\n    def get_default_address(self, user):\n        #self.model: 获取self对象所在模型类\n        try:\n            address = self.get(user=user, is_default=True)\n        except self.DoesNotExist as e:\n            address = None\n        return address\n\t\t\nclass Address(BaseModel):\n    \"\"\"地址模型类\"\"\"\n    pass\n    # 在这里使用定义的管理器\n    objects = AddressManager()\n```\n\n\n> 需要使用Address.objects.get_default_address来调用。这样传入self\n\n**用户中心的历史记录显示**\n\n![enter description here](/img/1575029000281.png)\n\n参考redis资料\nhttps://django-redis-chs.readthedocs.io/zh_CN/latest/#\n1. 获取StrictRedis对象\n\t一般做法：\n\t\n\t```python\n\tfrom redis import StrictRedis\n\tsr = StrictRedis(host='127.0.0.1', port='6379', db=9)\n\t```\n\t\n\t但可以使用原生端的使用方式：\n\t\n\t```python\n\tfrom django_redis import get_redis_connection\n\tcon = get_redis_connection(\"default\")\n\t```\n2. 获取redis数据并返回界面\n\n```python\n  #获取redis数据连接\n        con = get_redis_connection(\"default\")\n        #获取数据\n        history_key = 'history_%id'%user.id\n        #拿前五个\n        sku_ids = con.lrange(history_key, 0, 4)\n```\n\n\n```python\n def get(self, request):\n        user = request.user\n        address = Address.objects.get_default_address(user)\n\n        #获取redis数据连接\n        con = get_redis_connection(\"default\")\n        #获取数据\n        history_key = 'history_%id'%user.id\n        #拿前五个\n        sku_ids = con.lrange(history_key, 0, 4)\n        #获取此ID内的物体\n        # goods_li = GoodsSKU.objects.filter(id__in=sku_ids)\n        goods_li = []\n        for id in sku_ids:\n            goods = GoodsSKU.objects.get(id=id)\n            goods_li.append(goods)\n        #数据组装\n        context = {'page': 'user',\n                   'address': address,\n                   'goods_li':goods_li}\n\n        return render(request, 'user_center_info.html', context)\n```\n\n3.在Html中配置数据，显示使用for goods, 和empty表示\n\n![enter description here](/img/1575033223646.png)\n\n\n## 分布式FastDFS文件系统\n\n![enter description here](/img/1575033366217.png)\n\n\n客户端先发请求到Tracker服务器，服务器将返回一个Storage服务器地址，客户端再上传到此Storage服务器\n\n![enter description here](/img/1575033456146.png)\n\n\n电商网站的图片数据一般不放在Django服务器，以防服务器存储器爆掉\n![enter description here](/img/1575034858096.png)\n\nFastDFS 采用hash值标识存储文件\n\n**文件上传**\n\n![enter description here](/img/1575035108391.png)\n![enter description here](/img/1575035161292.png)\n\n**文件下载**\n\n![enter description here](/img/1575035213445.png) \n\n![enter description here](/img/1575035246421.png)\n\n**安装配置**\n\n![安装](/img/1575290159935.png)\n\n![服务器配置](/img/1575290242736.png)\n\n![服务器配置](/img/1575290266752.png)\n\n![启动](/img/1575290288546.png)\n\n![安装Nginx](/img/1575290314506.png)\n\n\n**结合nginx使用，提高多人访问的效率**\n\n获取文件需要借助nginx来获取静态文件。\n\n![安装Nginx](/img/1575290314506.png)\n\n![fastdfs-nginx](/img/1575603749178.png)\n\n注： 是conf目录\n![连接fadfs与nginx](/img/1575634128185.png)\n\n![http server配置](/img/1575634466665.png)\n\n![server配置](/img/1575635246200.png)\n\n![启动](/img/1575635485238.png)\n\n上传测试: windows电脑下：\n1. 去github下下载zip，解压\n2. 把fdfs_client文件夹复制到自己conda环境下\n3. 复制远端的client.conf，修改base_path和 网址（一般不用改）\n4. 注释掉fdfs_client.sendfile这句代码在storage_client.py\n5. 写一个Python文件，一定要在自己的conda环境下！\n\n```python\nfrom fdfs_client.client import Fdfs_client\n\nclient = Fdfs_client('F:/Projects/django_env/client.conf')\nret = client.upload_by_filename('timg.jpg')\nprint(ret)\n```\n\n上传成功后：可以使用我们的 http://39.97.170.176:8888/ 做为前缀加上地址来访问图片\n![测试上传](/img/1575640031870.png)\n\n**fdfs工作流程**\n\n![fdfs工作流程](/img/1575981798051.png)\n\n\n**实现fdfs**\n\n* 写一个如下结构：\n![fdfs文件](/img/1575984532516.png)\n* storage.py中继承官方的Storage类并重写方法\n\n```python\nfrom django.core.files.storage import Storage\nfrom fdfs_client.client import Fdfs_client\nfrom django.conf import settings\n\n\nclass FDFSStorage(Storage):\n\n    def __init__(self, client_conf=None, base_url=None):\n        if client_conf is None:\n            client_conf = settings.FDFS_CLIENT_CONF\n        self.client_conf = client_conf\n\n        if base_url is None:\n            base_url = settings.FDFS_URL\n        self.base_url = base_url\n\n    def _open(self, name, mode='rb'):\n        pass\n\n    def _save(self, name, content):\n        client = Fdfs_client(self.client_conf)\n\n        # 上传文件内容\n        res = client.upload_by_buffer(content.read())\n        # return dict\n        # {\n        #     'Group name': group_name,\n        #     'Remote file_id': remote_file_id,\n        #     'Status': 'Upload successed.',\n        #     'Local file name': '',\n        #     'Uploaded size': upload_size,\n        #     'Storage IP': storage_ip\n        # } if success else None\n\n        if res.get('Status') !=  'Upload successed.':\n            # 上传失败\n            raise Exception('上传文件到DFS失败')\n\n        # 获取返回的文件ID\n        filename = res.get('Remote file_id')\n\n        # 返回文件ID\n        return filename\n\n    def exists(self, name):\n        return False\n\n\n    def url(self, name):\n        '''返回文件url'''\n        return self.base_url+name\n\n```\n\n* 最后在settings中加入\n\n```python\n#配置文件存储器\nDEFAULT_FILE_STORAGE = 'utils.fdfs.storage.FDFSStorage'\n\n#设置fdfs 的client.conf文件路径\nFDFS_CLIENT_CONF='./utils/fdfs/client.conf'\n\n#FDFS服务器地址\nFDFS_URL='http://39.97.170.176:8888/'\n```\n\n**总结**\n\n使用fdfs好处：\n1. 海量存储，存储内容易扩展\n2. 解决文件内容重复\n3. 结合nginx，提高网站提供图片的效率\n","source":"_posts/天天生鲜项目实例.md","raw":"---\ntitle: 天天生鲜项目实例P1\ncategories:\n- Python\ntags: \n- Python\n- Note\n- Django\n- 实例\n---\n\n## 相关背景概念\n\n> B2B, O2O, B2C, C2C..\n\n## 数据库设计\n![enter description here](/img/1573441070020.png)\n\n> 对数据库进行授权\n> ![enter description here](/img/1573442010455.png)\n\n> 使用后台管理\n>![enter description here](/img/1573442404015.png)\n\n\n## 项目搭建\n\n**1.一个模块对应一个APP**\n**2.将所有app归类到一个apps文件夹**\n**3.\\[可选\\]  设置一个系统路径，这样就不用注册APP时添加前缀文件夹**\n\t\n``` python\nsys.path.insert(0, os.path.join(BASE_DIR, 'apps'))\n```\n\n**4.添加templates包和static包**\n>TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')\n>TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [TEMPLATES_DIR],\n\t\t...\n> STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n\n**5.添加templates和static路径到setting**\n\n**6.配置数据库为Mysql**\n\n>   'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'dailyfresh',\n        'USER': 'root',\n        'PASSWORD':'bk102435',\n        'HOST':'39.97.170.176',\n        'PORT':3306,\n\t\n**7.设置语言**\n\n```python\nLANGUAGE_CODE = 'zh-hans'\nTIME_ZONE = 'Asia/Shanghai'\n```\n\n**8.配置项目总的urls**\n**9.为各应用创建urls**\n\n**10.数据层准备，创建db包，创建basemodel.py**\n\n**11.\\[可选\\]创建各models 或 链接现有数据库**\n\n> Inpectdb 也可针对某张表：\n> python manage.py inspectdb TableName > output.py\n> 链接： https://www.jianshu.com/p/037bd7e20a7a\n\n**12.指定django认证系统的模型**\n这样superuser的模型表就被指定到自己的user表\n> settings.py中加入 \n> AUTH_USER_MODEL = ‘user.User’\n\n###  13.  可能出现的问题\n不确定是不是使用pymysql导致的，这里会有两个问题\n*  1.现在django使用mysqlclient，而且恶心的是会在启动时自动验证版本号，pymysql最高只到0.9.3。这里根据报错直接那代码注释即可！\n*  2.makemigration出错，提示在django代码里的operations.py中的last_executed_query函数，由于python3与Python2的decode与encode函数区别，这里也需要把.decode..去掉。\n\n\n\n\n## User模块 - 注册\n\n**1.准备views函数**\n* views.py添加相应函数\nregister函数为接收跳转网页, register_handler函数接收处理及逻辑\n\n```python\ndef register():\n\tpass\ndef register_handle():\n\tpass\n```\n\n* urls.py配置对应view函数路径\n\n```python\npath('register',views.register,name='register')\npath('register_handle',views.register_handle,name='register_handle')\n```\n\n\n**2.templates里放入html信息**\n\n* 编辑表单\\<form\\>\n\t添加method,action.\n\t写法升级：\n\n```python\naction=\"{% url 'user:detail' %}\" \n```\n\n旧的写法:\n\n```python\naction = \"/user/register_handle\"\n```\n\n> 注意事项：\n> 1. 网页使用跳转，需要在urls.py中指定name:\n> 如下：所对应的地址段需要设置不同的正则\n> \n> ```python\n> path('add/', calc_views.add, name='add'),  # new\n> path('add/<int:a>/<int:b>/', calc_views.old_add2_redirect,name='add'),\n> ```\n> 2.使用shell, 用reverse测试\n> 地址反射的机制：django.urls reverse\n> 3.定义一个跳转函数来做：\n> \n> ```python\n> urls.py中加入如下：\n>  path('add/<int:a>/<int:b>/', calc_views.old_add2_redirect,name='add'),\n> path('new_add/<int:a>/<int:b>/', calc_views.add2, name='add2'),\n>\n> views.py中加入如下：\n> def old_add2_redirect(request):\n> return HttpResponseRedirect(\n>        reverse('add2', args=(a, b))\n>    )\n> 测试网址： http://127.0.0.1:8000/add/5/6/ \n> 这时最终就将跳到美术http://127.0.0.1:8000/new_add/5/6/\n> ```\n\n\n\t\n**3.使用类视图**\n\n> 1.优化去register_handle函数，使用get/post判断实现不同的跳转类型\n> 2.基于1的优化，使用类视图方式加载\n\n```python\nfrom django.views.generic import View\n\nclass RegisterView(View):\n\n    def get(self, request):\n        pass\n\n    def post(self, request):\n\t\tpass\n```\n\n**3.激活用户**\n\n1. 使用itsdangerous为网址进行加密签名\n2. 调用django.core.mail 的send_mail来发送邮件，把链接成文本发送过去\n\n```python\nfrom django.conf import settings\nfrom django.core.mail import send_mail\nimport time\n\ndef send_register_active_email(to_email, username, token):\n    '''send active email'''\n    subject = \"天天生鲜欢迎消息\"\n    message = \"\"\n    sender = settings.DEFAULT_FROM_EMAIL\n    receiver = [to_email]\n    html_message = \"<h1>%s, 欢迎你</h1>请点击下面链接激活<br/><a href=\\\"http://127.0.0.1:8000/user/active/%s\\\">http://127.0.0.1:8000/user/active/%s</a>\" % (\n    username, token, token)\n    send_mail(subject, message, sender, receiver, html_message=html_message)\n    time.sleep(5)\n```\n>也可使用Python的发email库\n\n>```python\n>  def active_email(self, email_addr, active_code):\n>      # 第三方 SMTP 服务 # 授权码：cmatkgceuuxcbddc\n>      mail_host = \"smtp.qq.com\"  # 设置服务器\n>      mail_user = \"1024037035@qq.com\"  # 用户名\n>      mail_pass = \"cmatkgceuuxcbddc\"  # 口令\n>      sender = '1024037035@qq.com'\n>      receivers = [email_addr]  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n >       # 三个参数：第一个为文本内容，第二个 plain 设置文本格式，第三个 utf-8 设置编码\n>      try:\n>          smtp_obj = smtplib.SMTP()\n>          smtp_obj.connect(mail_host, 25)  # 25 为 SMTP 端口号\n>          smtp_obj.login(mail_user, mail_pass)\n>          smtp_obj.sendmail(sender, receivers, message.as_string())\n>          return True\n>          \"邮件发送成功\"\n>      except smtplib.SMTPException:\n >           return False\n>            \"Error: 无法发送邮件\"\n>```\n\n3. 在Url中配置激活的功能\n\n```python\npath('active/<token>',ActiveView.as_view(), name='active'),\n```\n\n4. 在views.py中写一个ActiveView的视图来处理激活\n \n```python\nclass ActiveView(View):\n    def get(self, request, token):\n        try:\n            serializer = Serializer(settings.SECRET_KEY, 3600)\n            # print(type(token))\n            token = token.encode()\n            info = serializer.loads(token)\n            user_id = info['confirm']\n            user = User.objects.get(id=user_id)\n            user.is_active = 1\n            user.save()\n\n            # 跳转到登陆页面\n            return redirect(reverse('user:login'))\n        except SignatureExpired as e:\n            # 激活链接过期\n            return HttpResponse('激活链接已过期')\n```\n\n\n**4.使用celery做为异步处理**\n\n![enter description here](/img/1574171584470.png)\n\n1.配置一个项目目录为：celery_tasks/tasks.py的文件\n2.在tasks.py写入配置如 \n\n```python\n# use celery\nfrom celery import Celery\n# create celery instance\napp = Celery('celery_tasks.tasks', broker='redis://:pwd@39.97.170.176:6379/8')\n\n# define task function\n@app.task\ndef send_register_active_email(to_email, username, token):\n\tpass\n```\n3.执行的脚本函数里写入：\n\n```python\n        # 发送邮件1\n        send_register_active_email.delay(email, username, secret_info)\n```\n\n4.在有redis的电脑上\n\n* 复制项目代码\n* 在tasks.py中加入初始化django的代码\n* \n```python\nimport os\nimport django\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dailyfresh.settings')\ndjango.setup()\n```\n* 启动worker\n\n```\ncelery -A celery_tasks.tasks worker -l info\n```\n* 启动redis , 大功告成，测试\n\n> 可能出现的问题\n> 在windows系统中：\n>  使用这种方式来启动worker: pip install eventlet -> celery -A your_app_name worker --pool=eventlet\n>  或： celery -A your_app_name worker --pool=solo -l info\n>  或：\n>  at worker side:\nset FORKED_BY_MULTIPROCESSING = 1\nthen\ncelery -A myworker worker --loglevel=info\n\n## User模块 - 登录\n\n**LoginView，使用自带的授权**\n\n授权，如果成功则会返回user对象：：\n\n```\nuser = authenticate(username=username, password=pwd)\n```\n\n登录：\n\n```python\nlogin(request, user)\n```\n\n添加URL及表单部分，参考注册流程\n\n**为减少数据库操作，使用redis存储**\n\n1.安装 django-redis\n2.settings加入如下配置即可：\n\n```python\n#Django 缓存配置\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": \"redis://127.0.0.1:6379/9\", #服务器地址\n        \"OPTIONS\": {\n            \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n            \"CONNECTION_POOL_KWARGS\": {\"max_connections\": 100}, # 最大连接数\n            \"PASSWORD\": \"bk102435\",\n        }\n    }\n}\n#配置session存储\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'\nSESSION_CACHE_ALIAS = 'default'\n```\n\n**把用户名记在cookie**\n\n1.登录成功时，把username字段存在cookie中\n\n```python\nresponse = redirect(reverse('goods:index'))\nremember = request.POST.get('remember')\n\nif remember == 'on':\n\tresponse.set_cookie('username', username, max_age=7*24*3600)\nelse:\n\tresponse.delete_cookie('username')\n```\n\n2.get方法中取出cookie数据\n\n```\nif 'username' in request.COOKIES:\n\tusername = request.COOKIES.get('username')\n\tchecked = 'checked'\nelse:\n\tusername = ''\n\tchecked = ''\nreturn render(request, 'login.html', {'username':username, 'checked':checked})\n```\n## User 模块 - 用户中心\n\n**从模板网页中抽象**\n\n1. 将共同部分放在一个html， 不同部分使用{% block body%}{% endblock %}\n\nbase_user_center.html:\n\n![enter description here](/img/1574937645193.png)\n\n2.在对应的功能页面继承\n\n![enter description here](/img/1574937788143.png)\n\n**使用if 做功能块显示隐藏**\n\n如上方的：\n\n![enter description here](/img/1574937430699.png)\n\n**使用官方提供的授权管理**\n\n有些页面需要登录后才能显示，如这里的用户中心页\n使用django的login_required装饰器来做\n\nhttps://docs.djangoproject.com/en/2.2/topics/auth/default/\n\n1. 当用户已登录过，将直接跳转至所需页面\n2. 当未登录，将默认跳转至/accounts/login/?next=/polls/3/.\n3. login_url可在settings.LOGIN_URL中配置 或login_url参数中配置\n4. next可在redirect_field_name参数中配置\n\n```python\nfrom django.contrib.auth.decorators import login_required\n\n@login_required(login_url='/accounts/login/')\ndef my_view(request):\n```\n\n5. 处理用户通过非登录界面过来的\n```python\n  # 处理通过跳转的请求值#\n                # 设置下一步自动跳转 #\n                next_url = request.GET.get('next', reverse('goods:index'))\n                response = redirect(reverse(next_url))\n```\n\n> 注意：需要将form表单的action设成无action，这样提交的内容将按当前内容来指定！\n\n\n6.使用Mixin优化写法\n\n* 新建utils文件夹，新建一个LoginRequireMixin类\n\n```python\nclass LoginRequiredMixin(object):\n    @classmethod\n    def as_view(cls, **initkwargs):\n        view = super(LoginRequiredMixin, cls).as_view(**initkwargs)\n        return login_required(view)\n```\n\n在所有view函数中继承\n\n```python\nclass AddressView(LoginRequiredMixin, View):\n\tpass\n```\n> Mixin的原理是，执行一个子类没有的函数，Python继承规则是第一个父类先找，找到cls所代表的类的父类，再调用其as_view\n> super(A,cls) 找到A的父类，并将cls转成父类对象！\n\n**使用官方提供的是否登录标识**\n\n\n```python\nif request.user.is_authenticated:\n    # Do something for authenticated users.\n    ...\nelse:\n    # Do something for anonymous users.\n    ...\n```\n因此在html中加入如下代码：\n\n![enter description here](/img/1574937768754.png)\n\n\n**使用官方提供的退出登录**\n\nlogout函数\n\n```html\n<a href=\"{% url 'user:logout' %}\">退出</a>\n```\n\n```python\nclass LogoutView(View):\n    def get(self, request):\n        logout(request)\n        return redirect(reverse('goods:index'))\n```\n\n**实现地址页的功能**\n\n>1.使用request.user拿到user对象\n>2.Address.objects.create/get 来操作数据库\n>3.post请求中收到后再进行操作\n>4.Post请求完毕后，在get请求中再取数据库的地址来到html\n>5.显示get请求的结果到html\n\n**抽象Model里的管理器**\n\nmodel.py里：\n\n需要继承manager\n```python\nclass AddressManager(models.Manager):\n    '''自定义模型管理器'''\n    def get_default_address(self, user):\n        #self.model: 获取self对象所在模型类\n        try:\n            address = self.get(user=user, is_default=True)\n        except self.DoesNotExist as e:\n            address = None\n        return address\n\t\t\nclass Address(BaseModel):\n    \"\"\"地址模型类\"\"\"\n    pass\n    # 在这里使用定义的管理器\n    objects = AddressManager()\n```\n\n\n> 需要使用Address.objects.get_default_address来调用。这样传入self\n\n**用户中心的历史记录显示**\n\n![enter description here](/img/1575029000281.png)\n\n参考redis资料\nhttps://django-redis-chs.readthedocs.io/zh_CN/latest/#\n1. 获取StrictRedis对象\n\t一般做法：\n\t\n\t```python\n\tfrom redis import StrictRedis\n\tsr = StrictRedis(host='127.0.0.1', port='6379', db=9)\n\t```\n\t\n\t但可以使用原生端的使用方式：\n\t\n\t```python\n\tfrom django_redis import get_redis_connection\n\tcon = get_redis_connection(\"default\")\n\t```\n2. 获取redis数据并返回界面\n\n```python\n  #获取redis数据连接\n        con = get_redis_connection(\"default\")\n        #获取数据\n        history_key = 'history_%id'%user.id\n        #拿前五个\n        sku_ids = con.lrange(history_key, 0, 4)\n```\n\n\n```python\n def get(self, request):\n        user = request.user\n        address = Address.objects.get_default_address(user)\n\n        #获取redis数据连接\n        con = get_redis_connection(\"default\")\n        #获取数据\n        history_key = 'history_%id'%user.id\n        #拿前五个\n        sku_ids = con.lrange(history_key, 0, 4)\n        #获取此ID内的物体\n        # goods_li = GoodsSKU.objects.filter(id__in=sku_ids)\n        goods_li = []\n        for id in sku_ids:\n            goods = GoodsSKU.objects.get(id=id)\n            goods_li.append(goods)\n        #数据组装\n        context = {'page': 'user',\n                   'address': address,\n                   'goods_li':goods_li}\n\n        return render(request, 'user_center_info.html', context)\n```\n\n3.在Html中配置数据，显示使用for goods, 和empty表示\n\n![enter description here](/img/1575033223646.png)\n\n\n## 分布式FastDFS文件系统\n\n![enter description here](/img/1575033366217.png)\n\n\n客户端先发请求到Tracker服务器，服务器将返回一个Storage服务器地址，客户端再上传到此Storage服务器\n\n![enter description here](/img/1575033456146.png)\n\n\n电商网站的图片数据一般不放在Django服务器，以防服务器存储器爆掉\n![enter description here](/img/1575034858096.png)\n\nFastDFS 采用hash值标识存储文件\n\n**文件上传**\n\n![enter description here](/img/1575035108391.png)\n![enter description here](/img/1575035161292.png)\n\n**文件下载**\n\n![enter description here](/img/1575035213445.png) \n\n![enter description here](/img/1575035246421.png)\n\n**安装配置**\n\n![安装](/img/1575290159935.png)\n\n![服务器配置](/img/1575290242736.png)\n\n![服务器配置](/img/1575290266752.png)\n\n![启动](/img/1575290288546.png)\n\n![安装Nginx](/img/1575290314506.png)\n\n\n**结合nginx使用，提高多人访问的效率**\n\n获取文件需要借助nginx来获取静态文件。\n\n![安装Nginx](/img/1575290314506.png)\n\n![fastdfs-nginx](/img/1575603749178.png)\n\n注： 是conf目录\n![连接fadfs与nginx](/img/1575634128185.png)\n\n![http server配置](/img/1575634466665.png)\n\n![server配置](/img/1575635246200.png)\n\n![启动](/img/1575635485238.png)\n\n上传测试: windows电脑下：\n1. 去github下下载zip，解压\n2. 把fdfs_client文件夹复制到自己conda环境下\n3. 复制远端的client.conf，修改base_path和 网址（一般不用改）\n4. 注释掉fdfs_client.sendfile这句代码在storage_client.py\n5. 写一个Python文件，一定要在自己的conda环境下！\n\n```python\nfrom fdfs_client.client import Fdfs_client\n\nclient = Fdfs_client('F:/Projects/django_env/client.conf')\nret = client.upload_by_filename('timg.jpg')\nprint(ret)\n```\n\n上传成功后：可以使用我们的 http://39.97.170.176:8888/ 做为前缀加上地址来访问图片\n![测试上传](/img/1575640031870.png)\n\n**fdfs工作流程**\n\n![fdfs工作流程](/img/1575981798051.png)\n\n\n**实现fdfs**\n\n* 写一个如下结构：\n![fdfs文件](/img/1575984532516.png)\n* storage.py中继承官方的Storage类并重写方法\n\n```python\nfrom django.core.files.storage import Storage\nfrom fdfs_client.client import Fdfs_client\nfrom django.conf import settings\n\n\nclass FDFSStorage(Storage):\n\n    def __init__(self, client_conf=None, base_url=None):\n        if client_conf is None:\n            client_conf = settings.FDFS_CLIENT_CONF\n        self.client_conf = client_conf\n\n        if base_url is None:\n            base_url = settings.FDFS_URL\n        self.base_url = base_url\n\n    def _open(self, name, mode='rb'):\n        pass\n\n    def _save(self, name, content):\n        client = Fdfs_client(self.client_conf)\n\n        # 上传文件内容\n        res = client.upload_by_buffer(content.read())\n        # return dict\n        # {\n        #     'Group name': group_name,\n        #     'Remote file_id': remote_file_id,\n        #     'Status': 'Upload successed.',\n        #     'Local file name': '',\n        #     'Uploaded size': upload_size,\n        #     'Storage IP': storage_ip\n        # } if success else None\n\n        if res.get('Status') !=  'Upload successed.':\n            # 上传失败\n            raise Exception('上传文件到DFS失败')\n\n        # 获取返回的文件ID\n        filename = res.get('Remote file_id')\n\n        # 返回文件ID\n        return filename\n\n    def exists(self, name):\n        return False\n\n\n    def url(self, name):\n        '''返回文件url'''\n        return self.base_url+name\n\n```\n\n* 最后在settings中加入\n\n```python\n#配置文件存储器\nDEFAULT_FILE_STORAGE = 'utils.fdfs.storage.FDFSStorage'\n\n#设置fdfs 的client.conf文件路径\nFDFS_CLIENT_CONF='./utils/fdfs/client.conf'\n\n#FDFS服务器地址\nFDFS_URL='http://39.97.170.176:8888/'\n```\n\n**总结**\n\n使用fdfs好处：\n1. 海量存储，存储内容易扩展\n2. 解决文件内容重复\n3. 结合nginx，提高网站提供图片的效率\n","slug":"天天生鲜项目实例","published":1,"date":"2020-09-08T03:23:20.890Z","updated":"2020-09-08T03:23:20.890Z","_id":"ckdpcluz4003b8sr3tzvh8f3c","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"相关背景概念\"><a href=\"#相关背景概念\" class=\"headerlink\" title=\"相关背景概念\"></a>相关背景概念</h2><blockquote>\n<p>B2B, O2O, B2C, C2C..</p>\n</blockquote>\n<h2 id=\"数据库设计\"><a href=\"#数据库设计\" class=\"headerlink\" title=\"数据库设计\"></a>数据库设计</h2><p><img src=\"/img/1573441070020.png\" alt=\"enter description here\"></p>\n<blockquote>\n<p>对数据库进行授权<br><img src=\"/img/1573442010455.png\" alt=\"enter description here\"></p>\n</blockquote>\n<blockquote>\n<p>使用后台管理<br><img src=\"/img/1573442404015.png\" alt=\"enter description here\"></p>\n</blockquote>\n<h2 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h2><p><strong>1.一个模块对应一个APP</strong><br><strong>2.将所有app归类到一个apps文件夹</strong><br><strong>3.[可选]  设置一个系统路径，这样就不用注册APP时添加前缀文件夹</strong></p>\n<pre><code class=\"python\">sys.path.insert(0, os.path.join(BASE_DIR, &#39;apps&#39;))</code></pre>\n<p><strong>4.添加templates包和static包</strong></p>\n<blockquote>\n<p>TEMPLATES_DIR = os.path.join(BASE_DIR, ‘templates’)<br>TEMPLATES = [<br>    {<br>        ‘BACKEND’: ‘django.template.backends.django.DjangoTemplates’,<br>        ‘DIRS’: [TEMPLATES_DIR],<br>        …<br>STATICFILES_DIRS = [os.path.join(BASE_DIR, ‘static’)]</p>\n</blockquote>\n<p><strong>5.添加templates和static路径到setting</strong></p>\n<p><strong>6.配置数据库为Mysql</strong></p>\n<blockquote>\n<p>  ‘ENGINE’: ‘django.db.backends.mysql’,<br>        ‘NAME’: ‘dailyfresh’,<br>        ‘USER’: ‘root’,<br>        ‘PASSWORD’:’bk102435’,<br>        ‘HOST’:’39.97.170.176’,<br>        ‘PORT’:3306,</p>\n</blockquote>\n<p><strong>7.设置语言</strong></p>\n<pre><code class=\"python\">LANGUAGE_CODE = &#39;zh-hans&#39;\nTIME_ZONE = &#39;Asia/Shanghai&#39;</code></pre>\n<p><strong>8.配置项目总的urls</strong><br><strong>9.为各应用创建urls</strong></p>\n<p><strong>10.数据层准备，创建db包，创建basemodel.py</strong></p>\n<p><strong>11.[可选]创建各models 或 链接现有数据库</strong></p>\n<blockquote>\n<p>Inpectdb 也可针对某张表：<br>python manage.py inspectdb TableName &gt; output.py<br>链接： <a href=\"https://www.jianshu.com/p/037bd7e20a7a\">https://www.jianshu.com/p/037bd7e20a7a</a></p>\n</blockquote>\n<p><strong>12.指定django认证系统的模型</strong><br>这样superuser的模型表就被指定到自己的user表</p>\n<blockquote>\n<p>settings.py中加入<br>AUTH_USER_MODEL = ‘user.User’</p>\n</blockquote>\n<h3 id=\"13-可能出现的问题\"><a href=\"#13-可能出现的问题\" class=\"headerlink\" title=\"13.  可能出现的问题\"></a>13.  可能出现的问题</h3><p>不确定是不是使用pymysql导致的，这里会有两个问题</p>\n<ul>\n<li>1.现在django使用mysqlclient，而且恶心的是会在启动时自动验证版本号，pymysql最高只到0.9.3。这里根据报错直接那代码注释即可！</li>\n<li>2.makemigration出错，提示在django代码里的operations.py中的last_executed_query函数，由于python3与Python2的decode与encode函数区别，这里也需要把.decode..去掉。</li>\n</ul>\n<h2 id=\"User模块-注册\"><a href=\"#User模块-注册\" class=\"headerlink\" title=\"User模块 - 注册\"></a>User模块 - 注册</h2><p><strong>1.准备views函数</strong></p>\n<ul>\n<li>views.py添加相应函数<br>register函数为接收跳转网页, register_handler函数接收处理及逻辑</li>\n</ul>\n<pre><code class=\"python\">def register():\n    pass\ndef register_handle():\n    pass</code></pre>\n<ul>\n<li>urls.py配置对应view函数路径</li>\n</ul>\n<pre><code class=\"python\">path(&#39;register&#39;,views.register,name=&#39;register&#39;)\npath(&#39;register_handle&#39;,views.register_handle,name=&#39;register_handle&#39;)</code></pre>\n<p><strong>2.templates里放入html信息</strong></p>\n<ul>\n<li>编辑表单&lt;form&gt;<br>  添加method,action.<br>  写法升级：</li>\n</ul>\n<pre><code class=\"python\">action=&quot;{% url 'user:detail' %}&quot; </code></pre>\n<p>旧的写法:</p>\n<pre><code class=\"python\">action = &quot;/user/register_handle&quot;</code></pre>\n<blockquote>\n<p>注意事项：</p>\n<ol>\n<li>网页使用跳转，需要在urls.py中指定name:<br>如下：所对应的地址段需要设置不同的正则</li>\n</ol>\n<pre><code class=\"python\">path(&#39;add/&#39;, calc_views.add, name=&#39;add&#39;),  # new\npath(&#39;add/&lt;int:a&gt;/&lt;int:b&gt;/&#39;, calc_views.old_add2_redirect,name=&#39;add&#39;),</code></pre>\n<p>2.使用shell, 用reverse测试<br>地址反射的机制：django.urls reverse<br>3.定义一个跳转函数来做：</p>\n<pre><code class=\"python\">urls.py中加入如下：\n path(&#39;add/&lt;int:a&gt;/&lt;int:b&gt;/&#39;, calc_views.old_add2_redirect,name=&#39;add&#39;),\npath(&#39;new_add/&lt;int:a&gt;/&lt;int:b&gt;/&#39;, calc_views.add2, name=&#39;add2&#39;),\n\nviews.py中加入如下：\ndef old_add2_redirect(request):\nreturn HttpResponseRedirect(\n       reverse(&#39;add2&#39;, args=(a, b))\n   )\n测试网址： http://127.0.0.1:8000/add/5/6/ \n这时最终就将跳到美术http://127.0.0.1:8000/new_add/5/6/</code></pre>\n</blockquote>\n<p><strong>3.使用类视图</strong></p>\n<blockquote>\n<p>1.优化去register_handle函数，使用get/post判断实现不同的跳转类型<br>2.基于1的优化，使用类视图方式加载</p>\n</blockquote>\n<pre><code class=\"python\">from django.views.generic import View\n\nclass RegisterView(View):\n\n    def get(self, request):\n        pass\n\n    def post(self, request):\n        pass</code></pre>\n<p><strong>3.激活用户</strong></p>\n<ol>\n<li>使用itsdangerous为网址进行加密签名</li>\n<li>调用django.core.mail 的send_mail来发送邮件，把链接成文本发送过去</li>\n</ol>\n<pre><code class=\"python\">from django.conf import settings\nfrom django.core.mail import send_mail\nimport time\n\ndef send_register_active_email(to_email, username, token):\n    &#39;&#39;&#39;send active email&#39;&#39;&#39;\n    subject = &quot;天天生鲜欢迎消息&quot;\n    message = &quot;&quot;\n    sender = settings.DEFAULT_FROM_EMAIL\n    receiver = [to_email]\n    html_message = &quot;&lt;h1&gt;%s, 欢迎你&lt;/h1&gt;请点击下面链接激活&lt;br/&gt;&lt;a href=\\&quot;http://127.0.0.1:8000/user/active/%s\\&quot;&gt;http://127.0.0.1:8000/user/active/%s&lt;/a&gt;&quot; % (\n    username, token, token)\n    send_mail(subject, message, sender, receiver, html_message=html_message)\n    time.sleep(5)</code></pre>\n<blockquote>\n<p>也可使用Python的发email库</p>\n</blockquote>\n<blockquote>\n<pre><code class=\"python\"> def active_email(self, email_addr, active_code):\n     # 第三方 SMTP 服务 # 授权码：cmatkgceuuxcbddc\n     mail_host = &quot;smtp.qq.com&quot;  # 设置服务器\n     mail_user = &quot;1024037035@qq.com&quot;  # 用户名\n     mail_pass = &quot;cmatkgceuuxcbddc&quot;  # 口令\n     sender = &#39;1024037035@qq.com&#39;\n     receivers = [email_addr]  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n      # 三个参数：第一个为文本内容，第二个 plain 设置文本格式，第三个 utf-8 设置编码\n     try:\n         smtp_obj = smtplib.SMTP()\n         smtp_obj.connect(mail_host, 25)  # 25 为 SMTP 端口号\n         smtp_obj.login(mail_user, mail_pass)\n         smtp_obj.sendmail(sender, receivers, message.as_string())\n         return True\n         &quot;邮件发送成功&quot;\n     except smtplib.SMTPException:\n          return False\n           &quot;Error: 无法发送邮件&quot;</code></pre>\n</blockquote>\n<ol start=\"3\">\n<li>在Url中配置激活的功能</li>\n</ol>\n<pre><code class=\"python\">path(&#39;active/&lt;token&gt;&#39;,ActiveView.as_view(), name=&#39;active&#39;),</code></pre>\n<ol start=\"4\">\n<li>在views.py中写一个ActiveView的视图来处理激活</li>\n</ol>\n<pre><code class=\"python\">class ActiveView(View):\n    def get(self, request, token):\n        try:\n            serializer = Serializer(settings.SECRET_KEY, 3600)\n            # print(type(token))\n            token = token.encode()\n            info = serializer.loads(token)\n            user_id = info[&#39;confirm&#39;]\n            user = User.objects.get(id=user_id)\n            user.is_active = 1\n            user.save()\n\n            # 跳转到登陆页面\n            return redirect(reverse(&#39;user:login&#39;))\n        except SignatureExpired as e:\n            # 激活链接过期\n            return HttpResponse(&#39;激活链接已过期&#39;)</code></pre>\n<p><strong>4.使用celery做为异步处理</strong></p>\n<p><img src=\"/img/1574171584470.png\" alt=\"enter description here\"></p>\n<p>1.配置一个项目目录为：celery_tasks/tasks.py的文件<br>2.在tasks.py写入配置如 </p>\n<pre><code class=\"python\"># use celery\nfrom celery import Celery\n# create celery instance\napp = Celery(&#39;celery_tasks.tasks&#39;, broker=&#39;redis://:pwd@39.97.170.176:6379/8&#39;)\n\n# define task function\n@app.task\ndef send_register_active_email(to_email, username, token):\n    pass</code></pre>\n<p>3.执行的脚本函数里写入：</p>\n<pre><code class=\"python\">        # 发送邮件1\n        send_register_active_email.delay(email, username, secret_info)</code></pre>\n<p>4.在有redis的电脑上</p>\n<ul>\n<li>复制项目代码</li>\n<li>在tasks.py中加入初始化django的代码</li>\n<li><pre><code class=\"python\">import os\nimport django\nfrom django.core.wsgi import get_wsgi_application\n</code></pre>\n</li>\n</ul>\n<p>os.environ.setdefault(‘DJANGO_SETTINGS_MODULE’, ‘dailyfresh.settings’)<br>django.setup()</p>\n<pre><code>* 启动worker\n</code></pre><p>celery -A celery_tasks.tasks worker -l info</p>\n<pre><code>* 启动redis , 大功告成，测试\n\n&gt; 可能出现的问题\n&gt; 在windows系统中：\n&gt;  使用这种方式来启动worker: pip install eventlet -&gt; celery -A your_app_name worker --pool=eventlet\n&gt;  或： celery -A your_app_name worker --pool=solo -l info\n&gt;  或：\n&gt;  at worker side:\nset FORKED_BY_MULTIPROCESSING = 1\nthen\ncelery -A myworker worker --loglevel=info\n\n## User模块 - 登录\n\n**LoginView，使用自带的授权**\n\n授权，如果成功则会返回user对象：：\n</code></pre><p>user = authenticate(username=username, password=pwd)</p>\n<pre><code>\n登录：\n\n```python\nlogin(request, user)</code></pre><p>添加URL及表单部分，参考注册流程</p>\n<p><strong>为减少数据库操作，使用redis存储</strong></p>\n<p>1.安装 django-redis<br>2.settings加入如下配置即可：</p>\n<pre><code class=\"python\">#Django 缓存配置\nCACHES = {\n    &quot;default&quot;: {\n        &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,\n        &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/9&quot;, #服务器地址\n        &quot;OPTIONS&quot;: {\n            &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,\n            &quot;CONNECTION_POOL_KWARGS&quot;: {&quot;max_connections&quot;: 100}, # 最大连接数\n            &quot;PASSWORD&quot;: &quot;bk102435&quot;,\n        }\n    }\n}\n#配置session存储\nSESSION_ENGINE = &#39;django.contrib.sessions.backends.cache&#39;\nSESSION_CACHE_ALIAS = &#39;default&#39;</code></pre>\n<p><strong>把用户名记在cookie</strong></p>\n<p>1.登录成功时，把username字段存在cookie中</p>\n<pre><code class=\"python\">response = redirect(reverse(&#39;goods:index&#39;))\nremember = request.POST.get(&#39;remember&#39;)\n\nif remember == &#39;on&#39;:\n    response.set_cookie(&#39;username&#39;, username, max_age=7*24*3600)\nelse:\n    response.delete_cookie(&#39;username&#39;)</code></pre>\n<p>2.get方法中取出cookie数据</p>\n<pre><code>if &#39;username&#39; in request.COOKIES:\n    username = request.COOKIES.get(&#39;username&#39;)\n    checked = &#39;checked&#39;\nelse:\n    username = &#39;&#39;\n    checked = &#39;&#39;\nreturn render(request, &#39;login.html&#39;, {&#39;username&#39;:username, &#39;checked&#39;:checked})</code></pre><h2 id=\"User-模块-用户中心\"><a href=\"#User-模块-用户中心\" class=\"headerlink\" title=\"User 模块 - 用户中心\"></a>User 模块 - 用户中心</h2><p><strong>从模板网页中抽象</strong></p>\n<ol>\n<li>将共同部分放在一个html， 不同部分使用</li>\n</ol>\n<p>base_user_center.html:</p>\n<p><img src=\"/img/1574937645193.png\" alt=\"enter description here\"></p>\n<p>2.在对应的功能页面继承</p>\n<p><img src=\"/img/1574937788143.png\" alt=\"enter description here\"></p>\n<p><strong>使用if 做功能块显示隐藏</strong></p>\n<p>如上方的：</p>\n<p><img src=\"/img/1574937430699.png\" alt=\"enter description here\"></p>\n<p><strong>使用官方提供的授权管理</strong></p>\n<p>有些页面需要登录后才能显示，如这里的用户中心页<br>使用django的login_required装饰器来做</p>\n<p><a href=\"https://docs.djangoproject.com/en/2.2/topics/auth/default/\">https://docs.djangoproject.com/en/2.2/topics/auth/default/</a></p>\n<ol>\n<li>当用户已登录过，将直接跳转至所需页面</li>\n<li>当未登录，将默认跳转至/accounts/login/?next=/polls/3/.</li>\n<li>login_url可在settings.LOGIN_URL中配置 或login_url参数中配置</li>\n<li>next可在redirect_field_name参数中配置</li>\n</ol>\n<pre><code class=\"python\">from django.contrib.auth.decorators import login_required\n\n@login_required(login_url=&#39;/accounts/login/&#39;)\ndef my_view(request):</code></pre>\n<ol start=\"5\">\n<li>处理用户通过非登录界面过来的<pre><code class=\"python\"># 处理通过跳转的请求值#\n             # 设置下一步自动跳转 #\n             next_url = request.GET.get(&#39;next&#39;, reverse(&#39;goods:index&#39;))\n             response = redirect(reverse(next_url))</code></pre>\n</li>\n</ol>\n<blockquote>\n<p>注意：需要将form表单的action设成无action，这样提交的内容将按当前内容来指定！</p>\n</blockquote>\n<p>6.使用Mixin优化写法</p>\n<ul>\n<li>新建utils文件夹，新建一个LoginRequireMixin类</li>\n</ul>\n<pre><code class=\"python\">class LoginRequiredMixin(object):\n    @classmethod\n    def as_view(cls, **initkwargs):\n        view = super(LoginRequiredMixin, cls).as_view(**initkwargs)\n        return login_required(view)</code></pre>\n<p>在所有view函数中继承</p>\n<pre><code class=\"python\">class AddressView(LoginRequiredMixin, View):\n    pass</code></pre>\n<blockquote>\n<p>Mixin的原理是，执行一个子类没有的函数，Python继承规则是第一个父类先找，找到cls所代表的类的父类，再调用其as_view<br>super(A,cls) 找到A的父类，并将cls转成父类对象！</p>\n</blockquote>\n<p><strong>使用官方提供的是否登录标识</strong></p>\n<pre><code class=\"python\">if request.user.is_authenticated:\n    # Do something for authenticated users.\n    ...\nelse:\n    # Do something for anonymous users.\n    ...</code></pre>\n<p>因此在html中加入如下代码：</p>\n<p><img src=\"/img/1574937768754.png\" alt=\"enter description here\"></p>\n<p><strong>使用官方提供的退出登录</strong></p>\n<p>logout函数</p>\n<pre><code class=\"html\">&lt;a href=&quot;{% url 'user:logout' %}&quot;&gt;退出&lt;/a&gt;</code></pre>\n<pre><code class=\"python\">class LogoutView(View):\n    def get(self, request):\n        logout(request)\n        return redirect(reverse(&#39;goods:index&#39;))</code></pre>\n<p><strong>实现地址页的功能</strong></p>\n<blockquote>\n<p>1.使用request.user拿到user对象<br>2.Address.objects.create/get 来操作数据库<br>3.post请求中收到后再进行操作<br>4.Post请求完毕后，在get请求中再取数据库的地址来到html<br>5.显示get请求的结果到html</p>\n</blockquote>\n<p><strong>抽象Model里的管理器</strong></p>\n<p>model.py里：</p>\n<p>需要继承manager</p>\n<pre><code class=\"python\">class AddressManager(models.Manager):\n    &#39;&#39;&#39;自定义模型管理器&#39;&#39;&#39;\n    def get_default_address(self, user):\n        #self.model: 获取self对象所在模型类\n        try:\n            address = self.get(user=user, is_default=True)\n        except self.DoesNotExist as e:\n            address = None\n        return address\n\nclass Address(BaseModel):\n    &quot;&quot;&quot;地址模型类&quot;&quot;&quot;\n    pass\n    # 在这里使用定义的管理器\n    objects = AddressManager()</code></pre>\n<blockquote>\n<p>需要使用Address.objects.get_default_address来调用。这样传入self</p>\n</blockquote>\n<p><strong>用户中心的历史记录显示</strong></p>\n<p><img src=\"/img/1575029000281.png\" alt=\"enter description here\"></p>\n<p>参考redis资料<br><a href=\"https://django-redis-chs.readthedocs.io/zh_CN/latest/#\">https://django-redis-chs.readthedocs.io/zh_CN/latest/#</a></p>\n<ol>\n<li><p>获取StrictRedis对象<br> 一般做法：</p>\n<pre><code class=\"python\"> from redis import StrictRedis\n sr = StrictRedis(host=&#39;127.0.0.1&#39;, port=&#39;6379&#39;, db=9)</code></pre>\n<p> 但可以使用原生端的使用方式：</p>\n<pre><code class=\"python\"> from django_redis import get_redis_connection\n con = get_redis_connection(&quot;default&quot;)</code></pre>\n</li>\n<li><p>获取redis数据并返回界面</p>\n</li>\n</ol>\n<pre><code class=\"python\">  #获取redis数据连接\n        con = get_redis_connection(&quot;default&quot;)\n        #获取数据\n        history_key = &#39;history_%id&#39;%user.id\n        #拿前五个\n        sku_ids = con.lrange(history_key, 0, 4)</code></pre>\n<pre><code class=\"python\"> def get(self, request):\n        user = request.user\n        address = Address.objects.get_default_address(user)\n\n        #获取redis数据连接\n        con = get_redis_connection(&quot;default&quot;)\n        #获取数据\n        history_key = &#39;history_%id&#39;%user.id\n        #拿前五个\n        sku_ids = con.lrange(history_key, 0, 4)\n        #获取此ID内的物体\n        # goods_li = GoodsSKU.objects.filter(id__in=sku_ids)\n        goods_li = []\n        for id in sku_ids:\n            goods = GoodsSKU.objects.get(id=id)\n            goods_li.append(goods)\n        #数据组装\n        context = {&#39;page&#39;: &#39;user&#39;,\n                   &#39;address&#39;: address,\n                   &#39;goods_li&#39;:goods_li}\n\n        return render(request, &#39;user_center_info.html&#39;, context)</code></pre>\n<p>3.在Html中配置数据，显示使用for goods, 和empty表示</p>\n<p><img src=\"/img/1575033223646.png\" alt=\"enter description here\"></p>\n<h2 id=\"分布式FastDFS文件系统\"><a href=\"#分布式FastDFS文件系统\" class=\"headerlink\" title=\"分布式FastDFS文件系统\"></a>分布式FastDFS文件系统</h2><p><img src=\"/img/1575033366217.png\" alt=\"enter description here\"></p>\n<p>客户端先发请求到Tracker服务器，服务器将返回一个Storage服务器地址，客户端再上传到此Storage服务器</p>\n<p><img src=\"/img/1575033456146.png\" alt=\"enter description here\"></p>\n<p>电商网站的图片数据一般不放在Django服务器，以防服务器存储器爆掉<br><img src=\"/img/1575034858096.png\" alt=\"enter description here\"></p>\n<p>FastDFS 采用hash值标识存储文件</p>\n<p><strong>文件上传</strong></p>\n<p><img src=\"/img/1575035108391.png\" alt=\"enter description here\"><br><img src=\"/img/1575035161292.png\" alt=\"enter description here\"></p>\n<p><strong>文件下载</strong></p>\n<p><img src=\"/img/1575035213445.png\" alt=\"enter description here\"> </p>\n<p><img src=\"/img/1575035246421.png\" alt=\"enter description here\"></p>\n<p><strong>安装配置</strong></p>\n<p><img src=\"/img/1575290159935.png\" alt=\"安装\"></p>\n<p><img src=\"/img/1575290242736.png\" alt=\"服务器配置\"></p>\n<p><img src=\"/img/1575290266752.png\" alt=\"服务器配置\"></p>\n<p><img src=\"/img/1575290288546.png\" alt=\"启动\"></p>\n<p><img src=\"/img/1575290314506.png\" alt=\"安装Nginx\"></p>\n<p><strong>结合nginx使用，提高多人访问的效率</strong></p>\n<p>获取文件需要借助nginx来获取静态文件。</p>\n<p><img src=\"/img/1575290314506.png\" alt=\"安装Nginx\"></p>\n<p><img src=\"/img/1575603749178.png\" alt=\"fastdfs-nginx\"></p>\n<p>注： 是conf目录<br><img src=\"/img/1575634128185.png\" alt=\"连接fadfs与nginx\"></p>\n<p><img src=\"/img/1575634466665.png\" alt=\"http server配置\"></p>\n<p><img src=\"/img/1575635246200.png\" alt=\"server配置\"></p>\n<p><img src=\"/img/1575635485238.png\" alt=\"启动\"></p>\n<p>上传测试: windows电脑下：</p>\n<ol>\n<li>去github下下载zip，解压</li>\n<li>把fdfs_client文件夹复制到自己conda环境下</li>\n<li>复制远端的client.conf，修改base_path和 网址（一般不用改）</li>\n<li>注释掉fdfs_client.sendfile这句代码在storage_client.py</li>\n<li>写一个Python文件，一定要在自己的conda环境下！</li>\n</ol>\n<pre><code class=\"python\">from fdfs_client.client import Fdfs_client\n\nclient = Fdfs_client(&#39;F:/Projects/django_env/client.conf&#39;)\nret = client.upload_by_filename(&#39;timg.jpg&#39;)\nprint(ret)</code></pre>\n<p>上传成功后：可以使用我们的 <a href=\"http://39.97.170.176:8888/\">http://39.97.170.176:8888/</a> 做为前缀加上地址来访问图片<br><img src=\"/img/1575640031870.png\" alt=\"测试上传\"></p>\n<p><strong>fdfs工作流程</strong></p>\n<p><img src=\"/img/1575981798051.png\" alt=\"fdfs工作流程\"></p>\n<p><strong>实现fdfs</strong></p>\n<ul>\n<li>写一个如下结构：<br><img src=\"/img/1575984532516.png\" alt=\"fdfs文件\"></li>\n<li>storage.py中继承官方的Storage类并重写方法</li>\n</ul>\n<pre><code class=\"python\">from django.core.files.storage import Storage\nfrom fdfs_client.client import Fdfs_client\nfrom django.conf import settings\n\n\nclass FDFSStorage(Storage):\n\n    def __init__(self, client_conf=None, base_url=None):\n        if client_conf is None:\n            client_conf = settings.FDFS_CLIENT_CONF\n        self.client_conf = client_conf\n\n        if base_url is None:\n            base_url = settings.FDFS_URL\n        self.base_url = base_url\n\n    def _open(self, name, mode=&#39;rb&#39;):\n        pass\n\n    def _save(self, name, content):\n        client = Fdfs_client(self.client_conf)\n\n        # 上传文件内容\n        res = client.upload_by_buffer(content.read())\n        # return dict\n        # {\n        #     &#39;Group name&#39;: group_name,\n        #     &#39;Remote file_id&#39;: remote_file_id,\n        #     &#39;Status&#39;: &#39;Upload successed.&#39;,\n        #     &#39;Local file name&#39;: &#39;&#39;,\n        #     &#39;Uploaded size&#39;: upload_size,\n        #     &#39;Storage IP&#39;: storage_ip\n        # } if success else None\n\n        if res.get(&#39;Status&#39;) !=  &#39;Upload successed.&#39;:\n            # 上传失败\n            raise Exception(&#39;上传文件到DFS失败&#39;)\n\n        # 获取返回的文件ID\n        filename = res.get(&#39;Remote file_id&#39;)\n\n        # 返回文件ID\n        return filename\n\n    def exists(self, name):\n        return False\n\n\n    def url(self, name):\n        &#39;&#39;&#39;返回文件url&#39;&#39;&#39;\n        return self.base_url+name\n</code></pre>\n<ul>\n<li>最后在settings中加入</li>\n</ul>\n<pre><code class=\"python\">#配置文件存储器\nDEFAULT_FILE_STORAGE = &#39;utils.fdfs.storage.FDFSStorage&#39;\n\n#设置fdfs 的client.conf文件路径\nFDFS_CLIENT_CONF=&#39;./utils/fdfs/client.conf&#39;\n\n#FDFS服务器地址\nFDFS_URL=&#39;http://39.97.170.176:8888/&#39;</code></pre>\n<p><strong>总结</strong></p>\n<p>使用fdfs好处：</p>\n<ol>\n<li>海量存储，存储内容易扩展</li>\n<li>解决文件内容重复</li>\n<li>结合nginx，提高网站提供图片的效率</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"相关背景概念\"><a href=\"#相关背景概念\" class=\"headerlink\" title=\"相关背景概念\"></a>相关背景概念</h2><blockquote>\n<p>B2B, O2O, B2C, C2C..</p>\n</blockquote>\n<h2 id=\"数据库设计\"><a href=\"#数据库设计\" class=\"headerlink\" title=\"数据库设计\"></a>数据库设计</h2><p><img src=\"/img/1573441070020.png\" alt=\"enter description here\"></p>\n<blockquote>\n<p>对数据库进行授权<br><img src=\"/img/1573442010455.png\" alt=\"enter description here\"></p>\n</blockquote>\n<blockquote>\n<p>使用后台管理<br><img src=\"/img/1573442404015.png\" alt=\"enter description here\"></p>\n</blockquote>\n<h2 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h2><p><strong>1.一个模块对应一个APP</strong><br><strong>2.将所有app归类到一个apps文件夹</strong><br><strong>3.[可选]  设置一个系统路径，这样就不用注册APP时添加前缀文件夹</strong></p>\n<pre><code class=\"python\">sys.path.insert(0, os.path.join(BASE_DIR, &#39;apps&#39;))</code></pre>\n<p><strong>4.添加templates包和static包</strong></p>\n<blockquote>\n<p>TEMPLATES_DIR = os.path.join(BASE_DIR, ‘templates’)<br>TEMPLATES = [<br>    {<br>        ‘BACKEND’: ‘django.template.backends.django.DjangoTemplates’,<br>        ‘DIRS’: [TEMPLATES_DIR],<br>        …<br>STATICFILES_DIRS = [os.path.join(BASE_DIR, ‘static’)]</p>\n</blockquote>\n<p><strong>5.添加templates和static路径到setting</strong></p>\n<p><strong>6.配置数据库为Mysql</strong></p>\n<blockquote>\n<p>  ‘ENGINE’: ‘django.db.backends.mysql’,<br>        ‘NAME’: ‘dailyfresh’,<br>        ‘USER’: ‘root’,<br>        ‘PASSWORD’:’bk102435’,<br>        ‘HOST’:’39.97.170.176’,<br>        ‘PORT’:3306,</p>\n</blockquote>\n<p><strong>7.设置语言</strong></p>\n<pre><code class=\"python\">LANGUAGE_CODE = &#39;zh-hans&#39;\nTIME_ZONE = &#39;Asia/Shanghai&#39;</code></pre>\n<p><strong>8.配置项目总的urls</strong><br><strong>9.为各应用创建urls</strong></p>\n<p><strong>10.数据层准备，创建db包，创建basemodel.py</strong></p>\n<p><strong>11.[可选]创建各models 或 链接现有数据库</strong></p>\n<blockquote>\n<p>Inpectdb 也可针对某张表：<br>python manage.py inspectdb TableName &gt; output.py<br>链接： <a href=\"https://www.jianshu.com/p/037bd7e20a7a\">https://www.jianshu.com/p/037bd7e20a7a</a></p>\n</blockquote>\n<p><strong>12.指定django认证系统的模型</strong><br>这样superuser的模型表就被指定到自己的user表</p>\n<blockquote>\n<p>settings.py中加入<br>AUTH_USER_MODEL = ‘user.User’</p>\n</blockquote>\n<h3 id=\"13-可能出现的问题\"><a href=\"#13-可能出现的问题\" class=\"headerlink\" title=\"13.  可能出现的问题\"></a>13.  可能出现的问题</h3><p>不确定是不是使用pymysql导致的，这里会有两个问题</p>\n<ul>\n<li>1.现在django使用mysqlclient，而且恶心的是会在启动时自动验证版本号，pymysql最高只到0.9.3。这里根据报错直接那代码注释即可！</li>\n<li>2.makemigration出错，提示在django代码里的operations.py中的last_executed_query函数，由于python3与Python2的decode与encode函数区别，这里也需要把.decode..去掉。</li>\n</ul>\n<h2 id=\"User模块-注册\"><a href=\"#User模块-注册\" class=\"headerlink\" title=\"User模块 - 注册\"></a>User模块 - 注册</h2><p><strong>1.准备views函数</strong></p>\n<ul>\n<li>views.py添加相应函数<br>register函数为接收跳转网页, register_handler函数接收处理及逻辑</li>\n</ul>\n<pre><code class=\"python\">def register():\n    pass\ndef register_handle():\n    pass</code></pre>\n<ul>\n<li>urls.py配置对应view函数路径</li>\n</ul>\n<pre><code class=\"python\">path(&#39;register&#39;,views.register,name=&#39;register&#39;)\npath(&#39;register_handle&#39;,views.register_handle,name=&#39;register_handle&#39;)</code></pre>\n<p><strong>2.templates里放入html信息</strong></p>\n<ul>\n<li>编辑表单&lt;form&gt;<br>  添加method,action.<br>  写法升级：</li>\n</ul>\n<pre><code class=\"python\">action=&quot;{% url 'user:detail' %}&quot; </code></pre>\n<p>旧的写法:</p>\n<pre><code class=\"python\">action = &quot;/user/register_handle&quot;</code></pre>\n<blockquote>\n<p>注意事项：</p>\n<ol>\n<li>网页使用跳转，需要在urls.py中指定name:<br>如下：所对应的地址段需要设置不同的正则</li>\n</ol>\n<pre><code class=\"python\">path(&#39;add/&#39;, calc_views.add, name=&#39;add&#39;),  # new\npath(&#39;add/&lt;int:a&gt;/&lt;int:b&gt;/&#39;, calc_views.old_add2_redirect,name=&#39;add&#39;),</code></pre>\n<p>2.使用shell, 用reverse测试<br>地址反射的机制：django.urls reverse<br>3.定义一个跳转函数来做：</p>\n<pre><code class=\"python\">urls.py中加入如下：\n path(&#39;add/&lt;int:a&gt;/&lt;int:b&gt;/&#39;, calc_views.old_add2_redirect,name=&#39;add&#39;),\npath(&#39;new_add/&lt;int:a&gt;/&lt;int:b&gt;/&#39;, calc_views.add2, name=&#39;add2&#39;),\n\nviews.py中加入如下：\ndef old_add2_redirect(request):\nreturn HttpResponseRedirect(\n       reverse(&#39;add2&#39;, args=(a, b))\n   )\n测试网址： http://127.0.0.1:8000/add/5/6/ \n这时最终就将跳到美术http://127.0.0.1:8000/new_add/5/6/</code></pre>\n</blockquote>\n<p><strong>3.使用类视图</strong></p>\n<blockquote>\n<p>1.优化去register_handle函数，使用get/post判断实现不同的跳转类型<br>2.基于1的优化，使用类视图方式加载</p>\n</blockquote>\n<pre><code class=\"python\">from django.views.generic import View\n\nclass RegisterView(View):\n\n    def get(self, request):\n        pass\n\n    def post(self, request):\n        pass</code></pre>\n<p><strong>3.激活用户</strong></p>\n<ol>\n<li>使用itsdangerous为网址进行加密签名</li>\n<li>调用django.core.mail 的send_mail来发送邮件，把链接成文本发送过去</li>\n</ol>\n<pre><code class=\"python\">from django.conf import settings\nfrom django.core.mail import send_mail\nimport time\n\ndef send_register_active_email(to_email, username, token):\n    &#39;&#39;&#39;send active email&#39;&#39;&#39;\n    subject = &quot;天天生鲜欢迎消息&quot;\n    message = &quot;&quot;\n    sender = settings.DEFAULT_FROM_EMAIL\n    receiver = [to_email]\n    html_message = &quot;&lt;h1&gt;%s, 欢迎你&lt;/h1&gt;请点击下面链接激活&lt;br/&gt;&lt;a href=\\&quot;http://127.0.0.1:8000/user/active/%s\\&quot;&gt;http://127.0.0.1:8000/user/active/%s&lt;/a&gt;&quot; % (\n    username, token, token)\n    send_mail(subject, message, sender, receiver, html_message=html_message)\n    time.sleep(5)</code></pre>\n<blockquote>\n<p>也可使用Python的发email库</p>\n</blockquote>\n<blockquote>\n<pre><code class=\"python\"> def active_email(self, email_addr, active_code):\n     # 第三方 SMTP 服务 # 授权码：cmatkgceuuxcbddc\n     mail_host = &quot;smtp.qq.com&quot;  # 设置服务器\n     mail_user = &quot;1024037035@qq.com&quot;  # 用户名\n     mail_pass = &quot;cmatkgceuuxcbddc&quot;  # 口令\n     sender = &#39;1024037035@qq.com&#39;\n     receivers = [email_addr]  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n      # 三个参数：第一个为文本内容，第二个 plain 设置文本格式，第三个 utf-8 设置编码\n     try:\n         smtp_obj = smtplib.SMTP()\n         smtp_obj.connect(mail_host, 25)  # 25 为 SMTP 端口号\n         smtp_obj.login(mail_user, mail_pass)\n         smtp_obj.sendmail(sender, receivers, message.as_string())\n         return True\n         &quot;邮件发送成功&quot;\n     except smtplib.SMTPException:\n          return False\n           &quot;Error: 无法发送邮件&quot;</code></pre>\n</blockquote>\n<ol start=\"3\">\n<li>在Url中配置激活的功能</li>\n</ol>\n<pre><code class=\"python\">path(&#39;active/&lt;token&gt;&#39;,ActiveView.as_view(), name=&#39;active&#39;),</code></pre>\n<ol start=\"4\">\n<li>在views.py中写一个ActiveView的视图来处理激活</li>\n</ol>\n<pre><code class=\"python\">class ActiveView(View):\n    def get(self, request, token):\n        try:\n            serializer = Serializer(settings.SECRET_KEY, 3600)\n            # print(type(token))\n            token = token.encode()\n            info = serializer.loads(token)\n            user_id = info[&#39;confirm&#39;]\n            user = User.objects.get(id=user_id)\n            user.is_active = 1\n            user.save()\n\n            # 跳转到登陆页面\n            return redirect(reverse(&#39;user:login&#39;))\n        except SignatureExpired as e:\n            # 激活链接过期\n            return HttpResponse(&#39;激活链接已过期&#39;)</code></pre>\n<p><strong>4.使用celery做为异步处理</strong></p>\n<p><img src=\"/img/1574171584470.png\" alt=\"enter description here\"></p>\n<p>1.配置一个项目目录为：celery_tasks/tasks.py的文件<br>2.在tasks.py写入配置如 </p>\n<pre><code class=\"python\"># use celery\nfrom celery import Celery\n# create celery instance\napp = Celery(&#39;celery_tasks.tasks&#39;, broker=&#39;redis://:pwd@39.97.170.176:6379/8&#39;)\n\n# define task function\n@app.task\ndef send_register_active_email(to_email, username, token):\n    pass</code></pre>\n<p>3.执行的脚本函数里写入：</p>\n<pre><code class=\"python\">        # 发送邮件1\n        send_register_active_email.delay(email, username, secret_info)</code></pre>\n<p>4.在有redis的电脑上</p>\n<ul>\n<li>复制项目代码</li>\n<li>在tasks.py中加入初始化django的代码</li>\n<li><pre><code class=\"python\">import os\nimport django\nfrom django.core.wsgi import get_wsgi_application\n</code></pre>\n</li>\n</ul>\n<p>os.environ.setdefault(‘DJANGO_SETTINGS_MODULE’, ‘dailyfresh.settings’)<br>django.setup()</p>\n<pre><code>* 启动worker\n</code></pre><p>celery -A celery_tasks.tasks worker -l info</p>\n<pre><code>* 启动redis , 大功告成，测试\n\n&gt; 可能出现的问题\n&gt; 在windows系统中：\n&gt;  使用这种方式来启动worker: pip install eventlet -&gt; celery -A your_app_name worker --pool=eventlet\n&gt;  或： celery -A your_app_name worker --pool=solo -l info\n&gt;  或：\n&gt;  at worker side:\nset FORKED_BY_MULTIPROCESSING = 1\nthen\ncelery -A myworker worker --loglevel=info\n\n## User模块 - 登录\n\n**LoginView，使用自带的授权**\n\n授权，如果成功则会返回user对象：：\n</code></pre><p>user = authenticate(username=username, password=pwd)</p>\n<pre><code>\n登录：\n\n```python\nlogin(request, user)</code></pre><p>添加URL及表单部分，参考注册流程</p>\n<p><strong>为减少数据库操作，使用redis存储</strong></p>\n<p>1.安装 django-redis<br>2.settings加入如下配置即可：</p>\n<pre><code class=\"python\">#Django 缓存配置\nCACHES = {\n    &quot;default&quot;: {\n        &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,\n        &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/9&quot;, #服务器地址\n        &quot;OPTIONS&quot;: {\n            &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,\n            &quot;CONNECTION_POOL_KWARGS&quot;: {&quot;max_connections&quot;: 100}, # 最大连接数\n            &quot;PASSWORD&quot;: &quot;bk102435&quot;,\n        }\n    }\n}\n#配置session存储\nSESSION_ENGINE = &#39;django.contrib.sessions.backends.cache&#39;\nSESSION_CACHE_ALIAS = &#39;default&#39;</code></pre>\n<p><strong>把用户名记在cookie</strong></p>\n<p>1.登录成功时，把username字段存在cookie中</p>\n<pre><code class=\"python\">response = redirect(reverse(&#39;goods:index&#39;))\nremember = request.POST.get(&#39;remember&#39;)\n\nif remember == &#39;on&#39;:\n    response.set_cookie(&#39;username&#39;, username, max_age=7*24*3600)\nelse:\n    response.delete_cookie(&#39;username&#39;)</code></pre>\n<p>2.get方法中取出cookie数据</p>\n<pre><code>if &#39;username&#39; in request.COOKIES:\n    username = request.COOKIES.get(&#39;username&#39;)\n    checked = &#39;checked&#39;\nelse:\n    username = &#39;&#39;\n    checked = &#39;&#39;\nreturn render(request, &#39;login.html&#39;, {&#39;username&#39;:username, &#39;checked&#39;:checked})</code></pre><h2 id=\"User-模块-用户中心\"><a href=\"#User-模块-用户中心\" class=\"headerlink\" title=\"User 模块 - 用户中心\"></a>User 模块 - 用户中心</h2><p><strong>从模板网页中抽象</strong></p>\n<ol>\n<li>将共同部分放在一个html， 不同部分使用</li>\n</ol>\n<p>base_user_center.html:</p>\n<p><img src=\"/img/1574937645193.png\" alt=\"enter description here\"></p>\n<p>2.在对应的功能页面继承</p>\n<p><img src=\"/img/1574937788143.png\" alt=\"enter description here\"></p>\n<p><strong>使用if 做功能块显示隐藏</strong></p>\n<p>如上方的：</p>\n<p><img src=\"/img/1574937430699.png\" alt=\"enter description here\"></p>\n<p><strong>使用官方提供的授权管理</strong></p>\n<p>有些页面需要登录后才能显示，如这里的用户中心页<br>使用django的login_required装饰器来做</p>\n<p><a href=\"https://docs.djangoproject.com/en/2.2/topics/auth/default/\">https://docs.djangoproject.com/en/2.2/topics/auth/default/</a></p>\n<ol>\n<li>当用户已登录过，将直接跳转至所需页面</li>\n<li>当未登录，将默认跳转至/accounts/login/?next=/polls/3/.</li>\n<li>login_url可在settings.LOGIN_URL中配置 或login_url参数中配置</li>\n<li>next可在redirect_field_name参数中配置</li>\n</ol>\n<pre><code class=\"python\">from django.contrib.auth.decorators import login_required\n\n@login_required(login_url=&#39;/accounts/login/&#39;)\ndef my_view(request):</code></pre>\n<ol start=\"5\">\n<li>处理用户通过非登录界面过来的<pre><code class=\"python\"># 处理通过跳转的请求值#\n             # 设置下一步自动跳转 #\n             next_url = request.GET.get(&#39;next&#39;, reverse(&#39;goods:index&#39;))\n             response = redirect(reverse(next_url))</code></pre>\n</li>\n</ol>\n<blockquote>\n<p>注意：需要将form表单的action设成无action，这样提交的内容将按当前内容来指定！</p>\n</blockquote>\n<p>6.使用Mixin优化写法</p>\n<ul>\n<li>新建utils文件夹，新建一个LoginRequireMixin类</li>\n</ul>\n<pre><code class=\"python\">class LoginRequiredMixin(object):\n    @classmethod\n    def as_view(cls, **initkwargs):\n        view = super(LoginRequiredMixin, cls).as_view(**initkwargs)\n        return login_required(view)</code></pre>\n<p>在所有view函数中继承</p>\n<pre><code class=\"python\">class AddressView(LoginRequiredMixin, View):\n    pass</code></pre>\n<blockquote>\n<p>Mixin的原理是，执行一个子类没有的函数，Python继承规则是第一个父类先找，找到cls所代表的类的父类，再调用其as_view<br>super(A,cls) 找到A的父类，并将cls转成父类对象！</p>\n</blockquote>\n<p><strong>使用官方提供的是否登录标识</strong></p>\n<pre><code class=\"python\">if request.user.is_authenticated:\n    # Do something for authenticated users.\n    ...\nelse:\n    # Do something for anonymous users.\n    ...</code></pre>\n<p>因此在html中加入如下代码：</p>\n<p><img src=\"/img/1574937768754.png\" alt=\"enter description here\"></p>\n<p><strong>使用官方提供的退出登录</strong></p>\n<p>logout函数</p>\n<pre><code class=\"html\">&lt;a href=&quot;{% url 'user:logout' %}&quot;&gt;退出&lt;/a&gt;</code></pre>\n<pre><code class=\"python\">class LogoutView(View):\n    def get(self, request):\n        logout(request)\n        return redirect(reverse(&#39;goods:index&#39;))</code></pre>\n<p><strong>实现地址页的功能</strong></p>\n<blockquote>\n<p>1.使用request.user拿到user对象<br>2.Address.objects.create/get 来操作数据库<br>3.post请求中收到后再进行操作<br>4.Post请求完毕后，在get请求中再取数据库的地址来到html<br>5.显示get请求的结果到html</p>\n</blockquote>\n<p><strong>抽象Model里的管理器</strong></p>\n<p>model.py里：</p>\n<p>需要继承manager</p>\n<pre><code class=\"python\">class AddressManager(models.Manager):\n    &#39;&#39;&#39;自定义模型管理器&#39;&#39;&#39;\n    def get_default_address(self, user):\n        #self.model: 获取self对象所在模型类\n        try:\n            address = self.get(user=user, is_default=True)\n        except self.DoesNotExist as e:\n            address = None\n        return address\n\nclass Address(BaseModel):\n    &quot;&quot;&quot;地址模型类&quot;&quot;&quot;\n    pass\n    # 在这里使用定义的管理器\n    objects = AddressManager()</code></pre>\n<blockquote>\n<p>需要使用Address.objects.get_default_address来调用。这样传入self</p>\n</blockquote>\n<p><strong>用户中心的历史记录显示</strong></p>\n<p><img src=\"/img/1575029000281.png\" alt=\"enter description here\"></p>\n<p>参考redis资料<br><a href=\"https://django-redis-chs.readthedocs.io/zh_CN/latest/#\">https://django-redis-chs.readthedocs.io/zh_CN/latest/#</a></p>\n<ol>\n<li><p>获取StrictRedis对象<br> 一般做法：</p>\n<pre><code class=\"python\"> from redis import StrictRedis\n sr = StrictRedis(host=&#39;127.0.0.1&#39;, port=&#39;6379&#39;, db=9)</code></pre>\n<p> 但可以使用原生端的使用方式：</p>\n<pre><code class=\"python\"> from django_redis import get_redis_connection\n con = get_redis_connection(&quot;default&quot;)</code></pre>\n</li>\n<li><p>获取redis数据并返回界面</p>\n</li>\n</ol>\n<pre><code class=\"python\">  #获取redis数据连接\n        con = get_redis_connection(&quot;default&quot;)\n        #获取数据\n        history_key = &#39;history_%id&#39;%user.id\n        #拿前五个\n        sku_ids = con.lrange(history_key, 0, 4)</code></pre>\n<pre><code class=\"python\"> def get(self, request):\n        user = request.user\n        address = Address.objects.get_default_address(user)\n\n        #获取redis数据连接\n        con = get_redis_connection(&quot;default&quot;)\n        #获取数据\n        history_key = &#39;history_%id&#39;%user.id\n        #拿前五个\n        sku_ids = con.lrange(history_key, 0, 4)\n        #获取此ID内的物体\n        # goods_li = GoodsSKU.objects.filter(id__in=sku_ids)\n        goods_li = []\n        for id in sku_ids:\n            goods = GoodsSKU.objects.get(id=id)\n            goods_li.append(goods)\n        #数据组装\n        context = {&#39;page&#39;: &#39;user&#39;,\n                   &#39;address&#39;: address,\n                   &#39;goods_li&#39;:goods_li}\n\n        return render(request, &#39;user_center_info.html&#39;, context)</code></pre>\n<p>3.在Html中配置数据，显示使用for goods, 和empty表示</p>\n<p><img src=\"/img/1575033223646.png\" alt=\"enter description here\"></p>\n<h2 id=\"分布式FastDFS文件系统\"><a href=\"#分布式FastDFS文件系统\" class=\"headerlink\" title=\"分布式FastDFS文件系统\"></a>分布式FastDFS文件系统</h2><p><img src=\"/img/1575033366217.png\" alt=\"enter description here\"></p>\n<p>客户端先发请求到Tracker服务器，服务器将返回一个Storage服务器地址，客户端再上传到此Storage服务器</p>\n<p><img src=\"/img/1575033456146.png\" alt=\"enter description here\"></p>\n<p>电商网站的图片数据一般不放在Django服务器，以防服务器存储器爆掉<br><img src=\"/img/1575034858096.png\" alt=\"enter description here\"></p>\n<p>FastDFS 采用hash值标识存储文件</p>\n<p><strong>文件上传</strong></p>\n<p><img src=\"/img/1575035108391.png\" alt=\"enter description here\"><br><img src=\"/img/1575035161292.png\" alt=\"enter description here\"></p>\n<p><strong>文件下载</strong></p>\n<p><img src=\"/img/1575035213445.png\" alt=\"enter description here\"> </p>\n<p><img src=\"/img/1575035246421.png\" alt=\"enter description here\"></p>\n<p><strong>安装配置</strong></p>\n<p><img src=\"/img/1575290159935.png\" alt=\"安装\"></p>\n<p><img src=\"/img/1575290242736.png\" alt=\"服务器配置\"></p>\n<p><img src=\"/img/1575290266752.png\" alt=\"服务器配置\"></p>\n<p><img src=\"/img/1575290288546.png\" alt=\"启动\"></p>\n<p><img src=\"/img/1575290314506.png\" alt=\"安装Nginx\"></p>\n<p><strong>结合nginx使用，提高多人访问的效率</strong></p>\n<p>获取文件需要借助nginx来获取静态文件。</p>\n<p><img src=\"/img/1575290314506.png\" alt=\"安装Nginx\"></p>\n<p><img src=\"/img/1575603749178.png\" alt=\"fastdfs-nginx\"></p>\n<p>注： 是conf目录<br><img src=\"/img/1575634128185.png\" alt=\"连接fadfs与nginx\"></p>\n<p><img src=\"/img/1575634466665.png\" alt=\"http server配置\"></p>\n<p><img src=\"/img/1575635246200.png\" alt=\"server配置\"></p>\n<p><img src=\"/img/1575635485238.png\" alt=\"启动\"></p>\n<p>上传测试: windows电脑下：</p>\n<ol>\n<li>去github下下载zip，解压</li>\n<li>把fdfs_client文件夹复制到自己conda环境下</li>\n<li>复制远端的client.conf，修改base_path和 网址（一般不用改）</li>\n<li>注释掉fdfs_client.sendfile这句代码在storage_client.py</li>\n<li>写一个Python文件，一定要在自己的conda环境下！</li>\n</ol>\n<pre><code class=\"python\">from fdfs_client.client import Fdfs_client\n\nclient = Fdfs_client(&#39;F:/Projects/django_env/client.conf&#39;)\nret = client.upload_by_filename(&#39;timg.jpg&#39;)\nprint(ret)</code></pre>\n<p>上传成功后：可以使用我们的 <a href=\"http://39.97.170.176:8888/\">http://39.97.170.176:8888/</a> 做为前缀加上地址来访问图片<br><img src=\"/img/1575640031870.png\" alt=\"测试上传\"></p>\n<p><strong>fdfs工作流程</strong></p>\n<p><img src=\"/img/1575981798051.png\" alt=\"fdfs工作流程\"></p>\n<p><strong>实现fdfs</strong></p>\n<ul>\n<li>写一个如下结构：<br><img src=\"/img/1575984532516.png\" alt=\"fdfs文件\"></li>\n<li>storage.py中继承官方的Storage类并重写方法</li>\n</ul>\n<pre><code class=\"python\">from django.core.files.storage import Storage\nfrom fdfs_client.client import Fdfs_client\nfrom django.conf import settings\n\n\nclass FDFSStorage(Storage):\n\n    def __init__(self, client_conf=None, base_url=None):\n        if client_conf is None:\n            client_conf = settings.FDFS_CLIENT_CONF\n        self.client_conf = client_conf\n\n        if base_url is None:\n            base_url = settings.FDFS_URL\n        self.base_url = base_url\n\n    def _open(self, name, mode=&#39;rb&#39;):\n        pass\n\n    def _save(self, name, content):\n        client = Fdfs_client(self.client_conf)\n\n        # 上传文件内容\n        res = client.upload_by_buffer(content.read())\n        # return dict\n        # {\n        #     &#39;Group name&#39;: group_name,\n        #     &#39;Remote file_id&#39;: remote_file_id,\n        #     &#39;Status&#39;: &#39;Upload successed.&#39;,\n        #     &#39;Local file name&#39;: &#39;&#39;,\n        #     &#39;Uploaded size&#39;: upload_size,\n        #     &#39;Storage IP&#39;: storage_ip\n        # } if success else None\n\n        if res.get(&#39;Status&#39;) !=  &#39;Upload successed.&#39;:\n            # 上传失败\n            raise Exception(&#39;上传文件到DFS失败&#39;)\n\n        # 获取返回的文件ID\n        filename = res.get(&#39;Remote file_id&#39;)\n\n        # 返回文件ID\n        return filename\n\n    def exists(self, name):\n        return False\n\n\n    def url(self, name):\n        &#39;&#39;&#39;返回文件url&#39;&#39;&#39;\n        return self.base_url+name\n</code></pre>\n<ul>\n<li>最后在settings中加入</li>\n</ul>\n<pre><code class=\"python\">#配置文件存储器\nDEFAULT_FILE_STORAGE = &#39;utils.fdfs.storage.FDFSStorage&#39;\n\n#设置fdfs 的client.conf文件路径\nFDFS_CLIENT_CONF=&#39;./utils/fdfs/client.conf&#39;\n\n#FDFS服务器地址\nFDFS_URL=&#39;http://39.97.170.176:8888/&#39;</code></pre>\n<p><strong>总结</strong></p>\n<p>使用fdfs好处：</p>\n<ol>\n<li>海量存储，存储内容易扩展</li>\n<li>解决文件内容重复</li>\n<li>结合nginx，提高网站提供图片的效率</li>\n</ol>\n"},{"title":"四元数旋转函数学习","_content":"\n## LookRotation(Vector3 forward, [DefaultValue(\"Vector3.up\")] Vector3 upwards)\n\n理解为将Z轴正方向转到第一个”forward“参数位置，把UP正方向转到第二个’upwards‘位置\n\n> LookRotation的含义就是，计算让Z轴对齐forward，让y轴对齐upward 所需要的旋转四元数。\n\n## FromToRotation(Vector3 fromDirection, Vector3 toDirection)\n\n> 从一个转向到另一个目标转向。如：\n> Quaternion.LookRotation(new Vector3(1,0,0)) 等价于 Quaternion.FromToRotation(Vector3.forward, new Vector3(1,0,0));\n\n\n[参考学习](https://blog.csdn.net/narutojzm1/article/details/51276433)\n\n## AngleAxis(float angle, Vector3 axis)\n\n> 以axis为轴，转一个角度。 \n\n示例：如以A（0，10，0）到B（10，0，0）形成一个方向，以此方向转90。\n起始位置如图：\n![起始位置](/img/1578566566815.png)\n\n转90度后如图：\n![转后](/img/1578566598445.png)","source":"_posts/四元数旋转函数学习.md","raw":"---\ntitle: 四元数旋转函数学习\ncategories:\n- Unity学习\ntags: \n- Unity学习\n---\n\n## LookRotation(Vector3 forward, [DefaultValue(\"Vector3.up\")] Vector3 upwards)\n\n理解为将Z轴正方向转到第一个”forward“参数位置，把UP正方向转到第二个’upwards‘位置\n\n> LookRotation的含义就是，计算让Z轴对齐forward，让y轴对齐upward 所需要的旋转四元数。\n\n## FromToRotation(Vector3 fromDirection, Vector3 toDirection)\n\n> 从一个转向到另一个目标转向。如：\n> Quaternion.LookRotation(new Vector3(1,0,0)) 等价于 Quaternion.FromToRotation(Vector3.forward, new Vector3(1,0,0));\n\n\n[参考学习](https://blog.csdn.net/narutojzm1/article/details/51276433)\n\n## AngleAxis(float angle, Vector3 axis)\n\n> 以axis为轴，转一个角度。 \n\n示例：如以A（0，10，0）到B（10，0，0）形成一个方向，以此方向转90。\n起始位置如图：\n![起始位置](/img/1578566566815.png)\n\n转90度后如图：\n![转后](/img/1578566598445.png)","slug":"四元数旋转函数学习","published":1,"date":"2020-09-08T03:23:20.889Z","updated":"2020-09-08T03:23:20.889Z","_id":"ckdpcluz5003f8sr3xy3ye3hn","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"LookRotation-Vector3-forward-DefaultValue-“Vector3-up”-Vector3-upwards\"><a href=\"#LookRotation-Vector3-forward-DefaultValue-“Vector3-up”-Vector3-upwards\" class=\"headerlink\" title=\"LookRotation(Vector3 forward, [DefaultValue(“Vector3.up”)] Vector3 upwards)\"></a>LookRotation(Vector3 forward, [DefaultValue(“Vector3.up”)] Vector3 upwards)</h2><p>理解为将Z轴正方向转到第一个”forward“参数位置，把UP正方向转到第二个’upwards‘位置</p>\n<blockquote>\n<p>LookRotation的含义就是，计算让Z轴对齐forward，让y轴对齐upward 所需要的旋转四元数。</p>\n</blockquote>\n<h2 id=\"FromToRotation-Vector3-fromDirection-Vector3-toDirection\"><a href=\"#FromToRotation-Vector3-fromDirection-Vector3-toDirection\" class=\"headerlink\" title=\"FromToRotation(Vector3 fromDirection, Vector3 toDirection)\"></a>FromToRotation(Vector3 fromDirection, Vector3 toDirection)</h2><blockquote>\n<p>从一个转向到另一个目标转向。如：<br>Quaternion.LookRotation(new Vector3(1,0,0)) 等价于 Quaternion.FromToRotation(Vector3.forward, new Vector3(1,0,0));</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/narutojzm1/article/details/51276433\">参考学习</a></p>\n<h2 id=\"AngleAxis-float-angle-Vector3-axis\"><a href=\"#AngleAxis-float-angle-Vector3-axis\" class=\"headerlink\" title=\"AngleAxis(float angle, Vector3 axis)\"></a>AngleAxis(float angle, Vector3 axis)</h2><blockquote>\n<p>以axis为轴，转一个角度。 </p>\n</blockquote>\n<p>示例：如以A（0，10，0）到B（10，0，0）形成一个方向，以此方向转90。<br>起始位置如图：<br><img src=\"/img/1578566566815.png\" alt=\"起始位置\"></p>\n<p>转90度后如图：<br><img src=\"/img/1578566598445.png\" alt=\"转后\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"LookRotation-Vector3-forward-DefaultValue-“Vector3-up”-Vector3-upwards\"><a href=\"#LookRotation-Vector3-forward-DefaultValue-“Vector3-up”-Vector3-upwards\" class=\"headerlink\" title=\"LookRotation(Vector3 forward, [DefaultValue(“Vector3.up”)] Vector3 upwards)\"></a>LookRotation(Vector3 forward, [DefaultValue(“Vector3.up”)] Vector3 upwards)</h2><p>理解为将Z轴正方向转到第一个”forward“参数位置，把UP正方向转到第二个’upwards‘位置</p>\n<blockquote>\n<p>LookRotation的含义就是，计算让Z轴对齐forward，让y轴对齐upward 所需要的旋转四元数。</p>\n</blockquote>\n<h2 id=\"FromToRotation-Vector3-fromDirection-Vector3-toDirection\"><a href=\"#FromToRotation-Vector3-fromDirection-Vector3-toDirection\" class=\"headerlink\" title=\"FromToRotation(Vector3 fromDirection, Vector3 toDirection)\"></a>FromToRotation(Vector3 fromDirection, Vector3 toDirection)</h2><blockquote>\n<p>从一个转向到另一个目标转向。如：<br>Quaternion.LookRotation(new Vector3(1,0,0)) 等价于 Quaternion.FromToRotation(Vector3.forward, new Vector3(1,0,0));</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/narutojzm1/article/details/51276433\">参考学习</a></p>\n<h2 id=\"AngleAxis-float-angle-Vector3-axis\"><a href=\"#AngleAxis-float-angle-Vector3-axis\" class=\"headerlink\" title=\"AngleAxis(float angle, Vector3 axis)\"></a>AngleAxis(float angle, Vector3 axis)</h2><blockquote>\n<p>以axis为轴，转一个角度。 </p>\n</blockquote>\n<p>示例：如以A（0，10，0）到B（10，0，0）形成一个方向，以此方向转90。<br>起始位置如图：<br><img src=\"/img/1578566566815.png\" alt=\"起始位置\"></p>\n<p>转90度后如图：<br><img src=\"/img/1578566598445.png\" alt=\"转后\"></p>\n"},{"title":"天天生鲜项目实例P2","_content":"\n## 首页模块\n\n\n**IndexView中加入信息**\n\n在goods/views.py加入indexview的功能\n\n```python\nfrom django.urls import path\nfrom .views import IndexView\n\napp_name = 'goods'\nurlpatterns = [\n    path('', IndexView.as_view() ,name='index')\n]\n\n```\n\n```python\nfrom django.core.paginator import Paginator\nfrom django.shortcuts import render, redirect, reverse\nfrom django.views.generic.base import View\nfrom django_redis import get_redis_connection\nfrom django.core.cache import cache\nfrom goods.models import GoodsType, IndexGoodsBanner, IndexTypeGoodsBanner, IndexPromotionBanner, GoodsSKU\nfrom order.models import OrderGoods\n\nclass IndexView(View):\n    def get(self, request):\n        # get all goods type\n        types = GoodsType.objects.all()\n\n        # 获取首页轮播商品信息\n        goods_banners = IndexGoodsBanner.objects.all().order_by('index')\n\n        # 获取促销信息\n        promotion_banners = IndexPromotionBanner.objects.all().order_by('index')\n\n        # 获取分类商品展示信息\n        for type in types:\n            #获取图片类的banner展示信息\n            image_banners = IndexTypeGoodsBanner.objects.filter(type=type, display_type=1)\n            #获取文字类的banner展示信息\n            title_banners = IndexTypeGoodsBanner.objects.filter(type=type, display_type=0)\n\n            #添加属性\n            type.image_banners = image_banners\n            type.title_banners = title_banners\n\n        #获取用户购物车中的商品数目\n        user = request.user\n        cart_count = 0\n\n        if user.is_authenticated:\n            # 用户已登录有授权\n            conn = get_redis_connection('default')\n            cart_key = 'cart_%d'%user.id\n            cart_count = conn.hlen(cart_key)\n\n        # 组织上下文\n        context = {\n            'types':types,\n            'goods_banners':goods_banners,\n            'promotion_banners':promotion_banners,\n            'cart_count':cart_count\n        }\n\n        # 使用模板\n        return render(request, 'index.html', context)\n\n```\n\n**使用celery生成Index的static文件**\n\n新建任务：\n\n> 注意：\n> 1.from goods.models 要在django.setup之后\n> 2.worker端的fdfs_client需要升级到Python3的exception写法。\n> 3.worker端的fdfs_client考虑先将utils的import注释\n\n```python\n@app.task\ndef generate_static_index_html():\n    # get all goods type\n    types = GoodsType.objects.all()\n\n    # 获取首页轮播商品信息\n    goods_banners = IndexGoodsBanner.objects.all().order_by('index')\n\n    # 获取促销信息\n    promotion_banners = IndexPromotionBanner.objects.all().order_by('index')\n\n    # 获取分类商品展示信息\n    for type in types:\n        # 获取图片类的banner展示信息\n        image_banners = IndexTypeGoodsBanner.objects.filter(type=type, display_type=1)\n        # 获取文字类的banner展示信息\n        title_banners = IndexTypeGoodsBanner.objects.filter(type=type, display_type=0)\n\n        # 添加属性\n        type.image_banners = image_banners\n        type.title_banners = title_banners\n\n    # 组织上下文\n    context = {\n        'types': types,\n        'goods_banners': goods_banners,\n        'promotion_banners': promotion_banners,\n    }\n\n    # 使用模板\n    # 1.加载模板文件\n    temp = loader.get_template('static_index.html')\n    # 2.渲染\n    static_index_html = temp.render(context)\n\n    # 生成首页的静态文件\n    save_path = os.path.join(settings.BASE_DIR, 'static/index.html')\n    with open(save_path, 'w') as f:\n        f.write(static_index_html)\n```\n\n![流程](/img/1576549292557.png)\n\n**在admin的委托返回调用中，执行celery**\n\n在goods的admin.py中监听一下admin后台的save和delete操作，然后执行celery刷新内容返回。\n\n![执行流程](/img/1576551196217.png)\n\n 在admin.py中加入\n\n```python\nclass BaseModelAdmin(admin.ModelAdmin):\n    def save_model(self, request, obj, form, change):\n        # 先执行数据库操作\n        super().save_model(request, obj, form, change)\n\n        # 发送celery事件\n        from celery_tasks.tasks import generate_static_index_html\n        generate_static_index_html.delay()\n\n    def delete_model(self, request, obj):\n        # 先执行数据库操作\n        super().delete_model(request, obj)\n\n        # 发送celery事件\n        from celery_tasks.tasks import generate_static_index_html\n        generate_static_index_html.delay()\n```\n\n> 遇到问题： 第一次修改后，celery生成的页面太快了，还没等save-model结束，因此查出来的数据是旧的。下一次又可以刷出最新数据\n> 方案：在celery里加入一个等待，保证model已经处理完数据库了，这样celery任务可以查到最新的结果。\n\n**将index页面的两种获取方式调度起来**\n\n![静态页面的调度](/img/1576554364999.png)\n\n**使用django的缓存机制存储页面**\n\nhttps://docs.djangoproject.com/zh-hans/3.0/topics/cache/\n\n* 存储\n\n```python\ncache.set()\npass\ncache.get()\n```\n\n* 更新\n在admin.py里进行清空缓存\n\n```python\n        # 清缓存\n        cache.delete(index_cache_key)\n```\n\n> 小结：缓存机制的目的之一在于防止黑客利用各多台电脑进行访问型攻击（DDOS），缓存通过减少数据库的查询次数，实现对性能的优化。\n\n![缓存机制](/img/1576636756891.png)\n\n**使用redis存储购物车数据**\n\n![讨论](/img/1576722037256.png)\n\n\n## 商品详情页面\n\n**1.views.py 为页面添加必要数据**\n\n```python\n# 商品详情页\n    def get(self, request, goods_id):\n\n        try:\n            # 拿商品SKU\n            good_sku = GoodsSKU.objects.get(id=goods_id)\n        except GoodsSKU.DoesNotExist:\n            return redirect(reverse(\"goods:index\"))\n\n        # 拿所有类型\n        all_good_types = GoodsType.objects.all()\n\n        # 拿商品评论并排除掉commit为空的\n        sku_orders = OrderGoods.objects.filter(sku=good_sku).exclude(comment='')\n\n        # 拿同类型的商品（以时间倒序）\n        new_skus = GoodsSKU.objects.filter(type=good_sku.type).order_by(\"-create_time\")\n\n        # 获取购物车数量\n        user = request.user\n        cart_count = 0\n\n        if user.is_authenticated:\n            # 用户已登录有授权\n            conn = get_redis_connection('default')\n            cart_key = 'cart_%d' % user.id\n            cart_count = conn.hlen(cart_key)\n\n        # 上下文组织，sku,types, sku_orders, new_skus, cart_count\n        context = {\n            \"sku\": good_sku,\n            \"types\": all_good_types,\n            \"sku_orders\": sku_orders,\n            \"new_skus\": new_skus,\n            \"cart_count\": cart_count\n        }\n\n        return render(request, 'detail.html',context)\n```\n\n**2.页面编辑**\n\n使用双curly braces（放变量）或百分号的curly braces（放语句）\n\n forloop.counter来获取循环当前的ID\n\n**3.关闭escape转义**\n\n1.使用autoescape off来关闭转义，\n\n![关闭转义](/img/1576810604102.png)\n\n2.使用| safe来关闭转义\n\n![用safe关闭转义](/img/1576810673369.png)\n\n\n## 商品列表页\n\n**分析页面**\n\n> 使用/list/type/page?sort=default 这种地址来设计\n\n**分页的功能实现**\n\n> 使用Paginator分页来查询分页\n\n**路径传递方式**\n\n![路径传递方式](/img/1577414335373.png)\n\n**页码控制**\n\n![控制显示的页码](/img/1577414816762.png)\n\n> 遇到一个问题：get误写成filter，后果就是把这些结果放里面搜索会报 The QuerySet value for an exact lookup must be limited to one result using slicing. 以后需要注意\n\n\n**搜索引擎与全文检索**\n\n使用haystack的全文检索框架，whoosh的搜索引擎\n\n![结构分析](/img/1578122441016.png)\n\n![全文检索](/img/1578122530429.png)\n\n\n* 安装和配置\n\n![安装](/img/1578122591339.png)\n\n![配置haystack](/img/1578122991267.png)\n\n>haystack默认安装无如下内容，需按情况配置\n![配置](/img/1578123391128.png)\n\n> 索引文件生成：\n![索引文件生成：](/img/1578123481409.png)\n\n\n[官网](https://django-haystack.readthedocs.io/en/master/signal_processors.html)\n\n\n![索引类定义](/img/1578365001196.png)\n![建立索引](/img/1578377646492.png)\n\n改成如下：\n\n```python\n# 定义索引类\n\nfrom haystack import indexes\n# 导入模型类\nfrom goods.models import GoodsSKU\n\n#指定类建立索引\nclass GoodsSKUIndex(indexes.SearchIndex, indexes.Indexable):\n    # 索引字段， use_template表明把哪些字段建立索引文件（使用一个模板文件来说明）\n    text = indexes.CharField(document=True, use_template=True)\n\n    def get_model(self):\n        return GoodsSKU\n\n    def index_queryset(self, using=None):\n        return self.get_model().objects.all()\n```\n\n> 手动建立模型文件\ntemplates / search / indexes / 【app】 / 【模型类全小写】_text.txt\n\n![全文检索](/img/1578378838931.png)\n\n\n* 使用\n\n![结果](/img/1578378917671.png)\n> 表单中，参数名：q为写死的。method=‘get’是写死的\nurl的路径配置必须也是haystack.urls模块\n\n> 改变分词方式：\n![改变分词方式](/img/1578379986297.png)\n\n创建ChineseAnalyzer.py，写入：\n\n![内容截图](/img/1578380200054.png)\n![内容截图2](/img/1578380227603.png)\n\n![更改默认分析](/img/1578380391307.png)\n\n![更新分词方式](/img/1578380648851.png)\n\n> 总结： 选一个全文搜索的框架，如这里的haystack（django内置的），再找一个搜索引擎，如这里的whoosh引擎， 使用时会生成index文件，一般在配置中指明。在执行搜索时，引擎会在Index中查找。 另外也可以为其指定一个分词规则，如这里的jieba，这样可以根据分词来生成搜索。\n\n\n## 购物车模块\n\n**商品详情个数的JS**\n\n```js\nupdate_price();\nfunction update_price(){\n\tprice = $('.show_pirze').children('em').text();\n\tcount = $('.num_show').val();\n\n\tprice = parseFloat(price);\n\tcount = parseInt(count);\n\tamount = price * count;\n\t$('.total').children('em').text(amount.toFixed(2)+'元');//保留两位小数\n}\n$('.add').click(function () {\n\tcount = $('.num_show').val();\n\tcount = parseInt(count)+1;\n\t$('.num_show').val(count);\n\tupdate_price();\n});\n\n$('.minus').click(function () {\n\tcount = $('.num_show').val();\n\tcount = parseInt(count)-1;\n\tif(count <= 0){\n\t\treturn;\n\t}\n\t$('.num_show').val(count);\n\tupdate_price();\n});\n```\n\n**购物车添加的请求设计**\n\n流程：\n1. 采用ajax， post请求\n2. 传递参数，商品ID，数量\n\n> 目前为止，有post,get,url三种类型的请求类型，\n> 对于访问数据为主的参数，一般使用get请求\n> 对于涉及增删改的参数，一般使用post请求。\n\n> 另外，django防止csrf的方式，默认打开csrf中间件，post提交时加上csrf token标签\n![csrf生成的代码](/img/1578454158486.png)\n> Ajax发起的请求都在后台，在浏览器看不到效果\n> 前后端合作过程中，得确定好请求方式和参数\n\n![enter description here](/img/1578453777774.png)\n![enter description here](/img/1578453790169.png)\n![enter description here](/img/1578454203406.png)\n![enter description here](/img/1578454302221.png)","source":"_posts/天天生鲜项目实例P2.md","raw":"---\ntitle: 天天生鲜项目实例P2\ncategories:\n- Python\ntags: \n- Python\n- Note\n- Django\n- 实例\n---\n\n## 首页模块\n\n\n**IndexView中加入信息**\n\n在goods/views.py加入indexview的功能\n\n```python\nfrom django.urls import path\nfrom .views import IndexView\n\napp_name = 'goods'\nurlpatterns = [\n    path('', IndexView.as_view() ,name='index')\n]\n\n```\n\n```python\nfrom django.core.paginator import Paginator\nfrom django.shortcuts import render, redirect, reverse\nfrom django.views.generic.base import View\nfrom django_redis import get_redis_connection\nfrom django.core.cache import cache\nfrom goods.models import GoodsType, IndexGoodsBanner, IndexTypeGoodsBanner, IndexPromotionBanner, GoodsSKU\nfrom order.models import OrderGoods\n\nclass IndexView(View):\n    def get(self, request):\n        # get all goods type\n        types = GoodsType.objects.all()\n\n        # 获取首页轮播商品信息\n        goods_banners = IndexGoodsBanner.objects.all().order_by('index')\n\n        # 获取促销信息\n        promotion_banners = IndexPromotionBanner.objects.all().order_by('index')\n\n        # 获取分类商品展示信息\n        for type in types:\n            #获取图片类的banner展示信息\n            image_banners = IndexTypeGoodsBanner.objects.filter(type=type, display_type=1)\n            #获取文字类的banner展示信息\n            title_banners = IndexTypeGoodsBanner.objects.filter(type=type, display_type=0)\n\n            #添加属性\n            type.image_banners = image_banners\n            type.title_banners = title_banners\n\n        #获取用户购物车中的商品数目\n        user = request.user\n        cart_count = 0\n\n        if user.is_authenticated:\n            # 用户已登录有授权\n            conn = get_redis_connection('default')\n            cart_key = 'cart_%d'%user.id\n            cart_count = conn.hlen(cart_key)\n\n        # 组织上下文\n        context = {\n            'types':types,\n            'goods_banners':goods_banners,\n            'promotion_banners':promotion_banners,\n            'cart_count':cart_count\n        }\n\n        # 使用模板\n        return render(request, 'index.html', context)\n\n```\n\n**使用celery生成Index的static文件**\n\n新建任务：\n\n> 注意：\n> 1.from goods.models 要在django.setup之后\n> 2.worker端的fdfs_client需要升级到Python3的exception写法。\n> 3.worker端的fdfs_client考虑先将utils的import注释\n\n```python\n@app.task\ndef generate_static_index_html():\n    # get all goods type\n    types = GoodsType.objects.all()\n\n    # 获取首页轮播商品信息\n    goods_banners = IndexGoodsBanner.objects.all().order_by('index')\n\n    # 获取促销信息\n    promotion_banners = IndexPromotionBanner.objects.all().order_by('index')\n\n    # 获取分类商品展示信息\n    for type in types:\n        # 获取图片类的banner展示信息\n        image_banners = IndexTypeGoodsBanner.objects.filter(type=type, display_type=1)\n        # 获取文字类的banner展示信息\n        title_banners = IndexTypeGoodsBanner.objects.filter(type=type, display_type=0)\n\n        # 添加属性\n        type.image_banners = image_banners\n        type.title_banners = title_banners\n\n    # 组织上下文\n    context = {\n        'types': types,\n        'goods_banners': goods_banners,\n        'promotion_banners': promotion_banners,\n    }\n\n    # 使用模板\n    # 1.加载模板文件\n    temp = loader.get_template('static_index.html')\n    # 2.渲染\n    static_index_html = temp.render(context)\n\n    # 生成首页的静态文件\n    save_path = os.path.join(settings.BASE_DIR, 'static/index.html')\n    with open(save_path, 'w') as f:\n        f.write(static_index_html)\n```\n\n![流程](/img/1576549292557.png)\n\n**在admin的委托返回调用中，执行celery**\n\n在goods的admin.py中监听一下admin后台的save和delete操作，然后执行celery刷新内容返回。\n\n![执行流程](/img/1576551196217.png)\n\n 在admin.py中加入\n\n```python\nclass BaseModelAdmin(admin.ModelAdmin):\n    def save_model(self, request, obj, form, change):\n        # 先执行数据库操作\n        super().save_model(request, obj, form, change)\n\n        # 发送celery事件\n        from celery_tasks.tasks import generate_static_index_html\n        generate_static_index_html.delay()\n\n    def delete_model(self, request, obj):\n        # 先执行数据库操作\n        super().delete_model(request, obj)\n\n        # 发送celery事件\n        from celery_tasks.tasks import generate_static_index_html\n        generate_static_index_html.delay()\n```\n\n> 遇到问题： 第一次修改后，celery生成的页面太快了，还没等save-model结束，因此查出来的数据是旧的。下一次又可以刷出最新数据\n> 方案：在celery里加入一个等待，保证model已经处理完数据库了，这样celery任务可以查到最新的结果。\n\n**将index页面的两种获取方式调度起来**\n\n![静态页面的调度](/img/1576554364999.png)\n\n**使用django的缓存机制存储页面**\n\nhttps://docs.djangoproject.com/zh-hans/3.0/topics/cache/\n\n* 存储\n\n```python\ncache.set()\npass\ncache.get()\n```\n\n* 更新\n在admin.py里进行清空缓存\n\n```python\n        # 清缓存\n        cache.delete(index_cache_key)\n```\n\n> 小结：缓存机制的目的之一在于防止黑客利用各多台电脑进行访问型攻击（DDOS），缓存通过减少数据库的查询次数，实现对性能的优化。\n\n![缓存机制](/img/1576636756891.png)\n\n**使用redis存储购物车数据**\n\n![讨论](/img/1576722037256.png)\n\n\n## 商品详情页面\n\n**1.views.py 为页面添加必要数据**\n\n```python\n# 商品详情页\n    def get(self, request, goods_id):\n\n        try:\n            # 拿商品SKU\n            good_sku = GoodsSKU.objects.get(id=goods_id)\n        except GoodsSKU.DoesNotExist:\n            return redirect(reverse(\"goods:index\"))\n\n        # 拿所有类型\n        all_good_types = GoodsType.objects.all()\n\n        # 拿商品评论并排除掉commit为空的\n        sku_orders = OrderGoods.objects.filter(sku=good_sku).exclude(comment='')\n\n        # 拿同类型的商品（以时间倒序）\n        new_skus = GoodsSKU.objects.filter(type=good_sku.type).order_by(\"-create_time\")\n\n        # 获取购物车数量\n        user = request.user\n        cart_count = 0\n\n        if user.is_authenticated:\n            # 用户已登录有授权\n            conn = get_redis_connection('default')\n            cart_key = 'cart_%d' % user.id\n            cart_count = conn.hlen(cart_key)\n\n        # 上下文组织，sku,types, sku_orders, new_skus, cart_count\n        context = {\n            \"sku\": good_sku,\n            \"types\": all_good_types,\n            \"sku_orders\": sku_orders,\n            \"new_skus\": new_skus,\n            \"cart_count\": cart_count\n        }\n\n        return render(request, 'detail.html',context)\n```\n\n**2.页面编辑**\n\n使用双curly braces（放变量）或百分号的curly braces（放语句）\n\n forloop.counter来获取循环当前的ID\n\n**3.关闭escape转义**\n\n1.使用autoescape off来关闭转义，\n\n![关闭转义](/img/1576810604102.png)\n\n2.使用| safe来关闭转义\n\n![用safe关闭转义](/img/1576810673369.png)\n\n\n## 商品列表页\n\n**分析页面**\n\n> 使用/list/type/page?sort=default 这种地址来设计\n\n**分页的功能实现**\n\n> 使用Paginator分页来查询分页\n\n**路径传递方式**\n\n![路径传递方式](/img/1577414335373.png)\n\n**页码控制**\n\n![控制显示的页码](/img/1577414816762.png)\n\n> 遇到一个问题：get误写成filter，后果就是把这些结果放里面搜索会报 The QuerySet value for an exact lookup must be limited to one result using slicing. 以后需要注意\n\n\n**搜索引擎与全文检索**\n\n使用haystack的全文检索框架，whoosh的搜索引擎\n\n![结构分析](/img/1578122441016.png)\n\n![全文检索](/img/1578122530429.png)\n\n\n* 安装和配置\n\n![安装](/img/1578122591339.png)\n\n![配置haystack](/img/1578122991267.png)\n\n>haystack默认安装无如下内容，需按情况配置\n![配置](/img/1578123391128.png)\n\n> 索引文件生成：\n![索引文件生成：](/img/1578123481409.png)\n\n\n[官网](https://django-haystack.readthedocs.io/en/master/signal_processors.html)\n\n\n![索引类定义](/img/1578365001196.png)\n![建立索引](/img/1578377646492.png)\n\n改成如下：\n\n```python\n# 定义索引类\n\nfrom haystack import indexes\n# 导入模型类\nfrom goods.models import GoodsSKU\n\n#指定类建立索引\nclass GoodsSKUIndex(indexes.SearchIndex, indexes.Indexable):\n    # 索引字段， use_template表明把哪些字段建立索引文件（使用一个模板文件来说明）\n    text = indexes.CharField(document=True, use_template=True)\n\n    def get_model(self):\n        return GoodsSKU\n\n    def index_queryset(self, using=None):\n        return self.get_model().objects.all()\n```\n\n> 手动建立模型文件\ntemplates / search / indexes / 【app】 / 【模型类全小写】_text.txt\n\n![全文检索](/img/1578378838931.png)\n\n\n* 使用\n\n![结果](/img/1578378917671.png)\n> 表单中，参数名：q为写死的。method=‘get’是写死的\nurl的路径配置必须也是haystack.urls模块\n\n> 改变分词方式：\n![改变分词方式](/img/1578379986297.png)\n\n创建ChineseAnalyzer.py，写入：\n\n![内容截图](/img/1578380200054.png)\n![内容截图2](/img/1578380227603.png)\n\n![更改默认分析](/img/1578380391307.png)\n\n![更新分词方式](/img/1578380648851.png)\n\n> 总结： 选一个全文搜索的框架，如这里的haystack（django内置的），再找一个搜索引擎，如这里的whoosh引擎， 使用时会生成index文件，一般在配置中指明。在执行搜索时，引擎会在Index中查找。 另外也可以为其指定一个分词规则，如这里的jieba，这样可以根据分词来生成搜索。\n\n\n## 购物车模块\n\n**商品详情个数的JS**\n\n```js\nupdate_price();\nfunction update_price(){\n\tprice = $('.show_pirze').children('em').text();\n\tcount = $('.num_show').val();\n\n\tprice = parseFloat(price);\n\tcount = parseInt(count);\n\tamount = price * count;\n\t$('.total').children('em').text(amount.toFixed(2)+'元');//保留两位小数\n}\n$('.add').click(function () {\n\tcount = $('.num_show').val();\n\tcount = parseInt(count)+1;\n\t$('.num_show').val(count);\n\tupdate_price();\n});\n\n$('.minus').click(function () {\n\tcount = $('.num_show').val();\n\tcount = parseInt(count)-1;\n\tif(count <= 0){\n\t\treturn;\n\t}\n\t$('.num_show').val(count);\n\tupdate_price();\n});\n```\n\n**购物车添加的请求设计**\n\n流程：\n1. 采用ajax， post请求\n2. 传递参数，商品ID，数量\n\n> 目前为止，有post,get,url三种类型的请求类型，\n> 对于访问数据为主的参数，一般使用get请求\n> 对于涉及增删改的参数，一般使用post请求。\n\n> 另外，django防止csrf的方式，默认打开csrf中间件，post提交时加上csrf token标签\n![csrf生成的代码](/img/1578454158486.png)\n> Ajax发起的请求都在后台，在浏览器看不到效果\n> 前后端合作过程中，得确定好请求方式和参数\n\n![enter description here](/img/1578453777774.png)\n![enter description here](/img/1578453790169.png)\n![enter description here](/img/1578454203406.png)\n![enter description here](/img/1578454302221.png)","slug":"天天生鲜项目实例P2","published":1,"date":"2020-09-08T03:23:20.890Z","updated":"2020-09-08T03:23:20.890Z","_id":"ckdpcluz7003i8sr3eao2w2t8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"首页模块\"><a href=\"#首页模块\" class=\"headerlink\" title=\"首页模块\"></a>首页模块</h2><p><strong>IndexView中加入信息</strong></p>\n<p>在goods/views.py加入indexview的功能</p>\n<pre><code class=\"python\">from django.urls import path\nfrom .views import IndexView\n\napp_name = &#39;goods&#39;\nurlpatterns = [\n    path(&#39;&#39;, IndexView.as_view() ,name=&#39;index&#39;)\n]\n</code></pre>\n<pre><code class=\"python\">from django.core.paginator import Paginator\nfrom django.shortcuts import render, redirect, reverse\nfrom django.views.generic.base import View\nfrom django_redis import get_redis_connection\nfrom django.core.cache import cache\nfrom goods.models import GoodsType, IndexGoodsBanner, IndexTypeGoodsBanner, IndexPromotionBanner, GoodsSKU\nfrom order.models import OrderGoods\n\nclass IndexView(View):\n    def get(self, request):\n        # get all goods type\n        types = GoodsType.objects.all()\n\n        # 获取首页轮播商品信息\n        goods_banners = IndexGoodsBanner.objects.all().order_by(&#39;index&#39;)\n\n        # 获取促销信息\n        promotion_banners = IndexPromotionBanner.objects.all().order_by(&#39;index&#39;)\n\n        # 获取分类商品展示信息\n        for type in types:\n            #获取图片类的banner展示信息\n            image_banners = IndexTypeGoodsBanner.objects.filter(type=type, display_type=1)\n            #获取文字类的banner展示信息\n            title_banners = IndexTypeGoodsBanner.objects.filter(type=type, display_type=0)\n\n            #添加属性\n            type.image_banners = image_banners\n            type.title_banners = title_banners\n\n        #获取用户购物车中的商品数目\n        user = request.user\n        cart_count = 0\n\n        if user.is_authenticated:\n            # 用户已登录有授权\n            conn = get_redis_connection(&#39;default&#39;)\n            cart_key = &#39;cart_%d&#39;%user.id\n            cart_count = conn.hlen(cart_key)\n\n        # 组织上下文\n        context = {\n            &#39;types&#39;:types,\n            &#39;goods_banners&#39;:goods_banners,\n            &#39;promotion_banners&#39;:promotion_banners,\n            &#39;cart_count&#39;:cart_count\n        }\n\n        # 使用模板\n        return render(request, &#39;index.html&#39;, context)\n</code></pre>\n<p><strong>使用celery生成Index的static文件</strong></p>\n<p>新建任务：</p>\n<blockquote>\n<p>注意：<br>1.from goods.models 要在django.setup之后<br>2.worker端的fdfs_client需要升级到Python3的exception写法。<br>3.worker端的fdfs_client考虑先将utils的import注释</p>\n</blockquote>\n<pre><code class=\"python\">@app.task\ndef generate_static_index_html():\n    # get all goods type\n    types = GoodsType.objects.all()\n\n    # 获取首页轮播商品信息\n    goods_banners = IndexGoodsBanner.objects.all().order_by(&#39;index&#39;)\n\n    # 获取促销信息\n    promotion_banners = IndexPromotionBanner.objects.all().order_by(&#39;index&#39;)\n\n    # 获取分类商品展示信息\n    for type in types:\n        # 获取图片类的banner展示信息\n        image_banners = IndexTypeGoodsBanner.objects.filter(type=type, display_type=1)\n        # 获取文字类的banner展示信息\n        title_banners = IndexTypeGoodsBanner.objects.filter(type=type, display_type=0)\n\n        # 添加属性\n        type.image_banners = image_banners\n        type.title_banners = title_banners\n\n    # 组织上下文\n    context = {\n        &#39;types&#39;: types,\n        &#39;goods_banners&#39;: goods_banners,\n        &#39;promotion_banners&#39;: promotion_banners,\n    }\n\n    # 使用模板\n    # 1.加载模板文件\n    temp = loader.get_template(&#39;static_index.html&#39;)\n    # 2.渲染\n    static_index_html = temp.render(context)\n\n    # 生成首页的静态文件\n    save_path = os.path.join(settings.BASE_DIR, &#39;static/index.html&#39;)\n    with open(save_path, &#39;w&#39;) as f:\n        f.write(static_index_html)</code></pre>\n<p><img src=\"/img/1576549292557.png\" alt=\"流程\"></p>\n<p><strong>在admin的委托返回调用中，执行celery</strong></p>\n<p>在goods的admin.py中监听一下admin后台的save和delete操作，然后执行celery刷新内容返回。</p>\n<p><img src=\"/img/1576551196217.png\" alt=\"执行流程\"></p>\n<p> 在admin.py中加入</p>\n<pre><code class=\"python\">class BaseModelAdmin(admin.ModelAdmin):\n    def save_model(self, request, obj, form, change):\n        # 先执行数据库操作\n        super().save_model(request, obj, form, change)\n\n        # 发送celery事件\n        from celery_tasks.tasks import generate_static_index_html\n        generate_static_index_html.delay()\n\n    def delete_model(self, request, obj):\n        # 先执行数据库操作\n        super().delete_model(request, obj)\n\n        # 发送celery事件\n        from celery_tasks.tasks import generate_static_index_html\n        generate_static_index_html.delay()</code></pre>\n<blockquote>\n<p>遇到问题： 第一次修改后，celery生成的页面太快了，还没等save-model结束，因此查出来的数据是旧的。下一次又可以刷出最新数据<br>方案：在celery里加入一个等待，保证model已经处理完数据库了，这样celery任务可以查到最新的结果。</p>\n</blockquote>\n<p><strong>将index页面的两种获取方式调度起来</strong></p>\n<p><img src=\"/img/1576554364999.png\" alt=\"静态页面的调度\"></p>\n<p><strong>使用django的缓存机制存储页面</strong></p>\n<p><a href=\"https://docs.djangoproject.com/zh-hans/3.0/topics/cache/\">https://docs.djangoproject.com/zh-hans/3.0/topics/cache/</a></p>\n<ul>\n<li>存储</li>\n</ul>\n<pre><code class=\"python\">cache.set()\npass\ncache.get()</code></pre>\n<ul>\n<li>更新<br>在admin.py里进行清空缓存</li>\n</ul>\n<pre><code class=\"python\">        # 清缓存\n        cache.delete(index_cache_key)</code></pre>\n<blockquote>\n<p>小结：缓存机制的目的之一在于防止黑客利用各多台电脑进行访问型攻击（DDOS），缓存通过减少数据库的查询次数，实现对性能的优化。</p>\n</blockquote>\n<p><img src=\"/img/1576636756891.png\" alt=\"缓存机制\"></p>\n<p><strong>使用redis存储购物车数据</strong></p>\n<p><img src=\"/img/1576722037256.png\" alt=\"讨论\"></p>\n<h2 id=\"商品详情页面\"><a href=\"#商品详情页面\" class=\"headerlink\" title=\"商品详情页面\"></a>商品详情页面</h2><p><strong>1.views.py 为页面添加必要数据</strong></p>\n<pre><code class=\"python\"># 商品详情页\n    def get(self, request, goods_id):\n\n        try:\n            # 拿商品SKU\n            good_sku = GoodsSKU.objects.get(id=goods_id)\n        except GoodsSKU.DoesNotExist:\n            return redirect(reverse(&quot;goods:index&quot;))\n\n        # 拿所有类型\n        all_good_types = GoodsType.objects.all()\n\n        # 拿商品评论并排除掉commit为空的\n        sku_orders = OrderGoods.objects.filter(sku=good_sku).exclude(comment=&#39;&#39;)\n\n        # 拿同类型的商品（以时间倒序）\n        new_skus = GoodsSKU.objects.filter(type=good_sku.type).order_by(&quot;-create_time&quot;)\n\n        # 获取购物车数量\n        user = request.user\n        cart_count = 0\n\n        if user.is_authenticated:\n            # 用户已登录有授权\n            conn = get_redis_connection(&#39;default&#39;)\n            cart_key = &#39;cart_%d&#39; % user.id\n            cart_count = conn.hlen(cart_key)\n\n        # 上下文组织，sku,types, sku_orders, new_skus, cart_count\n        context = {\n            &quot;sku&quot;: good_sku,\n            &quot;types&quot;: all_good_types,\n            &quot;sku_orders&quot;: sku_orders,\n            &quot;new_skus&quot;: new_skus,\n            &quot;cart_count&quot;: cart_count\n        }\n\n        return render(request, &#39;detail.html&#39;,context)</code></pre>\n<p><strong>2.页面编辑</strong></p>\n<p>使用双curly braces（放变量）或百分号的curly braces（放语句）</p>\n<p> forloop.counter来获取循环当前的ID</p>\n<p><strong>3.关闭escape转义</strong></p>\n<p>1.使用autoescape off来关闭转义，</p>\n<p><img src=\"/img/1576810604102.png\" alt=\"关闭转义\"></p>\n<p>2.使用| safe来关闭转义</p>\n<p><img src=\"/img/1576810673369.png\" alt=\"用safe关闭转义\"></p>\n<h2 id=\"商品列表页\"><a href=\"#商品列表页\" class=\"headerlink\" title=\"商品列表页\"></a>商品列表页</h2><p><strong>分析页面</strong></p>\n<blockquote>\n<p>使用/list/type/page?sort=default 这种地址来设计</p>\n</blockquote>\n<p><strong>分页的功能实现</strong></p>\n<blockquote>\n<p>使用Paginator分页来查询分页</p>\n</blockquote>\n<p><strong>路径传递方式</strong></p>\n<p><img src=\"/img/1577414335373.png\" alt=\"路径传递方式\"></p>\n<p><strong>页码控制</strong></p>\n<p><img src=\"/img/1577414816762.png\" alt=\"控制显示的页码\"></p>\n<blockquote>\n<p>遇到一个问题：get误写成filter，后果就是把这些结果放里面搜索会报 The QuerySet value for an exact lookup must be limited to one result using slicing. 以后需要注意</p>\n</blockquote>\n<p><strong>搜索引擎与全文检索</strong></p>\n<p>使用haystack的全文检索框架，whoosh的搜索引擎</p>\n<p><img src=\"/img/1578122441016.png\" alt=\"结构分析\"></p>\n<p><img src=\"/img/1578122530429.png\" alt=\"全文检索\"></p>\n<ul>\n<li>安装和配置</li>\n</ul>\n<p><img src=\"/img/1578122591339.png\" alt=\"安装\"></p>\n<p><img src=\"/img/1578122991267.png\" alt=\"配置haystack\"></p>\n<blockquote>\n<p>haystack默认安装无如下内容，需按情况配置<br><img src=\"/img/1578123391128.png\" alt=\"配置\"></p>\n</blockquote>\n<blockquote>\n<p>索引文件生成：<br><img src=\"/img/1578123481409.png\" alt=\"索引文件生成：\"></p>\n</blockquote>\n<p><a href=\"https://django-haystack.readthedocs.io/en/master/signal_processors.html\">官网</a></p>\n<p><img src=\"/img/1578365001196.png\" alt=\"索引类定义\"><br><img src=\"/img/1578377646492.png\" alt=\"建立索引\"></p>\n<p>改成如下：</p>\n<pre><code class=\"python\"># 定义索引类\n\nfrom haystack import indexes\n# 导入模型类\nfrom goods.models import GoodsSKU\n\n#指定类建立索引\nclass GoodsSKUIndex(indexes.SearchIndex, indexes.Indexable):\n    # 索引字段， use_template表明把哪些字段建立索引文件（使用一个模板文件来说明）\n    text = indexes.CharField(document=True, use_template=True)\n\n    def get_model(self):\n        return GoodsSKU\n\n    def index_queryset(self, using=None):\n        return self.get_model().objects.all()</code></pre>\n<blockquote>\n<p>手动建立模型文件<br>templates / search / indexes / 【app】 / 【模型类全小写】_text.txt</p>\n</blockquote>\n<p><img src=\"/img/1578378838931.png\" alt=\"全文检索\"></p>\n<ul>\n<li>使用</li>\n</ul>\n<p><img src=\"/img/1578378917671.png\" alt=\"结果\"></p>\n<blockquote>\n<p>表单中，参数名：q为写死的。method=‘get’是写死的<br>url的路径配置必须也是haystack.urls模块</p>\n</blockquote>\n<blockquote>\n<p>改变分词方式：<br><img src=\"/img/1578379986297.png\" alt=\"改变分词方式\"></p>\n</blockquote>\n<p>创建ChineseAnalyzer.py，写入：</p>\n<p><img src=\"/img/1578380200054.png\" alt=\"内容截图\"><br><img src=\"/img/1578380227603.png\" alt=\"内容截图2\"></p>\n<p><img src=\"/img/1578380391307.png\" alt=\"更改默认分析\"></p>\n<p><img src=\"/img/1578380648851.png\" alt=\"更新分词方式\"></p>\n<blockquote>\n<p>总结： 选一个全文搜索的框架，如这里的haystack（django内置的），再找一个搜索引擎，如这里的whoosh引擎， 使用时会生成index文件，一般在配置中指明。在执行搜索时，引擎会在Index中查找。 另外也可以为其指定一个分词规则，如这里的jieba，这样可以根据分词来生成搜索。</p>\n</blockquote>\n<h2 id=\"购物车模块\"><a href=\"#购物车模块\" class=\"headerlink\" title=\"购物车模块\"></a>购物车模块</h2><p><strong>商品详情个数的JS</strong></p>\n<pre><code class=\"js\">update_price();\nfunction update_price(){\n    price = $(&#39;.show_pirze&#39;).children(&#39;em&#39;).text();\n    count = $(&#39;.num_show&#39;).val();\n\n    price = parseFloat(price);\n    count = parseInt(count);\n    amount = price * count;\n    $(&#39;.total&#39;).children(&#39;em&#39;).text(amount.toFixed(2)+&#39;元&#39;);//保留两位小数\n}\n$(&#39;.add&#39;).click(function () {\n    count = $(&#39;.num_show&#39;).val();\n    count = parseInt(count)+1;\n    $(&#39;.num_show&#39;).val(count);\n    update_price();\n});\n\n$(&#39;.minus&#39;).click(function () {\n    count = $(&#39;.num_show&#39;).val();\n    count = parseInt(count)-1;\n    if(count &lt;= 0){\n        return;\n    }\n    $(&#39;.num_show&#39;).val(count);\n    update_price();\n});</code></pre>\n<p><strong>购物车添加的请求设计</strong></p>\n<p>流程：</p>\n<ol>\n<li>采用ajax， post请求</li>\n<li>传递参数，商品ID，数量</li>\n</ol>\n<blockquote>\n<p>目前为止，有post,get,url三种类型的请求类型，<br>对于访问数据为主的参数，一般使用get请求<br>对于涉及增删改的参数，一般使用post请求。</p>\n</blockquote>\n<blockquote>\n<p>另外，django防止csrf的方式，默认打开csrf中间件，post提交时加上csrf token标签<br><img src=\"/img/1578454158486.png\" alt=\"csrf生成的代码\"><br>Ajax发起的请求都在后台，在浏览器看不到效果<br>前后端合作过程中，得确定好请求方式和参数</p>\n</blockquote>\n<p><img src=\"/img/1578453777774.png\" alt=\"enter description here\"><br><img src=\"/img/1578453790169.png\" alt=\"enter description here\"><br><img src=\"/img/1578454203406.png\" alt=\"enter description here\"><br><img src=\"/img/1578454302221.png\" alt=\"enter description here\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"首页模块\"><a href=\"#首页模块\" class=\"headerlink\" title=\"首页模块\"></a>首页模块</h2><p><strong>IndexView中加入信息</strong></p>\n<p>在goods/views.py加入indexview的功能</p>\n<pre><code class=\"python\">from django.urls import path\nfrom .views import IndexView\n\napp_name = &#39;goods&#39;\nurlpatterns = [\n    path(&#39;&#39;, IndexView.as_view() ,name=&#39;index&#39;)\n]\n</code></pre>\n<pre><code class=\"python\">from django.core.paginator import Paginator\nfrom django.shortcuts import render, redirect, reverse\nfrom django.views.generic.base import View\nfrom django_redis import get_redis_connection\nfrom django.core.cache import cache\nfrom goods.models import GoodsType, IndexGoodsBanner, IndexTypeGoodsBanner, IndexPromotionBanner, GoodsSKU\nfrom order.models import OrderGoods\n\nclass IndexView(View):\n    def get(self, request):\n        # get all goods type\n        types = GoodsType.objects.all()\n\n        # 获取首页轮播商品信息\n        goods_banners = IndexGoodsBanner.objects.all().order_by(&#39;index&#39;)\n\n        # 获取促销信息\n        promotion_banners = IndexPromotionBanner.objects.all().order_by(&#39;index&#39;)\n\n        # 获取分类商品展示信息\n        for type in types:\n            #获取图片类的banner展示信息\n            image_banners = IndexTypeGoodsBanner.objects.filter(type=type, display_type=1)\n            #获取文字类的banner展示信息\n            title_banners = IndexTypeGoodsBanner.objects.filter(type=type, display_type=0)\n\n            #添加属性\n            type.image_banners = image_banners\n            type.title_banners = title_banners\n\n        #获取用户购物车中的商品数目\n        user = request.user\n        cart_count = 0\n\n        if user.is_authenticated:\n            # 用户已登录有授权\n            conn = get_redis_connection(&#39;default&#39;)\n            cart_key = &#39;cart_%d&#39;%user.id\n            cart_count = conn.hlen(cart_key)\n\n        # 组织上下文\n        context = {\n            &#39;types&#39;:types,\n            &#39;goods_banners&#39;:goods_banners,\n            &#39;promotion_banners&#39;:promotion_banners,\n            &#39;cart_count&#39;:cart_count\n        }\n\n        # 使用模板\n        return render(request, &#39;index.html&#39;, context)\n</code></pre>\n<p><strong>使用celery生成Index的static文件</strong></p>\n<p>新建任务：</p>\n<blockquote>\n<p>注意：<br>1.from goods.models 要在django.setup之后<br>2.worker端的fdfs_client需要升级到Python3的exception写法。<br>3.worker端的fdfs_client考虑先将utils的import注释</p>\n</blockquote>\n<pre><code class=\"python\">@app.task\ndef generate_static_index_html():\n    # get all goods type\n    types = GoodsType.objects.all()\n\n    # 获取首页轮播商品信息\n    goods_banners = IndexGoodsBanner.objects.all().order_by(&#39;index&#39;)\n\n    # 获取促销信息\n    promotion_banners = IndexPromotionBanner.objects.all().order_by(&#39;index&#39;)\n\n    # 获取分类商品展示信息\n    for type in types:\n        # 获取图片类的banner展示信息\n        image_banners = IndexTypeGoodsBanner.objects.filter(type=type, display_type=1)\n        # 获取文字类的banner展示信息\n        title_banners = IndexTypeGoodsBanner.objects.filter(type=type, display_type=0)\n\n        # 添加属性\n        type.image_banners = image_banners\n        type.title_banners = title_banners\n\n    # 组织上下文\n    context = {\n        &#39;types&#39;: types,\n        &#39;goods_banners&#39;: goods_banners,\n        &#39;promotion_banners&#39;: promotion_banners,\n    }\n\n    # 使用模板\n    # 1.加载模板文件\n    temp = loader.get_template(&#39;static_index.html&#39;)\n    # 2.渲染\n    static_index_html = temp.render(context)\n\n    # 生成首页的静态文件\n    save_path = os.path.join(settings.BASE_DIR, &#39;static/index.html&#39;)\n    with open(save_path, &#39;w&#39;) as f:\n        f.write(static_index_html)</code></pre>\n<p><img src=\"/img/1576549292557.png\" alt=\"流程\"></p>\n<p><strong>在admin的委托返回调用中，执行celery</strong></p>\n<p>在goods的admin.py中监听一下admin后台的save和delete操作，然后执行celery刷新内容返回。</p>\n<p><img src=\"/img/1576551196217.png\" alt=\"执行流程\"></p>\n<p> 在admin.py中加入</p>\n<pre><code class=\"python\">class BaseModelAdmin(admin.ModelAdmin):\n    def save_model(self, request, obj, form, change):\n        # 先执行数据库操作\n        super().save_model(request, obj, form, change)\n\n        # 发送celery事件\n        from celery_tasks.tasks import generate_static_index_html\n        generate_static_index_html.delay()\n\n    def delete_model(self, request, obj):\n        # 先执行数据库操作\n        super().delete_model(request, obj)\n\n        # 发送celery事件\n        from celery_tasks.tasks import generate_static_index_html\n        generate_static_index_html.delay()</code></pre>\n<blockquote>\n<p>遇到问题： 第一次修改后，celery生成的页面太快了，还没等save-model结束，因此查出来的数据是旧的。下一次又可以刷出最新数据<br>方案：在celery里加入一个等待，保证model已经处理完数据库了，这样celery任务可以查到最新的结果。</p>\n</blockquote>\n<p><strong>将index页面的两种获取方式调度起来</strong></p>\n<p><img src=\"/img/1576554364999.png\" alt=\"静态页面的调度\"></p>\n<p><strong>使用django的缓存机制存储页面</strong></p>\n<p><a href=\"https://docs.djangoproject.com/zh-hans/3.0/topics/cache/\">https://docs.djangoproject.com/zh-hans/3.0/topics/cache/</a></p>\n<ul>\n<li>存储</li>\n</ul>\n<pre><code class=\"python\">cache.set()\npass\ncache.get()</code></pre>\n<ul>\n<li>更新<br>在admin.py里进行清空缓存</li>\n</ul>\n<pre><code class=\"python\">        # 清缓存\n        cache.delete(index_cache_key)</code></pre>\n<blockquote>\n<p>小结：缓存机制的目的之一在于防止黑客利用各多台电脑进行访问型攻击（DDOS），缓存通过减少数据库的查询次数，实现对性能的优化。</p>\n</blockquote>\n<p><img src=\"/img/1576636756891.png\" alt=\"缓存机制\"></p>\n<p><strong>使用redis存储购物车数据</strong></p>\n<p><img src=\"/img/1576722037256.png\" alt=\"讨论\"></p>\n<h2 id=\"商品详情页面\"><a href=\"#商品详情页面\" class=\"headerlink\" title=\"商品详情页面\"></a>商品详情页面</h2><p><strong>1.views.py 为页面添加必要数据</strong></p>\n<pre><code class=\"python\"># 商品详情页\n    def get(self, request, goods_id):\n\n        try:\n            # 拿商品SKU\n            good_sku = GoodsSKU.objects.get(id=goods_id)\n        except GoodsSKU.DoesNotExist:\n            return redirect(reverse(&quot;goods:index&quot;))\n\n        # 拿所有类型\n        all_good_types = GoodsType.objects.all()\n\n        # 拿商品评论并排除掉commit为空的\n        sku_orders = OrderGoods.objects.filter(sku=good_sku).exclude(comment=&#39;&#39;)\n\n        # 拿同类型的商品（以时间倒序）\n        new_skus = GoodsSKU.objects.filter(type=good_sku.type).order_by(&quot;-create_time&quot;)\n\n        # 获取购物车数量\n        user = request.user\n        cart_count = 0\n\n        if user.is_authenticated:\n            # 用户已登录有授权\n            conn = get_redis_connection(&#39;default&#39;)\n            cart_key = &#39;cart_%d&#39; % user.id\n            cart_count = conn.hlen(cart_key)\n\n        # 上下文组织，sku,types, sku_orders, new_skus, cart_count\n        context = {\n            &quot;sku&quot;: good_sku,\n            &quot;types&quot;: all_good_types,\n            &quot;sku_orders&quot;: sku_orders,\n            &quot;new_skus&quot;: new_skus,\n            &quot;cart_count&quot;: cart_count\n        }\n\n        return render(request, &#39;detail.html&#39;,context)</code></pre>\n<p><strong>2.页面编辑</strong></p>\n<p>使用双curly braces（放变量）或百分号的curly braces（放语句）</p>\n<p> forloop.counter来获取循环当前的ID</p>\n<p><strong>3.关闭escape转义</strong></p>\n<p>1.使用autoescape off来关闭转义，</p>\n<p><img src=\"/img/1576810604102.png\" alt=\"关闭转义\"></p>\n<p>2.使用| safe来关闭转义</p>\n<p><img src=\"/img/1576810673369.png\" alt=\"用safe关闭转义\"></p>\n<h2 id=\"商品列表页\"><a href=\"#商品列表页\" class=\"headerlink\" title=\"商品列表页\"></a>商品列表页</h2><p><strong>分析页面</strong></p>\n<blockquote>\n<p>使用/list/type/page?sort=default 这种地址来设计</p>\n</blockquote>\n<p><strong>分页的功能实现</strong></p>\n<blockquote>\n<p>使用Paginator分页来查询分页</p>\n</blockquote>\n<p><strong>路径传递方式</strong></p>\n<p><img src=\"/img/1577414335373.png\" alt=\"路径传递方式\"></p>\n<p><strong>页码控制</strong></p>\n<p><img src=\"/img/1577414816762.png\" alt=\"控制显示的页码\"></p>\n<blockquote>\n<p>遇到一个问题：get误写成filter，后果就是把这些结果放里面搜索会报 The QuerySet value for an exact lookup must be limited to one result using slicing. 以后需要注意</p>\n</blockquote>\n<p><strong>搜索引擎与全文检索</strong></p>\n<p>使用haystack的全文检索框架，whoosh的搜索引擎</p>\n<p><img src=\"/img/1578122441016.png\" alt=\"结构分析\"></p>\n<p><img src=\"/img/1578122530429.png\" alt=\"全文检索\"></p>\n<ul>\n<li>安装和配置</li>\n</ul>\n<p><img src=\"/img/1578122591339.png\" alt=\"安装\"></p>\n<p><img src=\"/img/1578122991267.png\" alt=\"配置haystack\"></p>\n<blockquote>\n<p>haystack默认安装无如下内容，需按情况配置<br><img src=\"/img/1578123391128.png\" alt=\"配置\"></p>\n</blockquote>\n<blockquote>\n<p>索引文件生成：<br><img src=\"/img/1578123481409.png\" alt=\"索引文件生成：\"></p>\n</blockquote>\n<p><a href=\"https://django-haystack.readthedocs.io/en/master/signal_processors.html\">官网</a></p>\n<p><img src=\"/img/1578365001196.png\" alt=\"索引类定义\"><br><img src=\"/img/1578377646492.png\" alt=\"建立索引\"></p>\n<p>改成如下：</p>\n<pre><code class=\"python\"># 定义索引类\n\nfrom haystack import indexes\n# 导入模型类\nfrom goods.models import GoodsSKU\n\n#指定类建立索引\nclass GoodsSKUIndex(indexes.SearchIndex, indexes.Indexable):\n    # 索引字段， use_template表明把哪些字段建立索引文件（使用一个模板文件来说明）\n    text = indexes.CharField(document=True, use_template=True)\n\n    def get_model(self):\n        return GoodsSKU\n\n    def index_queryset(self, using=None):\n        return self.get_model().objects.all()</code></pre>\n<blockquote>\n<p>手动建立模型文件<br>templates / search / indexes / 【app】 / 【模型类全小写】_text.txt</p>\n</blockquote>\n<p><img src=\"/img/1578378838931.png\" alt=\"全文检索\"></p>\n<ul>\n<li>使用</li>\n</ul>\n<p><img src=\"/img/1578378917671.png\" alt=\"结果\"></p>\n<blockquote>\n<p>表单中，参数名：q为写死的。method=‘get’是写死的<br>url的路径配置必须也是haystack.urls模块</p>\n</blockquote>\n<blockquote>\n<p>改变分词方式：<br><img src=\"/img/1578379986297.png\" alt=\"改变分词方式\"></p>\n</blockquote>\n<p>创建ChineseAnalyzer.py，写入：</p>\n<p><img src=\"/img/1578380200054.png\" alt=\"内容截图\"><br><img src=\"/img/1578380227603.png\" alt=\"内容截图2\"></p>\n<p><img src=\"/img/1578380391307.png\" alt=\"更改默认分析\"></p>\n<p><img src=\"/img/1578380648851.png\" alt=\"更新分词方式\"></p>\n<blockquote>\n<p>总结： 选一个全文搜索的框架，如这里的haystack（django内置的），再找一个搜索引擎，如这里的whoosh引擎， 使用时会生成index文件，一般在配置中指明。在执行搜索时，引擎会在Index中查找。 另外也可以为其指定一个分词规则，如这里的jieba，这样可以根据分词来生成搜索。</p>\n</blockquote>\n<h2 id=\"购物车模块\"><a href=\"#购物车模块\" class=\"headerlink\" title=\"购物车模块\"></a>购物车模块</h2><p><strong>商品详情个数的JS</strong></p>\n<pre><code class=\"js\">update_price();\nfunction update_price(){\n    price = $(&#39;.show_pirze&#39;).children(&#39;em&#39;).text();\n    count = $(&#39;.num_show&#39;).val();\n\n    price = parseFloat(price);\n    count = parseInt(count);\n    amount = price * count;\n    $(&#39;.total&#39;).children(&#39;em&#39;).text(amount.toFixed(2)+&#39;元&#39;);//保留两位小数\n}\n$(&#39;.add&#39;).click(function () {\n    count = $(&#39;.num_show&#39;).val();\n    count = parseInt(count)+1;\n    $(&#39;.num_show&#39;).val(count);\n    update_price();\n});\n\n$(&#39;.minus&#39;).click(function () {\n    count = $(&#39;.num_show&#39;).val();\n    count = parseInt(count)-1;\n    if(count &lt;= 0){\n        return;\n    }\n    $(&#39;.num_show&#39;).val(count);\n    update_price();\n});</code></pre>\n<p><strong>购物车添加的请求设计</strong></p>\n<p>流程：</p>\n<ol>\n<li>采用ajax， post请求</li>\n<li>传递参数，商品ID，数量</li>\n</ol>\n<blockquote>\n<p>目前为止，有post,get,url三种类型的请求类型，<br>对于访问数据为主的参数，一般使用get请求<br>对于涉及增删改的参数，一般使用post请求。</p>\n</blockquote>\n<blockquote>\n<p>另外，django防止csrf的方式，默认打开csrf中间件，post提交时加上csrf token标签<br><img src=\"/img/1578454158486.png\" alt=\"csrf生成的代码\"><br>Ajax发起的请求都在后台，在浏览器看不到效果<br>前后端合作过程中，得确定好请求方式和参数</p>\n</blockquote>\n<p><img src=\"/img/1578453777774.png\" alt=\"enter description here\"><br><img src=\"/img/1578453790169.png\" alt=\"enter description here\"><br><img src=\"/img/1578454203406.png\" alt=\"enter description here\"><br><img src=\"/img/1578454302221.png\" alt=\"enter description here\"></p>\n"},{"title":"客户端更换Git指南","_content":"\n## 安装Git\n\n以下网站里选择自己电脑平台，下载安装即可\nhttps://git-scm.com/downloads\n注：安装过程选择默认选项\n\n## 安装Git工具\n\n推荐使用乌龟工具，界面与之前的SVN近似，而且可以结合window文件系统。\nhttps://tortoisegit.org/download/\n\n注：安装过程选择默认选项\n\n## 装好之后设置账号信息\n\n![装好之后设置账号信息](/img/1573879504277.png)\n\n\n## 克隆服务端的项目代码\n>1.右键选择git clone. \n2.输入项目地址：http://172.16.100.8:8081/x1/client.git \n\n![克隆服务端的项目代码](/img/1573881914065.png)\n\n## 切换到自己所在的分支\n> 美术： art \n> 策划和程序： feature\n\n![切换到自己所在的分支](/img/1573883470572.png)\n\n## 【可选】用旧项目的library\n>复制原SVN的UNITY目录下的library文件夹，粘贴到已经拉下来的unity目录下。这样重打开项目不用等待太多。\n\n## 如何拉取\n![如何拉取](/img/1573881886011.png)\n\n## 如何提交\n![如何提交](/img/1573880787198.png)\n","source":"_posts/客户端更换Git指南.md","raw":"---\ntitle: 客户端更换Git指南\ncategories:\n- 公司\ntags: \n- Git\n---\n\n## 安装Git\n\n以下网站里选择自己电脑平台，下载安装即可\nhttps://git-scm.com/downloads\n注：安装过程选择默认选项\n\n## 安装Git工具\n\n推荐使用乌龟工具，界面与之前的SVN近似，而且可以结合window文件系统。\nhttps://tortoisegit.org/download/\n\n注：安装过程选择默认选项\n\n## 装好之后设置账号信息\n\n![装好之后设置账号信息](/img/1573879504277.png)\n\n\n## 克隆服务端的项目代码\n>1.右键选择git clone. \n2.输入项目地址：http://172.16.100.8:8081/x1/client.git \n\n![克隆服务端的项目代码](/img/1573881914065.png)\n\n## 切换到自己所在的分支\n> 美术： art \n> 策划和程序： feature\n\n![切换到自己所在的分支](/img/1573883470572.png)\n\n## 【可选】用旧项目的library\n>复制原SVN的UNITY目录下的library文件夹，粘贴到已经拉下来的unity目录下。这样重打开项目不用等待太多。\n\n## 如何拉取\n![如何拉取](/img/1573881886011.png)\n\n## 如何提交\n![如何提交](/img/1573880787198.png)\n","slug":"客户端更换Git指南","published":1,"date":"2020-09-08T03:23:20.890Z","updated":"2020-09-08T03:23:20.890Z","_id":"ckdpcluz9003m8sr3ghtvqvn1","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><p>以下网站里选择自己电脑平台，下载安装即可<br><a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a><br>注：安装过程选择默认选项</p>\n<h2 id=\"安装Git工具\"><a href=\"#安装Git工具\" class=\"headerlink\" title=\"安装Git工具\"></a>安装Git工具</h2><p>推荐使用乌龟工具，界面与之前的SVN近似，而且可以结合window文件系统。<br><a href=\"https://tortoisegit.org/download/\">https://tortoisegit.org/download/</a></p>\n<p>注：安装过程选择默认选项</p>\n<h2 id=\"装好之后设置账号信息\"><a href=\"#装好之后设置账号信息\" class=\"headerlink\" title=\"装好之后设置账号信息\"></a>装好之后设置账号信息</h2><p><img src=\"/img/1573879504277.png\" alt=\"装好之后设置账号信息\"></p>\n<h2 id=\"克隆服务端的项目代码\"><a href=\"#克隆服务端的项目代码\" class=\"headerlink\" title=\"克隆服务端的项目代码\"></a>克隆服务端的项目代码</h2><blockquote>\n<p>1.右键选择git clone.<br>2.输入项目地址：<a href=\"http://172.16.100.8:8081/x1/client.git\">http://172.16.100.8:8081/x1/client.git</a> </p>\n</blockquote>\n<p><img src=\"/img/1573881914065.png\" alt=\"克隆服务端的项目代码\"></p>\n<h2 id=\"切换到自己所在的分支\"><a href=\"#切换到自己所在的分支\" class=\"headerlink\" title=\"切换到自己所在的分支\"></a>切换到自己所在的分支</h2><blockquote>\n<p>美术： art<br>策划和程序： feature</p>\n</blockquote>\n<p><img src=\"/img/1573883470572.png\" alt=\"切换到自己所在的分支\"></p>\n<h2 id=\"【可选】用旧项目的library\"><a href=\"#【可选】用旧项目的library\" class=\"headerlink\" title=\"【可选】用旧项目的library\"></a>【可选】用旧项目的library</h2><blockquote>\n<p>复制原SVN的UNITY目录下的library文件夹，粘贴到已经拉下来的unity目录下。这样重打开项目不用等待太多。</p>\n</blockquote>\n<h2 id=\"如何拉取\"><a href=\"#如何拉取\" class=\"headerlink\" title=\"如何拉取\"></a>如何拉取</h2><p><img src=\"/img/1573881886011.png\" alt=\"如何拉取\"></p>\n<h2 id=\"如何提交\"><a href=\"#如何提交\" class=\"headerlink\" title=\"如何提交\"></a>如何提交</h2><p><img src=\"/img/1573880787198.png\" alt=\"如何提交\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><p>以下网站里选择自己电脑平台，下载安装即可<br><a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a><br>注：安装过程选择默认选项</p>\n<h2 id=\"安装Git工具\"><a href=\"#安装Git工具\" class=\"headerlink\" title=\"安装Git工具\"></a>安装Git工具</h2><p>推荐使用乌龟工具，界面与之前的SVN近似，而且可以结合window文件系统。<br><a href=\"https://tortoisegit.org/download/\">https://tortoisegit.org/download/</a></p>\n<p>注：安装过程选择默认选项</p>\n<h2 id=\"装好之后设置账号信息\"><a href=\"#装好之后设置账号信息\" class=\"headerlink\" title=\"装好之后设置账号信息\"></a>装好之后设置账号信息</h2><p><img src=\"/img/1573879504277.png\" alt=\"装好之后设置账号信息\"></p>\n<h2 id=\"克隆服务端的项目代码\"><a href=\"#克隆服务端的项目代码\" class=\"headerlink\" title=\"克隆服务端的项目代码\"></a>克隆服务端的项目代码</h2><blockquote>\n<p>1.右键选择git clone.<br>2.输入项目地址：<a href=\"http://172.16.100.8:8081/x1/client.git\">http://172.16.100.8:8081/x1/client.git</a> </p>\n</blockquote>\n<p><img src=\"/img/1573881914065.png\" alt=\"克隆服务端的项目代码\"></p>\n<h2 id=\"切换到自己所在的分支\"><a href=\"#切换到自己所在的分支\" class=\"headerlink\" title=\"切换到自己所在的分支\"></a>切换到自己所在的分支</h2><blockquote>\n<p>美术： art<br>策划和程序： feature</p>\n</blockquote>\n<p><img src=\"/img/1573883470572.png\" alt=\"切换到自己所在的分支\"></p>\n<h2 id=\"【可选】用旧项目的library\"><a href=\"#【可选】用旧项目的library\" class=\"headerlink\" title=\"【可选】用旧项目的library\"></a>【可选】用旧项目的library</h2><blockquote>\n<p>复制原SVN的UNITY目录下的library文件夹，粘贴到已经拉下来的unity目录下。这样重打开项目不用等待太多。</p>\n</blockquote>\n<h2 id=\"如何拉取\"><a href=\"#如何拉取\" class=\"headerlink\" title=\"如何拉取\"></a>如何拉取</h2><p><img src=\"/img/1573881886011.png\" alt=\"如何拉取\"></p>\n<h2 id=\"如何提交\"><a href=\"#如何提交\" class=\"headerlink\" title=\"如何提交\"></a>如何提交</h2><p><img src=\"/img/1573880787198.png\" alt=\"如何提交\"></p>\n"},{"title":"开言","_content":"\n\n### 预习\n1. do you have a miniute\n2. been meaning to\n\tI've been meaning to go to the store to by milk.\n\t//Haven't dont it yet but you're doing it.\n3. MacDonald  - fastfood chains.\n4. \n\n\n### Dialog\n\n### Dialog study","source":"_posts/开言- To tip or not to tip.md","raw":"---\ntitle: 开言\ncategories:\n- 英语学习\ntags: \n- English\n- Note\n---\n\n\n### 预习\n1. do you have a miniute\n2. been meaning to\n\tI've been meaning to go to the store to by milk.\n\t//Haven't dont it yet but you're doing it.\n3. MacDonald  - fastfood chains.\n4. \n\n\n### Dialog\n\n### Dialog study","slug":"开言- To tip or not to tip","published":1,"date":"2020-09-08T03:23:20.890Z","updated":"2020-09-08T03:23:20.890Z","_id":"ckdpcluzb003q8sr30q75gm2k","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>do you have a miniute</li>\n<li>been meaning to<br> I’ve been meaning to go to the store to by milk.<br> //Haven’t dont it yet but you’re doing it.</li>\n<li>MacDonald  - fastfood chains.</li>\n<li></li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>do you have a miniute</li>\n<li>been meaning to<br> I’ve been meaning to go to the store to by milk.<br> //Haven’t dont it yet but you’re doing it.</li>\n<li>MacDonald  - fastfood chains.</li>\n<li></li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>"},{"title":"常用单词学习","_content":"\n## colon\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30Anbf371a598eda69b4ccf46d35c7add5fc.mp3?t=colon\">\n      </audio>\n      \n+ 英 /ˈkəʊlən; ˈkəʊlɒn/  美 /ˈkoʊlən/  全球(美国)\nn. [解剖] 结肠；**冒号**（用于引语、说明、例证等之前）；科郎（哥斯达黎加货币单位）\n\n## quote\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30AQ4bbc942967962574bc81e020b01e1ba5.mp3?t=quote\">\n      </audio>\n\t  \n+ 英 /kwəʊt/  美 /kwoʊt/  全球(加拿大)  \nvt. 引述；引用；举例说明；报价；以……为证；为（企业的股份）上市\nvi. 引述；引用\nn. 引文；语录；开价；（股票）牌价；**引号**；（建筑或维修的）报价单\nn. (Quote) （美、俄、澳、马、荷）克奥特（人名）\n\n## apostrophe\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30SK8385e1c12f88cd501bf9c8ecfdef0800.mp3?t=apostrophe\">\n      </audio>\n\t  \n+ 英 /əˈpɒstrəfi/  美 /əˈpɑːstrəfi/  全球(英国)  \nn. 省略符号，撇号；呼语，顿呼\n\n## curly braces\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd309Bd6d78ac827a8d1b86b3bf601e93b4aaf.mp3?t=curly\">\n      </audio>\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30VP32b434afefd5946ee0ffb398b9d27f54.mp3?t=braces\">\n      </audio>\n\t  \n花括号\n\n## forward slash\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30eR83f990e90451dafef5a412ccdb12bd5b.mp3?t=slash\">\n      </audio>\n\t  \n斜杠（分隔号“/”）\n\n## back slash\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30eR83f990e90451dafef5a412ccdb12bd5b.mp3?t=slash\">\n      </audio>\n\t  \n正斜杠（分隔“\\”）\n\n## modulus\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30Ac9556257c524e8be83626de5de312dc40.mp3?t=modulus\">\n      </audio>\n\t  \n+ /'mɑdʒə,lai/ \nn. 模数；模（modulis 是复数）\n\n## asterisks\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30hw37be14616938459174674dfbc8e99d58.mp3?t=asterisk\">\n      </audio>\n\n+ 英 /ˈæstərɪsk/  美 /ˈæstərɪsk/  全球(美国)  \nn. 星号；星号键\nvt. 注上星号；用星号标出\n\n## exponentiation\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30Bt28530849f681345db3701ff6ce7a6bc0.mp3?t=exponentiation\">\n      </audio>\n\t  \n+ 英 /,ekspənenʃɪ'eɪʃ(ə)n/  美 /,ɛkspo,nɛnʃɪ'eʃən/  全球(美国)  \nn. [数] 取幂，求幂；乘方\n\n## multiplication\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30PS0d4e8cd35271884d6f6a01965ff6139c.mp3?t=multiplication\">\n      </audio>\n\t  \n+ 英 /ˌmʌltɪplɪˈkeɪʃn/  美 /ˌmʌltɪplɪˈkeɪʃn/  全球(美国)  \nn. [数] 乘法；增加\n\n## parenthesis\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30z4458c07e8c85323c67609468b15e1bc7b.mp3?t=parenthesis\">\n      </audio>\n\t  \n+ 英 /pəˈrenθəsɪs/  美 /pəˈrenθəsɪs/  全球(美国)  \nn. 插入语,插入成分\nn. **圆括号**\nn. 间歇，插曲\n\n## mammal\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30UHa4f52b3cda24670558fd591e13eb700f.mp3?t=mammal\">\n      </audio>\n\t  \n+ 英 /ˈmæml/  美 /ˈmæml/  全球(美国)  \nn. [脊椎] 哺乳动物\n\n## loaves\n+ I'd love two loaves of breads fresh from ovan.\nn. loaf 多数，多条面包\n\n## wheat\nn. 小麦\n\n## cereal\nn.谷物\n\n## muffins\nn.松饼\n\n## oven\nn.烤箱\n\n## fresh from\n+  fresh from oven\n刚出，新鲜出\n\n## bread rolls\nn. 圆面包\n\n## $20.50\n20 dollars and 50 cents\n\n## a slice of\n切一片\n\n## heavy drinker\nn. 大酒量的人\n\n## lightweight\nn.酒量不好的人\n\n## blow\nv. 吹\n\n## steam\nn. 蒸汽\n\n## blow off some steam\n舒缓压力\n\n## brew\n+ I brew some coffee. \nn.酿的啤酒/咖啡 v.酿\n\n## beer\nn.啤酒\n\n## on the rocks\n+ This whiskey on the rocks is fantastic.\nn.破产，酒加冰\n\n## neat\n+ They like to drink their whiskey neet.\nn. 原汁原味\n\n\n## hard stuff\nn.烈酒， 难搞的东西\n\n## stiff \n+ I could handle a stiff drink, but I'd still rather order sweeter cocktails.\nadj.烈性的，严厉的，呆板的\n\n## hangover\nbe hangover /  have a hangover\nI don't like being hangover the next day.\nn.宿醉， 遗物\n\n## hammered\n+ I got hammered last night.\n+ We can get you home if you hammered.\nadj.醉酒的\n\n## nagging\nn.唠叨、\n\n## drink someone under the table\nn.把某人喝倒\n\n## soda\nn.苏打\n\n## buzzed\nadj. 头有点晕\n\n## watered down\n渗水\n\n## shots\n+ take the shot. 一口喝完\n+ we have a lots of shots.\nn. 喝酒的小杯子\n\n## chug\nAre you chugging it?\nn. beer的杯子\n\n## tequila\nn. 龙舌兰酒\n\n## bartender\nn.调酒师\n\n## beer gut\nn.啤酒肚\n\n## beer belly\nn.啤酒肚\n\n## go for a jog\nn.运动，慢跑\n\n## carbonated drink/beverage\nn. 碳酸饮料\n\n## snack\nn. 小吃\n\n## cuisine\nn.烹饪","source":"_posts/常用单词学习.md","raw":"---\ntitle: 常用单词学习\ncategories:\n- 英语学习\ntags: \n- English\n- Note\n---\n\n## colon\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30Anbf371a598eda69b4ccf46d35c7add5fc.mp3?t=colon\">\n      </audio>\n      \n+ 英 /ˈkəʊlən; ˈkəʊlɒn/  美 /ˈkoʊlən/  全球(美国)\nn. [解剖] 结肠；**冒号**（用于引语、说明、例证等之前）；科郎（哥斯达黎加货币单位）\n\n## quote\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30AQ4bbc942967962574bc81e020b01e1ba5.mp3?t=quote\">\n      </audio>\n\t  \n+ 英 /kwəʊt/  美 /kwoʊt/  全球(加拿大)  \nvt. 引述；引用；举例说明；报价；以……为证；为（企业的股份）上市\nvi. 引述；引用\nn. 引文；语录；开价；（股票）牌价；**引号**；（建筑或维修的）报价单\nn. (Quote) （美、俄、澳、马、荷）克奥特（人名）\n\n## apostrophe\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30SK8385e1c12f88cd501bf9c8ecfdef0800.mp3?t=apostrophe\">\n      </audio>\n\t  \n+ 英 /əˈpɒstrəfi/  美 /əˈpɑːstrəfi/  全球(英国)  \nn. 省略符号，撇号；呼语，顿呼\n\n## curly braces\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd309Bd6d78ac827a8d1b86b3bf601e93b4aaf.mp3?t=curly\">\n      </audio>\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30VP32b434afefd5946ee0ffb398b9d27f54.mp3?t=braces\">\n      </audio>\n\t  \n花括号\n\n## forward slash\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30eR83f990e90451dafef5a412ccdb12bd5b.mp3?t=slash\">\n      </audio>\n\t  \n斜杠（分隔号“/”）\n\n## back slash\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30eR83f990e90451dafef5a412ccdb12bd5b.mp3?t=slash\">\n      </audio>\n\t  \n正斜杠（分隔“\\”）\n\n## modulus\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30Ac9556257c524e8be83626de5de312dc40.mp3?t=modulus\">\n      </audio>\n\t  \n+ /'mɑdʒə,lai/ \nn. 模数；模（modulis 是复数）\n\n## asterisks\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30hw37be14616938459174674dfbc8e99d58.mp3?t=asterisk\">\n      </audio>\n\n+ 英 /ˈæstərɪsk/  美 /ˈæstərɪsk/  全球(美国)  \nn. 星号；星号键\nvt. 注上星号；用星号标出\n\n## exponentiation\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30Bt28530849f681345db3701ff6ce7a6bc0.mp3?t=exponentiation\">\n      </audio>\n\t  \n+ 英 /,ekspənenʃɪ'eɪʃ(ə)n/  美 /,ɛkspo,nɛnʃɪ'eʃən/  全球(美国)  \nn. [数] 取幂，求幂；乘方\n\n## multiplication\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30PS0d4e8cd35271884d6f6a01965ff6139c.mp3?t=multiplication\">\n      </audio>\n\t  \n+ 英 /ˌmʌltɪplɪˈkeɪʃn/  美 /ˌmʌltɪplɪˈkeɪʃn/  全球(美国)  \nn. [数] 乘法；增加\n\n## parenthesis\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30z4458c07e8c85323c67609468b15e1bc7b.mp3?t=parenthesis\">\n      </audio>\n\t  \n+ 英 /pəˈrenθəsɪs/  美 /pəˈrenθəsɪs/  全球(美国)  \nn. 插入语,插入成分\nn. **圆括号**\nn. 间歇，插曲\n\n## mammal\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30UHa4f52b3cda24670558fd591e13eb700f.mp3?t=mammal\">\n      </audio>\n\t  \n+ 英 /ˈmæml/  美 /ˈmæml/  全球(美国)  \nn. [脊椎] 哺乳动物\n\n## loaves\n+ I'd love two loaves of breads fresh from ovan.\nn. loaf 多数，多条面包\n\n## wheat\nn. 小麦\n\n## cereal\nn.谷物\n\n## muffins\nn.松饼\n\n## oven\nn.烤箱\n\n## fresh from\n+  fresh from oven\n刚出，新鲜出\n\n## bread rolls\nn. 圆面包\n\n## $20.50\n20 dollars and 50 cents\n\n## a slice of\n切一片\n\n## heavy drinker\nn. 大酒量的人\n\n## lightweight\nn.酒量不好的人\n\n## blow\nv. 吹\n\n## steam\nn. 蒸汽\n\n## blow off some steam\n舒缓压力\n\n## brew\n+ I brew some coffee. \nn.酿的啤酒/咖啡 v.酿\n\n## beer\nn.啤酒\n\n## on the rocks\n+ This whiskey on the rocks is fantastic.\nn.破产，酒加冰\n\n## neat\n+ They like to drink their whiskey neet.\nn. 原汁原味\n\n\n## hard stuff\nn.烈酒， 难搞的东西\n\n## stiff \n+ I could handle a stiff drink, but I'd still rather order sweeter cocktails.\nadj.烈性的，严厉的，呆板的\n\n## hangover\nbe hangover /  have a hangover\nI don't like being hangover the next day.\nn.宿醉， 遗物\n\n## hammered\n+ I got hammered last night.\n+ We can get you home if you hammered.\nadj.醉酒的\n\n## nagging\nn.唠叨、\n\n## drink someone under the table\nn.把某人喝倒\n\n## soda\nn.苏打\n\n## buzzed\nadj. 头有点晕\n\n## watered down\n渗水\n\n## shots\n+ take the shot. 一口喝完\n+ we have a lots of shots.\nn. 喝酒的小杯子\n\n## chug\nAre you chugging it?\nn. beer的杯子\n\n## tequila\nn. 龙舌兰酒\n\n## bartender\nn.调酒师\n\n## beer gut\nn.啤酒肚\n\n## beer belly\nn.啤酒肚\n\n## go for a jog\nn.运动，慢跑\n\n## carbonated drink/beverage\nn. 碳酸饮料\n\n## snack\nn. 小吃\n\n## cuisine\nn.烹饪","slug":"常用单词学习","published":1,"date":"2020-09-08T03:23:20.890Z","updated":"2020-09-08T03:23:20.890Z","_id":"ckdpcluzd003t8sr3qtpggvot","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"colon\"><a href=\"#colon\" class=\"headerlink\" title=\"colon\"></a>colon</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30Anbf371a598eda69b4ccf46d35c7add5fc.mp3?t=colon\">\n      </audio>\n\n<ul>\n<li>英 /ˈkəʊlən; ˈkəʊlɒn/  美 /ˈkoʊlən/  全球(美国)<br>n. [解剖] 结肠；<strong>冒号</strong>（用于引语、说明、例证等之前）；科郎（哥斯达黎加货币单位）</li>\n</ul>\n<h2 id=\"quote\"><a href=\"#quote\" class=\"headerlink\" title=\"quote\"></a>quote</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30AQ4bbc942967962574bc81e020b01e1ba5.mp3?t=quote\">\n      </audio>\n\n<ul>\n<li>英 /kwəʊt/  美 /kwoʊt/  全球(加拿大)<br>vt. 引述；引用；举例说明；报价；以……为证；为（企业的股份）上市<br>vi. 引述；引用<br>n. 引文；语录；开价；（股票）牌价；<strong>引号</strong>；（建筑或维修的）报价单<br>n. (Quote) （美、俄、澳、马、荷）克奥特（人名）</li>\n</ul>\n<h2 id=\"apostrophe\"><a href=\"#apostrophe\" class=\"headerlink\" title=\"apostrophe\"></a>apostrophe</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30SK8385e1c12f88cd501bf9c8ecfdef0800.mp3?t=apostrophe\">\n      </audio>\n\n<ul>\n<li>英 /əˈpɒstrəfi/  美 /əˈpɑːstrəfi/  全球(英国)<br>n. 省略符号，撇号；呼语，顿呼</li>\n</ul>\n<h2 id=\"curly-braces\"><a href=\"#curly-braces\" class=\"headerlink\" title=\"curly braces\"></a>curly braces</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd309Bd6d78ac827a8d1b86b3bf601e93b4aaf.mp3?t=curly\">\n      </audio>\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30VP32b434afefd5946ee0ffb398b9d27f54.mp3?t=braces\">\n      </audio>\n\n<p>花括号</p>\n<h2 id=\"forward-slash\"><a href=\"#forward-slash\" class=\"headerlink\" title=\"forward slash\"></a>forward slash</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30eR83f990e90451dafef5a412ccdb12bd5b.mp3?t=slash\">\n      </audio>\n\n<p>斜杠（分隔号“/”）</p>\n<h2 id=\"back-slash\"><a href=\"#back-slash\" class=\"headerlink\" title=\"back slash\"></a>back slash</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30eR83f990e90451dafef5a412ccdb12bd5b.mp3?t=slash\">\n      </audio>\n\n<p>正斜杠（分隔“\\”）</p>\n<h2 id=\"modulus\"><a href=\"#modulus\" class=\"headerlink\" title=\"modulus\"></a>modulus</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30Ac9556257c524e8be83626de5de312dc40.mp3?t=modulus\">\n      </audio>\n\n<ul>\n<li>/‘mɑdʒə,lai/<br>n. 模数；模（modulis 是复数）</li>\n</ul>\n<h2 id=\"asterisks\"><a href=\"#asterisks\" class=\"headerlink\" title=\"asterisks\"></a>asterisks</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30hw37be14616938459174674dfbc8e99d58.mp3?t=asterisk\">\n      </audio>\n\n<ul>\n<li>英 /ˈæstərɪsk/  美 /ˈæstərɪsk/  全球(美国)<br>n. 星号；星号键<br>vt. 注上星号；用星号标出</li>\n</ul>\n<h2 id=\"exponentiation\"><a href=\"#exponentiation\" class=\"headerlink\" title=\"exponentiation\"></a>exponentiation</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30Bt28530849f681345db3701ff6ce7a6bc0.mp3?t=exponentiation\">\n      </audio>\n\n<ul>\n<li>英 /,ekspənenʃɪ’eɪʃ(ə)n/  美 /,ɛkspo,nɛnʃɪ’eʃən/  全球(美国)<br>n. [数] 取幂，求幂；乘方</li>\n</ul>\n<h2 id=\"multiplication\"><a href=\"#multiplication\" class=\"headerlink\" title=\"multiplication\"></a>multiplication</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30PS0d4e8cd35271884d6f6a01965ff6139c.mp3?t=multiplication\">\n      </audio>\n\n<ul>\n<li>英 /ˌmʌltɪplɪˈkeɪʃn/  美 /ˌmʌltɪplɪˈkeɪʃn/  全球(美国)<br>n. [数] 乘法；增加</li>\n</ul>\n<h2 id=\"parenthesis\"><a href=\"#parenthesis\" class=\"headerlink\" title=\"parenthesis\"></a>parenthesis</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30z4458c07e8c85323c67609468b15e1bc7b.mp3?t=parenthesis\">\n      </audio>\n\n<ul>\n<li>英 /pəˈrenθəsɪs/  美 /pəˈrenθəsɪs/  全球(美国)<br>n. 插入语,插入成分<br>n. <strong>圆括号</strong><br>n. 间歇，插曲</li>\n</ul>\n<h2 id=\"mammal\"><a href=\"#mammal\" class=\"headerlink\" title=\"mammal\"></a>mammal</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30UHa4f52b3cda24670558fd591e13eb700f.mp3?t=mammal\">\n      </audio>\n\n<ul>\n<li>英 /ˈmæml/  美 /ˈmæml/  全球(美国)<br>n. [脊椎] 哺乳动物</li>\n</ul>\n<h2 id=\"loaves\"><a href=\"#loaves\" class=\"headerlink\" title=\"loaves\"></a>loaves</h2><ul>\n<li>I’d love two loaves of breads fresh from ovan.<br>n. loaf 多数，多条面包</li>\n</ul>\n<h2 id=\"wheat\"><a href=\"#wheat\" class=\"headerlink\" title=\"wheat\"></a>wheat</h2><p>n. 小麦</p>\n<h2 id=\"cereal\"><a href=\"#cereal\" class=\"headerlink\" title=\"cereal\"></a>cereal</h2><p>n.谷物</p>\n<h2 id=\"muffins\"><a href=\"#muffins\" class=\"headerlink\" title=\"muffins\"></a>muffins</h2><p>n.松饼</p>\n<h2 id=\"oven\"><a href=\"#oven\" class=\"headerlink\" title=\"oven\"></a>oven</h2><p>n.烤箱</p>\n<h2 id=\"fresh-from\"><a href=\"#fresh-from\" class=\"headerlink\" title=\"fresh from\"></a>fresh from</h2><ul>\n<li>fresh from oven<br>刚出，新鲜出</li>\n</ul>\n<h2 id=\"bread-rolls\"><a href=\"#bread-rolls\" class=\"headerlink\" title=\"bread rolls\"></a>bread rolls</h2><p>n. 圆面包</p>\n<h2 id=\"20-50\"><a href=\"#20-50\" class=\"headerlink\" title=\"$20.50\"></a>$20.50</h2><p>20 dollars and 50 cents</p>\n<h2 id=\"a-slice-of\"><a href=\"#a-slice-of\" class=\"headerlink\" title=\"a slice of\"></a>a slice of</h2><p>切一片</p>\n<h2 id=\"heavy-drinker\"><a href=\"#heavy-drinker\" class=\"headerlink\" title=\"heavy drinker\"></a>heavy drinker</h2><p>n. 大酒量的人</p>\n<h2 id=\"lightweight\"><a href=\"#lightweight\" class=\"headerlink\" title=\"lightweight\"></a>lightweight</h2><p>n.酒量不好的人</p>\n<h2 id=\"blow\"><a href=\"#blow\" class=\"headerlink\" title=\"blow\"></a>blow</h2><p>v. 吹</p>\n<h2 id=\"steam\"><a href=\"#steam\" class=\"headerlink\" title=\"steam\"></a>steam</h2><p>n. 蒸汽</p>\n<h2 id=\"blow-off-some-steam\"><a href=\"#blow-off-some-steam\" class=\"headerlink\" title=\"blow off some steam\"></a>blow off some steam</h2><p>舒缓压力</p>\n<h2 id=\"brew\"><a href=\"#brew\" class=\"headerlink\" title=\"brew\"></a>brew</h2><ul>\n<li>I brew some coffee.<br>n.酿的啤酒/咖啡 v.酿</li>\n</ul>\n<h2 id=\"beer\"><a href=\"#beer\" class=\"headerlink\" title=\"beer\"></a>beer</h2><p>n.啤酒</p>\n<h2 id=\"on-the-rocks\"><a href=\"#on-the-rocks\" class=\"headerlink\" title=\"on the rocks\"></a>on the rocks</h2><ul>\n<li>This whiskey on the rocks is fantastic.<br>n.破产，酒加冰</li>\n</ul>\n<h2 id=\"neat\"><a href=\"#neat\" class=\"headerlink\" title=\"neat\"></a>neat</h2><ul>\n<li>They like to drink their whiskey neet.<br>n. 原汁原味</li>\n</ul>\n<h2 id=\"hard-stuff\"><a href=\"#hard-stuff\" class=\"headerlink\" title=\"hard stuff\"></a>hard stuff</h2><p>n.烈酒， 难搞的东西</p>\n<h2 id=\"stiff\"><a href=\"#stiff\" class=\"headerlink\" title=\"stiff\"></a>stiff</h2><ul>\n<li>I could handle a stiff drink, but I’d still rather order sweeter cocktails.<br>adj.烈性的，严厉的，呆板的</li>\n</ul>\n<h2 id=\"hangover\"><a href=\"#hangover\" class=\"headerlink\" title=\"hangover\"></a>hangover</h2><p>be hangover /  have a hangover<br>I don’t like being hangover the next day.<br>n.宿醉， 遗物</p>\n<h2 id=\"hammered\"><a href=\"#hammered\" class=\"headerlink\" title=\"hammered\"></a>hammered</h2><ul>\n<li>I got hammered last night.</li>\n<li>We can get you home if you hammered.<br>adj.醉酒的</li>\n</ul>\n<h2 id=\"nagging\"><a href=\"#nagging\" class=\"headerlink\" title=\"nagging\"></a>nagging</h2><p>n.唠叨、</p>\n<h2 id=\"drink-someone-under-the-table\"><a href=\"#drink-someone-under-the-table\" class=\"headerlink\" title=\"drink someone under the table\"></a>drink someone under the table</h2><p>n.把某人喝倒</p>\n<h2 id=\"soda\"><a href=\"#soda\" class=\"headerlink\" title=\"soda\"></a>soda</h2><p>n.苏打</p>\n<h2 id=\"buzzed\"><a href=\"#buzzed\" class=\"headerlink\" title=\"buzzed\"></a>buzzed</h2><p>adj. 头有点晕</p>\n<h2 id=\"watered-down\"><a href=\"#watered-down\" class=\"headerlink\" title=\"watered down\"></a>watered down</h2><p>渗水</p>\n<h2 id=\"shots\"><a href=\"#shots\" class=\"headerlink\" title=\"shots\"></a>shots</h2><ul>\n<li>take the shot. 一口喝完</li>\n<li>we have a lots of shots.<br>n. 喝酒的小杯子</li>\n</ul>\n<h2 id=\"chug\"><a href=\"#chug\" class=\"headerlink\" title=\"chug\"></a>chug</h2><p>Are you chugging it?<br>n. beer的杯子</p>\n<h2 id=\"tequila\"><a href=\"#tequila\" class=\"headerlink\" title=\"tequila\"></a>tequila</h2><p>n. 龙舌兰酒</p>\n<h2 id=\"bartender\"><a href=\"#bartender\" class=\"headerlink\" title=\"bartender\"></a>bartender</h2><p>n.调酒师</p>\n<h2 id=\"beer-gut\"><a href=\"#beer-gut\" class=\"headerlink\" title=\"beer gut\"></a>beer gut</h2><p>n.啤酒肚</p>\n<h2 id=\"beer-belly\"><a href=\"#beer-belly\" class=\"headerlink\" title=\"beer belly\"></a>beer belly</h2><p>n.啤酒肚</p>\n<h2 id=\"go-for-a-jog\"><a href=\"#go-for-a-jog\" class=\"headerlink\" title=\"go for a jog\"></a>go for a jog</h2><p>n.运动，慢跑</p>\n<h2 id=\"carbonated-drink-beverage\"><a href=\"#carbonated-drink-beverage\" class=\"headerlink\" title=\"carbonated drink/beverage\"></a>carbonated drink/beverage</h2><p>n. 碳酸饮料</p>\n<h2 id=\"snack\"><a href=\"#snack\" class=\"headerlink\" title=\"snack\"></a>snack</h2><p>n. 小吃</p>\n<h2 id=\"cuisine\"><a href=\"#cuisine\" class=\"headerlink\" title=\"cuisine\"></a>cuisine</h2><p>n.烹饪</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"colon\"><a href=\"#colon\" class=\"headerlink\" title=\"colon\"></a>colon</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30Anbf371a598eda69b4ccf46d35c7add5fc.mp3?t=colon\">\n      </audio>\n\n<ul>\n<li>英 /ˈkəʊlən; ˈkəʊlɒn/  美 /ˈkoʊlən/  全球(美国)<br>n. [解剖] 结肠；<strong>冒号</strong>（用于引语、说明、例证等之前）；科郎（哥斯达黎加货币单位）</li>\n</ul>\n<h2 id=\"quote\"><a href=\"#quote\" class=\"headerlink\" title=\"quote\"></a>quote</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30AQ4bbc942967962574bc81e020b01e1ba5.mp3?t=quote\">\n      </audio>\n\n<ul>\n<li>英 /kwəʊt/  美 /kwoʊt/  全球(加拿大)<br>vt. 引述；引用；举例说明；报价；以……为证；为（企业的股份）上市<br>vi. 引述；引用<br>n. 引文；语录；开价；（股票）牌价；<strong>引号</strong>；（建筑或维修的）报价单<br>n. (Quote) （美、俄、澳、马、荷）克奥特（人名）</li>\n</ul>\n<h2 id=\"apostrophe\"><a href=\"#apostrophe\" class=\"headerlink\" title=\"apostrophe\"></a>apostrophe</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30SK8385e1c12f88cd501bf9c8ecfdef0800.mp3?t=apostrophe\">\n      </audio>\n\n<ul>\n<li>英 /əˈpɒstrəfi/  美 /əˈpɑːstrəfi/  全球(英国)<br>n. 省略符号，撇号；呼语，顿呼</li>\n</ul>\n<h2 id=\"curly-braces\"><a href=\"#curly-braces\" class=\"headerlink\" title=\"curly braces\"></a>curly braces</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd309Bd6d78ac827a8d1b86b3bf601e93b4aaf.mp3?t=curly\">\n      </audio>\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30VP32b434afefd5946ee0ffb398b9d27f54.mp3?t=braces\">\n      </audio>\n\n<p>花括号</p>\n<h2 id=\"forward-slash\"><a href=\"#forward-slash\" class=\"headerlink\" title=\"forward slash\"></a>forward slash</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30eR83f990e90451dafef5a412ccdb12bd5b.mp3?t=slash\">\n      </audio>\n\n<p>斜杠（分隔号“/”）</p>\n<h2 id=\"back-slash\"><a href=\"#back-slash\" class=\"headerlink\" title=\"back slash\"></a>back slash</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30eR83f990e90451dafef5a412ccdb12bd5b.mp3?t=slash\">\n      </audio>\n\n<p>正斜杠（分隔“\\”）</p>\n<h2 id=\"modulus\"><a href=\"#modulus\" class=\"headerlink\" title=\"modulus\"></a>modulus</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30Ac9556257c524e8be83626de5de312dc40.mp3?t=modulus\">\n      </audio>\n\n<ul>\n<li>/‘mɑdʒə,lai/<br>n. 模数；模（modulis 是复数）</li>\n</ul>\n<h2 id=\"asterisks\"><a href=\"#asterisks\" class=\"headerlink\" title=\"asterisks\"></a>asterisks</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30hw37be14616938459174674dfbc8e99d58.mp3?t=asterisk\">\n      </audio>\n\n<ul>\n<li>英 /ˈæstərɪsk/  美 /ˈæstərɪsk/  全球(美国)<br>n. 星号；星号键<br>vt. 注上星号；用星号标出</li>\n</ul>\n<h2 id=\"exponentiation\"><a href=\"#exponentiation\" class=\"headerlink\" title=\"exponentiation\"></a>exponentiation</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30Bt28530849f681345db3701ff6ce7a6bc0.mp3?t=exponentiation\">\n      </audio>\n\n<ul>\n<li>英 /,ekspənenʃɪ’eɪʃ(ə)n/  美 /,ɛkspo,nɛnʃɪ’eʃən/  全球(美国)<br>n. [数] 取幂，求幂；乘方</li>\n</ul>\n<h2 id=\"multiplication\"><a href=\"#multiplication\" class=\"headerlink\" title=\"multiplication\"></a>multiplication</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30PS0d4e8cd35271884d6f6a01965ff6139c.mp3?t=multiplication\">\n      </audio>\n\n<ul>\n<li>英 /ˌmʌltɪplɪˈkeɪʃn/  美 /ˌmʌltɪplɪˈkeɪʃn/  全球(美国)<br>n. [数] 乘法；增加</li>\n</ul>\n<h2 id=\"parenthesis\"><a href=\"#parenthesis\" class=\"headerlink\" title=\"parenthesis\"></a>parenthesis</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/muTd30z4458c07e8c85323c67609468b15e1bc7b.mp3?t=parenthesis\">\n      </audio>\n\n<ul>\n<li>英 /pəˈrenθəsɪs/  美 /pəˈrenθəsɪs/  全球(美国)<br>n. 插入语,插入成分<br>n. <strong>圆括号</strong><br>n. 间歇，插曲</li>\n</ul>\n<h2 id=\"mammal\"><a href=\"#mammal\" class=\"headerlink\" title=\"mammal\"></a>mammal</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://audio.dict.cn/fuTd30UHa4f52b3cda24670558fd591e13eb700f.mp3?t=mammal\">\n      </audio>\n\n<ul>\n<li>英 /ˈmæml/  美 /ˈmæml/  全球(美国)<br>n. [脊椎] 哺乳动物</li>\n</ul>\n<h2 id=\"loaves\"><a href=\"#loaves\" class=\"headerlink\" title=\"loaves\"></a>loaves</h2><ul>\n<li>I’d love two loaves of breads fresh from ovan.<br>n. loaf 多数，多条面包</li>\n</ul>\n<h2 id=\"wheat\"><a href=\"#wheat\" class=\"headerlink\" title=\"wheat\"></a>wheat</h2><p>n. 小麦</p>\n<h2 id=\"cereal\"><a href=\"#cereal\" class=\"headerlink\" title=\"cereal\"></a>cereal</h2><p>n.谷物</p>\n<h2 id=\"muffins\"><a href=\"#muffins\" class=\"headerlink\" title=\"muffins\"></a>muffins</h2><p>n.松饼</p>\n<h2 id=\"oven\"><a href=\"#oven\" class=\"headerlink\" title=\"oven\"></a>oven</h2><p>n.烤箱</p>\n<h2 id=\"fresh-from\"><a href=\"#fresh-from\" class=\"headerlink\" title=\"fresh from\"></a>fresh from</h2><ul>\n<li>fresh from oven<br>刚出，新鲜出</li>\n</ul>\n<h2 id=\"bread-rolls\"><a href=\"#bread-rolls\" class=\"headerlink\" title=\"bread rolls\"></a>bread rolls</h2><p>n. 圆面包</p>\n<h2 id=\"20-50\"><a href=\"#20-50\" class=\"headerlink\" title=\"$20.50\"></a>$20.50</h2><p>20 dollars and 50 cents</p>\n<h2 id=\"a-slice-of\"><a href=\"#a-slice-of\" class=\"headerlink\" title=\"a slice of\"></a>a slice of</h2><p>切一片</p>\n<h2 id=\"heavy-drinker\"><a href=\"#heavy-drinker\" class=\"headerlink\" title=\"heavy drinker\"></a>heavy drinker</h2><p>n. 大酒量的人</p>\n<h2 id=\"lightweight\"><a href=\"#lightweight\" class=\"headerlink\" title=\"lightweight\"></a>lightweight</h2><p>n.酒量不好的人</p>\n<h2 id=\"blow\"><a href=\"#blow\" class=\"headerlink\" title=\"blow\"></a>blow</h2><p>v. 吹</p>\n<h2 id=\"steam\"><a href=\"#steam\" class=\"headerlink\" title=\"steam\"></a>steam</h2><p>n. 蒸汽</p>\n<h2 id=\"blow-off-some-steam\"><a href=\"#blow-off-some-steam\" class=\"headerlink\" title=\"blow off some steam\"></a>blow off some steam</h2><p>舒缓压力</p>\n<h2 id=\"brew\"><a href=\"#brew\" class=\"headerlink\" title=\"brew\"></a>brew</h2><ul>\n<li>I brew some coffee.<br>n.酿的啤酒/咖啡 v.酿</li>\n</ul>\n<h2 id=\"beer\"><a href=\"#beer\" class=\"headerlink\" title=\"beer\"></a>beer</h2><p>n.啤酒</p>\n<h2 id=\"on-the-rocks\"><a href=\"#on-the-rocks\" class=\"headerlink\" title=\"on the rocks\"></a>on the rocks</h2><ul>\n<li>This whiskey on the rocks is fantastic.<br>n.破产，酒加冰</li>\n</ul>\n<h2 id=\"neat\"><a href=\"#neat\" class=\"headerlink\" title=\"neat\"></a>neat</h2><ul>\n<li>They like to drink their whiskey neet.<br>n. 原汁原味</li>\n</ul>\n<h2 id=\"hard-stuff\"><a href=\"#hard-stuff\" class=\"headerlink\" title=\"hard stuff\"></a>hard stuff</h2><p>n.烈酒， 难搞的东西</p>\n<h2 id=\"stiff\"><a href=\"#stiff\" class=\"headerlink\" title=\"stiff\"></a>stiff</h2><ul>\n<li>I could handle a stiff drink, but I’d still rather order sweeter cocktails.<br>adj.烈性的，严厉的，呆板的</li>\n</ul>\n<h2 id=\"hangover\"><a href=\"#hangover\" class=\"headerlink\" title=\"hangover\"></a>hangover</h2><p>be hangover /  have a hangover<br>I don’t like being hangover the next day.<br>n.宿醉， 遗物</p>\n<h2 id=\"hammered\"><a href=\"#hammered\" class=\"headerlink\" title=\"hammered\"></a>hammered</h2><ul>\n<li>I got hammered last night.</li>\n<li>We can get you home if you hammered.<br>adj.醉酒的</li>\n</ul>\n<h2 id=\"nagging\"><a href=\"#nagging\" class=\"headerlink\" title=\"nagging\"></a>nagging</h2><p>n.唠叨、</p>\n<h2 id=\"drink-someone-under-the-table\"><a href=\"#drink-someone-under-the-table\" class=\"headerlink\" title=\"drink someone under the table\"></a>drink someone under the table</h2><p>n.把某人喝倒</p>\n<h2 id=\"soda\"><a href=\"#soda\" class=\"headerlink\" title=\"soda\"></a>soda</h2><p>n.苏打</p>\n<h2 id=\"buzzed\"><a href=\"#buzzed\" class=\"headerlink\" title=\"buzzed\"></a>buzzed</h2><p>adj. 头有点晕</p>\n<h2 id=\"watered-down\"><a href=\"#watered-down\" class=\"headerlink\" title=\"watered down\"></a>watered down</h2><p>渗水</p>\n<h2 id=\"shots\"><a href=\"#shots\" class=\"headerlink\" title=\"shots\"></a>shots</h2><ul>\n<li>take the shot. 一口喝完</li>\n<li>we have a lots of shots.<br>n. 喝酒的小杯子</li>\n</ul>\n<h2 id=\"chug\"><a href=\"#chug\" class=\"headerlink\" title=\"chug\"></a>chug</h2><p>Are you chugging it?<br>n. beer的杯子</p>\n<h2 id=\"tequila\"><a href=\"#tequila\" class=\"headerlink\" title=\"tequila\"></a>tequila</h2><p>n. 龙舌兰酒</p>\n<h2 id=\"bartender\"><a href=\"#bartender\" class=\"headerlink\" title=\"bartender\"></a>bartender</h2><p>n.调酒师</p>\n<h2 id=\"beer-gut\"><a href=\"#beer-gut\" class=\"headerlink\" title=\"beer gut\"></a>beer gut</h2><p>n.啤酒肚</p>\n<h2 id=\"beer-belly\"><a href=\"#beer-belly\" class=\"headerlink\" title=\"beer belly\"></a>beer belly</h2><p>n.啤酒肚</p>\n<h2 id=\"go-for-a-jog\"><a href=\"#go-for-a-jog\" class=\"headerlink\" title=\"go for a jog\"></a>go for a jog</h2><p>n.运动，慢跑</p>\n<h2 id=\"carbonated-drink-beverage\"><a href=\"#carbonated-drink-beverage\" class=\"headerlink\" title=\"carbonated drink/beverage\"></a>carbonated drink/beverage</h2><p>n. 碳酸饮料</p>\n<h2 id=\"snack\"><a href=\"#snack\" class=\"headerlink\" title=\"snack\"></a>snack</h2><p>n. 小吃</p>\n<h2 id=\"cuisine\"><a href=\"#cuisine\" class=\"headerlink\" title=\"cuisine\"></a>cuisine</h2><p>n.烹饪</p>\n"},{"title":"开言_Bargaining in the market","_content":"\n\n### 预习\n1. souvenior\n+ 纪念品\n2. jeez\n+ 叹词\n3. no can do\n无能为力。\n\n\n### Dialog\n\n> Excuse me sir, how much is this souvenior?\n> Oh, that one there is $30.\n> Jeez! That's a lot! is that the best price you can give me?\n> I don't go bargaining. $25 is the cheapest I can go.\n> I see ,are you sure you can't go any lower?\n> Sorry , I can't, and you won't find a better price in the market.\n> How about two for 40?\n> No can do. But I can do three for 60.\n> Thanks, but no thanks.\n> Ok, ok! Two for 40!\n> Deal! You take credit?\n> Cash only , sir!\n\n\n### Dialog study","source":"_posts/开言_Bargaining in the market.md","raw":"---\ntitle: 开言_Bargaining in the market\ncategories:\n- 英语学习\ntags: \n- English\n- Note\n---\n\n\n### 预习\n1. souvenior\n+ 纪念品\n2. jeez\n+ 叹词\n3. no can do\n无能为力。\n\n\n### Dialog\n\n> Excuse me sir, how much is this souvenior?\n> Oh, that one there is $30.\n> Jeez! That's a lot! is that the best price you can give me?\n> I don't go bargaining. $25 is the cheapest I can go.\n> I see ,are you sure you can't go any lower?\n> Sorry , I can't, and you won't find a better price in the market.\n> How about two for 40?\n> No can do. But I can do three for 60.\n> Thanks, but no thanks.\n> Ok, ok! Two for 40!\n> Deal! You take credit?\n> Cash only , sir!\n\n\n### Dialog study","slug":"开言_Bargaining in the market","published":1,"date":"2020-09-08T03:23:20.890Z","updated":"2020-09-08T03:23:20.890Z","_id":"ckdpcluzf003y8sr3bv6ml0tw","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>souvenior</li>\n</ol>\n<ul>\n<li>纪念品</li>\n</ul>\n<ol start=\"2\">\n<li>jeez</li>\n</ol>\n<ul>\n<li>叹词</li>\n</ul>\n<ol start=\"3\">\n<li>no can do<br>无能为力。</li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><blockquote>\n<p>Excuse me sir, how much is this souvenior?<br>Oh, that one there is $30.<br>Jeez! That’s a lot! is that the best price you can give me?<br>I don’t go bargaining. $25 is the cheapest I can go.<br>I see ,are you sure you can’t go any lower?<br>Sorry , I can’t, and you won’t find a better price in the market.<br>How about two for 40?<br>No can do. But I can do three for 60.<br>Thanks, but no thanks.<br>Ok, ok! Two for 40!<br>Deal! You take credit?<br>Cash only , sir!</p>\n</blockquote>\n<h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>souvenior</li>\n</ol>\n<ul>\n<li>纪念品</li>\n</ul>\n<ol start=\"2\">\n<li>jeez</li>\n</ol>\n<ul>\n<li>叹词</li>\n</ul>\n<ol start=\"3\">\n<li>no can do<br>无能为力。</li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><blockquote>\n<p>Excuse me sir, how much is this souvenior?<br>Oh, that one there is $30.<br>Jeez! That’s a lot! is that the best price you can give me?<br>I don’t go bargaining. $25 is the cheapest I can go.<br>I see ,are you sure you can’t go any lower?<br>Sorry , I can’t, and you won’t find a better price in the market.<br>How about two for 40?<br>No can do. But I can do three for 60.<br>Thanks, but no thanks.<br>Ok, ok! Two for 40!<br>Deal! You take credit?<br>Cash only , sir!</p>\n</blockquote>\n<h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>"},{"title":"开言_Happy Hour Drinks with Coworks","_content":"\n\n### 预习\n1. six-pack\n2. all-time\n3. brand-new\n+ just bought.. very very new\n4. ex-wife\n+ wife\n5. buy one, get one\n\n\n### Dialog\n\n\n\n### Dialog study","source":"_posts/开言_Happy Hour Drinks with Coworks.md","raw":"---\ntitle: 开言_Happy Hour Drinks with Coworks\ncategories:\n- 英语学习\ntags: \n- English\n- Note\n---\n\n\n### 预习\n1. six-pack\n2. all-time\n3. brand-new\n+ just bought.. very very new\n4. ex-wife\n+ wife\n5. buy one, get one\n\n\n### Dialog\n\n\n\n### Dialog study","slug":"开言_Happy Hour Drinks with Coworks","published":1,"date":"2020-09-08T03:23:20.890Z","updated":"2020-09-08T03:23:20.890Z","_id":"ckdpcluzg00418sr3l0hcjwqn","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>six-pack</li>\n<li>all-time</li>\n<li>brand-new</li>\n</ol>\n<ul>\n<li>just bought.. very very new</li>\n</ul>\n<ol start=\"4\">\n<li>ex-wife</li>\n</ol>\n<ul>\n<li>wife</li>\n</ul>\n<ol start=\"5\">\n<li>buy one, get one</li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>six-pack</li>\n<li>all-time</li>\n<li>brand-new</li>\n</ol>\n<ul>\n<li>just bought.. very very new</li>\n</ul>\n<ol start=\"4\">\n<li>ex-wife</li>\n</ol>\n<ul>\n<li>wife</li>\n</ul>\n<ol start=\"5\">\n<li>buy one, get one</li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>"},{"title":"开言体验营 - Day1","_content":"\n### 预习\n1. pull up\nv. 拿出来\n\n2. QR code\nn.二维码\n\n3. Scanning\nv. 扫描\n\n4. Professionals\nn. 专业人士\n\n5. keeping up\nv. 跟上，追踪\n\n6. public accounts\nn. 公众号\n\n7. networking\nn. 建立人脉\n\n### Dialog\n> A: It was great meeting you.\n> B: Likewise. Let's keep in touch. Could I have you wechat?\n> A: Sure. Just a sec, let me pull up my QR code. Here you go.\n> B: Great. Opps, that didn't work, let me try scanning you again, here we go.\n> A: Wonderful. I just accepted your contact request.\n> B: Great! Now we are connected. I'm in a great Wechat Group for marketting professionals. Would you like to join?\n> A: Sure, I'd love to.\n> B: I'll send you a invite right away. I find it great for networking, keeping up with industry news and local events.The people in the group is very helpful. I'll recommend a few great public account for you to follow, too.\n> A: That's excellent! I really appreciate it.\n> B: No problem, anytime!\n\n\n### Dialog study\n1. likewise\n* means 'the same'\n* almost anything where you would need to say blah blah blah **too**..\neg. : > Spencer, you are very handsome.\n\t\t> Ah, likewise.\n\t\t> Thank you. \n2.  Could I have you wechat?\n    more polite: > may I add you on wechat?\n\tor  > do you have wechat?\n\t\n3. pull up \n This is always about computers or phones, or things like that you can open something.\n e.g.: Let me pull up my QR code.\n \n 4. QR code\n quick response\n \n 5. contact request\n \n 6. here you go <=> give something.\nI'm giving you something.\n \n 7. here we go <=> start\n It's starting now. let do this..\n \n 8. professional\n n. someone who get paid to do something.\n \n 9.invite\nn. I'll send you an invite.\n \n 10. networking\n n. meeting people that could, related to you professionally.\n \n 11. keeping up\n e.g.: I keep up with fashion. keeping up with industry news.\n \n 12. local events\n this dialogue is probably a networking event.\n \n ","source":"_posts/开言体验营 - Day1.md","raw":"---\ntitle: 开言体验营 - Day1\ncategories:\n- 英语学习\ntags: \n- English\n- Note\n---\n\n### 预习\n1. pull up\nv. 拿出来\n\n2. QR code\nn.二维码\n\n3. Scanning\nv. 扫描\n\n4. Professionals\nn. 专业人士\n\n5. keeping up\nv. 跟上，追踪\n\n6. public accounts\nn. 公众号\n\n7. networking\nn. 建立人脉\n\n### Dialog\n> A: It was great meeting you.\n> B: Likewise. Let's keep in touch. Could I have you wechat?\n> A: Sure. Just a sec, let me pull up my QR code. Here you go.\n> B: Great. Opps, that didn't work, let me try scanning you again, here we go.\n> A: Wonderful. I just accepted your contact request.\n> B: Great! Now we are connected. I'm in a great Wechat Group for marketting professionals. Would you like to join?\n> A: Sure, I'd love to.\n> B: I'll send you a invite right away. I find it great for networking, keeping up with industry news and local events.The people in the group is very helpful. I'll recommend a few great public account for you to follow, too.\n> A: That's excellent! I really appreciate it.\n> B: No problem, anytime!\n\n\n### Dialog study\n1. likewise\n* means 'the same'\n* almost anything where you would need to say blah blah blah **too**..\neg. : > Spencer, you are very handsome.\n\t\t> Ah, likewise.\n\t\t> Thank you. \n2.  Could I have you wechat?\n    more polite: > may I add you on wechat?\n\tor  > do you have wechat?\n\t\n3. pull up \n This is always about computers or phones, or things like that you can open something.\n e.g.: Let me pull up my QR code.\n \n 4. QR code\n quick response\n \n 5. contact request\n \n 6. here you go <=> give something.\nI'm giving you something.\n \n 7. here we go <=> start\n It's starting now. let do this..\n \n 8. professional\n n. someone who get paid to do something.\n \n 9.invite\nn. I'll send you an invite.\n \n 10. networking\n n. meeting people that could, related to you professionally.\n \n 11. keeping up\n e.g.: I keep up with fashion. keeping up with industry news.\n \n 12. local events\n this dialogue is probably a networking event.\n \n ","slug":"开言体验营 - Day1","published":1,"date":"2020-09-08T03:23:20.890Z","updated":"2020-09-08T03:23:20.890Z","_id":"ckdpcluzk00458sr3o9dezwh5","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li><p>pull up<br>v. 拿出来</p>\n</li>\n<li><p>QR code<br>n.二维码</p>\n</li>\n<li><p>Scanning<br>v. 扫描</p>\n</li>\n<li><p>Professionals<br>n. 专业人士</p>\n</li>\n<li><p>keeping up<br>v. 跟上，追踪</p>\n</li>\n<li><p>public accounts<br>n. 公众号</p>\n</li>\n<li><p>networking<br>n. 建立人脉</p>\n</li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><blockquote>\n<p>A: It was great meeting you.<br>B: Likewise. Let’s keep in touch. Could I have you wechat?<br>A: Sure. Just a sec, let me pull up my QR code. Here you go.<br>B: Great. Opps, that didn’t work, let me try scanning you again, here we go.<br>A: Wonderful. I just accepted your contact request.<br>B: Great! Now we are connected. I’m in a great Wechat Group for marketting professionals. Would you like to join?<br>A: Sure, I’d love to.<br>B: I’ll send you a invite right away. I find it great for networking, keeping up with industry news and local events.The people in the group is very helpful. I’ll recommend a few great public account for you to follow, too.<br>A: That’s excellent! I really appreciate it.<br>B: No problem, anytime!</p>\n</blockquote>\n<h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3><ol>\n<li>likewise</li>\n</ol>\n<ul>\n<li>means ‘the same’</li>\n<li>almost anything where you would need to say blah blah blah <strong>too</strong>..<br>eg. : &gt; Spencer, you are very handsome.<pre><code>  &gt; Ah, likewise.\n  &gt; Thank you. </code></pre></li>\n</ul>\n<ol start=\"2\">\n<li><p>Could I have you wechat?<br>more polite: &gt; may I add you on wechat?<br>or  &gt; do you have wechat?</p>\n</li>\n<li><p>pull up<br>This is always about computers or phones, or things like that you can open something.<br>e.g.: Let me pull up my QR code.</p>\n<ol start=\"4\">\n<li><p>QR code<br>quick response</p>\n</li>\n<li><p>contact request</p>\n</li>\n<li><p>here you go &lt;=&gt; give something.<br>I’m giving you something.</p>\n</li>\n<li><p>here we go &lt;=&gt; start<br>It’s starting now. let do this..</p>\n</li>\n<li><p>professional<br>n. someone who get paid to do something.</p>\n</li>\n</ol>\n<p>9.invite<br>n. I’ll send you an invite.</p>\n<ol start=\"10\">\n<li><p>networking<br>n. meeting people that could, related to you professionally.</p>\n</li>\n<li><p>keeping up<br>e.g.: I keep up with fashion. keeping up with industry news.</p>\n</li>\n<li><p>local events<br>this dialogue is probably a networking event.</p>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li><p>pull up<br>v. 拿出来</p>\n</li>\n<li><p>QR code<br>n.二维码</p>\n</li>\n<li><p>Scanning<br>v. 扫描</p>\n</li>\n<li><p>Professionals<br>n. 专业人士</p>\n</li>\n<li><p>keeping up<br>v. 跟上，追踪</p>\n</li>\n<li><p>public accounts<br>n. 公众号</p>\n</li>\n<li><p>networking<br>n. 建立人脉</p>\n</li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><blockquote>\n<p>A: It was great meeting you.<br>B: Likewise. Let’s keep in touch. Could I have you wechat?<br>A: Sure. Just a sec, let me pull up my QR code. Here you go.<br>B: Great. Opps, that didn’t work, let me try scanning you again, here we go.<br>A: Wonderful. I just accepted your contact request.<br>B: Great! Now we are connected. I’m in a great Wechat Group for marketting professionals. Would you like to join?<br>A: Sure, I’d love to.<br>B: I’ll send you a invite right away. I find it great for networking, keeping up with industry news and local events.The people in the group is very helpful. I’ll recommend a few great public account for you to follow, too.<br>A: That’s excellent! I really appreciate it.<br>B: No problem, anytime!</p>\n</blockquote>\n<h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3><ol>\n<li>likewise</li>\n</ol>\n<ul>\n<li>means ‘the same’</li>\n<li>almost anything where you would need to say blah blah blah <strong>too</strong>..<br>eg. : &gt; Spencer, you are very handsome.<pre><code>  &gt; Ah, likewise.\n  &gt; Thank you. </code></pre></li>\n</ul>\n<ol start=\"2\">\n<li><p>Could I have you wechat?<br>more polite: &gt; may I add you on wechat?<br>or  &gt; do you have wechat?</p>\n</li>\n<li><p>pull up<br>This is always about computers or phones, or things like that you can open something.<br>e.g.: Let me pull up my QR code.</p>\n<ol start=\"4\">\n<li><p>QR code<br>quick response</p>\n</li>\n<li><p>contact request</p>\n</li>\n<li><p>here you go &lt;=&gt; give something.<br>I’m giving you something.</p>\n</li>\n<li><p>here we go &lt;=&gt; start<br>It’s starting now. let do this..</p>\n</li>\n<li><p>professional<br>n. someone who get paid to do something.</p>\n</li>\n</ol>\n<p>9.invite<br>n. I’ll send you an invite.</p>\n<ol start=\"10\">\n<li><p>networking<br>n. meeting people that could, related to you professionally.</p>\n</li>\n<li><p>keeping up<br>e.g.: I keep up with fashion. keeping up with industry news.</p>\n</li>\n<li><p>local events<br>this dialogue is probably a networking event.</p>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"开言体验营 - Day2","_content":"\n\n### 预习\n1. Espresso\n2. Americano\n3. Latte\n4. Cappuccino\n5. Mocha\n6. Macchiato\n\ne.g. I'd like to order a latte.\n### Dialog\n\n### Dialog study\n","source":"_posts/开言体验营 - Day2.md","raw":"---\ntitle: 开言体验营 - Day2\ncategories:\n- 英语学习\ntags: \n- English\n- Note\n---\n\n\n### 预习\n1. Espresso\n2. Americano\n3. Latte\n4. Cappuccino\n5. Mocha\n6. Macchiato\n\ne.g. I'd like to order a latte.\n### Dialog\n\n### Dialog study\n","slug":"开言体验营 - Day2","published":1,"date":"2020-09-08T03:23:20.890Z","updated":"2020-09-08T03:23:20.890Z","_id":"ckdpcluzn00498sr36o2sy1kt","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>Espresso</li>\n<li>Americano</li>\n<li>Latte</li>\n<li>Cappuccino</li>\n<li>Mocha</li>\n<li>Macchiato</li>\n</ol>\n<p>e.g. I’d like to order a latte.</p>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>Espresso</li>\n<li>Americano</li>\n<li>Latte</li>\n<li>Cappuccino</li>\n<li>Mocha</li>\n<li>Macchiato</li>\n</ol>\n<p>e.g. I’d like to order a latte.</p>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>"},{"title":"开言体验营 - Day4","_content":"\n\n### 预习\n1. Chinese zodiac 生肖\n2. literal translation\n3. tons \n4. beer \n\te.g. I had tons of beer last night.\n5. wacky -> weird\n6. silly \n### Dialog\n\n### Dialog study","source":"_posts/开言体验营 - Day4.md","raw":"---\ntitle: 开言体验营 - Day4\ncategories:\n- 英语学习\ntags: \n- English\n- Note\n---\n\n\n### 预习\n1. Chinese zodiac 生肖\n2. literal translation\n3. tons \n4. beer \n\te.g. I had tons of beer last night.\n5. wacky -> weird\n6. silly \n### Dialog\n\n### Dialog study","slug":"开言体验营 - Day4","published":1,"date":"2020-09-08T03:23:20.890Z","updated":"2020-09-08T03:23:20.890Z","_id":"ckdpcluzp004d8sr34d0yjsqh","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>Chinese zodiac 生肖</li>\n<li>literal translation</li>\n<li>tons </li>\n<li>beer<br> e.g. I had tons of beer last night.</li>\n<li>wacky -&gt; weird</li>\n<li>silly <h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3></li>\n</ol>\n<h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><ol>\n<li>Chinese zodiac 生肖</li>\n<li>literal translation</li>\n<li>tons </li>\n<li>beer<br> e.g. I had tons of beer last night.</li>\n<li>wacky -&gt; weird</li>\n<li>silly <h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3></li>\n</ol>\n<h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>"},{"title":"开言体验营 - Day5","_content":"\n\n### 预习\n1.put you up \n提供住宿，容忍\nBosses have a lot to put up with like you for instance!\nAll women search for beauty. Maybe you will feel better after you put on make-up.\n\n2. layover\n转机\n\n### Dialog\n\n### Dialog study","source":"_posts/开言体验营 - Day5.md","raw":"---\ntitle: 开言体验营 - Day5\ncategories:\n- 英语学习\ntags: \n- English\n- Note\n---\n\n\n### 预习\n1.put you up \n提供住宿，容忍\nBosses have a lot to put up with like you for instance!\nAll women search for beauty. Maybe you will feel better after you put on make-up.\n\n2. layover\n转机\n\n### Dialog\n\n### Dialog study","slug":"开言体验营 - Day5","published":1,"date":"2020-09-08T03:23:20.890Z","updated":"2020-09-08T03:23:20.890Z","_id":"ckdpcluzr004h8sr3ukh74qna","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><p>1.put you up<br>提供住宿，容忍<br>Bosses have a lot to put up with like you for instance!<br>All women search for beauty. Maybe you will feel better after you put on make-up.</p>\n<ol start=\"2\">\n<li>layover<br>转机</li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"预习\"><a href=\"#预习\" class=\"headerlink\" title=\"预习\"></a>预习</h3><p>1.put you up<br>提供住宿，容忍<br>Bosses have a lot to put up with like you for instance!<br>All women search for beauty. Maybe you will feel better after you put on make-up.</p>\n<ol start=\"2\">\n<li>layover<br>转机</li>\n</ol>\n<h3 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h3><h3 id=\"Dialog-study\"><a href=\"#Dialog-study\" class=\"headerlink\" title=\"Dialog study\"></a>Dialog study</h3>"},{"title":"性能优化相关","_content":"1.渲染\n\n- 利用reflect probe代替反射、折射，尽量不用RTT、GrabPass、RenderWithShader、CommandBuffer.Blit (BuiltinRenderTextureType.CurrentActive...)\n- 建立统一后处理框架(bloom、hdr、DOF等)代替多后处理，可以共用模糊函数，减少多次blit；另外要注意RTT的尺寸。\n- 空气折射、热浪扭曲等使用GrabPass不是所有硬件都支持，改为RTT或者后处理来优化。\n- 建立统一shader材质代替单一shader，充分利用shader_feature、multi_compile，并将宏开关显示于界面。\n- 图像混合代替多通道纹理，阴影投射、阴影接收、MetaPass、forwardadd 等pass不需要时要剔除。\n- 少用alpha test、discard、clip、Alpha Converage等，因为会影响Early-Z Culling、HSR的优化。\n- 避免Alpha Blend穿透问题（权重混合、深度剥离等透明排序方法代价太大了）。\n- 光照贴图代替动态阴影、尽量不用实时光；阴影贴图、环境贴图用16位代替32位；利用projector+rtt或者光圈代替实时阴影。\n- 将环境参数（风、雨、太阳）等shader全局参数统一管理。\n- 非主角可以用matcap代替pbr、无金属不一定要用pbr，仔细选择物理渲染所用的FDG（F:schlick、cook-torrance、lerp、要求不高用4次方，D：blinn-phong、beckmann、GGX、GGX Anisotropic,G:neumann、cook-torrance、Kelemen、SmithGGX；standard shader要注意选择BRDF1-BRDF3），渲染要求不高时不用GGX；可以用LH来优化GGX。\n- 用fixed、half代替float,建立shader统一类型（fixed效率是float的4倍，half是float的2倍），小心选择shader变量的修饰(uniform、static、全局),选择Mobile或Unlit目录下shader\n- 使用高低配渲染，内存足够时可以考虑开启mipmap\n- 使用surface shader注意关掉不用的功能，比如：noshadow、noambient、novertexlights、nolightmap、nodynlightmap、nodirlightmap、nofog、nometa、noforwardadd等\n- standard shader的变体太多（3万多），导致编译时间较长，内存占用也很惊人（接近1G），如果使用要关掉没用的shader_feature,比如：==**_PARALLAXMAP、SHADOWS_SOFT、DIRLIGHTMAP_COMBINED DIRLIGHTMAP_SEPARATE、_DETAIL_MULX2、_ALPHAPREMULTIPLY_ON；另外要去掉多余的pass** #F44336==\n- shaderforge、Amplify Shader Editor生成的shader有多余代码要程序专门优化，Amplify Shader Editor功能更强大一些，而且开源，建议学习。\n- 不要用unity自带terrian，因为即使只用3张splat图，shader也是对应4个的，建议T4M或者转为mesh。\n- 模型和材质相同且数量巨大时用Instance来优化，比如草。\n- 利用查找纹理(LUT)来优化复杂的光照渲染，比如：皮肤、头发、喷漆等。\n- 尽量不要使用Procedural Sky，计算瑞丽散射和米氏散射效率比较低。\n- 尽量不要使用speedtree，改为模型加简单树叶动画，不过SpeedTreeWind.cginc里面的动画函数很丰富，- TerrianEngine中的SmoothTriangleWave很好用。\n- 多用调试工具检查shader性能，常用工具有：FrameDebug、Nsight、RenderDoc 、AMD GPU -ShaderAnalyzer / PVRShaderEditor、Adreno Profiler 、腾讯Cube、UWA等；另外可以内置GM界面，比如开关阴影，批量替换shader等方便真机调试。\n\n> 另一方面，Matcap是完全不考虑光照影响的渲染方法，因此也不存在能量守恒，只能通过采样贴图的绘制做出能量守恒的效果，所以不是真正的PBR，也因此能做出很多PBR无法实现的效果。\n\n\n\n2.脚本\n\n减少GetComponent、find等查找函数在Update等循环函数中的调用、go.CompareTag代替go.tag 、\n减少SendMessage等同步函数调用；减少字符串连接；for代替foreach，5.5以后版本foreach已经优化过了；少用linq；\n大资源改为异步加载\n合理处理协程调用\n将AI、网络等放在单独线程\n发布优化：关闭log、剔除代码\n伪随机\n脚本挂载类改为Manager等全局类实现\nlua中尽量不实现update、fixedupdate等循环函数，lua和csharp互调用的效率比较低。\n\n3.内存管理\n\n池子管理粒子、float UI等小资源，频繁地GC会造成卡顿\n必要时主动调用GC.Collect()\n按照不同资源、不同设备管理资源生命周期，Resources.Load和Assetbundle统一接口，利用引用计数来管理生命周期，并打印和观察生命周期。保证资源随场景而卸载，不常驻内存，确定哪些是预加载，哪些泄漏。\n内存泄漏（减少驻留内存）：Container内资源不remove掉用Resources.UnloadUnusedAssets是卸载不掉的；对于这种情况，建议直接通过Profiler Memory中的Take Sample来对其进行检测，通过直接查看WebStream或SerializedFile中的AssetBundle名称，即可判断是否存在“泄露”情况；通过Android PSS/iOS Instrument反馈的App线程内存来查看；\n堆内存过大：避免一次性堆内存的过大分配，Mono的堆内存一旦分配，就不会返还给系统，这意味着Mono的堆内存是只升不降的。常见：高频调用new；log输出；\nCPU占用高：NGui的重建网格导致UIPanel.LateUpdate（按照静止、移动、高频移动来切分）；NGUI锚点自身的更新逻辑也会消耗不少CPU开销。即使是在控件静止不动的情况下，控件的锚点也会每帧更新（见UIWidget.OnUpdate函数），而且它的更新是递归式的，使CPU占用率更高。因此我们修改了NGUI的内部代码，使锚点只在必要时更新。一般只在控件初始化和屏幕大小发生变化时更新即可。不过这个优化的代价是控件的顶点位置发生变化的时候（比如控件在运动，或控件大小改变等），上层逻辑需要自己负责更新锚点。 加载用协程； 控制同一个UIPanel中动态UI元素的数量，数量越多，所创建的Mesh越大，从而使得重构的开销显著增加。比如，战斗过程中的HUD血条可能会大量出现，此时，建议研发团队将运动血条分离成不同的UIPanel，每组UIPanel下5~10个动态UI为宜。这种做法，其本质是从概率上尽可能降低单帧中UIPanel的重建开销。\n资源冗余：AssetBundle打包打到多份中；动态修改资源导致的Instance拷贝多份（比如动态修改材质，Renderer.meterial，Animation.AddClip）。\n磁盘空间换内存：对于占用WebStream较大的AssetBundle文件（如UI Atlas相关的AssetBundle文件等），建议使用LoadFromCacheOrDownLoad或CreateFromFile来进行替换，即将解压后的AssetBundle数据存储于本地Cache中进行使用。这种做法非常适合于内存特别吃紧的项目，即通过本地的磁盘空间来换取内存空间\n\n4.美术\n\n建立资源审查规范和审查工具：PBR材质贴图制作规范、场景制作资源控制规范、角色制作规范、特效制作规范；利用AssetPostprocessor建立审查工具。\n压缩纹理、优化精灵填充率、压缩动画、压缩声音、压缩UI（九宫格优于拉伸）；严格控制模型面数、纹理数、角色骨骼数。\n粒子：录制动画代替粒子、减少粒子数量、粒子不要碰撞\n角色：启用Optimize Game Objects减少节点,使用（SimpleLOD、Cruncher）优化面数。\n模型：导入检查Read/Write only、Optimize Mesh、法线切线、color、禁用Mipmap\n压缩纹理问题：压缩可能导致色阶不足；无透明通道用ETC1,现在安卓不支持ETC2已不足5%，建议放弃分离通道办法。\nUI：尽可能将动态UI元素和静态UI元素分离到不同的UIPanel中（UI的重建以UIPanel为单位），从而尽可能将因为变动的UI元素引起的重构控制在较小的范围内； 尽可能让动态UI元素按照同步性进行划分，即运动频率不同的UI元素尽可能分离放在不同的UIPanel中； 尽可能让动态UI元素按照同步性进行划分，即运动频率不同的UI元素尽可能分离放在不同的UIPanel中；\nugui：可以充分利用canvas来切分不同元素。\n大贴图会导致卡顿，可以切分为多个加载。\niOS使用mp3压缩、Android使用Vorbis压缩\n\n\n5.批次\n\n开启static batch\n开启dynamic batch：要求模型小于900顶点，用法线小于300，用切线小于180，缩放不一致、使用lightmap、多通道材质等会使dynamic batch无效。\n减少GameObject，场景模型数量对fps影响巨大。\n批次不是越少越好，过大的渲染数据会给总线传输带来压力。\n\n6.物理\n\n不需要移动的物体设为Static\n不要用Mesh碰撞，角色不用碰撞体\n触发器逻辑优化\n寻路频率、AI逻辑频率 、Fixed Timestep、降帧到30\n出现卡顿的复杂计算，例如寻路、大量资源加载 可以用分帧或者协成异步来处理","source":"_posts/性能优化相关.md","raw":"---\ntitle: 性能优化相关\ncategories:\n- Unity\n---\n1.渲染\n\n- 利用reflect probe代替反射、折射，尽量不用RTT、GrabPass、RenderWithShader、CommandBuffer.Blit (BuiltinRenderTextureType.CurrentActive...)\n- 建立统一后处理框架(bloom、hdr、DOF等)代替多后处理，可以共用模糊函数，减少多次blit；另外要注意RTT的尺寸。\n- 空气折射、热浪扭曲等使用GrabPass不是所有硬件都支持，改为RTT或者后处理来优化。\n- 建立统一shader材质代替单一shader，充分利用shader_feature、multi_compile，并将宏开关显示于界面。\n- 图像混合代替多通道纹理，阴影投射、阴影接收、MetaPass、forwardadd 等pass不需要时要剔除。\n- 少用alpha test、discard、clip、Alpha Converage等，因为会影响Early-Z Culling、HSR的优化。\n- 避免Alpha Blend穿透问题（权重混合、深度剥离等透明排序方法代价太大了）。\n- 光照贴图代替动态阴影、尽量不用实时光；阴影贴图、环境贴图用16位代替32位；利用projector+rtt或者光圈代替实时阴影。\n- 将环境参数（风、雨、太阳）等shader全局参数统一管理。\n- 非主角可以用matcap代替pbr、无金属不一定要用pbr，仔细选择物理渲染所用的FDG（F:schlick、cook-torrance、lerp、要求不高用4次方，D：blinn-phong、beckmann、GGX、GGX Anisotropic,G:neumann、cook-torrance、Kelemen、SmithGGX；standard shader要注意选择BRDF1-BRDF3），渲染要求不高时不用GGX；可以用LH来优化GGX。\n- 用fixed、half代替float,建立shader统一类型（fixed效率是float的4倍，half是float的2倍），小心选择shader变量的修饰(uniform、static、全局),选择Mobile或Unlit目录下shader\n- 使用高低配渲染，内存足够时可以考虑开启mipmap\n- 使用surface shader注意关掉不用的功能，比如：noshadow、noambient、novertexlights、nolightmap、nodynlightmap、nodirlightmap、nofog、nometa、noforwardadd等\n- standard shader的变体太多（3万多），导致编译时间较长，内存占用也很惊人（接近1G），如果使用要关掉没用的shader_feature,比如：==**_PARALLAXMAP、SHADOWS_SOFT、DIRLIGHTMAP_COMBINED DIRLIGHTMAP_SEPARATE、_DETAIL_MULX2、_ALPHAPREMULTIPLY_ON；另外要去掉多余的pass** #F44336==\n- shaderforge、Amplify Shader Editor生成的shader有多余代码要程序专门优化，Amplify Shader Editor功能更强大一些，而且开源，建议学习。\n- 不要用unity自带terrian，因为即使只用3张splat图，shader也是对应4个的，建议T4M或者转为mesh。\n- 模型和材质相同且数量巨大时用Instance来优化，比如草。\n- 利用查找纹理(LUT)来优化复杂的光照渲染，比如：皮肤、头发、喷漆等。\n- 尽量不要使用Procedural Sky，计算瑞丽散射和米氏散射效率比较低。\n- 尽量不要使用speedtree，改为模型加简单树叶动画，不过SpeedTreeWind.cginc里面的动画函数很丰富，- TerrianEngine中的SmoothTriangleWave很好用。\n- 多用调试工具检查shader性能，常用工具有：FrameDebug、Nsight、RenderDoc 、AMD GPU -ShaderAnalyzer / PVRShaderEditor、Adreno Profiler 、腾讯Cube、UWA等；另外可以内置GM界面，比如开关阴影，批量替换shader等方便真机调试。\n\n> 另一方面，Matcap是完全不考虑光照影响的渲染方法，因此也不存在能量守恒，只能通过采样贴图的绘制做出能量守恒的效果，所以不是真正的PBR，也因此能做出很多PBR无法实现的效果。\n\n\n\n2.脚本\n\n减少GetComponent、find等查找函数在Update等循环函数中的调用、go.CompareTag代替go.tag 、\n减少SendMessage等同步函数调用；减少字符串连接；for代替foreach，5.5以后版本foreach已经优化过了；少用linq；\n大资源改为异步加载\n合理处理协程调用\n将AI、网络等放在单独线程\n发布优化：关闭log、剔除代码\n伪随机\n脚本挂载类改为Manager等全局类实现\nlua中尽量不实现update、fixedupdate等循环函数，lua和csharp互调用的效率比较低。\n\n3.内存管理\n\n池子管理粒子、float UI等小资源，频繁地GC会造成卡顿\n必要时主动调用GC.Collect()\n按照不同资源、不同设备管理资源生命周期，Resources.Load和Assetbundle统一接口，利用引用计数来管理生命周期，并打印和观察生命周期。保证资源随场景而卸载，不常驻内存，确定哪些是预加载，哪些泄漏。\n内存泄漏（减少驻留内存）：Container内资源不remove掉用Resources.UnloadUnusedAssets是卸载不掉的；对于这种情况，建议直接通过Profiler Memory中的Take Sample来对其进行检测，通过直接查看WebStream或SerializedFile中的AssetBundle名称，即可判断是否存在“泄露”情况；通过Android PSS/iOS Instrument反馈的App线程内存来查看；\n堆内存过大：避免一次性堆内存的过大分配，Mono的堆内存一旦分配，就不会返还给系统，这意味着Mono的堆内存是只升不降的。常见：高频调用new；log输出；\nCPU占用高：NGui的重建网格导致UIPanel.LateUpdate（按照静止、移动、高频移动来切分）；NGUI锚点自身的更新逻辑也会消耗不少CPU开销。即使是在控件静止不动的情况下，控件的锚点也会每帧更新（见UIWidget.OnUpdate函数），而且它的更新是递归式的，使CPU占用率更高。因此我们修改了NGUI的内部代码，使锚点只在必要时更新。一般只在控件初始化和屏幕大小发生变化时更新即可。不过这个优化的代价是控件的顶点位置发生变化的时候（比如控件在运动，或控件大小改变等），上层逻辑需要自己负责更新锚点。 加载用协程； 控制同一个UIPanel中动态UI元素的数量，数量越多，所创建的Mesh越大，从而使得重构的开销显著增加。比如，战斗过程中的HUD血条可能会大量出现，此时，建议研发团队将运动血条分离成不同的UIPanel，每组UIPanel下5~10个动态UI为宜。这种做法，其本质是从概率上尽可能降低单帧中UIPanel的重建开销。\n资源冗余：AssetBundle打包打到多份中；动态修改资源导致的Instance拷贝多份（比如动态修改材质，Renderer.meterial，Animation.AddClip）。\n磁盘空间换内存：对于占用WebStream较大的AssetBundle文件（如UI Atlas相关的AssetBundle文件等），建议使用LoadFromCacheOrDownLoad或CreateFromFile来进行替换，即将解压后的AssetBundle数据存储于本地Cache中进行使用。这种做法非常适合于内存特别吃紧的项目，即通过本地的磁盘空间来换取内存空间\n\n4.美术\n\n建立资源审查规范和审查工具：PBR材质贴图制作规范、场景制作资源控制规范、角色制作规范、特效制作规范；利用AssetPostprocessor建立审查工具。\n压缩纹理、优化精灵填充率、压缩动画、压缩声音、压缩UI（九宫格优于拉伸）；严格控制模型面数、纹理数、角色骨骼数。\n粒子：录制动画代替粒子、减少粒子数量、粒子不要碰撞\n角色：启用Optimize Game Objects减少节点,使用（SimpleLOD、Cruncher）优化面数。\n模型：导入检查Read/Write only、Optimize Mesh、法线切线、color、禁用Mipmap\n压缩纹理问题：压缩可能导致色阶不足；无透明通道用ETC1,现在安卓不支持ETC2已不足5%，建议放弃分离通道办法。\nUI：尽可能将动态UI元素和静态UI元素分离到不同的UIPanel中（UI的重建以UIPanel为单位），从而尽可能将因为变动的UI元素引起的重构控制在较小的范围内； 尽可能让动态UI元素按照同步性进行划分，即运动频率不同的UI元素尽可能分离放在不同的UIPanel中； 尽可能让动态UI元素按照同步性进行划分，即运动频率不同的UI元素尽可能分离放在不同的UIPanel中；\nugui：可以充分利用canvas来切分不同元素。\n大贴图会导致卡顿，可以切分为多个加载。\niOS使用mp3压缩、Android使用Vorbis压缩\n\n\n5.批次\n\n开启static batch\n开启dynamic batch：要求模型小于900顶点，用法线小于300，用切线小于180，缩放不一致、使用lightmap、多通道材质等会使dynamic batch无效。\n减少GameObject，场景模型数量对fps影响巨大。\n批次不是越少越好，过大的渲染数据会给总线传输带来压力。\n\n6.物理\n\n不需要移动的物体设为Static\n不要用Mesh碰撞，角色不用碰撞体\n触发器逻辑优化\n寻路频率、AI逻辑频率 、Fixed Timestep、降帧到30\n出现卡顿的复杂计算，例如寻路、大量资源加载 可以用分帧或者协成异步来处理","slug":"性能优化相关","published":1,"date":"2020-09-08T03:23:20.891Z","updated":"2020-09-08T03:23:20.891Z","_id":"ckdpcluzt004l8sr3e7qy23fv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1.渲染</p>\n<ul>\n<li>利用reflect probe代替反射、折射，尽量不用RTT、GrabPass、RenderWithShader、CommandBuffer.Blit (BuiltinRenderTextureType.CurrentActive…)</li>\n<li>建立统一后处理框架(bloom、hdr、DOF等)代替多后处理，可以共用模糊函数，减少多次blit；另外要注意RTT的尺寸。</li>\n<li>空气折射、热浪扭曲等使用GrabPass不是所有硬件都支持，改为RTT或者后处理来优化。</li>\n<li>建立统一shader材质代替单一shader，充分利用shader_feature、multi_compile，并将宏开关显示于界面。</li>\n<li>图像混合代替多通道纹理，阴影投射、阴影接收、MetaPass、forwardadd 等pass不需要时要剔除。</li>\n<li>少用alpha test、discard、clip、Alpha Converage等，因为会影响Early-Z Culling、HSR的优化。</li>\n<li>避免Alpha Blend穿透问题（权重混合、深度剥离等透明排序方法代价太大了）。</li>\n<li>光照贴图代替动态阴影、尽量不用实时光；阴影贴图、环境贴图用16位代替32位；利用projector+rtt或者光圈代替实时阴影。</li>\n<li>将环境参数（风、雨、太阳）等shader全局参数统一管理。</li>\n<li>非主角可以用matcap代替pbr、无金属不一定要用pbr，仔细选择物理渲染所用的FDG（F:schlick、cook-torrance、lerp、要求不高用4次方，D：blinn-phong、beckmann、GGX、GGX Anisotropic,G:neumann、cook-torrance、Kelemen、SmithGGX；standard shader要注意选择BRDF1-BRDF3），渲染要求不高时不用GGX；可以用LH来优化GGX。</li>\n<li>用fixed、half代替float,建立shader统一类型（fixed效率是float的4倍，half是float的2倍），小心选择shader变量的修饰(uniform、static、全局),选择Mobile或Unlit目录下shader</li>\n<li>使用高低配渲染，内存足够时可以考虑开启mipmap</li>\n<li>使用surface shader注意关掉不用的功能，比如：noshadow、noambient、novertexlights、nolightmap、nodynlightmap、nodirlightmap、nofog、nometa、noforwardadd等</li>\n<li>standard shader的变体太多（3万多），导致编译时间较长，内存占用也很惊人（接近1G），如果使用要关掉没用的shader_feature,比如：==<strong>_PARALLAXMAP、SHADOWS_SOFT、DIRLIGHTMAP_COMBINED DIRLIGHTMAP_SEPARATE、_DETAIL_MULX2、_ALPHAPREMULTIPLY_ON；另外要去掉多余的pass</strong> #F44336==</li>\n<li>shaderforge、Amplify Shader Editor生成的shader有多余代码要程序专门优化，Amplify Shader Editor功能更强大一些，而且开源，建议学习。</li>\n<li>不要用unity自带terrian，因为即使只用3张splat图，shader也是对应4个的，建议T4M或者转为mesh。</li>\n<li>模型和材质相同且数量巨大时用Instance来优化，比如草。</li>\n<li>利用查找纹理(LUT)来优化复杂的光照渲染，比如：皮肤、头发、喷漆等。</li>\n<li>尽量不要使用Procedural Sky，计算瑞丽散射和米氏散射效率比较低。</li>\n<li>尽量不要使用speedtree，改为模型加简单树叶动画，不过SpeedTreeWind.cginc里面的动画函数很丰富，- TerrianEngine中的SmoothTriangleWave很好用。</li>\n<li>多用调试工具检查shader性能，常用工具有：FrameDebug、Nsight、RenderDoc 、AMD GPU -ShaderAnalyzer / PVRShaderEditor、Adreno Profiler 、腾讯Cube、UWA等；另外可以内置GM界面，比如开关阴影，批量替换shader等方便真机调试。</li>\n</ul>\n<blockquote>\n<p>另一方面，Matcap是完全不考虑光照影响的渲染方法，因此也不存在能量守恒，只能通过采样贴图的绘制做出能量守恒的效果，所以不是真正的PBR，也因此能做出很多PBR无法实现的效果。</p>\n</blockquote>\n<p>2.脚本</p>\n<p>减少GetComponent、find等查找函数在Update等循环函数中的调用、go.CompareTag代替go.tag 、<br>减少SendMessage等同步函数调用；减少字符串连接；for代替foreach，5.5以后版本foreach已经优化过了；少用linq；<br>大资源改为异步加载<br>合理处理协程调用<br>将AI、网络等放在单独线程<br>发布优化：关闭log、剔除代码<br>伪随机<br>脚本挂载类改为Manager等全局类实现<br>lua中尽量不实现update、fixedupdate等循环函数，lua和csharp互调用的效率比较低。</p>\n<p>3.内存管理</p>\n<p>池子管理粒子、float UI等小资源，频繁地GC会造成卡顿<br>必要时主动调用GC.Collect()<br>按照不同资源、不同设备管理资源生命周期，Resources.Load和Assetbundle统一接口，利用引用计数来管理生命周期，并打印和观察生命周期。保证资源随场景而卸载，不常驻内存，确定哪些是预加载，哪些泄漏。<br>内存泄漏（减少驻留内存）：Container内资源不remove掉用Resources.UnloadUnusedAssets是卸载不掉的；对于这种情况，建议直接通过Profiler Memory中的Take Sample来对其进行检测，通过直接查看WebStream或SerializedFile中的AssetBundle名称，即可判断是否存在“泄露”情况；通过Android PSS/iOS Instrument反馈的App线程内存来查看；<br>堆内存过大：避免一次性堆内存的过大分配，Mono的堆内存一旦分配，就不会返还给系统，这意味着Mono的堆内存是只升不降的。常见：高频调用new；log输出；<br>CPU占用高：NGui的重建网格导致UIPanel.LateUpdate（按照静止、移动、高频移动来切分）；NGUI锚点自身的更新逻辑也会消耗不少CPU开销。即使是在控件静止不动的情况下，控件的锚点也会每帧更新（见UIWidget.OnUpdate函数），而且它的更新是递归式的，使CPU占用率更高。因此我们修改了NGUI的内部代码，使锚点只在必要时更新。一般只在控件初始化和屏幕大小发生变化时更新即可。不过这个优化的代价是控件的顶点位置发生变化的时候（比如控件在运动，或控件大小改变等），上层逻辑需要自己负责更新锚点。 加载用协程； 控制同一个UIPanel中动态UI元素的数量，数量越多，所创建的Mesh越大，从而使得重构的开销显著增加。比如，战斗过程中的HUD血条可能会大量出现，此时，建议研发团队将运动血条分离成不同的UIPanel，每组UIPanel下5~10个动态UI为宜。这种做法，其本质是从概率上尽可能降低单帧中UIPanel的重建开销。<br>资源冗余：AssetBundle打包打到多份中；动态修改资源导致的Instance拷贝多份（比如动态修改材质，Renderer.meterial，Animation.AddClip）。<br>磁盘空间换内存：对于占用WebStream较大的AssetBundle文件（如UI Atlas相关的AssetBundle文件等），建议使用LoadFromCacheOrDownLoad或CreateFromFile来进行替换，即将解压后的AssetBundle数据存储于本地Cache中进行使用。这种做法非常适合于内存特别吃紧的项目，即通过本地的磁盘空间来换取内存空间</p>\n<p>4.美术</p>\n<p>建立资源审查规范和审查工具：PBR材质贴图制作规范、场景制作资源控制规范、角色制作规范、特效制作规范；利用AssetPostprocessor建立审查工具。<br>压缩纹理、优化精灵填充率、压缩动画、压缩声音、压缩UI（九宫格优于拉伸）；严格控制模型面数、纹理数、角色骨骼数。<br>粒子：录制动画代替粒子、减少粒子数量、粒子不要碰撞<br>角色：启用Optimize Game Objects减少节点,使用（SimpleLOD、Cruncher）优化面数。<br>模型：导入检查Read/Write only、Optimize Mesh、法线切线、color、禁用Mipmap<br>压缩纹理问题：压缩可能导致色阶不足；无透明通道用ETC1,现在安卓不支持ETC2已不足5%，建议放弃分离通道办法。<br>UI：尽可能将动态UI元素和静态UI元素分离到不同的UIPanel中（UI的重建以UIPanel为单位），从而尽可能将因为变动的UI元素引起的重构控制在较小的范围内； 尽可能让动态UI元素按照同步性进行划分，即运动频率不同的UI元素尽可能分离放在不同的UIPanel中； 尽可能让动态UI元素按照同步性进行划分，即运动频率不同的UI元素尽可能分离放在不同的UIPanel中；<br>ugui：可以充分利用canvas来切分不同元素。<br>大贴图会导致卡顿，可以切分为多个加载。<br>iOS使用mp3压缩、Android使用Vorbis压缩</p>\n<p>5.批次</p>\n<p>开启static batch<br>开启dynamic batch：要求模型小于900顶点，用法线小于300，用切线小于180，缩放不一致、使用lightmap、多通道材质等会使dynamic batch无效。<br>减少GameObject，场景模型数量对fps影响巨大。<br>批次不是越少越好，过大的渲染数据会给总线传输带来压力。</p>\n<p>6.物理</p>\n<p>不需要移动的物体设为Static<br>不要用Mesh碰撞，角色不用碰撞体<br>触发器逻辑优化<br>寻路频率、AI逻辑频率 、Fixed Timestep、降帧到30<br>出现卡顿的复杂计算，例如寻路、大量资源加载 可以用分帧或者协成异步来处理</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.渲染</p>\n<ul>\n<li>利用reflect probe代替反射、折射，尽量不用RTT、GrabPass、RenderWithShader、CommandBuffer.Blit (BuiltinRenderTextureType.CurrentActive…)</li>\n<li>建立统一后处理框架(bloom、hdr、DOF等)代替多后处理，可以共用模糊函数，减少多次blit；另外要注意RTT的尺寸。</li>\n<li>空气折射、热浪扭曲等使用GrabPass不是所有硬件都支持，改为RTT或者后处理来优化。</li>\n<li>建立统一shader材质代替单一shader，充分利用shader_feature、multi_compile，并将宏开关显示于界面。</li>\n<li>图像混合代替多通道纹理，阴影投射、阴影接收、MetaPass、forwardadd 等pass不需要时要剔除。</li>\n<li>少用alpha test、discard、clip、Alpha Converage等，因为会影响Early-Z Culling、HSR的优化。</li>\n<li>避免Alpha Blend穿透问题（权重混合、深度剥离等透明排序方法代价太大了）。</li>\n<li>光照贴图代替动态阴影、尽量不用实时光；阴影贴图、环境贴图用16位代替32位；利用projector+rtt或者光圈代替实时阴影。</li>\n<li>将环境参数（风、雨、太阳）等shader全局参数统一管理。</li>\n<li>非主角可以用matcap代替pbr、无金属不一定要用pbr，仔细选择物理渲染所用的FDG（F:schlick、cook-torrance、lerp、要求不高用4次方，D：blinn-phong、beckmann、GGX、GGX Anisotropic,G:neumann、cook-torrance、Kelemen、SmithGGX；standard shader要注意选择BRDF1-BRDF3），渲染要求不高时不用GGX；可以用LH来优化GGX。</li>\n<li>用fixed、half代替float,建立shader统一类型（fixed效率是float的4倍，half是float的2倍），小心选择shader变量的修饰(uniform、static、全局),选择Mobile或Unlit目录下shader</li>\n<li>使用高低配渲染，内存足够时可以考虑开启mipmap</li>\n<li>使用surface shader注意关掉不用的功能，比如：noshadow、noambient、novertexlights、nolightmap、nodynlightmap、nodirlightmap、nofog、nometa、noforwardadd等</li>\n<li>standard shader的变体太多（3万多），导致编译时间较长，内存占用也很惊人（接近1G），如果使用要关掉没用的shader_feature,比如：==<strong>_PARALLAXMAP、SHADOWS_SOFT、DIRLIGHTMAP_COMBINED DIRLIGHTMAP_SEPARATE、_DETAIL_MULX2、_ALPHAPREMULTIPLY_ON；另外要去掉多余的pass</strong> #F44336==</li>\n<li>shaderforge、Amplify Shader Editor生成的shader有多余代码要程序专门优化，Amplify Shader Editor功能更强大一些，而且开源，建议学习。</li>\n<li>不要用unity自带terrian，因为即使只用3张splat图，shader也是对应4个的，建议T4M或者转为mesh。</li>\n<li>模型和材质相同且数量巨大时用Instance来优化，比如草。</li>\n<li>利用查找纹理(LUT)来优化复杂的光照渲染，比如：皮肤、头发、喷漆等。</li>\n<li>尽量不要使用Procedural Sky，计算瑞丽散射和米氏散射效率比较低。</li>\n<li>尽量不要使用speedtree，改为模型加简单树叶动画，不过SpeedTreeWind.cginc里面的动画函数很丰富，- TerrianEngine中的SmoothTriangleWave很好用。</li>\n<li>多用调试工具检查shader性能，常用工具有：FrameDebug、Nsight、RenderDoc 、AMD GPU -ShaderAnalyzer / PVRShaderEditor、Adreno Profiler 、腾讯Cube、UWA等；另外可以内置GM界面，比如开关阴影，批量替换shader等方便真机调试。</li>\n</ul>\n<blockquote>\n<p>另一方面，Matcap是完全不考虑光照影响的渲染方法，因此也不存在能量守恒，只能通过采样贴图的绘制做出能量守恒的效果，所以不是真正的PBR，也因此能做出很多PBR无法实现的效果。</p>\n</blockquote>\n<p>2.脚本</p>\n<p>减少GetComponent、find等查找函数在Update等循环函数中的调用、go.CompareTag代替go.tag 、<br>减少SendMessage等同步函数调用；减少字符串连接；for代替foreach，5.5以后版本foreach已经优化过了；少用linq；<br>大资源改为异步加载<br>合理处理协程调用<br>将AI、网络等放在单独线程<br>发布优化：关闭log、剔除代码<br>伪随机<br>脚本挂载类改为Manager等全局类实现<br>lua中尽量不实现update、fixedupdate等循环函数，lua和csharp互调用的效率比较低。</p>\n<p>3.内存管理</p>\n<p>池子管理粒子、float UI等小资源，频繁地GC会造成卡顿<br>必要时主动调用GC.Collect()<br>按照不同资源、不同设备管理资源生命周期，Resources.Load和Assetbundle统一接口，利用引用计数来管理生命周期，并打印和观察生命周期。保证资源随场景而卸载，不常驻内存，确定哪些是预加载，哪些泄漏。<br>内存泄漏（减少驻留内存）：Container内资源不remove掉用Resources.UnloadUnusedAssets是卸载不掉的；对于这种情况，建议直接通过Profiler Memory中的Take Sample来对其进行检测，通过直接查看WebStream或SerializedFile中的AssetBundle名称，即可判断是否存在“泄露”情况；通过Android PSS/iOS Instrument反馈的App线程内存来查看；<br>堆内存过大：避免一次性堆内存的过大分配，Mono的堆内存一旦分配，就不会返还给系统，这意味着Mono的堆内存是只升不降的。常见：高频调用new；log输出；<br>CPU占用高：NGui的重建网格导致UIPanel.LateUpdate（按照静止、移动、高频移动来切分）；NGUI锚点自身的更新逻辑也会消耗不少CPU开销。即使是在控件静止不动的情况下，控件的锚点也会每帧更新（见UIWidget.OnUpdate函数），而且它的更新是递归式的，使CPU占用率更高。因此我们修改了NGUI的内部代码，使锚点只在必要时更新。一般只在控件初始化和屏幕大小发生变化时更新即可。不过这个优化的代价是控件的顶点位置发生变化的时候（比如控件在运动，或控件大小改变等），上层逻辑需要自己负责更新锚点。 加载用协程； 控制同一个UIPanel中动态UI元素的数量，数量越多，所创建的Mesh越大，从而使得重构的开销显著增加。比如，战斗过程中的HUD血条可能会大量出现，此时，建议研发团队将运动血条分离成不同的UIPanel，每组UIPanel下5~10个动态UI为宜。这种做法，其本质是从概率上尽可能降低单帧中UIPanel的重建开销。<br>资源冗余：AssetBundle打包打到多份中；动态修改资源导致的Instance拷贝多份（比如动态修改材质，Renderer.meterial，Animation.AddClip）。<br>磁盘空间换内存：对于占用WebStream较大的AssetBundle文件（如UI Atlas相关的AssetBundle文件等），建议使用LoadFromCacheOrDownLoad或CreateFromFile来进行替换，即将解压后的AssetBundle数据存储于本地Cache中进行使用。这种做法非常适合于内存特别吃紧的项目，即通过本地的磁盘空间来换取内存空间</p>\n<p>4.美术</p>\n<p>建立资源审查规范和审查工具：PBR材质贴图制作规范、场景制作资源控制规范、角色制作规范、特效制作规范；利用AssetPostprocessor建立审查工具。<br>压缩纹理、优化精灵填充率、压缩动画、压缩声音、压缩UI（九宫格优于拉伸）；严格控制模型面数、纹理数、角色骨骼数。<br>粒子：录制动画代替粒子、减少粒子数量、粒子不要碰撞<br>角色：启用Optimize Game Objects减少节点,使用（SimpleLOD、Cruncher）优化面数。<br>模型：导入检查Read/Write only、Optimize Mesh、法线切线、color、禁用Mipmap<br>压缩纹理问题：压缩可能导致色阶不足；无透明通道用ETC1,现在安卓不支持ETC2已不足5%，建议放弃分离通道办法。<br>UI：尽可能将动态UI元素和静态UI元素分离到不同的UIPanel中（UI的重建以UIPanel为单位），从而尽可能将因为变动的UI元素引起的重构控制在较小的范围内； 尽可能让动态UI元素按照同步性进行划分，即运动频率不同的UI元素尽可能分离放在不同的UIPanel中； 尽可能让动态UI元素按照同步性进行划分，即运动频率不同的UI元素尽可能分离放在不同的UIPanel中；<br>ugui：可以充分利用canvas来切分不同元素。<br>大贴图会导致卡顿，可以切分为多个加载。<br>iOS使用mp3压缩、Android使用Vorbis压缩</p>\n<p>5.批次</p>\n<p>开启static batch<br>开启dynamic batch：要求模型小于900顶点，用法线小于300，用切线小于180，缩放不一致、使用lightmap、多通道材质等会使dynamic batch无效。<br>减少GameObject，场景模型数量对fps影响巨大。<br>批次不是越少越好，过大的渲染数据会给总线传输带来压力。</p>\n<p>6.物理</p>\n<p>不需要移动的物体设为Static<br>不要用Mesh碰撞，角色不用碰撞体<br>触发器逻辑优化<br>寻路频率、AI逻辑频率 、Fixed Timestep、降帧到30<br>出现卡顿的复杂计算，例如寻路、大量资源加载 可以用分帧或者协成异步来处理</p>\n"},{"title":"开言学习笔记1","_content":"\n##  Housewarming Party 乔迁派对\n\n#### Dialog\n\n* A: Hey guys, glad you could make it! Come on in!\n* B: Thanks for inviting us! Wow, I love your new place, it's gorgeus!\n* A: Thanks. I moved in last week. I'm still setting up the living room.\n* B: I love the layout. The view is great too!\n* A: Thanks. I was lucky to find this place. Come on, I'll show you around.\n* B: Oh, here, before I forget, I brought you a housewarming gift.\n* A: Wine! Thank you. You shouldn't have.\n* B: Oh, it's my pleasure. Should I put it on the table?\n* A: Sure. After that, come with me. I want you to meet my new neighbors.\n* B: Sure, I'd love to.\n\n#### Phrases\n* Come on in!\n* Setting up\n* show you around\n* housewarming gift\n\n## Opening a bank account\n\n#### Words\n* teller\n* balance\n* checking account借记账号 & saving account存储账号\n > checking account: day to day banking. use every day\n* interest 利息\n* fees\n* doable 可行的\n* deposit v.存款 + deposit some money\n* wage\n \n #### Dialog\n * A: Hi there, how can I help you today?\n * B: Hi, I'd like to open a personal bank account.\n * A: OK, are you looking to set up a checking account, savings acount or both?\n * B: Hmm. What's the difference?\n * A: Checking is for day-to-day banking and savings help you earn interest.\n * B:Alright, I'll get both. Are there any monthly fee?\n * A: Our basic account is just $12 a month. But if your balance is over $1500, it's free.\n * B: Ok, that's totally doable, I'll go with that.\n * A: Great, how much would you to deposit today? The minimum is $25.\n * B: I'll put $2000 into checking and $1000 into savings.\n * A: Excellent! Now all I need is you ID and some personal information.\n \n #### Phrases\n * go with that  == choose that\n\n## Overdue bills\n\n#### Sentences\n* The baby is overdue. \n* You are overdue for something.\n\n#### Words&Phrases\n* get on top of == get in control of \n* shark\n* loan\n* pay off\n* ten out of ten //10总分得10分\n* borrow from the bank\n* utility\n* past due & overdue\n* cut off\n* budgets a little == plan spending \n* get off light == punishment was really not all that terrible.\n \n#### Dialog\n\n\n## Calling the landlord\n\n#### Phrases\n* drop by 顺道拜访\n* broke down\n* have issues\n\n#### Dialog\n* A:Hi Bob. It's Kelly, do you have a moment?\n* B:Of cource Kelly, what can I do for you?\n* A:Well, I'm having a few issues at my apartment.\n* B:Oh, is the wifi going in and out again?\n* A:No, the connection is ok. but the water heater is broken, so only cold water comes out.\n* B:Oh, are you home tomorrow? I can drop by and have a look.\n* A:Sure, could you also look at the washing machine? it broke down and won't turn on.\n* B:Hmm.. was there anything stuck in the machine?\n* A:No, I think it's just old. would it be possible to have it repaired by Friday?\n* B:Well, I can't make any promises, but I'll try my best.\n \n ","source":"_posts/开言学习笔记1.md","raw":"---\ntitle: 开言学习笔记1\ncategories:\n- 英语学习\ntags: \n- English\n- Note\n---\n\n##  Housewarming Party 乔迁派对\n\n#### Dialog\n\n* A: Hey guys, glad you could make it! Come on in!\n* B: Thanks for inviting us! Wow, I love your new place, it's gorgeus!\n* A: Thanks. I moved in last week. I'm still setting up the living room.\n* B: I love the layout. The view is great too!\n* A: Thanks. I was lucky to find this place. Come on, I'll show you around.\n* B: Oh, here, before I forget, I brought you a housewarming gift.\n* A: Wine! Thank you. You shouldn't have.\n* B: Oh, it's my pleasure. Should I put it on the table?\n* A: Sure. After that, come with me. I want you to meet my new neighbors.\n* B: Sure, I'd love to.\n\n#### Phrases\n* Come on in!\n* Setting up\n* show you around\n* housewarming gift\n\n## Opening a bank account\n\n#### Words\n* teller\n* balance\n* checking account借记账号 & saving account存储账号\n > checking account: day to day banking. use every day\n* interest 利息\n* fees\n* doable 可行的\n* deposit v.存款 + deposit some money\n* wage\n \n #### Dialog\n * A: Hi there, how can I help you today?\n * B: Hi, I'd like to open a personal bank account.\n * A: OK, are you looking to set up a checking account, savings acount or both?\n * B: Hmm. What's the difference?\n * A: Checking is for day-to-day banking and savings help you earn interest.\n * B:Alright, I'll get both. Are there any monthly fee?\n * A: Our basic account is just $12 a month. But if your balance is over $1500, it's free.\n * B: Ok, that's totally doable, I'll go with that.\n * A: Great, how much would you to deposit today? The minimum is $25.\n * B: I'll put $2000 into checking and $1000 into savings.\n * A: Excellent! Now all I need is you ID and some personal information.\n \n #### Phrases\n * go with that  == choose that\n\n## Overdue bills\n\n#### Sentences\n* The baby is overdue. \n* You are overdue for something.\n\n#### Words&Phrases\n* get on top of == get in control of \n* shark\n* loan\n* pay off\n* ten out of ten //10总分得10分\n* borrow from the bank\n* utility\n* past due & overdue\n* cut off\n* budgets a little == plan spending \n* get off light == punishment was really not all that terrible.\n \n#### Dialog\n\n\n## Calling the landlord\n\n#### Phrases\n* drop by 顺道拜访\n* broke down\n* have issues\n\n#### Dialog\n* A:Hi Bob. It's Kelly, do you have a moment?\n* B:Of cource Kelly, what can I do for you?\n* A:Well, I'm having a few issues at my apartment.\n* B:Oh, is the wifi going in and out again?\n* A:No, the connection is ok. but the water heater is broken, so only cold water comes out.\n* B:Oh, are you home tomorrow? I can drop by and have a look.\n* A:Sure, could you also look at the washing machine? it broke down and won't turn on.\n* B:Hmm.. was there anything stuck in the machine?\n* A:No, I think it's just old. would it be possible to have it repaired by Friday?\n* B:Well, I can't make any promises, but I'll try my best.\n \n ","slug":"开言学习笔记1","published":1,"date":"2020-09-08T03:23:20.890Z","updated":"2020-09-08T03:23:20.890Z","_id":"ckdpcluzu004o8sr3kakv76u9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Housewarming-Party-乔迁派对\"><a href=\"#Housewarming-Party-乔迁派对\" class=\"headerlink\" title=\"Housewarming Party 乔迁派对\"></a>Housewarming Party 乔迁派对</h2><h4 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h4><ul>\n<li>A: Hey guys, glad you could make it! Come on in!</li>\n<li>B: Thanks for inviting us! Wow, I love your new place, it’s gorgeus!</li>\n<li>A: Thanks. I moved in last week. I’m still setting up the living room.</li>\n<li>B: I love the layout. The view is great too!</li>\n<li>A: Thanks. I was lucky to find this place. Come on, I’ll show you around.</li>\n<li>B: Oh, here, before I forget, I brought you a housewarming gift.</li>\n<li>A: Wine! Thank you. You shouldn’t have.</li>\n<li>B: Oh, it’s my pleasure. Should I put it on the table?</li>\n<li>A: Sure. After that, come with me. I want you to meet my new neighbors.</li>\n<li>B: Sure, I’d love to.</li>\n</ul>\n<h4 id=\"Phrases\"><a href=\"#Phrases\" class=\"headerlink\" title=\"Phrases\"></a>Phrases</h4><ul>\n<li>Come on in!</li>\n<li>Setting up</li>\n<li>show you around</li>\n<li>housewarming gift</li>\n</ul>\n<h2 id=\"Opening-a-bank-account\"><a href=\"#Opening-a-bank-account\" class=\"headerlink\" title=\"Opening a bank account\"></a>Opening a bank account</h2><h4 id=\"Words\"><a href=\"#Words\" class=\"headerlink\" title=\"Words\"></a>Words</h4><ul>\n<li><p>teller</p>\n</li>\n<li><p>balance</p>\n</li>\n<li><p>checking account借记账号 &amp; saving account存储账号</p>\n<blockquote>\n<p>checking account: day to day banking. use every day</p>\n</blockquote>\n</li>\n<li><p>interest 利息</p>\n</li>\n<li><p>fees</p>\n</li>\n<li><p>doable 可行的</p>\n</li>\n<li><p>deposit v.存款 + deposit some money</p>\n</li>\n<li><p>wage</p>\n<h4 id=\"Dialog-1\"><a href=\"#Dialog-1\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h4><ul>\n<li>A: Hi there, how can I help you today?</li>\n<li>B: Hi, I’d like to open a personal bank account.</li>\n<li>A: OK, are you looking to set up a checking account, savings acount or both?</li>\n<li>B: Hmm. What’s the difference?</li>\n<li>A: Checking is for day-to-day banking and savings help you earn interest.</li>\n<li>B:Alright, I’ll get both. Are there any monthly fee?</li>\n<li>A: Our basic account is just $12 a month. But if your balance is over $1500, it’s free.</li>\n<li>B: Ok, that’s totally doable, I’ll go with that.</li>\n<li>A: Great, how much would you to deposit today? The minimum is $25.</li>\n<li>B: I’ll put $2000 into checking and $1000 into savings.</li>\n<li>A: Excellent! Now all I need is you ID and some personal information.</li>\n</ul>\n<h4 id=\"Phrases-1\"><a href=\"#Phrases-1\" class=\"headerlink\" title=\"Phrases\"></a>Phrases</h4><ul>\n<li>go with that  == choose that</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Overdue-bills\"><a href=\"#Overdue-bills\" class=\"headerlink\" title=\"Overdue bills\"></a>Overdue bills</h2><h4 id=\"Sentences\"><a href=\"#Sentences\" class=\"headerlink\" title=\"Sentences\"></a>Sentences</h4><ul>\n<li>The baby is overdue. </li>\n<li>You are overdue for something.</li>\n</ul>\n<h4 id=\"Words-amp-Phrases\"><a href=\"#Words-amp-Phrases\" class=\"headerlink\" title=\"Words&amp;Phrases\"></a>Words&amp;Phrases</h4><ul>\n<li>get on top of == get in control of </li>\n<li>shark</li>\n<li>loan</li>\n<li>pay off</li>\n<li>ten out of ten //10总分得10分</li>\n<li>borrow from the bank</li>\n<li>utility</li>\n<li>past due &amp; overdue</li>\n<li>cut off</li>\n<li>budgets a little == plan spending </li>\n<li>get off light == punishment was really not all that terrible.</li>\n</ul>\n<h4 id=\"Dialog-2\"><a href=\"#Dialog-2\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h4><h2 id=\"Calling-the-landlord\"><a href=\"#Calling-the-landlord\" class=\"headerlink\" title=\"Calling the landlord\"></a>Calling the landlord</h2><h4 id=\"Phrases-2\"><a href=\"#Phrases-2\" class=\"headerlink\" title=\"Phrases\"></a>Phrases</h4><ul>\n<li>drop by 顺道拜访</li>\n<li>broke down</li>\n<li>have issues</li>\n</ul>\n<h4 id=\"Dialog-3\"><a href=\"#Dialog-3\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h4><ul>\n<li>A:Hi Bob. It’s Kelly, do you have a moment?</li>\n<li>B:Of cource Kelly, what can I do for you?</li>\n<li>A:Well, I’m having a few issues at my apartment.</li>\n<li>B:Oh, is the wifi going in and out again?</li>\n<li>A:No, the connection is ok. but the water heater is broken, so only cold water comes out.</li>\n<li>B:Oh, are you home tomorrow? I can drop by and have a look.</li>\n<li>A:Sure, could you also look at the washing machine? it broke down and won’t turn on.</li>\n<li>B:Hmm.. was there anything stuck in the machine?</li>\n<li>A:No, I think it’s just old. would it be possible to have it repaired by Friday?</li>\n<li>B:Well, I can’t make any promises, but I’ll try my best.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Housewarming-Party-乔迁派对\"><a href=\"#Housewarming-Party-乔迁派对\" class=\"headerlink\" title=\"Housewarming Party 乔迁派对\"></a>Housewarming Party 乔迁派对</h2><h4 id=\"Dialog\"><a href=\"#Dialog\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h4><ul>\n<li>A: Hey guys, glad you could make it! Come on in!</li>\n<li>B: Thanks for inviting us! Wow, I love your new place, it’s gorgeus!</li>\n<li>A: Thanks. I moved in last week. I’m still setting up the living room.</li>\n<li>B: I love the layout. The view is great too!</li>\n<li>A: Thanks. I was lucky to find this place. Come on, I’ll show you around.</li>\n<li>B: Oh, here, before I forget, I brought you a housewarming gift.</li>\n<li>A: Wine! Thank you. You shouldn’t have.</li>\n<li>B: Oh, it’s my pleasure. Should I put it on the table?</li>\n<li>A: Sure. After that, come with me. I want you to meet my new neighbors.</li>\n<li>B: Sure, I’d love to.</li>\n</ul>\n<h4 id=\"Phrases\"><a href=\"#Phrases\" class=\"headerlink\" title=\"Phrases\"></a>Phrases</h4><ul>\n<li>Come on in!</li>\n<li>Setting up</li>\n<li>show you around</li>\n<li>housewarming gift</li>\n</ul>\n<h2 id=\"Opening-a-bank-account\"><a href=\"#Opening-a-bank-account\" class=\"headerlink\" title=\"Opening a bank account\"></a>Opening a bank account</h2><h4 id=\"Words\"><a href=\"#Words\" class=\"headerlink\" title=\"Words\"></a>Words</h4><ul>\n<li><p>teller</p>\n</li>\n<li><p>balance</p>\n</li>\n<li><p>checking account借记账号 &amp; saving account存储账号</p>\n<blockquote>\n<p>checking account: day to day banking. use every day</p>\n</blockquote>\n</li>\n<li><p>interest 利息</p>\n</li>\n<li><p>fees</p>\n</li>\n<li><p>doable 可行的</p>\n</li>\n<li><p>deposit v.存款 + deposit some money</p>\n</li>\n<li><p>wage</p>\n<h4 id=\"Dialog-1\"><a href=\"#Dialog-1\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h4><ul>\n<li>A: Hi there, how can I help you today?</li>\n<li>B: Hi, I’d like to open a personal bank account.</li>\n<li>A: OK, are you looking to set up a checking account, savings acount or both?</li>\n<li>B: Hmm. What’s the difference?</li>\n<li>A: Checking is for day-to-day banking and savings help you earn interest.</li>\n<li>B:Alright, I’ll get both. Are there any monthly fee?</li>\n<li>A: Our basic account is just $12 a month. But if your balance is over $1500, it’s free.</li>\n<li>B: Ok, that’s totally doable, I’ll go with that.</li>\n<li>A: Great, how much would you to deposit today? The minimum is $25.</li>\n<li>B: I’ll put $2000 into checking and $1000 into savings.</li>\n<li>A: Excellent! Now all I need is you ID and some personal information.</li>\n</ul>\n<h4 id=\"Phrases-1\"><a href=\"#Phrases-1\" class=\"headerlink\" title=\"Phrases\"></a>Phrases</h4><ul>\n<li>go with that  == choose that</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Overdue-bills\"><a href=\"#Overdue-bills\" class=\"headerlink\" title=\"Overdue bills\"></a>Overdue bills</h2><h4 id=\"Sentences\"><a href=\"#Sentences\" class=\"headerlink\" title=\"Sentences\"></a>Sentences</h4><ul>\n<li>The baby is overdue. </li>\n<li>You are overdue for something.</li>\n</ul>\n<h4 id=\"Words-amp-Phrases\"><a href=\"#Words-amp-Phrases\" class=\"headerlink\" title=\"Words&amp;Phrases\"></a>Words&amp;Phrases</h4><ul>\n<li>get on top of == get in control of </li>\n<li>shark</li>\n<li>loan</li>\n<li>pay off</li>\n<li>ten out of ten //10总分得10分</li>\n<li>borrow from the bank</li>\n<li>utility</li>\n<li>past due &amp; overdue</li>\n<li>cut off</li>\n<li>budgets a little == plan spending </li>\n<li>get off light == punishment was really not all that terrible.</li>\n</ul>\n<h4 id=\"Dialog-2\"><a href=\"#Dialog-2\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h4><h2 id=\"Calling-the-landlord\"><a href=\"#Calling-the-landlord\" class=\"headerlink\" title=\"Calling the landlord\"></a>Calling the landlord</h2><h4 id=\"Phrases-2\"><a href=\"#Phrases-2\" class=\"headerlink\" title=\"Phrases\"></a>Phrases</h4><ul>\n<li>drop by 顺道拜访</li>\n<li>broke down</li>\n<li>have issues</li>\n</ul>\n<h4 id=\"Dialog-3\"><a href=\"#Dialog-3\" class=\"headerlink\" title=\"Dialog\"></a>Dialog</h4><ul>\n<li>A:Hi Bob. It’s Kelly, do you have a moment?</li>\n<li>B:Of cource Kelly, what can I do for you?</li>\n<li>A:Well, I’m having a few issues at my apartment.</li>\n<li>B:Oh, is the wifi going in and out again?</li>\n<li>A:No, the connection is ok. but the water heater is broken, so only cold water comes out.</li>\n<li>B:Oh, are you home tomorrow? I can drop by and have a look.</li>\n<li>A:Sure, could you also look at the washing machine? it broke down and won’t turn on.</li>\n<li>B:Hmm.. was there anything stuck in the machine?</li>\n<li>A:No, I think it’s just old. would it be possible to have it repaired by Friday?</li>\n<li>B:Well, I can’t make any promises, but I’ll try my best.</li>\n</ul>\n"},{"title":"排序算法","_content":"\n#### 冒泡排序\n\n![冒泡排序示例:](/img/1585903822933.png)\n\n* 时间复杂度：O（n^2）\n* 特点：稳定的排序算法，即数组内相等元素不会排序后发生变化！\n\n#### 插入排序\n\n\n![插入排序示例](/img/1585907380155.png)\n![插入排序时间复杂度](/img/1585908731720.png)\n\n* 特点：同样是稳定的\n\n#### 归并排序\n\n* 核心思想：分治的思想\n\n![归并排序代码1](/img/1585908824999.png)\n![归并排序代码2](/img/1585908857419.png)\n\n![复杂度分析](/img/1585909201370.png)\n\n* 特点：同样是稳定的\n\n#### 快速排序\n\n* 基本思路实现：选取左点，左右两端分别往中间走，注意要用“等于”的条件。\n\n![基本的快排的Partition函数实现](/img/1586247034757.png)\n\n\n* 优化1： 选择点的优化：\n\n![选点优化的快排Partition函数](/img/1586247286704.png)\n\n* 优化2： 改交换为赋值：\n\n![交换换赋值的优化的快排Partition函数](/img/1586247445746.png)\n\n* 优化3： 设定小个数的数组使用插入排序来完成\n\n* 优化4： 使用伪递归：\n![伪递归优化快排](/img/1586248831375.png)\n\n","source":"_posts/排序算法.md","raw":"---\ntitle: 排序算法\ncategories:\n- 数据结构\n---\n\n#### 冒泡排序\n\n![冒泡排序示例:](/img/1585903822933.png)\n\n* 时间复杂度：O（n^2）\n* 特点：稳定的排序算法，即数组内相等元素不会排序后发生变化！\n\n#### 插入排序\n\n\n![插入排序示例](/img/1585907380155.png)\n![插入排序时间复杂度](/img/1585908731720.png)\n\n* 特点：同样是稳定的\n\n#### 归并排序\n\n* 核心思想：分治的思想\n\n![归并排序代码1](/img/1585908824999.png)\n![归并排序代码2](/img/1585908857419.png)\n\n![复杂度分析](/img/1585909201370.png)\n\n* 特点：同样是稳定的\n\n#### 快速排序\n\n* 基本思路实现：选取左点，左右两端分别往中间走，注意要用“等于”的条件。\n\n![基本的快排的Partition函数实现](/img/1586247034757.png)\n\n\n* 优化1： 选择点的优化：\n\n![选点优化的快排Partition函数](/img/1586247286704.png)\n\n* 优化2： 改交换为赋值：\n\n![交换换赋值的优化的快排Partition函数](/img/1586247445746.png)\n\n* 优化3： 设定小个数的数组使用插入排序来完成\n\n* 优化4： 使用伪递归：\n![伪递归优化快排](/img/1586248831375.png)\n\n","slug":"排序算法","published":1,"date":"2020-09-08T03:23:20.891Z","updated":"2020-09-08T03:23:20.891Z","_id":"ckdpcluzw004s8sr359nqn6q7","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><p><img src=\"/img/1585903822933.png\" alt=\"冒泡排序示例:\"></p>\n<ul>\n<li>时间复杂度：O（n^2）</li>\n<li>特点：稳定的排序算法，即数组内相等元素不会排序后发生变化！</li>\n</ul>\n<h4 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h4><p><img src=\"/img/1585907380155.png\" alt=\"插入排序示例\"><br><img src=\"/img/1585908731720.png\" alt=\"插入排序时间复杂度\"></p>\n<ul>\n<li>特点：同样是稳定的</li>\n</ul>\n<h4 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h4><ul>\n<li>核心思想：分治的思想</li>\n</ul>\n<p><img src=\"/img/1585908824999.png\" alt=\"归并排序代码1\"><br><img src=\"/img/1585908857419.png\" alt=\"归并排序代码2\"></p>\n<p><img src=\"/img/1585909201370.png\" alt=\"复杂度分析\"></p>\n<ul>\n<li>特点：同样是稳定的</li>\n</ul>\n<h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><ul>\n<li>基本思路实现：选取左点，左右两端分别往中间走，注意要用“等于”的条件。</li>\n</ul>\n<p><img src=\"/img/1586247034757.png\" alt=\"基本的快排的Partition函数实现\"></p>\n<ul>\n<li>优化1： 选择点的优化：</li>\n</ul>\n<p><img src=\"/img/1586247286704.png\" alt=\"选点优化的快排Partition函数\"></p>\n<ul>\n<li>优化2： 改交换为赋值：</li>\n</ul>\n<p><img src=\"/img/1586247445746.png\" alt=\"交换换赋值的优化的快排Partition函数\"></p>\n<ul>\n<li><p>优化3： 设定小个数的数组使用插入排序来完成</p>\n</li>\n<li><p>优化4： 使用伪递归：<br><img src=\"/img/1586248831375.png\" alt=\"伪递归优化快排\"></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><p><img src=\"/img/1585903822933.png\" alt=\"冒泡排序示例:\"></p>\n<ul>\n<li>时间复杂度：O（n^2）</li>\n<li>特点：稳定的排序算法，即数组内相等元素不会排序后发生变化！</li>\n</ul>\n<h4 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h4><p><img src=\"/img/1585907380155.png\" alt=\"插入排序示例\"><br><img src=\"/img/1585908731720.png\" alt=\"插入排序时间复杂度\"></p>\n<ul>\n<li>特点：同样是稳定的</li>\n</ul>\n<h4 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h4><ul>\n<li>核心思想：分治的思想</li>\n</ul>\n<p><img src=\"/img/1585908824999.png\" alt=\"归并排序代码1\"><br><img src=\"/img/1585908857419.png\" alt=\"归并排序代码2\"></p>\n<p><img src=\"/img/1585909201370.png\" alt=\"复杂度分析\"></p>\n<ul>\n<li>特点：同样是稳定的</li>\n</ul>\n<h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><ul>\n<li>基本思路实现：选取左点，左右两端分别往中间走，注意要用“等于”的条件。</li>\n</ul>\n<p><img src=\"/img/1586247034757.png\" alt=\"基本的快排的Partition函数实现\"></p>\n<ul>\n<li>优化1： 选择点的优化：</li>\n</ul>\n<p><img src=\"/img/1586247286704.png\" alt=\"选点优化的快排Partition函数\"></p>\n<ul>\n<li>优化2： 改交换为赋值：</li>\n</ul>\n<p><img src=\"/img/1586247445746.png\" alt=\"交换换赋值的优化的快排Partition函数\"></p>\n<ul>\n<li><p>优化3： 设定小个数的数组使用插入排序来完成</p>\n</li>\n<li><p>优化4： 使用伪递归：<br><img src=\"/img/1586248831375.png\" alt=\"伪递归优化快排\"></p>\n</li>\n</ul>\n"},{"title":"数据结构-数组,链表结构","_content":"\n## 一、数组\n\n#### 物理大小和逻辑大小\n物理大小：创建时的大小\n逻辑大小：可使用的大小\n* 如果逻辑大小>=物理大小，代表数组被填满了。\n\n### 增加（插入，替换）、删除静态数组策略\n\n* 增加： 当逻辑大小已经等于物理大小时，再添加元素数组需要扩容。每增加一个元素就扩容，添加N项的话会带来O(n^2)算法消耗，可以在达到这个条件时，直接为数组扩容两倍。\n* 插入：从数组尾部往后移一位，执行到插入点位置为止，制造一个空洞为新元素\n* 删除： 当逻辑大小已经小于或等于物理大小四分之一时，将数组容量砍半。\n删除元素，将此元素索引后一位往前移一位。与插入相反。\n\n### 复杂度分析\n第i个位置插入，删除： O(n) 平均情况\n增加减少容量： O(n) 平均情况\n第i个位置访问，替换：O(1)\n\n\n## 二、链表\n\n#### 单链表， 双链表。\n* 末尾删除： 找出倒数第二个结点，将其next指针指为none即可。\n* 表头删除：找出第一个结点，将next指给head\n\n#### 复杂度分析：\n* 访问第i个元素：O(n) 平均情况\n* 在第i个元素替换：O(n) 平均情况\n* 在开始入插入：O(1) all\n* 在结束处删除：O(1) all\n* 在第i个位置插入，删除：O(n) 平均情况\n\n>　链表的优势在于内存性能，虽然存储指向指针会占用大小，但相对数组还是有优势．另外优势在于对首尾元素的删除插入处理时的效率更快．\n\n### 优化：哑头节点的循环列表\n```python\nhead = Node(None, None)\nhead.next = head\n```\n> 方便处理插入遍历，只需判断条件为probe.next != head即不是最后一个元素\n\n\n\n\n\n","source":"_posts/数据结构-数组链表结构.md","raw":"---\ntitle: 数据结构-数组,链表结构\ncategories:\n- 数据结构\n---\n\n## 一、数组\n\n#### 物理大小和逻辑大小\n物理大小：创建时的大小\n逻辑大小：可使用的大小\n* 如果逻辑大小>=物理大小，代表数组被填满了。\n\n### 增加（插入，替换）、删除静态数组策略\n\n* 增加： 当逻辑大小已经等于物理大小时，再添加元素数组需要扩容。每增加一个元素就扩容，添加N项的话会带来O(n^2)算法消耗，可以在达到这个条件时，直接为数组扩容两倍。\n* 插入：从数组尾部往后移一位，执行到插入点位置为止，制造一个空洞为新元素\n* 删除： 当逻辑大小已经小于或等于物理大小四分之一时，将数组容量砍半。\n删除元素，将此元素索引后一位往前移一位。与插入相反。\n\n### 复杂度分析\n第i个位置插入，删除： O(n) 平均情况\n增加减少容量： O(n) 平均情况\n第i个位置访问，替换：O(1)\n\n\n## 二、链表\n\n#### 单链表， 双链表。\n* 末尾删除： 找出倒数第二个结点，将其next指针指为none即可。\n* 表头删除：找出第一个结点，将next指给head\n\n#### 复杂度分析：\n* 访问第i个元素：O(n) 平均情况\n* 在第i个元素替换：O(n) 平均情况\n* 在开始入插入：O(1) all\n* 在结束处删除：O(1) all\n* 在第i个位置插入，删除：O(n) 平均情况\n\n>　链表的优势在于内存性能，虽然存储指向指针会占用大小，但相对数组还是有优势．另外优势在于对首尾元素的删除插入处理时的效率更快．\n\n### 优化：哑头节点的循环列表\n```python\nhead = Node(None, None)\nhead.next = head\n```\n> 方便处理插入遍历，只需判断条件为probe.next != head即不是最后一个元素\n\n\n\n\n\n","slug":"数据结构-数组链表结构","published":1,"date":"2020-09-08T03:23:20.891Z","updated":"2020-09-08T03:23:20.891Z","_id":"ckdpcluzx004v8sr3e9hho2pb","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、数组\"><a href=\"#一、数组\" class=\"headerlink\" title=\"一、数组\"></a>一、数组</h2><h4 id=\"物理大小和逻辑大小\"><a href=\"#物理大小和逻辑大小\" class=\"headerlink\" title=\"物理大小和逻辑大小\"></a>物理大小和逻辑大小</h4><p>物理大小：创建时的大小<br>逻辑大小：可使用的大小</p>\n<ul>\n<li>如果逻辑大小&gt;=物理大小，代表数组被填满了。</li>\n</ul>\n<h3 id=\"增加（插入，替换）、删除静态数组策略\"><a href=\"#增加（插入，替换）、删除静态数组策略\" class=\"headerlink\" title=\"增加（插入，替换）、删除静态数组策略\"></a>增加（插入，替换）、删除静态数组策略</h3><ul>\n<li>增加： 当逻辑大小已经等于物理大小时，再添加元素数组需要扩容。每增加一个元素就扩容，添加N项的话会带来O(n^2)算法消耗，可以在达到这个条件时，直接为数组扩容两倍。</li>\n<li>插入：从数组尾部往后移一位，执行到插入点位置为止，制造一个空洞为新元素</li>\n<li>删除： 当逻辑大小已经小于或等于物理大小四分之一时，将数组容量砍半。<br>删除元素，将此元素索引后一位往前移一位。与插入相反。</li>\n</ul>\n<h3 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>第i个位置插入，删除： O(n) 平均情况<br>增加减少容量： O(n) 平均情况<br>第i个位置访问，替换：O(1)</p>\n<h2 id=\"二、链表\"><a href=\"#二、链表\" class=\"headerlink\" title=\"二、链表\"></a>二、链表</h2><h4 id=\"单链表，-双链表。\"><a href=\"#单链表，-双链表。\" class=\"headerlink\" title=\"单链表， 双链表。\"></a>单链表， 双链表。</h4><ul>\n<li>末尾删除： 找出倒数第二个结点，将其next指针指为none即可。</li>\n<li>表头删除：找出第一个结点，将next指给head</li>\n</ul>\n<h4 id=\"复杂度分析：\"><a href=\"#复杂度分析：\" class=\"headerlink\" title=\"复杂度分析：\"></a>复杂度分析：</h4><ul>\n<li>访问第i个元素：O(n) 平均情况</li>\n<li>在第i个元素替换：O(n) 平均情况</li>\n<li>在开始入插入：O(1) all</li>\n<li>在结束处删除：O(1) all</li>\n<li>在第i个位置插入，删除：O(n) 平均情况</li>\n</ul>\n<blockquote>\n<p>　链表的优势在于内存性能，虽然存储指向指针会占用大小，但相对数组还是有优势．另外优势在于对首尾元素的删除插入处理时的效率更快．</p>\n</blockquote>\n<h3 id=\"优化：哑头节点的循环列表\"><a href=\"#优化：哑头节点的循环列表\" class=\"headerlink\" title=\"优化：哑头节点的循环列表\"></a>优化：哑头节点的循环列表</h3><pre><code class=\"python\">head = Node(None, None)\nhead.next = head</code></pre>\n<blockquote>\n<p>方便处理插入遍历，只需判断条件为probe.next != head即不是最后一个元素</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、数组\"><a href=\"#一、数组\" class=\"headerlink\" title=\"一、数组\"></a>一、数组</h2><h4 id=\"物理大小和逻辑大小\"><a href=\"#物理大小和逻辑大小\" class=\"headerlink\" title=\"物理大小和逻辑大小\"></a>物理大小和逻辑大小</h4><p>物理大小：创建时的大小<br>逻辑大小：可使用的大小</p>\n<ul>\n<li>如果逻辑大小&gt;=物理大小，代表数组被填满了。</li>\n</ul>\n<h3 id=\"增加（插入，替换）、删除静态数组策略\"><a href=\"#增加（插入，替换）、删除静态数组策略\" class=\"headerlink\" title=\"增加（插入，替换）、删除静态数组策略\"></a>增加（插入，替换）、删除静态数组策略</h3><ul>\n<li>增加： 当逻辑大小已经等于物理大小时，再添加元素数组需要扩容。每增加一个元素就扩容，添加N项的话会带来O(n^2)算法消耗，可以在达到这个条件时，直接为数组扩容两倍。</li>\n<li>插入：从数组尾部往后移一位，执行到插入点位置为止，制造一个空洞为新元素</li>\n<li>删除： 当逻辑大小已经小于或等于物理大小四分之一时，将数组容量砍半。<br>删除元素，将此元素索引后一位往前移一位。与插入相反。</li>\n</ul>\n<h3 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>第i个位置插入，删除： O(n) 平均情况<br>增加减少容量： O(n) 平均情况<br>第i个位置访问，替换：O(1)</p>\n<h2 id=\"二、链表\"><a href=\"#二、链表\" class=\"headerlink\" title=\"二、链表\"></a>二、链表</h2><h4 id=\"单链表，-双链表。\"><a href=\"#单链表，-双链表。\" class=\"headerlink\" title=\"单链表， 双链表。\"></a>单链表， 双链表。</h4><ul>\n<li>末尾删除： 找出倒数第二个结点，将其next指针指为none即可。</li>\n<li>表头删除：找出第一个结点，将next指给head</li>\n</ul>\n<h4 id=\"复杂度分析：\"><a href=\"#复杂度分析：\" class=\"headerlink\" title=\"复杂度分析：\"></a>复杂度分析：</h4><ul>\n<li>访问第i个元素：O(n) 平均情况</li>\n<li>在第i个元素替换：O(n) 平均情况</li>\n<li>在开始入插入：O(1) all</li>\n<li>在结束处删除：O(1) all</li>\n<li>在第i个位置插入，删除：O(n) 平均情况</li>\n</ul>\n<blockquote>\n<p>　链表的优势在于内存性能，虽然存储指向指针会占用大小，但相对数组还是有优势．另外优势在于对首尾元素的删除插入处理时的效率更快．</p>\n</blockquote>\n<h3 id=\"优化：哑头节点的循环列表\"><a href=\"#优化：哑头节点的循环列表\" class=\"headerlink\" title=\"优化：哑头节点的循环列表\"></a>优化：哑头节点的循环列表</h3><pre><code class=\"python\">head = Node(None, None)\nhead.next = head</code></pre>\n<blockquote>\n<p>方便处理插入遍历，只需判断条件为probe.next != head即不是最后一个元素</p>\n</blockquote>\n"},{"title":"数据结构在C#","_content":"\n数组Array：顺序存储结构\n\t\t优点：按位置索引很快，修改效率高。\n\t\t缺点：需声明存放类型，且只能存放相同类型，必须指定长度（过长浪费，过短溢出），插入与删除很慢（排除特殊情况）。\n\t\n数组ArrayList：顺序存储结构，解决了Array的缺点，由源码得知，默认容量为4，容量自增2倍。\n\t\t不过由于容量是类成员，自增机制会引发线程安全问题，所以ArrayList不是线程安全的。\n\t\t优点：无需指定长度，无需声明存放类型，可存放不同类型元素，底层是object,顺序存储结构常有优点这里都有。\n\t\t缺点：由于底层元素是object，当为值类型时，存在装箱/拆箱操作，效率降低，且可能会有非类型安全问题。顺序存储结构常有缺点这里都有。\n\t\n数组List：顺序存储结构，综合Array和ArrayList的优点，所以List也不是线程安全的。\n\t\t优点：无需指定长度，长度自增。需声明存放类型，内部用Array实现，保证了类型安全。\n\t\t缺点：顺序存储结构常有缺点都有。\n\t所以现在基本上不使用Array和ArrayList，而是使用List。\n\t\n双向链表LinkList：链式存储结构,非线程安全，可自己加锁实现线程安全。\n\t\t优点：插入，删除效率高，只需修改指针域的前驱节点和后继节点即可进行插入删除。\n\t\t缺点：无法基于位置索引，必须从头结点依次遍历。\n\t\n队列Queue：顺序存储结构，先进先出集合。由官方文档得知，非线程安全，但是其有线程安全的的队列实现为ConcurrentQueue<T>。\n\t\t默认容量为32，容量自增为4(.net framework 4.8)，其他版本可能会有变化。\n\t\n栈Stack：顺序存储结构，后进先出集合，默认容量10，容量自增2倍。非线程安全。\n\n\n\n![递归算法](/img/1586415301619.png)\n* 公式法求复杂度：\n* ![公式法](/img/1586415991649.png)\n* ![三种情况](/img/1586416006714.png)\n\n* ![例一](/img/1586416029304.png)\n* ![例二](/img/1586416055487.png)\n* ![例三](/img/1586416101201.png)\n\n![回溯法](/img/1586416261865.png)\n\n![经典找集合总和的算法](/img/1586416480976.png)\n\nNQueen算法：\n![回溯法NQueen](/img/1586418715552.png)\n\n算法复杂度：\n![NQueen算法复杂度](/img/1586419084172.png)\n\n* 题外：关于ref, out的区别\n1、ref指定的参数在函数调用时候必须初始化，不能为空的引用。而out指定的参数在函数调用时候可以不初始化；\n\n2、out指定的参数在进入函数时会清空自己，必须在函数内部赋初值。而ref指定的参数不需要。","source":"_posts/数据结构在Charp.md","raw":"---\ntitle: 数据结构在C#\ncategories:\n- Unity\n---\n\n数组Array：顺序存储结构\n\t\t优点：按位置索引很快，修改效率高。\n\t\t缺点：需声明存放类型，且只能存放相同类型，必须指定长度（过长浪费，过短溢出），插入与删除很慢（排除特殊情况）。\n\t\n数组ArrayList：顺序存储结构，解决了Array的缺点，由源码得知，默认容量为4，容量自增2倍。\n\t\t不过由于容量是类成员，自增机制会引发线程安全问题，所以ArrayList不是线程安全的。\n\t\t优点：无需指定长度，无需声明存放类型，可存放不同类型元素，底层是object,顺序存储结构常有优点这里都有。\n\t\t缺点：由于底层元素是object，当为值类型时，存在装箱/拆箱操作，效率降低，且可能会有非类型安全问题。顺序存储结构常有缺点这里都有。\n\t\n数组List：顺序存储结构，综合Array和ArrayList的优点，所以List也不是线程安全的。\n\t\t优点：无需指定长度，长度自增。需声明存放类型，内部用Array实现，保证了类型安全。\n\t\t缺点：顺序存储结构常有缺点都有。\n\t所以现在基本上不使用Array和ArrayList，而是使用List。\n\t\n双向链表LinkList：链式存储结构,非线程安全，可自己加锁实现线程安全。\n\t\t优点：插入，删除效率高，只需修改指针域的前驱节点和后继节点即可进行插入删除。\n\t\t缺点：无法基于位置索引，必须从头结点依次遍历。\n\t\n队列Queue：顺序存储结构，先进先出集合。由官方文档得知，非线程安全，但是其有线程安全的的队列实现为ConcurrentQueue<T>。\n\t\t默认容量为32，容量自增为4(.net framework 4.8)，其他版本可能会有变化。\n\t\n栈Stack：顺序存储结构，后进先出集合，默认容量10，容量自增2倍。非线程安全。\n\n\n\n![递归算法](/img/1586415301619.png)\n* 公式法求复杂度：\n* ![公式法](/img/1586415991649.png)\n* ![三种情况](/img/1586416006714.png)\n\n* ![例一](/img/1586416029304.png)\n* ![例二](/img/1586416055487.png)\n* ![例三](/img/1586416101201.png)\n\n![回溯法](/img/1586416261865.png)\n\n![经典找集合总和的算法](/img/1586416480976.png)\n\nNQueen算法：\n![回溯法NQueen](/img/1586418715552.png)\n\n算法复杂度：\n![NQueen算法复杂度](/img/1586419084172.png)\n\n* 题外：关于ref, out的区别\n1、ref指定的参数在函数调用时候必须初始化，不能为空的引用。而out指定的参数在函数调用时候可以不初始化；\n\n2、out指定的参数在进入函数时会清空自己，必须在函数内部赋初值。而ref指定的参数不需要。","slug":"数据结构在Charp","published":1,"date":"2020-09-08T03:23:20.891Z","updated":"2020-09-08T03:23:20.891Z","_id":"ckdpcluzz004z8sr3ejgpey57","comments":1,"layout":"post","photos":[],"link":"","content":"<p>数组Array：顺序存储结构<br>        优点：按位置索引很快，修改效率高。<br>        缺点：需声明存放类型，且只能存放相同类型，必须指定长度（过长浪费，过短溢出），插入与删除很慢（排除特殊情况）。</p>\n<p>数组ArrayList：顺序存储结构，解决了Array的缺点，由源码得知，默认容量为4，容量自增2倍。<br>        不过由于容量是类成员，自增机制会引发线程安全问题，所以ArrayList不是线程安全的。<br>        优点：无需指定长度，无需声明存放类型，可存放不同类型元素，底层是object,顺序存储结构常有优点这里都有。<br>        缺点：由于底层元素是object，当为值类型时，存在装箱/拆箱操作，效率降低，且可能会有非类型安全问题。顺序存储结构常有缺点这里都有。</p>\n<p>数组List：顺序存储结构，综合Array和ArrayList的优点，所以List也不是线程安全的。<br>        优点：无需指定长度，长度自增。需声明存放类型，内部用Array实现，保证了类型安全。<br>        缺点：顺序存储结构常有缺点都有。<br>    所以现在基本上不使用Array和ArrayList，而是使用List。</p>\n<p>双向链表LinkList：链式存储结构,非线程安全，可自己加锁实现线程安全。<br>        优点：插入，删除效率高，只需修改指针域的前驱节点和后继节点即可进行插入删除。<br>        缺点：无法基于位置索引，必须从头结点依次遍历。</p>\n<p>队列Queue：顺序存储结构，先进先出集合。由官方文档得知，非线程安全，但是其有线程安全的的队列实现为ConcurrentQueue<T>。<br>        默认容量为32，容量自增为4(.net framework 4.8)，其他版本可能会有变化。</p>\n<p>栈Stack：顺序存储结构，后进先出集合，默认容量10，容量自增2倍。非线程安全。</p>\n<p><img src=\"/img/1586415301619.png\" alt=\"递归算法\"></p>\n<ul>\n<li><p>公式法求复杂度：</p>\n</li>\n<li><p><img src=\"/img/1586415991649.png\" alt=\"公式法\"></p>\n</li>\n<li><p><img src=\"/img/1586416006714.png\" alt=\"三种情况\"></p>\n</li>\n<li><p><img src=\"/img/1586416029304.png\" alt=\"例一\"></p>\n</li>\n<li><p><img src=\"/img/1586416055487.png\" alt=\"例二\"></p>\n</li>\n<li><p><img src=\"/img/1586416101201.png\" alt=\"例三\"></p>\n</li>\n</ul>\n<p><img src=\"/img/1586416261865.png\" alt=\"回溯法\"></p>\n<p><img src=\"/img/1586416480976.png\" alt=\"经典找集合总和的算法\"></p>\n<p>NQueen算法：<br><img src=\"/img/1586418715552.png\" alt=\"回溯法NQueen\"></p>\n<p>算法复杂度：<br><img src=\"/img/1586419084172.png\" alt=\"NQueen算法复杂度\"></p>\n<ul>\n<li>题外：关于ref, out的区别<br>1、ref指定的参数在函数调用时候必须初始化，不能为空的引用。而out指定的参数在函数调用时候可以不初始化；</li>\n</ul>\n<p>2、out指定的参数在进入函数时会清空自己，必须在函数内部赋初值。而ref指定的参数不需要。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>数组Array：顺序存储结构<br>        优点：按位置索引很快，修改效率高。<br>        缺点：需声明存放类型，且只能存放相同类型，必须指定长度（过长浪费，过短溢出），插入与删除很慢（排除特殊情况）。</p>\n<p>数组ArrayList：顺序存储结构，解决了Array的缺点，由源码得知，默认容量为4，容量自增2倍。<br>        不过由于容量是类成员，自增机制会引发线程安全问题，所以ArrayList不是线程安全的。<br>        优点：无需指定长度，无需声明存放类型，可存放不同类型元素，底层是object,顺序存储结构常有优点这里都有。<br>        缺点：由于底层元素是object，当为值类型时，存在装箱/拆箱操作，效率降低，且可能会有非类型安全问题。顺序存储结构常有缺点这里都有。</p>\n<p>数组List：顺序存储结构，综合Array和ArrayList的优点，所以List也不是线程安全的。<br>        优点：无需指定长度，长度自增。需声明存放类型，内部用Array实现，保证了类型安全。<br>        缺点：顺序存储结构常有缺点都有。<br>    所以现在基本上不使用Array和ArrayList，而是使用List。</p>\n<p>双向链表LinkList：链式存储结构,非线程安全，可自己加锁实现线程安全。<br>        优点：插入，删除效率高，只需修改指针域的前驱节点和后继节点即可进行插入删除。<br>        缺点：无法基于位置索引，必须从头结点依次遍历。</p>\n<p>队列Queue：顺序存储结构，先进先出集合。由官方文档得知，非线程安全，但是其有线程安全的的队列实现为ConcurrentQueue<T>。<br>        默认容量为32，容量自增为4(.net framework 4.8)，其他版本可能会有变化。</p>\n<p>栈Stack：顺序存储结构，后进先出集合，默认容量10，容量自增2倍。非线程安全。</p>\n<p><img src=\"/img/1586415301619.png\" alt=\"递归算法\"></p>\n<ul>\n<li><p>公式法求复杂度：</p>\n</li>\n<li><p><img src=\"/img/1586415991649.png\" alt=\"公式法\"></p>\n</li>\n<li><p><img src=\"/img/1586416006714.png\" alt=\"三种情况\"></p>\n</li>\n<li><p><img src=\"/img/1586416029304.png\" alt=\"例一\"></p>\n</li>\n<li><p><img src=\"/img/1586416055487.png\" alt=\"例二\"></p>\n</li>\n<li><p><img src=\"/img/1586416101201.png\" alt=\"例三\"></p>\n</li>\n</ul>\n<p><img src=\"/img/1586416261865.png\" alt=\"回溯法\"></p>\n<p><img src=\"/img/1586416480976.png\" alt=\"经典找集合总和的算法\"></p>\n<p>NQueen算法：<br><img src=\"/img/1586418715552.png\" alt=\"回溯法NQueen\"></p>\n<p>算法复杂度：<br><img src=\"/img/1586419084172.png\" alt=\"NQueen算法复杂度\"></p>\n<ul>\n<li>题外：关于ref, out的区别<br>1、ref指定的参数在函数调用时候必须初始化，不能为空的引用。而out指定的参数在函数调用时候可以不初始化；</li>\n</ul>\n<p>2、out指定的参数在进入函数时会清空自己，必须在函数内部赋初值。而ref指定的参数不需要。</p>\n"},{"title":"数据结构-图","_content":"\n#### 图\n\n1. 相关定义\n* 表示方式 Graph： G（V，E） 由顶点的有穷非空集合和顶点之间的边组成。\n> 线性表的数据元素叫元素，树中叫结点，图中叫顶点Vertex\n* 无向边：两个随机顶点之间的边无方向，用无序偶(Vi,Vj)或(Vj,Vi)表示\n* 有向边：顶点之间的边是有向的，用有序偶表示：<Vi,Vj>表示，与<Vj,Vi>是不同的。 又称为弧。\n> 有向边总是<弧尾，弧头>的。从尾指向头。\n* 简单图：不存在重复边，且不存在指向自身的元素的图。\n* 无向完全图：任意两个顶点都有边,含有n个顶点的图有 n*(n-1) /2的边\n* 有向完全图： 任意两个顶点存在互为相反的两条弧，则为有向完全图，n*(n-1)\n* 稀疏图与稠密图： 边或弧数小于n * logn的图为稀疏图，反之为稠密图\n* 网：图上的边指定权，则称为网。\n* 子图：为父图的子集的图。\n\n2.顶点与边的关系\n\n2.1. 邻接与度\n* 无向图\n* 邻接点：对于G(V,E)，如果边（V1，V2）属于E，则顶点V1,V2为邻接点。\n> 边（V1,V2) 依附 （incident） 于顶点V1,V2 。或说边与顶点V1,V2相关联。\n* 顶点的度（TD）：顶点V的度表示与此顶点相关联的==边的个数==！\n\n* 有向图\n* 邻接： <V1,V2> 意为V2邻接自V1，V1邻接V2\n* 入度InDegree(ID)：以顶点V2为弧头的称为V2的入度。\n* 出度OutDegree(OD): 以顶点V1为弧尾的称为V1的出度。\n* 总度：TD = ID+OD\n\n2.2 路径\n由顶点A到达顶点B\n* 路径的长度：路径上的边的数目\n* 环：第一个顶点到最后一个顶点相同的路径称为回路或环\n* 简单环：除了第一个和最后一个顶点，其他顶点不重复的回路。\n\n2.3 连通图\n* V1V2是连通：如果顶点V1到顶点V2有路径\n* 连通图：任意两个点都是连通\n\n* 无向图：\n* 极大连通子图（连通分量）的概念：\n* 1.要是子图\n* 2.含有极大顶点数，就是要有此连通子图的极大点数\n* 3.在2的基础上，包含依附于这些顶点所有的边\n\n* 有向图\n* 强连通图：对于任意顶点的Vi Vj都存在路径。\n\n\n* 连通图的生成树：\n* 定义： 一个极小的连通子图，含有所有顶点n，但边只有(n-1)条\n\n* 有向树：\n* 定义：一个有向图，存在仅有一个顶点入度为0，其他点入度均为1，则为有向树\n![有向树](/img/1585708632739.png)\n\n3.存储结构 - 邻接矩阵\n> 内存的物理位置是线性的，但图的元素关系是平面的。\n\n3.1 邻接矩阵（无向图）\n\n* 存储方式： 顶点用一维数组存储，边、弧用二维数组\n* 无向图的矩阵表是对称的。\n![邻接矩阵的存储方式](/img/1585709533268.png)\n\n* 所谓对称矩阵：就是满足ａ［ｉ］［ｊ］　＝　ａ［ｊ］［ｉ］（０＜＝ｉ，　ｊ＜＝ｎ）。即以对角线为轴，右上角的元与左上角的元是相等的。\n* 有了邻接矩阵的无向图，可以获取以下信息\n* 1.判断两个点是否有边\n* 2.判断一个点的度是多少，只要求某一行某一列的元素之和\n* 3.求一个点的邻接点，获取以点Vi为行或列的一条数组里矩阵值为1的点。\n\n3.2 邻接矩阵（有向图）\n\n![有向图的邻接矩阵](/img/1585710256442.png)\n\n* 特性：\n* 1.有向图的邻接矩阵一般不是对称矩阵，除非所有顶点都互相邻接\n* 2.入度的值即为矩阵的列的各数之和。出度为行的各数之和。\n\n3.3 邻接矩阵（网）\n\n> 每条边带有权的图就叫网。\n\n* 即0为自身关联，无穷表示没有弧。\n\n![网的邻接矩阵](/img/1585710628207.png)\n\n4.存储结构 - 邻接表\n\n![思考](/img/1585710777047.png)\n\n* 以数组链表的形式存储\n4.1 无向图\n![无向图的邻接表](/img/1585711969955.png)\n\n4.2 有向图\n* 以每个点当弧尾建立邻接表。这样更容易得出每个点的出度。\n![有向图的邻接表](/img/1585711991004.png)\n\n> 有向图的逆邻接表\n![有向图的逆邻接表](/img/1585712085363.png)\n\n4.3 邻接表（网）\n* 区别于有向图，增加一个数据域存储权值\n\n![邻接表存储图](/img/1585712479371.png)\n\n\n5. 存储结构 - 十字链表\n\n> 4的邻接表无法满足不同的入度出度都有需求的情况，因此使用新的结构来存放\n把邻接表与逆邻接表放在一起\n\n![基础结构](/img/1585713033340.png)\n\n![十字链表](/img/1585712995976.png)\n\n* 特性：\n* 更容易找到入度与出度\n* 算法复杂度与邻接表是一样，是有向图应用中好用的数据结构\n\n6.存储结构- 邻接多重表\n\n* 专为无向表设计，边表存放的是一条边，而不是一个顶点\n \n![邻接多重表的边表结构](/img/1585714606930.png)\n\n![邻接多重表-示例](/img/1585714787406.png)\n\n7.存储结构 -边集数组\n* 使用两个一维数组构成，一个存储顶点，一个存储边和权重\n\n![边集数组](/img/1585714939207.png)\n\n\n8. 遍历-深度优先遍历\n\n* 概述： 以一个点开始，以左/右固定遍历原则来遍历一个图，每成功访问到的一个顶点就标记一下，已经遍历到的点就回退到上一层。以此循环\n\n![示例](/img/1585722630933.png)\n![右手原则的深度优先遍历](/img/1585722584708.png)\n\n> . 哈密尔顿路径\n>* 经过图中每个顶点且只经过一次\n> 如果最终还能回到起始点，则称为哈密尔顿回路\n\n> 扩展-马踏棋盘算法\n> 递归： https://www.cnblogs.com/lpfuture/p/7111524.html\n> 贪心非递归：https://www.jianshu.com/p/6c185f290e10\n\n9.遍历-广度优先遍历\n\n* 类似于树的层级遍历，一层一层遍历\n![广度优先遍历](/img/1585742087660.png)\n\n* 常用实现：使用队列的形式：\n![队列实现广度遍历](/img/1585742120344.png)\n\n![算法实现](/img/1585742361670.png)\n\n\n10.最小生成树 - 普里姆算法：\n![普里姆算法C-Part1](/img/1585742844977.png)\n\n![普里姆算法C-Part2](/img/1585743156869.png)\n\n以此文章为示例学习：\nhttps://blog.csdn.net/yeruby/article/details/38615045\n> 从一个点开始以一个数组记录接下来能走的路的权值，下一步的路将是这些权值中的最小值，将将游标移至此最小值的点，标记此点完成状态。接着重复此过程，每次都更新权值数组的值，直到所有的点都被标记为完成。 一定要注意是更新！！！\n\n![时间复杂度对比](/img/1585819226392.png)","source":"_posts/数据结构-笔记1.md","raw":"---\ntitle: 数据结构-图\ncategories:\n- 数据结构\n---\n\n#### 图\n\n1. 相关定义\n* 表示方式 Graph： G（V，E） 由顶点的有穷非空集合和顶点之间的边组成。\n> 线性表的数据元素叫元素，树中叫结点，图中叫顶点Vertex\n* 无向边：两个随机顶点之间的边无方向，用无序偶(Vi,Vj)或(Vj,Vi)表示\n* 有向边：顶点之间的边是有向的，用有序偶表示：<Vi,Vj>表示，与<Vj,Vi>是不同的。 又称为弧。\n> 有向边总是<弧尾，弧头>的。从尾指向头。\n* 简单图：不存在重复边，且不存在指向自身的元素的图。\n* 无向完全图：任意两个顶点都有边,含有n个顶点的图有 n*(n-1) /2的边\n* 有向完全图： 任意两个顶点存在互为相反的两条弧，则为有向完全图，n*(n-1)\n* 稀疏图与稠密图： 边或弧数小于n * logn的图为稀疏图，反之为稠密图\n* 网：图上的边指定权，则称为网。\n* 子图：为父图的子集的图。\n\n2.顶点与边的关系\n\n2.1. 邻接与度\n* 无向图\n* 邻接点：对于G(V,E)，如果边（V1，V2）属于E，则顶点V1,V2为邻接点。\n> 边（V1,V2) 依附 （incident） 于顶点V1,V2 。或说边与顶点V1,V2相关联。\n* 顶点的度（TD）：顶点V的度表示与此顶点相关联的==边的个数==！\n\n* 有向图\n* 邻接： <V1,V2> 意为V2邻接自V1，V1邻接V2\n* 入度InDegree(ID)：以顶点V2为弧头的称为V2的入度。\n* 出度OutDegree(OD): 以顶点V1为弧尾的称为V1的出度。\n* 总度：TD = ID+OD\n\n2.2 路径\n由顶点A到达顶点B\n* 路径的长度：路径上的边的数目\n* 环：第一个顶点到最后一个顶点相同的路径称为回路或环\n* 简单环：除了第一个和最后一个顶点，其他顶点不重复的回路。\n\n2.3 连通图\n* V1V2是连通：如果顶点V1到顶点V2有路径\n* 连通图：任意两个点都是连通\n\n* 无向图：\n* 极大连通子图（连通分量）的概念：\n* 1.要是子图\n* 2.含有极大顶点数，就是要有此连通子图的极大点数\n* 3.在2的基础上，包含依附于这些顶点所有的边\n\n* 有向图\n* 强连通图：对于任意顶点的Vi Vj都存在路径。\n\n\n* 连通图的生成树：\n* 定义： 一个极小的连通子图，含有所有顶点n，但边只有(n-1)条\n\n* 有向树：\n* 定义：一个有向图，存在仅有一个顶点入度为0，其他点入度均为1，则为有向树\n![有向树](/img/1585708632739.png)\n\n3.存储结构 - 邻接矩阵\n> 内存的物理位置是线性的，但图的元素关系是平面的。\n\n3.1 邻接矩阵（无向图）\n\n* 存储方式： 顶点用一维数组存储，边、弧用二维数组\n* 无向图的矩阵表是对称的。\n![邻接矩阵的存储方式](/img/1585709533268.png)\n\n* 所谓对称矩阵：就是满足ａ［ｉ］［ｊ］　＝　ａ［ｊ］［ｉ］（０＜＝ｉ，　ｊ＜＝ｎ）。即以对角线为轴，右上角的元与左上角的元是相等的。\n* 有了邻接矩阵的无向图，可以获取以下信息\n* 1.判断两个点是否有边\n* 2.判断一个点的度是多少，只要求某一行某一列的元素之和\n* 3.求一个点的邻接点，获取以点Vi为行或列的一条数组里矩阵值为1的点。\n\n3.2 邻接矩阵（有向图）\n\n![有向图的邻接矩阵](/img/1585710256442.png)\n\n* 特性：\n* 1.有向图的邻接矩阵一般不是对称矩阵，除非所有顶点都互相邻接\n* 2.入度的值即为矩阵的列的各数之和。出度为行的各数之和。\n\n3.3 邻接矩阵（网）\n\n> 每条边带有权的图就叫网。\n\n* 即0为自身关联，无穷表示没有弧。\n\n![网的邻接矩阵](/img/1585710628207.png)\n\n4.存储结构 - 邻接表\n\n![思考](/img/1585710777047.png)\n\n* 以数组链表的形式存储\n4.1 无向图\n![无向图的邻接表](/img/1585711969955.png)\n\n4.2 有向图\n* 以每个点当弧尾建立邻接表。这样更容易得出每个点的出度。\n![有向图的邻接表](/img/1585711991004.png)\n\n> 有向图的逆邻接表\n![有向图的逆邻接表](/img/1585712085363.png)\n\n4.3 邻接表（网）\n* 区别于有向图，增加一个数据域存储权值\n\n![邻接表存储图](/img/1585712479371.png)\n\n\n5. 存储结构 - 十字链表\n\n> 4的邻接表无法满足不同的入度出度都有需求的情况，因此使用新的结构来存放\n把邻接表与逆邻接表放在一起\n\n![基础结构](/img/1585713033340.png)\n\n![十字链表](/img/1585712995976.png)\n\n* 特性：\n* 更容易找到入度与出度\n* 算法复杂度与邻接表是一样，是有向图应用中好用的数据结构\n\n6.存储结构- 邻接多重表\n\n* 专为无向表设计，边表存放的是一条边，而不是一个顶点\n \n![邻接多重表的边表结构](/img/1585714606930.png)\n\n![邻接多重表-示例](/img/1585714787406.png)\n\n7.存储结构 -边集数组\n* 使用两个一维数组构成，一个存储顶点，一个存储边和权重\n\n![边集数组](/img/1585714939207.png)\n\n\n8. 遍历-深度优先遍历\n\n* 概述： 以一个点开始，以左/右固定遍历原则来遍历一个图，每成功访问到的一个顶点就标记一下，已经遍历到的点就回退到上一层。以此循环\n\n![示例](/img/1585722630933.png)\n![右手原则的深度优先遍历](/img/1585722584708.png)\n\n> . 哈密尔顿路径\n>* 经过图中每个顶点且只经过一次\n> 如果最终还能回到起始点，则称为哈密尔顿回路\n\n> 扩展-马踏棋盘算法\n> 递归： https://www.cnblogs.com/lpfuture/p/7111524.html\n> 贪心非递归：https://www.jianshu.com/p/6c185f290e10\n\n9.遍历-广度优先遍历\n\n* 类似于树的层级遍历，一层一层遍历\n![广度优先遍历](/img/1585742087660.png)\n\n* 常用实现：使用队列的形式：\n![队列实现广度遍历](/img/1585742120344.png)\n\n![算法实现](/img/1585742361670.png)\n\n\n10.最小生成树 - 普里姆算法：\n![普里姆算法C-Part1](/img/1585742844977.png)\n\n![普里姆算法C-Part2](/img/1585743156869.png)\n\n以此文章为示例学习：\nhttps://blog.csdn.net/yeruby/article/details/38615045\n> 从一个点开始以一个数组记录接下来能走的路的权值，下一步的路将是这些权值中的最小值，将将游标移至此最小值的点，标记此点完成状态。接着重复此过程，每次都更新权值数组的值，直到所有的点都被标记为完成。 一定要注意是更新！！！\n\n![时间复杂度对比](/img/1585819226392.png)","slug":"数据结构-笔记1","published":1,"date":"2020-09-08T03:23:20.891Z","updated":"2020-09-08T03:23:20.891Z","_id":"ckdpclv0200538sr3bnsi78cq","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h4><ol>\n<li>相关定义</li>\n</ol>\n<ul>\n<li>表示方式 Graph： G（V，E） 由顶点的有穷非空集合和顶点之间的边组成。<blockquote>\n<p>线性表的数据元素叫元素，树中叫结点，图中叫顶点Vertex</p>\n</blockquote>\n</li>\n<li>无向边：两个随机顶点之间的边无方向，用无序偶(Vi,Vj)或(Vj,Vi)表示</li>\n<li>有向边：顶点之间的边是有向的，用有序偶表示：&lt;Vi,Vj&gt;表示，与&lt;Vj,Vi&gt;是不同的。 又称为弧。<blockquote>\n<p>有向边总是&lt;弧尾，弧头&gt;的。从尾指向头。</p>\n</blockquote>\n</li>\n<li>简单图：不存在重复边，且不存在指向自身的元素的图。</li>\n<li>无向完全图：任意两个顶点都有边,含有n个顶点的图有 n*(n-1) /2的边</li>\n<li>有向完全图： 任意两个顶点存在互为相反的两条弧，则为有向完全图，n*(n-1)</li>\n<li>稀疏图与稠密图： 边或弧数小于n * logn的图为稀疏图，反之为稠密图</li>\n<li>网：图上的边指定权，则称为网。</li>\n<li>子图：为父图的子集的图。</li>\n</ul>\n<p>2.顶点与边的关系</p>\n<p>2.1. 邻接与度</p>\n<ul>\n<li><p>无向图</p>\n</li>\n<li><p>邻接点：对于G(V,E)，如果边（V1，V2）属于E，则顶点V1,V2为邻接点。</p>\n<blockquote>\n<p>边（V1,V2) 依附 （incident） 于顶点V1,V2 。或说边与顶点V1,V2相关联。</p>\n</blockquote>\n</li>\n<li><p>顶点的度（TD）：顶点V的度表示与此顶点相关联的==边的个数==！</p>\n</li>\n<li><p>有向图</p>\n</li>\n<li><p>邻接： &lt;V1,V2&gt; 意为V2邻接自V1，V1邻接V2</p>\n</li>\n<li><p>入度InDegree(ID)：以顶点V2为弧头的称为V2的入度。</p>\n</li>\n<li><p>出度OutDegree(OD): 以顶点V1为弧尾的称为V1的出度。</p>\n</li>\n<li><p>总度：TD = ID+OD</p>\n</li>\n</ul>\n<p>2.2 路径<br>由顶点A到达顶点B</p>\n<ul>\n<li>路径的长度：路径上的边的数目</li>\n<li>环：第一个顶点到最后一个顶点相同的路径称为回路或环</li>\n<li>简单环：除了第一个和最后一个顶点，其他顶点不重复的回路。</li>\n</ul>\n<p>2.3 连通图</p>\n<ul>\n<li><p>V1V2是连通：如果顶点V1到顶点V2有路径</p>\n</li>\n<li><p>连通图：任意两个点都是连通</p>\n</li>\n<li><p>无向图：</p>\n</li>\n<li><p>极大连通子图（连通分量）的概念：</p>\n</li>\n<li><p>1.要是子图</p>\n</li>\n<li><p>2.含有极大顶点数，就是要有此连通子图的极大点数</p>\n</li>\n<li><p>3.在2的基础上，包含依附于这些顶点所有的边</p>\n</li>\n<li><p>有向图</p>\n</li>\n<li><p>强连通图：对于任意顶点的Vi Vj都存在路径。</p>\n</li>\n</ul>\n<ul>\n<li><p>连通图的生成树：</p>\n</li>\n<li><p>定义： 一个极小的连通子图，含有所有顶点n，但边只有(n-1)条</p>\n</li>\n<li><p>有向树：</p>\n</li>\n<li><p>定义：一个有向图，存在仅有一个顶点入度为0，其他点入度均为1，则为有向树<br><img src=\"/img/1585708632739.png\" alt=\"有向树\"></p>\n</li>\n</ul>\n<p>3.存储结构 - 邻接矩阵</p>\n<blockquote>\n<p>内存的物理位置是线性的，但图的元素关系是平面的。</p>\n</blockquote>\n<p>3.1 邻接矩阵（无向图）</p>\n<ul>\n<li><p>存储方式： 顶点用一维数组存储，边、弧用二维数组</p>\n</li>\n<li><p>无向图的矩阵表是对称的。<br><img src=\"/img/1585709533268.png\" alt=\"邻接矩阵的存储方式\"></p>\n</li>\n<li><p>所谓对称矩阵：就是满足ａ［ｉ］［ｊ］　＝　ａ［ｊ］［ｉ］（０＜＝ｉ，　ｊ＜＝ｎ）。即以对角线为轴，右上角的元与左上角的元是相等的。</p>\n</li>\n<li><p>有了邻接矩阵的无向图，可以获取以下信息</p>\n</li>\n<li><p>1.判断两个点是否有边</p>\n</li>\n<li><p>2.判断一个点的度是多少，只要求某一行某一列的元素之和</p>\n</li>\n<li><p>3.求一个点的邻接点，获取以点Vi为行或列的一条数组里矩阵值为1的点。</p>\n</li>\n</ul>\n<p>3.2 邻接矩阵（有向图）</p>\n<p><img src=\"/img/1585710256442.png\" alt=\"有向图的邻接矩阵\"></p>\n<ul>\n<li>特性：</li>\n<li>1.有向图的邻接矩阵一般不是对称矩阵，除非所有顶点都互相邻接</li>\n<li>2.入度的值即为矩阵的列的各数之和。出度为行的各数之和。</li>\n</ul>\n<p>3.3 邻接矩阵（网）</p>\n<blockquote>\n<p>每条边带有权的图就叫网。</p>\n</blockquote>\n<ul>\n<li>即0为自身关联，无穷表示没有弧。</li>\n</ul>\n<p><img src=\"/img/1585710628207.png\" alt=\"网的邻接矩阵\"></p>\n<p>4.存储结构 - 邻接表</p>\n<p><img src=\"/img/1585710777047.png\" alt=\"思考\"></p>\n<ul>\n<li>以数组链表的形式存储</li>\n</ul>\n<p>4.1 无向图<br><img src=\"/img/1585711969955.png\" alt=\"无向图的邻接表\"></p>\n<p>4.2 有向图</p>\n<ul>\n<li>以每个点当弧尾建立邻接表。这样更容易得出每个点的出度。<br><img src=\"/img/1585711991004.png\" alt=\"有向图的邻接表\"></li>\n</ul>\n<blockquote>\n<p>有向图的逆邻接表<br><img src=\"/img/1585712085363.png\" alt=\"有向图的逆邻接表\"></p>\n</blockquote>\n<p>4.3 邻接表（网）</p>\n<ul>\n<li>区别于有向图，增加一个数据域存储权值</li>\n</ul>\n<p><img src=\"/img/1585712479371.png\" alt=\"邻接表存储图\"></p>\n<ol start=\"5\">\n<li>存储结构 - 十字链表</li>\n</ol>\n<blockquote>\n<p>4的邻接表无法满足不同的入度出度都有需求的情况，因此使用新的结构来存放<br>把邻接表与逆邻接表放在一起</p>\n</blockquote>\n<p><img src=\"/img/1585713033340.png\" alt=\"基础结构\"></p>\n<p><img src=\"/img/1585712995976.png\" alt=\"十字链表\"></p>\n<ul>\n<li>特性：</li>\n<li>更容易找到入度与出度</li>\n<li>算法复杂度与邻接表是一样，是有向图应用中好用的数据结构</li>\n</ul>\n<p>6.存储结构- 邻接多重表</p>\n<ul>\n<li>专为无向表设计，边表存放的是一条边，而不是一个顶点</li>\n</ul>\n<p><img src=\"/img/1585714606930.png\" alt=\"邻接多重表的边表结构\"></p>\n<p><img src=\"/img/1585714787406.png\" alt=\"邻接多重表-示例\"></p>\n<p>7.存储结构 -边集数组</p>\n<ul>\n<li>使用两个一维数组构成，一个存储顶点，一个存储边和权重</li>\n</ul>\n<p><img src=\"/img/1585714939207.png\" alt=\"边集数组\"></p>\n<ol start=\"8\">\n<li>遍历-深度优先遍历</li>\n</ol>\n<ul>\n<li>概述： 以一个点开始，以左/右固定遍历原则来遍历一个图，每成功访问到的一个顶点就标记一下，已经遍历到的点就回退到上一层。以此循环</li>\n</ul>\n<p><img src=\"/img/1585722630933.png\" alt=\"示例\"><br><img src=\"/img/1585722584708.png\" alt=\"右手原则的深度优先遍历\"></p>\n<blockquote>\n<p>. 哈密尔顿路径</p>\n<ul>\n<li>经过图中每个顶点且只经过一次<br>如果最终还能回到起始点，则称为哈密尔顿回路</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>扩展-马踏棋盘算法<br>递归： <a href=\"https://www.cnblogs.com/lpfuture/p/7111524.html\">https://www.cnblogs.com/lpfuture/p/7111524.html</a><br>贪心非递归：<a href=\"https://www.jianshu.com/p/6c185f290e10\">https://www.jianshu.com/p/6c185f290e10</a></p>\n</blockquote>\n<p>9.遍历-广度优先遍历</p>\n<ul>\n<li><p>类似于树的层级遍历，一层一层遍历<br><img src=\"/img/1585742087660.png\" alt=\"广度优先遍历\"></p>\n</li>\n<li><p>常用实现：使用队列的形式：<br><img src=\"/img/1585742120344.png\" alt=\"队列实现广度遍历\"></p>\n</li>\n</ul>\n<p><img src=\"/img/1585742361670.png\" alt=\"算法实现\"></p>\n<p>10.最小生成树 - 普里姆算法：<br><img src=\"/img/1585742844977.png\" alt=\"普里姆算法C-Part1\"></p>\n<p><img src=\"/img/1585743156869.png\" alt=\"普里姆算法C-Part2\"></p>\n<p>以此文章为示例学习：<br><a href=\"https://blog.csdn.net/yeruby/article/details/38615045\">https://blog.csdn.net/yeruby/article/details/38615045</a></p>\n<blockquote>\n<p>从一个点开始以一个数组记录接下来能走的路的权值，下一步的路将是这些权值中的最小值，将将游标移至此最小值的点，标记此点完成状态。接着重复此过程，每次都更新权值数组的值，直到所有的点都被标记为完成。 一定要注意是更新！！！</p>\n</blockquote>\n<p><img src=\"/img/1585819226392.png\" alt=\"时间复杂度对比\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h4><ol>\n<li>相关定义</li>\n</ol>\n<ul>\n<li>表示方式 Graph： G（V，E） 由顶点的有穷非空集合和顶点之间的边组成。<blockquote>\n<p>线性表的数据元素叫元素，树中叫结点，图中叫顶点Vertex</p>\n</blockquote>\n</li>\n<li>无向边：两个随机顶点之间的边无方向，用无序偶(Vi,Vj)或(Vj,Vi)表示</li>\n<li>有向边：顶点之间的边是有向的，用有序偶表示：&lt;Vi,Vj&gt;表示，与&lt;Vj,Vi&gt;是不同的。 又称为弧。<blockquote>\n<p>有向边总是&lt;弧尾，弧头&gt;的。从尾指向头。</p>\n</blockquote>\n</li>\n<li>简单图：不存在重复边，且不存在指向自身的元素的图。</li>\n<li>无向完全图：任意两个顶点都有边,含有n个顶点的图有 n*(n-1) /2的边</li>\n<li>有向完全图： 任意两个顶点存在互为相反的两条弧，则为有向完全图，n*(n-1)</li>\n<li>稀疏图与稠密图： 边或弧数小于n * logn的图为稀疏图，反之为稠密图</li>\n<li>网：图上的边指定权，则称为网。</li>\n<li>子图：为父图的子集的图。</li>\n</ul>\n<p>2.顶点与边的关系</p>\n<p>2.1. 邻接与度</p>\n<ul>\n<li><p>无向图</p>\n</li>\n<li><p>邻接点：对于G(V,E)，如果边（V1，V2）属于E，则顶点V1,V2为邻接点。</p>\n<blockquote>\n<p>边（V1,V2) 依附 （incident） 于顶点V1,V2 。或说边与顶点V1,V2相关联。</p>\n</blockquote>\n</li>\n<li><p>顶点的度（TD）：顶点V的度表示与此顶点相关联的==边的个数==！</p>\n</li>\n<li><p>有向图</p>\n</li>\n<li><p>邻接： &lt;V1,V2&gt; 意为V2邻接自V1，V1邻接V2</p>\n</li>\n<li><p>入度InDegree(ID)：以顶点V2为弧头的称为V2的入度。</p>\n</li>\n<li><p>出度OutDegree(OD): 以顶点V1为弧尾的称为V1的出度。</p>\n</li>\n<li><p>总度：TD = ID+OD</p>\n</li>\n</ul>\n<p>2.2 路径<br>由顶点A到达顶点B</p>\n<ul>\n<li>路径的长度：路径上的边的数目</li>\n<li>环：第一个顶点到最后一个顶点相同的路径称为回路或环</li>\n<li>简单环：除了第一个和最后一个顶点，其他顶点不重复的回路。</li>\n</ul>\n<p>2.3 连通图</p>\n<ul>\n<li><p>V1V2是连通：如果顶点V1到顶点V2有路径</p>\n</li>\n<li><p>连通图：任意两个点都是连通</p>\n</li>\n<li><p>无向图：</p>\n</li>\n<li><p>极大连通子图（连通分量）的概念：</p>\n</li>\n<li><p>1.要是子图</p>\n</li>\n<li><p>2.含有极大顶点数，就是要有此连通子图的极大点数</p>\n</li>\n<li><p>3.在2的基础上，包含依附于这些顶点所有的边</p>\n</li>\n<li><p>有向图</p>\n</li>\n<li><p>强连通图：对于任意顶点的Vi Vj都存在路径。</p>\n</li>\n</ul>\n<ul>\n<li><p>连通图的生成树：</p>\n</li>\n<li><p>定义： 一个极小的连通子图，含有所有顶点n，但边只有(n-1)条</p>\n</li>\n<li><p>有向树：</p>\n</li>\n<li><p>定义：一个有向图，存在仅有一个顶点入度为0，其他点入度均为1，则为有向树<br><img src=\"/img/1585708632739.png\" alt=\"有向树\"></p>\n</li>\n</ul>\n<p>3.存储结构 - 邻接矩阵</p>\n<blockquote>\n<p>内存的物理位置是线性的，但图的元素关系是平面的。</p>\n</blockquote>\n<p>3.1 邻接矩阵（无向图）</p>\n<ul>\n<li><p>存储方式： 顶点用一维数组存储，边、弧用二维数组</p>\n</li>\n<li><p>无向图的矩阵表是对称的。<br><img src=\"/img/1585709533268.png\" alt=\"邻接矩阵的存储方式\"></p>\n</li>\n<li><p>所谓对称矩阵：就是满足ａ［ｉ］［ｊ］　＝　ａ［ｊ］［ｉ］（０＜＝ｉ，　ｊ＜＝ｎ）。即以对角线为轴，右上角的元与左上角的元是相等的。</p>\n</li>\n<li><p>有了邻接矩阵的无向图，可以获取以下信息</p>\n</li>\n<li><p>1.判断两个点是否有边</p>\n</li>\n<li><p>2.判断一个点的度是多少，只要求某一行某一列的元素之和</p>\n</li>\n<li><p>3.求一个点的邻接点，获取以点Vi为行或列的一条数组里矩阵值为1的点。</p>\n</li>\n</ul>\n<p>3.2 邻接矩阵（有向图）</p>\n<p><img src=\"/img/1585710256442.png\" alt=\"有向图的邻接矩阵\"></p>\n<ul>\n<li>特性：</li>\n<li>1.有向图的邻接矩阵一般不是对称矩阵，除非所有顶点都互相邻接</li>\n<li>2.入度的值即为矩阵的列的各数之和。出度为行的各数之和。</li>\n</ul>\n<p>3.3 邻接矩阵（网）</p>\n<blockquote>\n<p>每条边带有权的图就叫网。</p>\n</blockquote>\n<ul>\n<li>即0为自身关联，无穷表示没有弧。</li>\n</ul>\n<p><img src=\"/img/1585710628207.png\" alt=\"网的邻接矩阵\"></p>\n<p>4.存储结构 - 邻接表</p>\n<p><img src=\"/img/1585710777047.png\" alt=\"思考\"></p>\n<ul>\n<li>以数组链表的形式存储</li>\n</ul>\n<p>4.1 无向图<br><img src=\"/img/1585711969955.png\" alt=\"无向图的邻接表\"></p>\n<p>4.2 有向图</p>\n<ul>\n<li>以每个点当弧尾建立邻接表。这样更容易得出每个点的出度。<br><img src=\"/img/1585711991004.png\" alt=\"有向图的邻接表\"></li>\n</ul>\n<blockquote>\n<p>有向图的逆邻接表<br><img src=\"/img/1585712085363.png\" alt=\"有向图的逆邻接表\"></p>\n</blockquote>\n<p>4.3 邻接表（网）</p>\n<ul>\n<li>区别于有向图，增加一个数据域存储权值</li>\n</ul>\n<p><img src=\"/img/1585712479371.png\" alt=\"邻接表存储图\"></p>\n<ol start=\"5\">\n<li>存储结构 - 十字链表</li>\n</ol>\n<blockquote>\n<p>4的邻接表无法满足不同的入度出度都有需求的情况，因此使用新的结构来存放<br>把邻接表与逆邻接表放在一起</p>\n</blockquote>\n<p><img src=\"/img/1585713033340.png\" alt=\"基础结构\"></p>\n<p><img src=\"/img/1585712995976.png\" alt=\"十字链表\"></p>\n<ul>\n<li>特性：</li>\n<li>更容易找到入度与出度</li>\n<li>算法复杂度与邻接表是一样，是有向图应用中好用的数据结构</li>\n</ul>\n<p>6.存储结构- 邻接多重表</p>\n<ul>\n<li>专为无向表设计，边表存放的是一条边，而不是一个顶点</li>\n</ul>\n<p><img src=\"/img/1585714606930.png\" alt=\"邻接多重表的边表结构\"></p>\n<p><img src=\"/img/1585714787406.png\" alt=\"邻接多重表-示例\"></p>\n<p>7.存储结构 -边集数组</p>\n<ul>\n<li>使用两个一维数组构成，一个存储顶点，一个存储边和权重</li>\n</ul>\n<p><img src=\"/img/1585714939207.png\" alt=\"边集数组\"></p>\n<ol start=\"8\">\n<li>遍历-深度优先遍历</li>\n</ol>\n<ul>\n<li>概述： 以一个点开始，以左/右固定遍历原则来遍历一个图，每成功访问到的一个顶点就标记一下，已经遍历到的点就回退到上一层。以此循环</li>\n</ul>\n<p><img src=\"/img/1585722630933.png\" alt=\"示例\"><br><img src=\"/img/1585722584708.png\" alt=\"右手原则的深度优先遍历\"></p>\n<blockquote>\n<p>. 哈密尔顿路径</p>\n<ul>\n<li>经过图中每个顶点且只经过一次<br>如果最终还能回到起始点，则称为哈密尔顿回路</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>扩展-马踏棋盘算法<br>递归： <a href=\"https://www.cnblogs.com/lpfuture/p/7111524.html\">https://www.cnblogs.com/lpfuture/p/7111524.html</a><br>贪心非递归：<a href=\"https://www.jianshu.com/p/6c185f290e10\">https://www.jianshu.com/p/6c185f290e10</a></p>\n</blockquote>\n<p>9.遍历-广度优先遍历</p>\n<ul>\n<li><p>类似于树的层级遍历，一层一层遍历<br><img src=\"/img/1585742087660.png\" alt=\"广度优先遍历\"></p>\n</li>\n<li><p>常用实现：使用队列的形式：<br><img src=\"/img/1585742120344.png\" alt=\"队列实现广度遍历\"></p>\n</li>\n</ul>\n<p><img src=\"/img/1585742361670.png\" alt=\"算法实现\"></p>\n<p>10.最小生成树 - 普里姆算法：<br><img src=\"/img/1585742844977.png\" alt=\"普里姆算法C-Part1\"></p>\n<p><img src=\"/img/1585743156869.png\" alt=\"普里姆算法C-Part2\"></p>\n<p>以此文章为示例学习：<br><a href=\"https://blog.csdn.net/yeruby/article/details/38615045\">https://blog.csdn.net/yeruby/article/details/38615045</a></p>\n<blockquote>\n<p>从一个点开始以一个数组记录接下来能走的路的权值，下一步的路将是这些权值中的最小值，将将游标移至此最小值的点，标记此点完成状态。接着重复此过程，每次都更新权值数组的值，直到所有的点都被标记为完成。 一定要注意是更新！！！</p>\n</blockquote>\n<p><img src=\"/img/1585819226392.png\" alt=\"时间复杂度对比\"></p>\n"},{"title":"深度优先与广度优先算法","_content":"\n### 深度优先搜索:\n* 以递归的形式实现\n\n![递归实现](/img/1586434191932.png)\n> 递归实现特点：\n\n![特点](/img/1586434219909.png)\n\n* 栈的实现（非递归实现）\n\n![栈的实现](/img/1586434247273.png)\n\n![实现](/img/1586434291192.png)\n\n> 图的时间\n![图的时间复杂度](/img/1586434361642.png)\n\n> DFS迷宫算法：\n![算法分析](/img/1586434407387.png)\n\n* 最小路径问题\n\n![最短路径查找](/img/1586434733368.png)\n![最短路径的DFS算法](/img/1586434756126.png)\n\n\n### 广度优先搜索\n\n![特点](/img/1586434845632.png)\n\n> 队列的实现描述：\n![描述](/img/1586434970193.png)\n\n> 算法实现：\n![实现描述](/img/1586435106444.png)\n\n> 复杂度分析：\n![复杂度分析](/img/1586435164143.png)\n\n> 迷宫的复杂度分析：\n![迷宫复杂度分析](/img/1586435194085.png)\n\n> 最小开墙数的最短路径：\n> ![开墙最小路径算法1](/img/1586435618505.png)\n> ![开墙最小路径算法2](/img/1586435636294.png)\n> ![开墙最小路径算法3](/img/1586435663044.png)","source":"_posts/深度优先与广度优先算法.md","raw":"---\ntitle: 深度优先与广度优先算法\ncategories:\n- 算法\n---\n\n### 深度优先搜索:\n* 以递归的形式实现\n\n![递归实现](/img/1586434191932.png)\n> 递归实现特点：\n\n![特点](/img/1586434219909.png)\n\n* 栈的实现（非递归实现）\n\n![栈的实现](/img/1586434247273.png)\n\n![实现](/img/1586434291192.png)\n\n> 图的时间\n![图的时间复杂度](/img/1586434361642.png)\n\n> DFS迷宫算法：\n![算法分析](/img/1586434407387.png)\n\n* 最小路径问题\n\n![最短路径查找](/img/1586434733368.png)\n![最短路径的DFS算法](/img/1586434756126.png)\n\n\n### 广度优先搜索\n\n![特点](/img/1586434845632.png)\n\n> 队列的实现描述：\n![描述](/img/1586434970193.png)\n\n> 算法实现：\n![实现描述](/img/1586435106444.png)\n\n> 复杂度分析：\n![复杂度分析](/img/1586435164143.png)\n\n> 迷宫的复杂度分析：\n![迷宫复杂度分析](/img/1586435194085.png)\n\n> 最小开墙数的最短路径：\n> ![开墙最小路径算法1](/img/1586435618505.png)\n> ![开墙最小路径算法2](/img/1586435636294.png)\n> ![开墙最小路径算法3](/img/1586435663044.png)","slug":"深度优先与广度优先算法","published":1,"date":"2020-09-08T03:23:20.891Z","updated":"2020-09-08T03:23:20.891Z","_id":"ckdpclv0300568sr3fyjvcr6b","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"深度优先搜索\"><a href=\"#深度优先搜索\" class=\"headerlink\" title=\"深度优先搜索:\"></a>深度优先搜索:</h3><ul>\n<li>以递归的形式实现</li>\n</ul>\n<p><img src=\"/img/1586434191932.png\" alt=\"递归实现\"></p>\n<blockquote>\n<p>递归实现特点：</p>\n</blockquote>\n<p><img src=\"/img/1586434219909.png\" alt=\"特点\"></p>\n<ul>\n<li>栈的实现（非递归实现）</li>\n</ul>\n<p><img src=\"/img/1586434247273.png\" alt=\"栈的实现\"></p>\n<p><img src=\"/img/1586434291192.png\" alt=\"实现\"></p>\n<blockquote>\n<p>图的时间<br><img src=\"/img/1586434361642.png\" alt=\"图的时间复杂度\"></p>\n</blockquote>\n<blockquote>\n<p>DFS迷宫算法：<br><img src=\"/img/1586434407387.png\" alt=\"算法分析\"></p>\n</blockquote>\n<ul>\n<li>最小路径问题</li>\n</ul>\n<p><img src=\"/img/1586434733368.png\" alt=\"最短路径查找\"><br><img src=\"/img/1586434756126.png\" alt=\"最短路径的DFS算法\"></p>\n<h3 id=\"广度优先搜索\"><a href=\"#广度优先搜索\" class=\"headerlink\" title=\"广度优先搜索\"></a>广度优先搜索</h3><p><img src=\"/img/1586434845632.png\" alt=\"特点\"></p>\n<blockquote>\n<p>队列的实现描述：<br><img src=\"/img/1586434970193.png\" alt=\"描述\"></p>\n</blockquote>\n<blockquote>\n<p>算法实现：<br><img src=\"/img/1586435106444.png\" alt=\"实现描述\"></p>\n</blockquote>\n<blockquote>\n<p>复杂度分析：<br><img src=\"/img/1586435164143.png\" alt=\"复杂度分析\"></p>\n</blockquote>\n<blockquote>\n<p>迷宫的复杂度分析：<br><img src=\"/img/1586435194085.png\" alt=\"迷宫复杂度分析\"></p>\n</blockquote>\n<blockquote>\n<p>最小开墙数的最短路径：<br><img src=\"/img/1586435618505.png\" alt=\"开墙最小路径算法1\"><br><img src=\"/img/1586435636294.png\" alt=\"开墙最小路径算法2\"><br><img src=\"/img/1586435663044.png\" alt=\"开墙最小路径算法3\"></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"深度优先搜索\"><a href=\"#深度优先搜索\" class=\"headerlink\" title=\"深度优先搜索:\"></a>深度优先搜索:</h3><ul>\n<li>以递归的形式实现</li>\n</ul>\n<p><img src=\"/img/1586434191932.png\" alt=\"递归实现\"></p>\n<blockquote>\n<p>递归实现特点：</p>\n</blockquote>\n<p><img src=\"/img/1586434219909.png\" alt=\"特点\"></p>\n<ul>\n<li>栈的实现（非递归实现）</li>\n</ul>\n<p><img src=\"/img/1586434247273.png\" alt=\"栈的实现\"></p>\n<p><img src=\"/img/1586434291192.png\" alt=\"实现\"></p>\n<blockquote>\n<p>图的时间<br><img src=\"/img/1586434361642.png\" alt=\"图的时间复杂度\"></p>\n</blockquote>\n<blockquote>\n<p>DFS迷宫算法：<br><img src=\"/img/1586434407387.png\" alt=\"算法分析\"></p>\n</blockquote>\n<ul>\n<li>最小路径问题</li>\n</ul>\n<p><img src=\"/img/1586434733368.png\" alt=\"最短路径查找\"><br><img src=\"/img/1586434756126.png\" alt=\"最短路径的DFS算法\"></p>\n<h3 id=\"广度优先搜索\"><a href=\"#广度优先搜索\" class=\"headerlink\" title=\"广度优先搜索\"></a>广度优先搜索</h3><p><img src=\"/img/1586434845632.png\" alt=\"特点\"></p>\n<blockquote>\n<p>队列的实现描述：<br><img src=\"/img/1586434970193.png\" alt=\"描述\"></p>\n</blockquote>\n<blockquote>\n<p>算法实现：<br><img src=\"/img/1586435106444.png\" alt=\"实现描述\"></p>\n</blockquote>\n<blockquote>\n<p>复杂度分析：<br><img src=\"/img/1586435164143.png\" alt=\"复杂度分析\"></p>\n</blockquote>\n<blockquote>\n<p>迷宫的复杂度分析：<br><img src=\"/img/1586435194085.png\" alt=\"迷宫复杂度分析\"></p>\n</blockquote>\n<blockquote>\n<p>最小开墙数的最短路径：<br><img src=\"/img/1586435618505.png\" alt=\"开墙最小路径算法1\"><br><img src=\"/img/1586435636294.png\" alt=\"开墙最小路径算法2\"><br><img src=\"/img/1586435663044.png\" alt=\"开墙最小路径算法3\"></p>\n</blockquote>\n"},{"title":"线性代数-笔记1","_content":"\n\n#### 第一章、线性代数中的线性方程组\n\n##### \n1.线性方程组等价⇔解集相同⇔增广矩阵行等价\n2.线性方程组的解：null/one/infinite\n3.线性方程组相容：有解（one/infinite）\n4.行初等变换：\n倍加：加上另一行的倍数\n对换：两行互换\n倍乘：一行各元素乘一个标量\n5.行初等变换是可逆的\n6.（行）阶梯形矩阵（缩写为REF）\n每一非零行在每一零行之上\n下方的行的先导元素在右方\n> 推论：先导元素（一行的最左非零元素）所在列的下面全是零\n\n7.简化（行）阶梯形（缩写为RREF）\n先导元素都是1\n先导元素是所在列唯一的非零元素\n简化阶梯形是唯一的\n\n8. 主元位置：阶梯形中先导元素的位置；主元列*：含主元位置的列\n主元列对应基本变量，非主元列对应自由变量\n9.线性方程组相容⇔增广矩阵最右列不是主元列（没有0=b情况出现，其中b为非零常数）\n10.**向量方程**： 以向量的方式代表一个单列矩阵，如：（3，-1）对应2x1列矩阵\n11.证明某个向量c在其他两个向量a,b组成的面上，只需要证明存在r1,r2为实数让c = r1a + r2b成立。\n12.向量方程与矩阵方程：\n向量方程以向量加未知数的形式组成部成方程。矩阵方程将方程组写成矩阵 乘 向量组成的方程。\n\n\n","source":"_posts/线性代数-笔记1.md","raw":"---\ntitle: 线性代数-笔记1\ncategories:\n- 数学\n---\n\n\n#### 第一章、线性代数中的线性方程组\n\n##### \n1.线性方程组等价⇔解集相同⇔增广矩阵行等价\n2.线性方程组的解：null/one/infinite\n3.线性方程组相容：有解（one/infinite）\n4.行初等变换：\n倍加：加上另一行的倍数\n对换：两行互换\n倍乘：一行各元素乘一个标量\n5.行初等变换是可逆的\n6.（行）阶梯形矩阵（缩写为REF）\n每一非零行在每一零行之上\n下方的行的先导元素在右方\n> 推论：先导元素（一行的最左非零元素）所在列的下面全是零\n\n7.简化（行）阶梯形（缩写为RREF）\n先导元素都是1\n先导元素是所在列唯一的非零元素\n简化阶梯形是唯一的\n\n8. 主元位置：阶梯形中先导元素的位置；主元列*：含主元位置的列\n主元列对应基本变量，非主元列对应自由变量\n9.线性方程组相容⇔增广矩阵最右列不是主元列（没有0=b情况出现，其中b为非零常数）\n10.**向量方程**： 以向量的方式代表一个单列矩阵，如：（3，-1）对应2x1列矩阵\n11.证明某个向量c在其他两个向量a,b组成的面上，只需要证明存在r1,r2为实数让c = r1a + r2b成立。\n12.向量方程与矩阵方程：\n向量方程以向量加未知数的形式组成部成方程。矩阵方程将方程组写成矩阵 乘 向量组成的方程。\n\n\n","slug":"线性代数-笔记1","published":1,"date":"2020-09-08T03:23:20.891Z","updated":"2020-09-08T03:23:20.891Z","_id":"ckdpclv06005b8sr3ueayjqyh","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"第一章、线性代数中的线性方程组\"><a href=\"#第一章、线性代数中的线性方程组\" class=\"headerlink\" title=\"第一章、线性代数中的线性方程组\"></a>第一章、线性代数中的线性方程组</h4><h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5><p>1.线性方程组等价⇔解集相同⇔增广矩阵行等价<br>2.线性方程组的解：null/one/infinite<br>3.线性方程组相容：有解（one/infinite）<br>4.行初等变换：<br>倍加：加上另一行的倍数<br>对换：两行互换<br>倍乘：一行各元素乘一个标量<br>5.行初等变换是可逆的<br>6.（行）阶梯形矩阵（缩写为REF）<br>每一非零行在每一零行之上<br>下方的行的先导元素在右方</p>\n<blockquote>\n<p>推论：先导元素（一行的最左非零元素）所在列的下面全是零</p>\n</blockquote>\n<p>7.简化（行）阶梯形（缩写为RREF）<br>先导元素都是1<br>先导元素是所在列唯一的非零元素<br>简化阶梯形是唯一的</p>\n<ol start=\"8\">\n<li>主元位置：阶梯形中先导元素的位置；主元列*：含主元位置的列<br>主元列对应基本变量，非主元列对应自由变量</li>\n<li>线性方程组相容⇔增广矩阵最右列不是主元列（没有0=b情况出现，其中b为非零常数）</li>\n<li><strong>向量方程</strong>： 以向量的方式代表一个单列矩阵，如：（3，-1）对应2x1列矩阵</li>\n<li>证明某个向量c在其他两个向量a,b组成的面上，只需要证明存在r1,r2为实数让c = r1a + r2b成立。</li>\n<li>向量方程与矩阵方程：<br>向量方程以向量加未知数的形式组成部成方程。矩阵方程将方程组写成矩阵 乘 向量组成的方程。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"第一章、线性代数中的线性方程组\"><a href=\"#第一章、线性代数中的线性方程组\" class=\"headerlink\" title=\"第一章、线性代数中的线性方程组\"></a>第一章、线性代数中的线性方程组</h4><h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5><p>1.线性方程组等价⇔解集相同⇔增广矩阵行等价<br>2.线性方程组的解：null/one/infinite<br>3.线性方程组相容：有解（one/infinite）<br>4.行初等变换：<br>倍加：加上另一行的倍数<br>对换：两行互换<br>倍乘：一行各元素乘一个标量<br>5.行初等变换是可逆的<br>6.（行）阶梯形矩阵（缩写为REF）<br>每一非零行在每一零行之上<br>下方的行的先导元素在右方</p>\n<blockquote>\n<p>推论：先导元素（一行的最左非零元素）所在列的下面全是零</p>\n</blockquote>\n<p>7.简化（行）阶梯形（缩写为RREF）<br>先导元素都是1<br>先导元素是所在列唯一的非零元素<br>简化阶梯形是唯一的</p>\n<ol start=\"8\">\n<li>主元位置：阶梯形中先导元素的位置；主元列*：含主元位置的列<br>主元列对应基本变量，非主元列对应自由变量</li>\n<li>线性方程组相容⇔增广矩阵最右列不是主元列（没有0=b情况出现，其中b为非零常数）</li>\n<li><strong>向量方程</strong>： 以向量的方式代表一个单列矩阵，如：（3，-1）对应2x1列矩阵</li>\n<li>证明某个向量c在其他两个向量a,b组成的面上，只需要证明存在r1,r2为实数让c = r1a + r2b成立。</li>\n<li>向量方程与矩阵方程：<br>向量方程以向量加未知数的形式组成部成方程。矩阵方程将方程组写成矩阵 乘 向量组成的方程。</li>\n</ol>\n"},{"title":"最新Addressable资源打包与加载框架","_content":"\n#### 一、Addressable介绍\n\nAddressable是Unity最新推出且正式发布的资源管理系统，内含引用计数管理，快速资源热更，资源性能查看器，资源冗余工具等等，据官方的说法，这就像当初AssetBundle取代Resources一样，Addressable就是为了取代直接使用AssetBundle而生。\n\n#### 二、Addressable下载更新\n> 内容均在ResDownloadComponent中。\n\n##### 1. 打包资源\n手动： 使用 Build ->New Build -> Default Build Script。 也可用打包脚本，`AddressableAssetSettings.CleanPlayerContent();\n        AddressableAssetSettings.BuildPlayerContent();`\n生成的资源将在Library->com.unityengine.addressable下\n> 建议本机初次导项目后，先执行一次打包资源，再使用Use Existing Build的Play Mode Script方式，以bundle加载运行，方便测试。\n\n##### 2. 更新资源\n* 在发完包的情况下，在打包的机器上的Unity，选择Tools -> Check for Content Update Restriction 来获取变更的资源\n* 将这些资源应用出来一个新的Group， 再统一挂上updates的标签！\n* 选择Build -> Update a previous build 选择android的bin文件，等待完成，将会生成新的updates开头的更新文件，将这些文件上传即可更新。\n> 更新完后之后，如果再需要出包，请将资源归还到原group中，以防下次混乱了。\n\n#### 3.打包工具使用\n本地打包，可使用Tools -> 打包工具，勾选 是否打包工程，将导出一个gradle的工程，否则将先打出工程后接着打出apk。\n打包机不可使用此工具打包，由CI控制。\n\n#### 三、Addressable内置接口介绍\n\n> 针对Addressable有两个缓存池，一个针对asset的 AssetCachePoolComponent，用于存放所有的资源，一般存放不需要实例化的资源，如material等。  另一个针对实例对象的 ResGameObjectPoolComponent， 用于存放实例出来的资源，会记录对象的handle句柄和对象实例列表。\n\n ##### 1. 加载接口\n\n1.1 LoadAssetAsyncHandle(assetName, saveToCache = false, isGlobal = false)\n * 以asset的形式加载资源不实例化，只返回相应资源句柄. [saveToCache]意为加载完的资源将直接记到缓存池，[isGlobal] 决定了是全局缓存池还是场景缓存池\n**注意： [isGlobal]只在[saveToCache]为 true 时才会使用,用于保存在全局缓存池或对应场景的池子中**\n```csharp\n ETTask<AsyncOperationHandle<T>> LoadAssetAsyncHandle<T>(string assetName, bool saveToCache = false, bool isGlobal = false)\n```\n\n>简单用法使用示例：(加载配置文件的Config预制)\n>\n>```csharp\n> //获取加载完的句柄\n>var configGOHandle = await ResourceLoaderComponent.Instance.LoadAssetAsyncHandle<GameObject>(\"Config\");\n>//从Handle中获取结果\n> configGO = configGOHandle.Result;\n> //当时即销毁此Handle\n>ResourceLoaderComponent.Instance.ReleaseHandle(configGOHandle);\n\n\n>深度使用示例：\n>```csharp\n>//预加载需要用的材质，设值记录到缓存, 且非全局资源\n>await ResourceLoaderComponent.Instance.LoadAssetAsyncHandle<Material>(\"GrayMaterial\",true,false);\n> //从缓存加载对应的材质\n> Material MAT_GARY = ResourceLoaderComponent.Instance.LoadFromCache<Material>(\"GrayMaterial\", false);\n>//从缓存删除对应的材质\n> ResourceLoaderComponent.Instance.ReleaseFromCache(\"GrayMaterial\",false,typeof(Material));\n>```\n\n1.2 LoadAssetsAsyncHandle(assetName, label = ResourceLabel.none, saveToCache = false, isGlobal = false)\n* 以asset的形式加载资源不实例化，只返回相应此资源数组句柄. 区别于1.1接口，此接口可配置多一个label的参数指明资源标签。\n**注意：如果保存到缓存中，则是一个数组，LoadFromCache时必须使用一个数组返回。**\n```csharp\n ETTask<AsyncOperationHandle<IList<T>>> LoadAssetsAsyncHandle<T>(string assetName, ResourceLabel label = ResourceLabel.none, bool saveToCache = false, bool isGlobal = false)\n```\n\n>使用示例：\n>```csharp\n>var handle = await Game.Scene.GetComponent<ResourceLoaderComponent>().LoadAssetsAsyncHandle<GameObject>(\"HeadResSmallSize\",ResourceLabel.ui);\n>var userIcon = handle.Result[0];\n>``` \n \n1.3 LoadPrefab(assetName, label, dontDestroy = false, parent = null)\n* 以asset和label的形式加载资源并实例化, 如果dontDestroy为true，则为全局资源，不随场景删除\n```csharp\n ETTask<GameObject> LoadPrefab(string assetName, ResourceLabel label = ResourceLabel.none, bool dontDestroy = false, Transform parent = null)\n```\n\n>使用示例：\n>```csharp\n>//(配置Buff的预制)\n> GameObject configGo = await Game.Scene.GetComponent<ResourceLoaderComponent>().LoadPrefab($\"{buffCfg}\",ResourceLabel.buff);\n >```\n\n1.4 LoadPrefab(assetName, label, scene, parent = null)\n* 以asset和label的形式加载资源并实例化,同1.3，不过传入一个框架里的Scene对象用于存储此对象的缓存池\n```csharp\n ETTask<GameObject> LoadPrefab(string assetName, ResourceLabel label = ResourceLabel.none, bool dontDestroy = false, Transform parent = null)\n```\n\n ##### 2. 缓存类接口\n \n 2.1 ReleaseFromCache(string key, bool isGlobal, Type resType)\n* 将某个key直接从【AssetCachePool】对象池子里释放，isGlobal决定了使用全局缓存池还是场景缓存池\n\n2.2 LoadFromCache<T>(string key, bool isGlobal) where T: UnityEngine.Object\n * 从【ResGameObjectPool】缓存池加载一个类型T的对象，isGlobal决定了使用全局缓存池还是场景缓存池\n\n2.3 RecyclePrefab(string poolKey,GameObject o, bool isGlobal = false)\n* 将对象o回收进某个key对应的【ResGameObjectPool】缓存池，isGlobal决定了使用全局缓存池还是场景缓存池\n\n2.4 RecyclePrefab(string assetName, ResourceLabel resLabel, GameObject o, bool isGlobal = false)\n* 将对象o回收进某个资源名及label对应的【ResGameObjectPool】缓存池，isGlobal决定了使用全局缓存池还是场景缓存池\n\n2.5 ReleasePrefab(string assetName, ResourceLabel resLabel, bool isGlobal = false)\n*  将对应assetName和resLabel的实例对象从【ResGameObjectPool】池子中释放（清除），isGlobal决定了使用全局缓存池还是场景缓存池\n\n\n##### 3. addressable接口\n\n3.1 ReleaseHandle(AsyncOperationHandle handle)\n* 释放一个addressable的异步句柄 \n\n","source":"_posts/最新Addressable资源打包与加载框架.md","raw":"---\ntitle: 最新Addressable资源打包与加载框架\ncategories:\n- 公司\ntags: \n---\n\n#### 一、Addressable介绍\n\nAddressable是Unity最新推出且正式发布的资源管理系统，内含引用计数管理，快速资源热更，资源性能查看器，资源冗余工具等等，据官方的说法，这就像当初AssetBundle取代Resources一样，Addressable就是为了取代直接使用AssetBundle而生。\n\n#### 二、Addressable下载更新\n> 内容均在ResDownloadComponent中。\n\n##### 1. 打包资源\n手动： 使用 Build ->New Build -> Default Build Script。 也可用打包脚本，`AddressableAssetSettings.CleanPlayerContent();\n        AddressableAssetSettings.BuildPlayerContent();`\n生成的资源将在Library->com.unityengine.addressable下\n> 建议本机初次导项目后，先执行一次打包资源，再使用Use Existing Build的Play Mode Script方式，以bundle加载运行，方便测试。\n\n##### 2. 更新资源\n* 在发完包的情况下，在打包的机器上的Unity，选择Tools -> Check for Content Update Restriction 来获取变更的资源\n* 将这些资源应用出来一个新的Group， 再统一挂上updates的标签！\n* 选择Build -> Update a previous build 选择android的bin文件，等待完成，将会生成新的updates开头的更新文件，将这些文件上传即可更新。\n> 更新完后之后，如果再需要出包，请将资源归还到原group中，以防下次混乱了。\n\n#### 3.打包工具使用\n本地打包，可使用Tools -> 打包工具，勾选 是否打包工程，将导出一个gradle的工程，否则将先打出工程后接着打出apk。\n打包机不可使用此工具打包，由CI控制。\n\n#### 三、Addressable内置接口介绍\n\n> 针对Addressable有两个缓存池，一个针对asset的 AssetCachePoolComponent，用于存放所有的资源，一般存放不需要实例化的资源，如material等。  另一个针对实例对象的 ResGameObjectPoolComponent， 用于存放实例出来的资源，会记录对象的handle句柄和对象实例列表。\n\n ##### 1. 加载接口\n\n1.1 LoadAssetAsyncHandle(assetName, saveToCache = false, isGlobal = false)\n * 以asset的形式加载资源不实例化，只返回相应资源句柄. [saveToCache]意为加载完的资源将直接记到缓存池，[isGlobal] 决定了是全局缓存池还是场景缓存池\n**注意： [isGlobal]只在[saveToCache]为 true 时才会使用,用于保存在全局缓存池或对应场景的池子中**\n```csharp\n ETTask<AsyncOperationHandle<T>> LoadAssetAsyncHandle<T>(string assetName, bool saveToCache = false, bool isGlobal = false)\n```\n\n>简单用法使用示例：(加载配置文件的Config预制)\n>\n>```csharp\n> //获取加载完的句柄\n>var configGOHandle = await ResourceLoaderComponent.Instance.LoadAssetAsyncHandle<GameObject>(\"Config\");\n>//从Handle中获取结果\n> configGO = configGOHandle.Result;\n> //当时即销毁此Handle\n>ResourceLoaderComponent.Instance.ReleaseHandle(configGOHandle);\n\n\n>深度使用示例：\n>```csharp\n>//预加载需要用的材质，设值记录到缓存, 且非全局资源\n>await ResourceLoaderComponent.Instance.LoadAssetAsyncHandle<Material>(\"GrayMaterial\",true,false);\n> //从缓存加载对应的材质\n> Material MAT_GARY = ResourceLoaderComponent.Instance.LoadFromCache<Material>(\"GrayMaterial\", false);\n>//从缓存删除对应的材质\n> ResourceLoaderComponent.Instance.ReleaseFromCache(\"GrayMaterial\",false,typeof(Material));\n>```\n\n1.2 LoadAssetsAsyncHandle(assetName, label = ResourceLabel.none, saveToCache = false, isGlobal = false)\n* 以asset的形式加载资源不实例化，只返回相应此资源数组句柄. 区别于1.1接口，此接口可配置多一个label的参数指明资源标签。\n**注意：如果保存到缓存中，则是一个数组，LoadFromCache时必须使用一个数组返回。**\n```csharp\n ETTask<AsyncOperationHandle<IList<T>>> LoadAssetsAsyncHandle<T>(string assetName, ResourceLabel label = ResourceLabel.none, bool saveToCache = false, bool isGlobal = false)\n```\n\n>使用示例：\n>```csharp\n>var handle = await Game.Scene.GetComponent<ResourceLoaderComponent>().LoadAssetsAsyncHandle<GameObject>(\"HeadResSmallSize\",ResourceLabel.ui);\n>var userIcon = handle.Result[0];\n>``` \n \n1.3 LoadPrefab(assetName, label, dontDestroy = false, parent = null)\n* 以asset和label的形式加载资源并实例化, 如果dontDestroy为true，则为全局资源，不随场景删除\n```csharp\n ETTask<GameObject> LoadPrefab(string assetName, ResourceLabel label = ResourceLabel.none, bool dontDestroy = false, Transform parent = null)\n```\n\n>使用示例：\n>```csharp\n>//(配置Buff的预制)\n> GameObject configGo = await Game.Scene.GetComponent<ResourceLoaderComponent>().LoadPrefab($\"{buffCfg}\",ResourceLabel.buff);\n >```\n\n1.4 LoadPrefab(assetName, label, scene, parent = null)\n* 以asset和label的形式加载资源并实例化,同1.3，不过传入一个框架里的Scene对象用于存储此对象的缓存池\n```csharp\n ETTask<GameObject> LoadPrefab(string assetName, ResourceLabel label = ResourceLabel.none, bool dontDestroy = false, Transform parent = null)\n```\n\n ##### 2. 缓存类接口\n \n 2.1 ReleaseFromCache(string key, bool isGlobal, Type resType)\n* 将某个key直接从【AssetCachePool】对象池子里释放，isGlobal决定了使用全局缓存池还是场景缓存池\n\n2.2 LoadFromCache<T>(string key, bool isGlobal) where T: UnityEngine.Object\n * 从【ResGameObjectPool】缓存池加载一个类型T的对象，isGlobal决定了使用全局缓存池还是场景缓存池\n\n2.3 RecyclePrefab(string poolKey,GameObject o, bool isGlobal = false)\n* 将对象o回收进某个key对应的【ResGameObjectPool】缓存池，isGlobal决定了使用全局缓存池还是场景缓存池\n\n2.4 RecyclePrefab(string assetName, ResourceLabel resLabel, GameObject o, bool isGlobal = false)\n* 将对象o回收进某个资源名及label对应的【ResGameObjectPool】缓存池，isGlobal决定了使用全局缓存池还是场景缓存池\n\n2.5 ReleasePrefab(string assetName, ResourceLabel resLabel, bool isGlobal = false)\n*  将对应assetName和resLabel的实例对象从【ResGameObjectPool】池子中释放（清除），isGlobal决定了使用全局缓存池还是场景缓存池\n\n\n##### 3. addressable接口\n\n3.1 ReleaseHandle(AsyncOperationHandle handle)\n* 释放一个addressable的异步句柄 \n\n","slug":"最新Addressable资源打包与加载框架","published":1,"date":"2020-09-08T03:23:20.891Z","updated":"2020-09-08T03:23:20.891Z","_id":"ckdpclv07005e8sr3lbr3r1ja","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"一、Addressable介绍\"><a href=\"#一、Addressable介绍\" class=\"headerlink\" title=\"一、Addressable介绍\"></a>一、Addressable介绍</h4><p>Addressable是Unity最新推出且正式发布的资源管理系统，内含引用计数管理，快速资源热更，资源性能查看器，资源冗余工具等等，据官方的说法，这就像当初AssetBundle取代Resources一样，Addressable就是为了取代直接使用AssetBundle而生。</p>\n<h4 id=\"二、Addressable下载更新\"><a href=\"#二、Addressable下载更新\" class=\"headerlink\" title=\"二、Addressable下载更新\"></a>二、Addressable下载更新</h4><blockquote>\n<p>内容均在ResDownloadComponent中。</p>\n</blockquote>\n<h5 id=\"1-打包资源\"><a href=\"#1-打包资源\" class=\"headerlink\" title=\"1. 打包资源\"></a>1. 打包资源</h5><p>手动： 使用 Build -&gt;New Build -&gt; Default Build Script。 也可用打包脚本，<code>AddressableAssetSettings.CleanPlayerContent();\n        AddressableAssetSettings.BuildPlayerContent();</code><br>生成的资源将在Library-&gt;com.unityengine.addressable下</p>\n<blockquote>\n<p>建议本机初次导项目后，先执行一次打包资源，再使用Use Existing Build的Play Mode Script方式，以bundle加载运行，方便测试。</p>\n</blockquote>\n<h5 id=\"2-更新资源\"><a href=\"#2-更新资源\" class=\"headerlink\" title=\"2. 更新资源\"></a>2. 更新资源</h5><ul>\n<li>在发完包的情况下，在打包的机器上的Unity，选择Tools -&gt; Check for Content Update Restriction 来获取变更的资源</li>\n<li>将这些资源应用出来一个新的Group， 再统一挂上updates的标签！</li>\n<li>选择Build -&gt; Update a previous build 选择android的bin文件，等待完成，将会生成新的updates开头的更新文件，将这些文件上传即可更新。<blockquote>\n<p>更新完后之后，如果再需要出包，请将资源归还到原group中，以防下次混乱了。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"3-打包工具使用\"><a href=\"#3-打包工具使用\" class=\"headerlink\" title=\"3.打包工具使用\"></a>3.打包工具使用</h4><p>本地打包，可使用Tools -&gt; 打包工具，勾选 是否打包工程，将导出一个gradle的工程，否则将先打出工程后接着打出apk。<br>打包机不可使用此工具打包，由CI控制。</p>\n<h4 id=\"三、Addressable内置接口介绍\"><a href=\"#三、Addressable内置接口介绍\" class=\"headerlink\" title=\"三、Addressable内置接口介绍\"></a>三、Addressable内置接口介绍</h4><blockquote>\n<p>针对Addressable有两个缓存池，一个针对asset的 AssetCachePoolComponent，用于存放所有的资源，一般存放不需要实例化的资源，如material等。  另一个针对实例对象的 ResGameObjectPoolComponent， 用于存放实例出来的资源，会记录对象的handle句柄和对象实例列表。</p>\n</blockquote>\n<h5 id=\"1-加载接口\"><a href=\"#1-加载接口\" class=\"headerlink\" title=\"1. 加载接口\"></a>1. 加载接口</h5><p>1.1 LoadAssetAsyncHandle(assetName, saveToCache = false, isGlobal = false)</p>\n<ul>\n<li>以asset的形式加载资源不实例化，只返回相应资源句柄. [saveToCache]意为加载完的资源将直接记到缓存池，[isGlobal] 决定了是全局缓存池还是场景缓存池<br><strong>注意： [isGlobal]只在[saveToCache]为 true 时才会使用,用于保存在全局缓存池或对应场景的池子中</strong><pre><code class=\"csharp\">ETTask&lt;AsyncOperationHandle&lt;T&gt;&gt; LoadAssetAsyncHandle&lt;T&gt;(string assetName, bool saveToCache = false, bool isGlobal = false)</code></pre>\n</li>\n</ul>\n<blockquote>\n<p>简单用法使用示例：(加载配置文件的Config预制)</p>\n<pre><code class=\"csharp\">//获取加载完的句柄\nvar configGOHandle = await ResourceLoaderComponent.Instance.LoadAssetAsyncHandle&lt;GameObject&gt;(&quot;Config&quot;);\n//从Handle中获取结果\nconfigGO = configGOHandle.Result;\n//当时即销毁此Handle\nResourceLoaderComponent.Instance.ReleaseHandle(configGOHandle);</code></pre>\n</blockquote>\n<blockquote>\n<p>深度使用示例：</p>\n<pre><code class=\"csharp\">//预加载需要用的材质，设值记录到缓存, 且非全局资源\nawait ResourceLoaderComponent.Instance.LoadAssetAsyncHandle&lt;Material&gt;(&quot;GrayMaterial&quot;,true,false);\n//从缓存加载对应的材质\nMaterial MAT_GARY = ResourceLoaderComponent.Instance.LoadFromCache&lt;Material&gt;(&quot;GrayMaterial&quot;, false);\n//从缓存删除对应的材质\nResourceLoaderComponent.Instance.ReleaseFromCache(&quot;GrayMaterial&quot;,false,typeof(Material));</code></pre>\n</blockquote>\n<p>1.2 LoadAssetsAsyncHandle(assetName, label = ResourceLabel.none, saveToCache = false, isGlobal = false)</p>\n<ul>\n<li>以asset的形式加载资源不实例化，只返回相应此资源数组句柄. 区别于1.1接口，此接口可配置多一个label的参数指明资源标签。</li>\n<li><em>注意：如果保存到缓存中，则是一个数组，LoadFromCache时必须使用一个数组返回。*</em><pre><code class=\"csharp\">ETTask&lt;AsyncOperationHandle&lt;IList&lt;T&gt;&gt;&gt; LoadAssetsAsyncHandle&lt;T&gt;(string assetName, ResourceLabel label = ResourceLabel.none, bool saveToCache = false, bool isGlobal = false)</code></pre>\n</li>\n</ul>\n<blockquote>\n<p>使用示例：</p>\n<pre><code class=\"csharp\">var handle = await Game.Scene.GetComponent&lt;ResourceLoaderComponent&gt;().LoadAssetsAsyncHandle&lt;GameObject&gt;(&quot;HeadResSmallSize&quot;,ResourceLabel.ui);\nvar userIcon = handle.Result[0];</code></pre>\n</blockquote>\n<p>1.3 LoadPrefab(assetName, label, dontDestroy = false, parent = null)</p>\n<ul>\n<li>以asset和label的形式加载资源并实例化, 如果dontDestroy为true，则为全局资源，不随场景删除<pre><code class=\"csharp\">ETTask&lt;GameObject&gt; LoadPrefab(string assetName, ResourceLabel label = ResourceLabel.none, bool dontDestroy = false, Transform parent = null)</code></pre>\n</li>\n</ul>\n<blockquote>\n<p>使用示例：</p>\n<pre><code class=\"csharp\">//(配置Buff的预制)\nGameObject configGo = await Game.Scene.GetComponent&lt;ResourceLoaderComponent&gt;().LoadPrefab($&quot;{buffCfg}&quot;,ResourceLabel.buff);</code></pre>\n</blockquote>\n<p>1.4 LoadPrefab(assetName, label, scene, parent = null)</p>\n<ul>\n<li><p>以asset和label的形式加载资源并实例化,同1.3，不过传入一个框架里的Scene对象用于存储此对象的缓存池</p>\n<pre><code class=\"csharp\">ETTask&lt;GameObject&gt; LoadPrefab(string assetName, ResourceLabel label = ResourceLabel.none, bool dontDestroy = false, Transform parent = null)</code></pre>\n<h5 id=\"2-缓存类接口\"><a href=\"#2-缓存类接口\" class=\"headerlink\" title=\"2. 缓存类接口\"></a>2. 缓存类接口</h5><p>2.1 ReleaseFromCache(string key, bool isGlobal, Type resType)</p>\n</li>\n<li><p>将某个key直接从【AssetCachePool】对象池子里释放，isGlobal决定了使用全局缓存池还是场景缓存池</p>\n</li>\n</ul>\n<p>2.2 LoadFromCache<T>(string key, bool isGlobal) where T: UnityEngine.Object</p>\n<ul>\n<li>从【ResGameObjectPool】缓存池加载一个类型T的对象，isGlobal决定了使用全局缓存池还是场景缓存池</li>\n</ul>\n<p>2.3 RecyclePrefab(string poolKey,GameObject o, bool isGlobal = false)</p>\n<ul>\n<li>将对象o回收进某个key对应的【ResGameObjectPool】缓存池，isGlobal决定了使用全局缓存池还是场景缓存池</li>\n</ul>\n<p>2.4 RecyclePrefab(string assetName, ResourceLabel resLabel, GameObject o, bool isGlobal = false)</p>\n<ul>\n<li>将对象o回收进某个资源名及label对应的【ResGameObjectPool】缓存池，isGlobal决定了使用全局缓存池还是场景缓存池</li>\n</ul>\n<p>2.5 ReleasePrefab(string assetName, ResourceLabel resLabel, bool isGlobal = false)</p>\n<ul>\n<li>将对应assetName和resLabel的实例对象从【ResGameObjectPool】池子中释放（清除），isGlobal决定了使用全局缓存池还是场景缓存池</li>\n</ul>\n<h5 id=\"3-addressable接口\"><a href=\"#3-addressable接口\" class=\"headerlink\" title=\"3. addressable接口\"></a>3. addressable接口</h5><p>3.1 ReleaseHandle(AsyncOperationHandle handle)</p>\n<ul>\n<li>释放一个addressable的异步句柄 </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、Addressable介绍\"><a href=\"#一、Addressable介绍\" class=\"headerlink\" title=\"一、Addressable介绍\"></a>一、Addressable介绍</h4><p>Addressable是Unity最新推出且正式发布的资源管理系统，内含引用计数管理，快速资源热更，资源性能查看器，资源冗余工具等等，据官方的说法，这就像当初AssetBundle取代Resources一样，Addressable就是为了取代直接使用AssetBundle而生。</p>\n<h4 id=\"二、Addressable下载更新\"><a href=\"#二、Addressable下载更新\" class=\"headerlink\" title=\"二、Addressable下载更新\"></a>二、Addressable下载更新</h4><blockquote>\n<p>内容均在ResDownloadComponent中。</p>\n</blockquote>\n<h5 id=\"1-打包资源\"><a href=\"#1-打包资源\" class=\"headerlink\" title=\"1. 打包资源\"></a>1. 打包资源</h5><p>手动： 使用 Build -&gt;New Build -&gt; Default Build Script。 也可用打包脚本，<code>AddressableAssetSettings.CleanPlayerContent();\n        AddressableAssetSettings.BuildPlayerContent();</code><br>生成的资源将在Library-&gt;com.unityengine.addressable下</p>\n<blockquote>\n<p>建议本机初次导项目后，先执行一次打包资源，再使用Use Existing Build的Play Mode Script方式，以bundle加载运行，方便测试。</p>\n</blockquote>\n<h5 id=\"2-更新资源\"><a href=\"#2-更新资源\" class=\"headerlink\" title=\"2. 更新资源\"></a>2. 更新资源</h5><ul>\n<li>在发完包的情况下，在打包的机器上的Unity，选择Tools -&gt; Check for Content Update Restriction 来获取变更的资源</li>\n<li>将这些资源应用出来一个新的Group， 再统一挂上updates的标签！</li>\n<li>选择Build -&gt; Update a previous build 选择android的bin文件，等待完成，将会生成新的updates开头的更新文件，将这些文件上传即可更新。<blockquote>\n<p>更新完后之后，如果再需要出包，请将资源归还到原group中，以防下次混乱了。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"3-打包工具使用\"><a href=\"#3-打包工具使用\" class=\"headerlink\" title=\"3.打包工具使用\"></a>3.打包工具使用</h4><p>本地打包，可使用Tools -&gt; 打包工具，勾选 是否打包工程，将导出一个gradle的工程，否则将先打出工程后接着打出apk。<br>打包机不可使用此工具打包，由CI控制。</p>\n<h4 id=\"三、Addressable内置接口介绍\"><a href=\"#三、Addressable内置接口介绍\" class=\"headerlink\" title=\"三、Addressable内置接口介绍\"></a>三、Addressable内置接口介绍</h4><blockquote>\n<p>针对Addressable有两个缓存池，一个针对asset的 AssetCachePoolComponent，用于存放所有的资源，一般存放不需要实例化的资源，如material等。  另一个针对实例对象的 ResGameObjectPoolComponent， 用于存放实例出来的资源，会记录对象的handle句柄和对象实例列表。</p>\n</blockquote>\n<h5 id=\"1-加载接口\"><a href=\"#1-加载接口\" class=\"headerlink\" title=\"1. 加载接口\"></a>1. 加载接口</h5><p>1.1 LoadAssetAsyncHandle(assetName, saveToCache = false, isGlobal = false)</p>\n<ul>\n<li>以asset的形式加载资源不实例化，只返回相应资源句柄. [saveToCache]意为加载完的资源将直接记到缓存池，[isGlobal] 决定了是全局缓存池还是场景缓存池<br><strong>注意： [isGlobal]只在[saveToCache]为 true 时才会使用,用于保存在全局缓存池或对应场景的池子中</strong><pre><code class=\"csharp\">ETTask&lt;AsyncOperationHandle&lt;T&gt;&gt; LoadAssetAsyncHandle&lt;T&gt;(string assetName, bool saveToCache = false, bool isGlobal = false)</code></pre>\n</li>\n</ul>\n<blockquote>\n<p>简单用法使用示例：(加载配置文件的Config预制)</p>\n<pre><code class=\"csharp\">//获取加载完的句柄\nvar configGOHandle = await ResourceLoaderComponent.Instance.LoadAssetAsyncHandle&lt;GameObject&gt;(&quot;Config&quot;);\n//从Handle中获取结果\nconfigGO = configGOHandle.Result;\n//当时即销毁此Handle\nResourceLoaderComponent.Instance.ReleaseHandle(configGOHandle);</code></pre>\n</blockquote>\n<blockquote>\n<p>深度使用示例：</p>\n<pre><code class=\"csharp\">//预加载需要用的材质，设值记录到缓存, 且非全局资源\nawait ResourceLoaderComponent.Instance.LoadAssetAsyncHandle&lt;Material&gt;(&quot;GrayMaterial&quot;,true,false);\n//从缓存加载对应的材质\nMaterial MAT_GARY = ResourceLoaderComponent.Instance.LoadFromCache&lt;Material&gt;(&quot;GrayMaterial&quot;, false);\n//从缓存删除对应的材质\nResourceLoaderComponent.Instance.ReleaseFromCache(&quot;GrayMaterial&quot;,false,typeof(Material));</code></pre>\n</blockquote>\n<p>1.2 LoadAssetsAsyncHandle(assetName, label = ResourceLabel.none, saveToCache = false, isGlobal = false)</p>\n<ul>\n<li>以asset的形式加载资源不实例化，只返回相应此资源数组句柄. 区别于1.1接口，此接口可配置多一个label的参数指明资源标签。</li>\n<li><em>注意：如果保存到缓存中，则是一个数组，LoadFromCache时必须使用一个数组返回。*</em><pre><code class=\"csharp\">ETTask&lt;AsyncOperationHandle&lt;IList&lt;T&gt;&gt;&gt; LoadAssetsAsyncHandle&lt;T&gt;(string assetName, ResourceLabel label = ResourceLabel.none, bool saveToCache = false, bool isGlobal = false)</code></pre>\n</li>\n</ul>\n<blockquote>\n<p>使用示例：</p>\n<pre><code class=\"csharp\">var handle = await Game.Scene.GetComponent&lt;ResourceLoaderComponent&gt;().LoadAssetsAsyncHandle&lt;GameObject&gt;(&quot;HeadResSmallSize&quot;,ResourceLabel.ui);\nvar userIcon = handle.Result[0];</code></pre>\n</blockquote>\n<p>1.3 LoadPrefab(assetName, label, dontDestroy = false, parent = null)</p>\n<ul>\n<li>以asset和label的形式加载资源并实例化, 如果dontDestroy为true，则为全局资源，不随场景删除<pre><code class=\"csharp\">ETTask&lt;GameObject&gt; LoadPrefab(string assetName, ResourceLabel label = ResourceLabel.none, bool dontDestroy = false, Transform parent = null)</code></pre>\n</li>\n</ul>\n<blockquote>\n<p>使用示例：</p>\n<pre><code class=\"csharp\">//(配置Buff的预制)\nGameObject configGo = await Game.Scene.GetComponent&lt;ResourceLoaderComponent&gt;().LoadPrefab($&quot;{buffCfg}&quot;,ResourceLabel.buff);</code></pre>\n</blockquote>\n<p>1.4 LoadPrefab(assetName, label, scene, parent = null)</p>\n<ul>\n<li><p>以asset和label的形式加载资源并实例化,同1.3，不过传入一个框架里的Scene对象用于存储此对象的缓存池</p>\n<pre><code class=\"csharp\">ETTask&lt;GameObject&gt; LoadPrefab(string assetName, ResourceLabel label = ResourceLabel.none, bool dontDestroy = false, Transform parent = null)</code></pre>\n<h5 id=\"2-缓存类接口\"><a href=\"#2-缓存类接口\" class=\"headerlink\" title=\"2. 缓存类接口\"></a>2. 缓存类接口</h5><p>2.1 ReleaseFromCache(string key, bool isGlobal, Type resType)</p>\n</li>\n<li><p>将某个key直接从【AssetCachePool】对象池子里释放，isGlobal决定了使用全局缓存池还是场景缓存池</p>\n</li>\n</ul>\n<p>2.2 LoadFromCache<T>(string key, bool isGlobal) where T: UnityEngine.Object</p>\n<ul>\n<li>从【ResGameObjectPool】缓存池加载一个类型T的对象，isGlobal决定了使用全局缓存池还是场景缓存池</li>\n</ul>\n<p>2.3 RecyclePrefab(string poolKey,GameObject o, bool isGlobal = false)</p>\n<ul>\n<li>将对象o回收进某个key对应的【ResGameObjectPool】缓存池，isGlobal决定了使用全局缓存池还是场景缓存池</li>\n</ul>\n<p>2.4 RecyclePrefab(string assetName, ResourceLabel resLabel, GameObject o, bool isGlobal = false)</p>\n<ul>\n<li>将对象o回收进某个资源名及label对应的【ResGameObjectPool】缓存池，isGlobal决定了使用全局缓存池还是场景缓存池</li>\n</ul>\n<p>2.5 ReleasePrefab(string assetName, ResourceLabel resLabel, bool isGlobal = false)</p>\n<ul>\n<li>将对应assetName和resLabel的实例对象从【ResGameObjectPool】池子中释放（清除），isGlobal决定了使用全局缓存池还是场景缓存池</li>\n</ul>\n<h5 id=\"3-addressable接口\"><a href=\"#3-addressable接口\" class=\"headerlink\" title=\"3. addressable接口\"></a>3. addressable接口</h5><p>3.1 ReleaseHandle(AsyncOperationHandle handle)</p>\n<ul>\n<li>释放一个addressable的异步句柄 </li>\n</ul>\n"},{"title":"计算机图形学编程笔记1","_content":"\n#### 一、搭建OPENGL 的C++环境\n\n* 1.1 准备工作\n 1. VS下的C++环境\n 2. 窗口显示库： GLFW \n>GLFW 安装编译的方法，32位使用编译会有问题，这里如果用64的话是： [具体细节](https://www.cnblogs.com/collectionne/p/6937644.html)\n>1. 进入GLFW官方网站glfw.org，下载源码\n>2.  安装CMAKE，使用CMAKE编译源码生成工程\n>3.生成完工程，打开工程，编译生成lib文件\n\n3.扩展库： GLEW，[官网下载]( http://glew.sourceforge.net/) 取出lib和dll文件即可\n4.数学库：GLM， 官网下载完即可。\n5.纹理库：SOIL2\n>SOIL2 安装方法：[具体细节](https://blog.csdn.net/Wonz5130/article/details/82828817)\n>1. 下载SOIL2源码\n>2.下载premake4\n>3.将premake4放到SOIL2的文件夹\n>4.终端cd到SOIL2的文件夹，执行命令： premake4 vs2012， 将生成工程文件\n>5.打开上面生成的VS工程，编译即可得到库\n\n* 1.2 制作项目模板\n1.准备lib文件夹，放glew,glfw, soil2的lib文件\n2.准备include文件夹，放GLEW的GL文件夹，GLFW的GLFW文件夹，glm文件夹， SOIL2的SOIL2文件夹。\n3.新建VS空C++项目，配置为win32\n4.配置项目的VC++的常规里的包含目录，添加Include文件夹\n5.链接器配置，常规添加lib文件夹，输入配置前面三个lib文件名加上opengl32.lib\n\n* 1.3 正式的项目开发\n1. 使用1.2创建的模板新建工程\n2. 拷贝glew32.dll到项目的debug或release目录中。\n\n#### 二、3D图形数据\n\n2.1 绘制流程描述：\n* init() 初始化时\n* 1. 创建一个缓冲区\n* 2. 将顶点数据复制到缓冲区\n* display()每帧刷新时。\n* 1. 启用缓冲区\n* 2. 将缓冲区数据绑定至顶点属性\n* 3. 启用顶点\n* 4. 使用glDrawArray画出来。\n\n2.2 VAO（Vertex Array Object）, VBO(Vertex Buffer Object)\n顶点数据会先放在一个缓冲区，而这个缓冲区就存储在VBO里。同场景可能有多个VBO。\n顶点数组对象则是opengl3.0引入的类似于VAO的组织性结构。\n>例： 当绘制两个对象时，可以声明两个VBO，一个VAO，glGenVertexArray生成VAO，glBindVertexArray激活VAO与顶点属性关联，再使用glGenBuffers生成缓冲区。\n\n2.3 使用统一变量\n在shader中将变量标记为Uniform后，在opengl中使用glGetuniformlocation得到对应的GL 的id。这样再通过glm::value_ptr取出对应的数值指针设值！。\n> 统一变量在每次从顶点缓存区拿值时都是不变的，可以理解为常量\n\n2.4 绘制立方体\n* 1.VAO,VBO初始化\n* 2.从相机的位置获取视角矩阵，V_MATRIX。 使用glm:translate\n* 3.从物体位置获取模型矩阵，M_MATRIX。 使用glm:translate\n* 4.从窗口，获取到P_MATRIX透视矩阵.。 使用glm:perspective\n* 5.将MV,P矩阵传到顶点shader里\n \n> 矩阵变换从右往左变换，将transMatrix * rotMatrix。先旋转再变位置。\n\n> 注意shader中的设值：\n> ```c++\n> \t//VBO关联，顶点着色器的location为0的值被找出来。并从第一个VBO库中将值给过去\n> \tglBindBuffer(GL_ARRAY_BUFFER, vbo[0]);\n> \tglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);\n> \tglEnableVertexAttribArray(0);\n> ```\n\n>注意Opengl的glm与GLSL中矩阵的定义规则：\n> GLSL中的矩阵与GLM都是以列读取的！\n\n```c++\n//glm的定义矩阵，以下两个矩阵变量是相同的，且以1,2,3,4为列往后排\nglm::mat4 test = {\n\t{1,2,3,4},\n\t{5,6,7,8},\n\t{9,10,11,12},\n\t{13,14,15,16},\n};\nglm::mat4 test2 = {\n\t1,2,3,4,\n\t5,6,7,8,\n\t9,10,11,12,\n\t13,14,15,16,\n};\n```\n\n2.5 使用矩阵栈来处理分层模型\n* 例 ：行星系统的实现流程\n* 1. 初始栈，实例一个vMatrix视觉矩阵\n* 2. 实现太阳：复制一个到栈顶，生成太阳的MV矩阵，复制一个到栈顶，生成太阳的旋转。画太阳，然后POP出太阳的旋转。\n* 3. 当前栈顶的是太阳的MV矩阵。以此复制到栈顶，生成行星的MV矩阵，复制到栈顶，生成行星的旋转。画行星，然后POP出行得的旋转。\n* 4. 当前栈顶是行星的MV矩阵，以此复制到栈顶，生成月亮的MV矩阵，生成旋转，生成缩放。\n* 5.前面四个步骤，此时栈，共有四个元素。从顶到底分别是，月亮，行星，太阳，视觉矩阵。依次弹出清空栈。\n  \n2.6 优化策略\n  * display帧刷新函数中不要定义或申请变量内存\n  * 背面剔除：\n  * 1.使用glEnable(GL_CULL_FACE) 激活此功能\n  * 2.使用glFrontFace(GL_CCW)设置逆时针为正向\n  * 3.使用glCullFace(GL_BACK)将背面剔除（默认）。 GL_FRONT 和GL_FRONT_AND_BACK\n   \n#### 纹理贴图-使用SOIL2\n\n3.1 使用纹理贴图\n* 1.使用SOIL_LOAD_TEXTURE获取到texture ID\n* 2.构建纹理坐标，以左下角为0,0为定，右上角为1,1。把纹理2D坐标点与3D模型坐标相映射。\n* 3.在display中使用glActiveTexture激活，用glBindTexture(GL_TEXTURE_2D, \"注：1中的texture ID\")\n* 4.vertex shader 收到纹理坐标传至 fragment shader\n* 5.fragmenet shader中使用sampler2d采样器，利用4中得到的坐标点取颜色值返回。\n\n3.2 多级渐远纹理贴图 Mipmapping - 避免校正采样误差伪影\n* 纹理中存储相同图像的连续一系列较低分辨率副本 。大小将比原图像大1/3\n* 如何在OpenGL使用：\n* 1.激活纹理。glBindTexture(GL_TEXTURE_2D, textureRef);\n* 2.使用glTexParameteri的GL_TEXTURE_MIN_FILTER 指明，四个方法：\n* GL_NEAREST_MIPMAP_NEAREST//取最近的纹素\n* GL_LINEAR_MIPMAP_NEAREST//线性\n* GL_NEAREST_MIPMAP_LINEAR//双线性\n* GL_LINEAR_MIPMAP_LINEAR //三线性\n\n3.3 各向异性过滤-AF\n恢复MIPMAPPING丢失的细节，标准MipMapping使用正方形分辨率MIP纹理，而AF可以使用各种矩形分辨率来采样。\n```c++\nif (glewIsSupported(\"GL_EXT_texture_filter_anisotropic\")) {\n\tcout<<\"支持各向异性！\"<<endl;\n}\n\n```\n3.4 环绕和平辅\n* 当纹理坐标不是\\[0, 1]\\的范围时，需要设置填充参数：\n* GL_REPEAT, GL_MIRRORED_REPEAT（当奇数时坐标反转）, GL_CLAMP_TO_EDGE（0，1以外强设成边界值）, GL_CLAMP_TO_BORDER(0，1以外的设成颜色)\n\n3.5 透视变形\n考虑情形如：矩形棋盘结构的纹理填充，在X轴旋转时将导致三角面交接处发生变形。\n默认opengl将会开启透视修复。\n> 使用noperspective 禁止opengl透视修复\n> ```c++\n> noperspective out texcoord;//顶点\n> noperspective in texcoord;//片面\n> ```\n\n\n","source":"_posts/计算机图形学编程笔记1.md","raw":"---\ntitle: 计算机图形学编程笔记1\ncategories:\n- 图形学\ntags: \n- 图形学\n---\n\n#### 一、搭建OPENGL 的C++环境\n\n* 1.1 准备工作\n 1. VS下的C++环境\n 2. 窗口显示库： GLFW \n>GLFW 安装编译的方法，32位使用编译会有问题，这里如果用64的话是： [具体细节](https://www.cnblogs.com/collectionne/p/6937644.html)\n>1. 进入GLFW官方网站glfw.org，下载源码\n>2.  安装CMAKE，使用CMAKE编译源码生成工程\n>3.生成完工程，打开工程，编译生成lib文件\n\n3.扩展库： GLEW，[官网下载]( http://glew.sourceforge.net/) 取出lib和dll文件即可\n4.数学库：GLM， 官网下载完即可。\n5.纹理库：SOIL2\n>SOIL2 安装方法：[具体细节](https://blog.csdn.net/Wonz5130/article/details/82828817)\n>1. 下载SOIL2源码\n>2.下载premake4\n>3.将premake4放到SOIL2的文件夹\n>4.终端cd到SOIL2的文件夹，执行命令： premake4 vs2012， 将生成工程文件\n>5.打开上面生成的VS工程，编译即可得到库\n\n* 1.2 制作项目模板\n1.准备lib文件夹，放glew,glfw, soil2的lib文件\n2.准备include文件夹，放GLEW的GL文件夹，GLFW的GLFW文件夹，glm文件夹， SOIL2的SOIL2文件夹。\n3.新建VS空C++项目，配置为win32\n4.配置项目的VC++的常规里的包含目录，添加Include文件夹\n5.链接器配置，常规添加lib文件夹，输入配置前面三个lib文件名加上opengl32.lib\n\n* 1.3 正式的项目开发\n1. 使用1.2创建的模板新建工程\n2. 拷贝glew32.dll到项目的debug或release目录中。\n\n#### 二、3D图形数据\n\n2.1 绘制流程描述：\n* init() 初始化时\n* 1. 创建一个缓冲区\n* 2. 将顶点数据复制到缓冲区\n* display()每帧刷新时。\n* 1. 启用缓冲区\n* 2. 将缓冲区数据绑定至顶点属性\n* 3. 启用顶点\n* 4. 使用glDrawArray画出来。\n\n2.2 VAO（Vertex Array Object）, VBO(Vertex Buffer Object)\n顶点数据会先放在一个缓冲区，而这个缓冲区就存储在VBO里。同场景可能有多个VBO。\n顶点数组对象则是opengl3.0引入的类似于VAO的组织性结构。\n>例： 当绘制两个对象时，可以声明两个VBO，一个VAO，glGenVertexArray生成VAO，glBindVertexArray激活VAO与顶点属性关联，再使用glGenBuffers生成缓冲区。\n\n2.3 使用统一变量\n在shader中将变量标记为Uniform后，在opengl中使用glGetuniformlocation得到对应的GL 的id。这样再通过glm::value_ptr取出对应的数值指针设值！。\n> 统一变量在每次从顶点缓存区拿值时都是不变的，可以理解为常量\n\n2.4 绘制立方体\n* 1.VAO,VBO初始化\n* 2.从相机的位置获取视角矩阵，V_MATRIX。 使用glm:translate\n* 3.从物体位置获取模型矩阵，M_MATRIX。 使用glm:translate\n* 4.从窗口，获取到P_MATRIX透视矩阵.。 使用glm:perspective\n* 5.将MV,P矩阵传到顶点shader里\n \n> 矩阵变换从右往左变换，将transMatrix * rotMatrix。先旋转再变位置。\n\n> 注意shader中的设值：\n> ```c++\n> \t//VBO关联，顶点着色器的location为0的值被找出来。并从第一个VBO库中将值给过去\n> \tglBindBuffer(GL_ARRAY_BUFFER, vbo[0]);\n> \tglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);\n> \tglEnableVertexAttribArray(0);\n> ```\n\n>注意Opengl的glm与GLSL中矩阵的定义规则：\n> GLSL中的矩阵与GLM都是以列读取的！\n\n```c++\n//glm的定义矩阵，以下两个矩阵变量是相同的，且以1,2,3,4为列往后排\nglm::mat4 test = {\n\t{1,2,3,4},\n\t{5,6,7,8},\n\t{9,10,11,12},\n\t{13,14,15,16},\n};\nglm::mat4 test2 = {\n\t1,2,3,4,\n\t5,6,7,8,\n\t9,10,11,12,\n\t13,14,15,16,\n};\n```\n\n2.5 使用矩阵栈来处理分层模型\n* 例 ：行星系统的实现流程\n* 1. 初始栈，实例一个vMatrix视觉矩阵\n* 2. 实现太阳：复制一个到栈顶，生成太阳的MV矩阵，复制一个到栈顶，生成太阳的旋转。画太阳，然后POP出太阳的旋转。\n* 3. 当前栈顶的是太阳的MV矩阵。以此复制到栈顶，生成行星的MV矩阵，复制到栈顶，生成行星的旋转。画行星，然后POP出行得的旋转。\n* 4. 当前栈顶是行星的MV矩阵，以此复制到栈顶，生成月亮的MV矩阵，生成旋转，生成缩放。\n* 5.前面四个步骤，此时栈，共有四个元素。从顶到底分别是，月亮，行星，太阳，视觉矩阵。依次弹出清空栈。\n  \n2.6 优化策略\n  * display帧刷新函数中不要定义或申请变量内存\n  * 背面剔除：\n  * 1.使用glEnable(GL_CULL_FACE) 激活此功能\n  * 2.使用glFrontFace(GL_CCW)设置逆时针为正向\n  * 3.使用glCullFace(GL_BACK)将背面剔除（默认）。 GL_FRONT 和GL_FRONT_AND_BACK\n   \n#### 纹理贴图-使用SOIL2\n\n3.1 使用纹理贴图\n* 1.使用SOIL_LOAD_TEXTURE获取到texture ID\n* 2.构建纹理坐标，以左下角为0,0为定，右上角为1,1。把纹理2D坐标点与3D模型坐标相映射。\n* 3.在display中使用glActiveTexture激活，用glBindTexture(GL_TEXTURE_2D, \"注：1中的texture ID\")\n* 4.vertex shader 收到纹理坐标传至 fragment shader\n* 5.fragmenet shader中使用sampler2d采样器，利用4中得到的坐标点取颜色值返回。\n\n3.2 多级渐远纹理贴图 Mipmapping - 避免校正采样误差伪影\n* 纹理中存储相同图像的连续一系列较低分辨率副本 。大小将比原图像大1/3\n* 如何在OpenGL使用：\n* 1.激活纹理。glBindTexture(GL_TEXTURE_2D, textureRef);\n* 2.使用glTexParameteri的GL_TEXTURE_MIN_FILTER 指明，四个方法：\n* GL_NEAREST_MIPMAP_NEAREST//取最近的纹素\n* GL_LINEAR_MIPMAP_NEAREST//线性\n* GL_NEAREST_MIPMAP_LINEAR//双线性\n* GL_LINEAR_MIPMAP_LINEAR //三线性\n\n3.3 各向异性过滤-AF\n恢复MIPMAPPING丢失的细节，标准MipMapping使用正方形分辨率MIP纹理，而AF可以使用各种矩形分辨率来采样。\n```c++\nif (glewIsSupported(\"GL_EXT_texture_filter_anisotropic\")) {\n\tcout<<\"支持各向异性！\"<<endl;\n}\n\n```\n3.4 环绕和平辅\n* 当纹理坐标不是\\[0, 1]\\的范围时，需要设置填充参数：\n* GL_REPEAT, GL_MIRRORED_REPEAT（当奇数时坐标反转）, GL_CLAMP_TO_EDGE（0，1以外强设成边界值）, GL_CLAMP_TO_BORDER(0，1以外的设成颜色)\n\n3.5 透视变形\n考虑情形如：矩形棋盘结构的纹理填充，在X轴旋转时将导致三角面交接处发生变形。\n默认opengl将会开启透视修复。\n> 使用noperspective 禁止opengl透视修复\n> ```c++\n> noperspective out texcoord;//顶点\n> noperspective in texcoord;//片面\n> ```\n\n\n","slug":"计算机图形学编程笔记1","published":1,"date":"2020-09-08T03:23:20.891Z","updated":"2020-09-08T03:23:20.891Z","_id":"ckdpclv09005j8sr3gt8d62oi","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"一、搭建OPENGL-的C-环境\"><a href=\"#一、搭建OPENGL-的C-环境\" class=\"headerlink\" title=\"一、搭建OPENGL 的C++环境\"></a>一、搭建OPENGL 的C++环境</h4><ul>\n<li>1.1 准备工作<ol>\n<li>VS下的C++环境</li>\n<li>窗口显示库： GLFW <blockquote>\n<p>GLFW 安装编译的方法，32位使用编译会有问题，这里如果用64的话是： <a href=\"https://www.cnblogs.com/collectionne/p/6937644.html\">具体细节</a></p>\n<ol>\n<li>进入GLFW官方网站glfw.org，下载源码</li>\n<li>安装CMAKE，使用CMAKE编译源码生成工程</li>\n<li>生成完工程，打开工程，编译生成lib文件</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n</li>\n</ul>\n<p>3.扩展库： GLEW，<a href=\"http://glew.sourceforge.net/\">官网下载</a> 取出lib和dll文件即可<br>4.数学库：GLM， 官网下载完即可。<br>5.纹理库：SOIL2</p>\n<blockquote>\n<p>SOIL2 安装方法：<a href=\"https://blog.csdn.net/Wonz5130/article/details/82828817\">具体细节</a></p>\n<ol>\n<li>下载SOIL2源码</li>\n<li>下载premake4</li>\n<li>将premake4放到SOIL2的文件夹</li>\n<li>终端cd到SOIL2的文件夹，执行命令： premake4 vs2012， 将生成工程文件</li>\n<li>打开上面生成的VS工程，编译即可得到库</li>\n</ol>\n</blockquote>\n<ul>\n<li>1.2 制作项目模板</li>\n</ul>\n<p>1.准备lib文件夹，放glew,glfw, soil2的lib文件<br>2.准备include文件夹，放GLEW的GL文件夹，GLFW的GLFW文件夹，glm文件夹， SOIL2的SOIL2文件夹。<br>3.新建VS空C++项目，配置为win32<br>4.配置项目的VC++的常规里的包含目录，添加Include文件夹<br>5.链接器配置，常规添加lib文件夹，输入配置前面三个lib文件名加上opengl32.lib</p>\n<ul>\n<li>1.3 正式的项目开发</li>\n</ul>\n<ol>\n<li>使用1.2创建的模板新建工程</li>\n<li>拷贝glew32.dll到项目的debug或release目录中。</li>\n</ol>\n<h4 id=\"二、3D图形数据\"><a href=\"#二、3D图形数据\" class=\"headerlink\" title=\"二、3D图形数据\"></a>二、3D图形数据</h4><p>2.1 绘制流程描述：</p>\n<ul>\n<li>init() 初始化时</li>\n<li><ol>\n<li>创建一个缓冲区</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>将顶点数据复制到缓冲区</li>\n</ol>\n</li>\n<li>display()每帧刷新时。</li>\n<li><ol>\n<li>启用缓冲区</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>将缓冲区数据绑定至顶点属性</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>启用顶点</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>使用glDrawArray画出来。</li>\n</ol>\n</li>\n</ul>\n<p>2.2 VAO（Vertex Array Object）, VBO(Vertex Buffer Object)<br>顶点数据会先放在一个缓冲区，而这个缓冲区就存储在VBO里。同场景可能有多个VBO。<br>顶点数组对象则是opengl3.0引入的类似于VAO的组织性结构。</p>\n<blockquote>\n<p>例： 当绘制两个对象时，可以声明两个VBO，一个VAO，glGenVertexArray生成VAO，glBindVertexArray激活VAO与顶点属性关联，再使用glGenBuffers生成缓冲区。</p>\n</blockquote>\n<p>2.3 使用统一变量<br>在shader中将变量标记为Uniform后，在opengl中使用glGetuniformlocation得到对应的GL 的id。这样再通过glm::value_ptr取出对应的数值指针设值！。</p>\n<blockquote>\n<p>统一变量在每次从顶点缓存区拿值时都是不变的，可以理解为常量</p>\n</blockquote>\n<p>2.4 绘制立方体</p>\n<ul>\n<li>1.VAO,VBO初始化</li>\n<li>2.从相机的位置获取视角矩阵，V_MATRIX。 使用glm:translate</li>\n<li>3.从物体位置获取模型矩阵，M_MATRIX。 使用glm:translate</li>\n<li>4.从窗口，获取到P_MATRIX透视矩阵.。 使用glm:perspective</li>\n<li>5.将MV,P矩阵传到顶点shader里</li>\n</ul>\n<blockquote>\n<p>矩阵变换从右往左变换，将transMatrix * rotMatrix。先旋转再变位置。</p>\n</blockquote>\n<blockquote>\n<p>注意shader中的设值：</p>\n<pre><code class=\"c++\">    //VBO关联，顶点着色器的location为0的值被找出来。并从第一个VBO库中将值给过去\n    glBindBuffer(GL_ARRAY_BUFFER, vbo[0]);\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);\n    glEnableVertexAttribArray(0);</code></pre>\n</blockquote>\n<blockquote>\n<p>注意Opengl的glm与GLSL中矩阵的定义规则：<br>GLSL中的矩阵与GLM都是以列读取的！</p>\n</blockquote>\n<pre><code class=\"c++\">//glm的定义矩阵，以下两个矩阵变量是相同的，且以1,2,3,4为列往后排\nglm::mat4 test = {\n    {1,2,3,4},\n    {5,6,7,8},\n    {9,10,11,12},\n    {13,14,15,16},\n};\nglm::mat4 test2 = {\n    1,2,3,4,\n    5,6,7,8,\n    9,10,11,12,\n    13,14,15,16,\n};</code></pre>\n<p>2.5 使用矩阵栈来处理分层模型</p>\n<ul>\n<li>例 ：行星系统的实现流程</li>\n<li><ol>\n<li>初始栈，实例一个vMatrix视觉矩阵</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>实现太阳：复制一个到栈顶，生成太阳的MV矩阵，复制一个到栈顶，生成太阳的旋转。画太阳，然后POP出太阳的旋转。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>当前栈顶的是太阳的MV矩阵。以此复制到栈顶，生成行星的MV矩阵，复制到栈顶，生成行星的旋转。画行星，然后POP出行得的旋转。</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>当前栈顶是行星的MV矩阵，以此复制到栈顶，生成月亮的MV矩阵，生成旋转，生成缩放。</li>\n</ol>\n</li>\n<li>5.前面四个步骤，此时栈，共有四个元素。从顶到底分别是，月亮，行星，太阳，视觉矩阵。依次弹出清空栈。</li>\n</ul>\n<p>2.6 优化策略</p>\n<ul>\n<li>display帧刷新函数中不要定义或申请变量内存</li>\n<li>背面剔除：</li>\n<li>1.使用glEnable(GL_CULL_FACE) 激活此功能</li>\n<li>2.使用glFrontFace(GL_CCW)设置逆时针为正向</li>\n<li>3.使用glCullFace(GL_BACK)将背面剔除（默认）。 GL_FRONT 和GL_FRONT_AND_BACK</li>\n</ul>\n<h4 id=\"纹理贴图-使用SOIL2\"><a href=\"#纹理贴图-使用SOIL2\" class=\"headerlink\" title=\"纹理贴图-使用SOIL2\"></a>纹理贴图-使用SOIL2</h4><p>3.1 使用纹理贴图</p>\n<ul>\n<li>1.使用SOIL_LOAD_TEXTURE获取到texture ID</li>\n<li>2.构建纹理坐标，以左下角为0,0为定，右上角为1,1。把纹理2D坐标点与3D模型坐标相映射。</li>\n<li>3.在display中使用glActiveTexture激活，用glBindTexture(GL_TEXTURE_2D, “注：1中的texture ID”)</li>\n<li>4.vertex shader 收到纹理坐标传至 fragment shader</li>\n<li>5.fragmenet shader中使用sampler2d采样器，利用4中得到的坐标点取颜色值返回。</li>\n</ul>\n<p>3.2 多级渐远纹理贴图 Mipmapping - 避免校正采样误差伪影</p>\n<ul>\n<li>纹理中存储相同图像的连续一系列较低分辨率副本 。大小将比原图像大1/3</li>\n<li>如何在OpenGL使用：</li>\n<li>1.激活纹理。glBindTexture(GL_TEXTURE_2D, textureRef);</li>\n<li>2.使用glTexParameteri的GL_TEXTURE_MIN_FILTER 指明，四个方法：</li>\n<li>GL_NEAREST_MIPMAP_NEAREST//取最近的纹素</li>\n<li>GL_LINEAR_MIPMAP_NEAREST//线性</li>\n<li>GL_NEAREST_MIPMAP_LINEAR//双线性</li>\n<li>GL_LINEAR_MIPMAP_LINEAR //三线性</li>\n</ul>\n<p>3.3 各向异性过滤-AF<br>恢复MIPMAPPING丢失的细节，标准MipMapping使用正方形分辨率MIP纹理，而AF可以使用各种矩形分辨率来采样。</p>\n<pre><code class=\"c++\">if (glewIsSupported(&quot;GL_EXT_texture_filter_anisotropic&quot;)) {\n    cout&lt;&lt;&quot;支持各向异性！&quot;&lt;&lt;endl;\n}\n</code></pre>\n<p>3.4 环绕和平辅</p>\n<ul>\n<li>当纹理坐标不是[0, 1]\\的范围时，需要设置填充参数：</li>\n<li>GL_REPEAT, GL_MIRRORED_REPEAT（当奇数时坐标反转）, GL_CLAMP_TO_EDGE（0，1以外强设成边界值）, GL_CLAMP_TO_BORDER(0，1以外的设成颜色)</li>\n</ul>\n<p>3.5 透视变形<br>考虑情形如：矩形棋盘结构的纹理填充，在X轴旋转时将导致三角面交接处发生变形。<br>默认opengl将会开启透视修复。</p>\n<blockquote>\n<p>使用noperspective 禁止opengl透视修复</p>\n<pre><code class=\"c++\">noperspective out texcoord;//顶点\nnoperspective in texcoord;//片面</code></pre>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、搭建OPENGL-的C-环境\"><a href=\"#一、搭建OPENGL-的C-环境\" class=\"headerlink\" title=\"一、搭建OPENGL 的C++环境\"></a>一、搭建OPENGL 的C++环境</h4><ul>\n<li>1.1 准备工作<ol>\n<li>VS下的C++环境</li>\n<li>窗口显示库： GLFW <blockquote>\n<p>GLFW 安装编译的方法，32位使用编译会有问题，这里如果用64的话是： <a href=\"https://www.cnblogs.com/collectionne/p/6937644.html\">具体细节</a></p>\n<ol>\n<li>进入GLFW官方网站glfw.org，下载源码</li>\n<li>安装CMAKE，使用CMAKE编译源码生成工程</li>\n<li>生成完工程，打开工程，编译生成lib文件</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n</li>\n</ul>\n<p>3.扩展库： GLEW，<a href=\"http://glew.sourceforge.net/\">官网下载</a> 取出lib和dll文件即可<br>4.数学库：GLM， 官网下载完即可。<br>5.纹理库：SOIL2</p>\n<blockquote>\n<p>SOIL2 安装方法：<a href=\"https://blog.csdn.net/Wonz5130/article/details/82828817\">具体细节</a></p>\n<ol>\n<li>下载SOIL2源码</li>\n<li>下载premake4</li>\n<li>将premake4放到SOIL2的文件夹</li>\n<li>终端cd到SOIL2的文件夹，执行命令： premake4 vs2012， 将生成工程文件</li>\n<li>打开上面生成的VS工程，编译即可得到库</li>\n</ol>\n</blockquote>\n<ul>\n<li>1.2 制作项目模板</li>\n</ul>\n<p>1.准备lib文件夹，放glew,glfw, soil2的lib文件<br>2.准备include文件夹，放GLEW的GL文件夹，GLFW的GLFW文件夹，glm文件夹， SOIL2的SOIL2文件夹。<br>3.新建VS空C++项目，配置为win32<br>4.配置项目的VC++的常规里的包含目录，添加Include文件夹<br>5.链接器配置，常规添加lib文件夹，输入配置前面三个lib文件名加上opengl32.lib</p>\n<ul>\n<li>1.3 正式的项目开发</li>\n</ul>\n<ol>\n<li>使用1.2创建的模板新建工程</li>\n<li>拷贝glew32.dll到项目的debug或release目录中。</li>\n</ol>\n<h4 id=\"二、3D图形数据\"><a href=\"#二、3D图形数据\" class=\"headerlink\" title=\"二、3D图形数据\"></a>二、3D图形数据</h4><p>2.1 绘制流程描述：</p>\n<ul>\n<li>init() 初始化时</li>\n<li><ol>\n<li>创建一个缓冲区</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>将顶点数据复制到缓冲区</li>\n</ol>\n</li>\n<li>display()每帧刷新时。</li>\n<li><ol>\n<li>启用缓冲区</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>将缓冲区数据绑定至顶点属性</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>启用顶点</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>使用glDrawArray画出来。</li>\n</ol>\n</li>\n</ul>\n<p>2.2 VAO（Vertex Array Object）, VBO(Vertex Buffer Object)<br>顶点数据会先放在一个缓冲区，而这个缓冲区就存储在VBO里。同场景可能有多个VBO。<br>顶点数组对象则是opengl3.0引入的类似于VAO的组织性结构。</p>\n<blockquote>\n<p>例： 当绘制两个对象时，可以声明两个VBO，一个VAO，glGenVertexArray生成VAO，glBindVertexArray激活VAO与顶点属性关联，再使用glGenBuffers生成缓冲区。</p>\n</blockquote>\n<p>2.3 使用统一变量<br>在shader中将变量标记为Uniform后，在opengl中使用glGetuniformlocation得到对应的GL 的id。这样再通过glm::value_ptr取出对应的数值指针设值！。</p>\n<blockquote>\n<p>统一变量在每次从顶点缓存区拿值时都是不变的，可以理解为常量</p>\n</blockquote>\n<p>2.4 绘制立方体</p>\n<ul>\n<li>1.VAO,VBO初始化</li>\n<li>2.从相机的位置获取视角矩阵，V_MATRIX。 使用glm:translate</li>\n<li>3.从物体位置获取模型矩阵，M_MATRIX。 使用glm:translate</li>\n<li>4.从窗口，获取到P_MATRIX透视矩阵.。 使用glm:perspective</li>\n<li>5.将MV,P矩阵传到顶点shader里</li>\n</ul>\n<blockquote>\n<p>矩阵变换从右往左变换，将transMatrix * rotMatrix。先旋转再变位置。</p>\n</blockquote>\n<blockquote>\n<p>注意shader中的设值：</p>\n<pre><code class=\"c++\">    //VBO关联，顶点着色器的location为0的值被找出来。并从第一个VBO库中将值给过去\n    glBindBuffer(GL_ARRAY_BUFFER, vbo[0]);\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);\n    glEnableVertexAttribArray(0);</code></pre>\n</blockquote>\n<blockquote>\n<p>注意Opengl的glm与GLSL中矩阵的定义规则：<br>GLSL中的矩阵与GLM都是以列读取的！</p>\n</blockquote>\n<pre><code class=\"c++\">//glm的定义矩阵，以下两个矩阵变量是相同的，且以1,2,3,4为列往后排\nglm::mat4 test = {\n    {1,2,3,4},\n    {5,6,7,8},\n    {9,10,11,12},\n    {13,14,15,16},\n};\nglm::mat4 test2 = {\n    1,2,3,4,\n    5,6,7,8,\n    9,10,11,12,\n    13,14,15,16,\n};</code></pre>\n<p>2.5 使用矩阵栈来处理分层模型</p>\n<ul>\n<li>例 ：行星系统的实现流程</li>\n<li><ol>\n<li>初始栈，实例一个vMatrix视觉矩阵</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>实现太阳：复制一个到栈顶，生成太阳的MV矩阵，复制一个到栈顶，生成太阳的旋转。画太阳，然后POP出太阳的旋转。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>当前栈顶的是太阳的MV矩阵。以此复制到栈顶，生成行星的MV矩阵，复制到栈顶，生成行星的旋转。画行星，然后POP出行得的旋转。</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>当前栈顶是行星的MV矩阵，以此复制到栈顶，生成月亮的MV矩阵，生成旋转，生成缩放。</li>\n</ol>\n</li>\n<li>5.前面四个步骤，此时栈，共有四个元素。从顶到底分别是，月亮，行星，太阳，视觉矩阵。依次弹出清空栈。</li>\n</ul>\n<p>2.6 优化策略</p>\n<ul>\n<li>display帧刷新函数中不要定义或申请变量内存</li>\n<li>背面剔除：</li>\n<li>1.使用glEnable(GL_CULL_FACE) 激活此功能</li>\n<li>2.使用glFrontFace(GL_CCW)设置逆时针为正向</li>\n<li>3.使用glCullFace(GL_BACK)将背面剔除（默认）。 GL_FRONT 和GL_FRONT_AND_BACK</li>\n</ul>\n<h4 id=\"纹理贴图-使用SOIL2\"><a href=\"#纹理贴图-使用SOIL2\" class=\"headerlink\" title=\"纹理贴图-使用SOIL2\"></a>纹理贴图-使用SOIL2</h4><p>3.1 使用纹理贴图</p>\n<ul>\n<li>1.使用SOIL_LOAD_TEXTURE获取到texture ID</li>\n<li>2.构建纹理坐标，以左下角为0,0为定，右上角为1,1。把纹理2D坐标点与3D模型坐标相映射。</li>\n<li>3.在display中使用glActiveTexture激活，用glBindTexture(GL_TEXTURE_2D, “注：1中的texture ID”)</li>\n<li>4.vertex shader 收到纹理坐标传至 fragment shader</li>\n<li>5.fragmenet shader中使用sampler2d采样器，利用4中得到的坐标点取颜色值返回。</li>\n</ul>\n<p>3.2 多级渐远纹理贴图 Mipmapping - 避免校正采样误差伪影</p>\n<ul>\n<li>纹理中存储相同图像的连续一系列较低分辨率副本 。大小将比原图像大1/3</li>\n<li>如何在OpenGL使用：</li>\n<li>1.激活纹理。glBindTexture(GL_TEXTURE_2D, textureRef);</li>\n<li>2.使用glTexParameteri的GL_TEXTURE_MIN_FILTER 指明，四个方法：</li>\n<li>GL_NEAREST_MIPMAP_NEAREST//取最近的纹素</li>\n<li>GL_LINEAR_MIPMAP_NEAREST//线性</li>\n<li>GL_NEAREST_MIPMAP_LINEAR//双线性</li>\n<li>GL_LINEAR_MIPMAP_LINEAR //三线性</li>\n</ul>\n<p>3.3 各向异性过滤-AF<br>恢复MIPMAPPING丢失的细节，标准MipMapping使用正方形分辨率MIP纹理，而AF可以使用各种矩形分辨率来采样。</p>\n<pre><code class=\"c++\">if (glewIsSupported(&quot;GL_EXT_texture_filter_anisotropic&quot;)) {\n    cout&lt;&lt;&quot;支持各向异性！&quot;&lt;&lt;endl;\n}\n</code></pre>\n<p>3.4 环绕和平辅</p>\n<ul>\n<li>当纹理坐标不是[0, 1]\\的范围时，需要设置填充参数：</li>\n<li>GL_REPEAT, GL_MIRRORED_REPEAT（当奇数时坐标反转）, GL_CLAMP_TO_EDGE（0，1以外强设成边界值）, GL_CLAMP_TO_BORDER(0，1以外的设成颜色)</li>\n</ul>\n<p>3.5 透视变形<br>考虑情形如：矩形棋盘结构的纹理填充，在X轴旋转时将导致三角面交接处发生变形。<br>默认opengl将会开启透视修复。</p>\n<blockquote>\n<p>使用noperspective 禁止opengl透视修复</p>\n<pre><code class=\"c++\">noperspective out texcoord;//顶点\nnoperspective in texcoord;//片面</code></pre>\n</blockquote>\n"},{"title":"递归算法","_content":"\n![递归算法](/img/1586415301619.png)\n* 公式法求复杂度：\n* ![公式法](/img/1586415991649.png)\n* ![三种情况](/img/1586416006714.png)\n\n* ![例一](/img/1586416029304.png)\n* ![例二](/img/1586416055487.png)\n* ![例三](/img/1586416101201.png)\n\n![回溯法](/img/1586416261865.png)\n\n![经典找集合总和的算法](/img/1586416480976.png)\n\nNQueen算法：\n![回溯法NQueen](/img/1586418715552.png)\n\n算法复杂度：\n![NQueen算法复杂度](/img/1586419084172.png)\n\n#### 皇后算法：\n![分析](/img/1586423622273.png)\n![规律总结](/img/1586423672607.png)\n\n![流程解析](/img/1586423705879.png)\n\n![算法思路](/img/1586423739245.png)\n![算法思路2](/img/1586423782860.png)\n\n\n![Python实现](/img/1586423973441.png)","source":"_posts/递归算法.md","raw":"---\ntitle: 递归算法\ncategories:\n- 数据结构\n---\n\n![递归算法](/img/1586415301619.png)\n* 公式法求复杂度：\n* ![公式法](/img/1586415991649.png)\n* ![三种情况](/img/1586416006714.png)\n\n* ![例一](/img/1586416029304.png)\n* ![例二](/img/1586416055487.png)\n* ![例三](/img/1586416101201.png)\n\n![回溯法](/img/1586416261865.png)\n\n![经典找集合总和的算法](/img/1586416480976.png)\n\nNQueen算法：\n![回溯法NQueen](/img/1586418715552.png)\n\n算法复杂度：\n![NQueen算法复杂度](/img/1586419084172.png)\n\n#### 皇后算法：\n![分析](/img/1586423622273.png)\n![规律总结](/img/1586423672607.png)\n\n![流程解析](/img/1586423705879.png)\n\n![算法思路](/img/1586423739245.png)\n![算法思路2](/img/1586423782860.png)\n\n\n![Python实现](/img/1586423973441.png)","slug":"递归算法","published":1,"date":"2020-09-08T03:23:20.891Z","updated":"2020-09-08T03:23:20.891Z","_id":"ckdpclv0b005m8sr3a76x2mie","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/img/1586415301619.png\" alt=\"递归算法\"></p>\n<ul>\n<li><p>公式法求复杂度：</p>\n</li>\n<li><p><img src=\"/img/1586415991649.png\" alt=\"公式法\"></p>\n</li>\n<li><p><img src=\"/img/1586416006714.png\" alt=\"三种情况\"></p>\n</li>\n<li><p><img src=\"/img/1586416029304.png\" alt=\"例一\"></p>\n</li>\n<li><p><img src=\"/img/1586416055487.png\" alt=\"例二\"></p>\n</li>\n<li><p><img src=\"/img/1586416101201.png\" alt=\"例三\"></p>\n</li>\n</ul>\n<p><img src=\"/img/1586416261865.png\" alt=\"回溯法\"></p>\n<p><img src=\"/img/1586416480976.png\" alt=\"经典找集合总和的算法\"></p>\n<p>NQueen算法：<br><img src=\"/img/1586418715552.png\" alt=\"回溯法NQueen\"></p>\n<p>算法复杂度：<br><img src=\"/img/1586419084172.png\" alt=\"NQueen算法复杂度\"></p>\n<h4 id=\"皇后算法：\"><a href=\"#皇后算法：\" class=\"headerlink\" title=\"皇后算法：\"></a>皇后算法：</h4><p><img src=\"/img/1586423622273.png\" alt=\"分析\"><br><img src=\"/img/1586423672607.png\" alt=\"规律总结\"></p>\n<p><img src=\"/img/1586423705879.png\" alt=\"流程解析\"></p>\n<p><img src=\"/img/1586423739245.png\" alt=\"算法思路\"><br><img src=\"/img/1586423782860.png\" alt=\"算法思路2\"></p>\n<p><img src=\"/img/1586423973441.png\" alt=\"Python实现\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/img/1586415301619.png\" alt=\"递归算法\"></p>\n<ul>\n<li><p>公式法求复杂度：</p>\n</li>\n<li><p><img src=\"/img/1586415991649.png\" alt=\"公式法\"></p>\n</li>\n<li><p><img src=\"/img/1586416006714.png\" alt=\"三种情况\"></p>\n</li>\n<li><p><img src=\"/img/1586416029304.png\" alt=\"例一\"></p>\n</li>\n<li><p><img src=\"/img/1586416055487.png\" alt=\"例二\"></p>\n</li>\n<li><p><img src=\"/img/1586416101201.png\" alt=\"例三\"></p>\n</li>\n</ul>\n<p><img src=\"/img/1586416261865.png\" alt=\"回溯法\"></p>\n<p><img src=\"/img/1586416480976.png\" alt=\"经典找集合总和的算法\"></p>\n<p>NQueen算法：<br><img src=\"/img/1586418715552.png\" alt=\"回溯法NQueen\"></p>\n<p>算法复杂度：<br><img src=\"/img/1586419084172.png\" alt=\"NQueen算法复杂度\"></p>\n<h4 id=\"皇后算法：\"><a href=\"#皇后算法：\" class=\"headerlink\" title=\"皇后算法：\"></a>皇后算法：</h4><p><img src=\"/img/1586423622273.png\" alt=\"分析\"><br><img src=\"/img/1586423672607.png\" alt=\"规律总结\"></p>\n<p><img src=\"/img/1586423705879.png\" alt=\"流程解析\"></p>\n<p><img src=\"/img/1586423739245.png\" alt=\"算法思路\"><br><img src=\"/img/1586423782860.png\" alt=\"算法思路2\"></p>\n<p><img src=\"/img/1586423973441.png\" alt=\"Python实现\"></p>\n"},{"title":"Coursera算法课笔记1","_content":"\n## UnionFind\n\n### 描述\nDynamic Connectivity 动态连通性问题\n 1.给定任意N数据集\n 2.判断p到q是否连通\n\n> 假定的前提： p连q，则q也连p。 \n\n### 算法1： Quick Find -快速查找\n\n* 数据结构\n数组，将每个元素存储一个id[]下\n\n* 算法思路\n将相连通的所有元素存储为一个相同的ID\n![存储结果](/img/1598259821964.png)\n\n* 分析\n ![分析](/img/1598260733232.png)\n \n ### 算法2： Quick Union -快速交集\n \n * 数据结构\n   与Quick Find一样，采取 数组\n   \n * 算法思路\n   1.每位数仅记录其根结点\n   2.Union函数调用时，设第一个数为p，第二数为q。 将p的root赋值为q的root，即q的root为p的root的新root\n\n  * 分析：\n   ![分析](/img/1598273584691.png)\n   \n   ### 算法优化一： 使用权重\n   \n   * 永远只将小树往大树挂。这样不会产生过深的树层次！\n   \n   ![示例结果](/img/1598273763851.png)\n  \n  * 实现：额外定义一个数组，存储树的权重，在添加时判定，只将权重小的往权重大的加\n\n### 算法优化二： 压缩\n\n * Union函数调用时，对于多于一层的树，全部将真正的root改为当前的上级\n\n![示例结果](/img/1598273932723.png)\n\n\n\n### C++实例、例子：\n\n```c++\n\n////////////////// Quick Find /////////////\nQuickFind_UF::QuickFind_UF(int N) {\n\t\n\tthis->length = N;\n\tthis->id = new int[N];\n\tfor (int i = 0; i < N; i++)\n\t{\n\t\tthis->id[i] = i;\n\t}\n}\n\nQuickFind_UF::~QuickFind_UF() {\n\tthis->length = 0;\n\tdelete[] this->id;\n}\n\nvoid QuickFind_UF::Union(int p, int q) {\n\tint pid = this->id[p];\n\tint qid = this->id[q];//以此为准\n\n\tfor (int i = 0; i < this->length; i++)\n\t{\n\t\tif (this->id[i] == pid)\n\t\t\tthis->id[i] = qid;\n\t}\n\tPrint();\n}\n\nbool QuickFind_UF::Connected(int p, int q) {\n\treturn this->id[p] == this->id[q];\n}\n\n////////////////// Quick Union & Weight & Compression /////////////\n\nQuickUnion_UF::QuickUnion_UF(int N) {\n\n\tthis->length = N;\n\tthis->id = new int[N];\n\tthis->sz = new int[N];\n\tfor (int i = 0; i < N; i++)\n\t{\n\t\tthis->sz[i] = 1;\n\t\tthis->id[i] = i;\n\t}\t\n}\n\nQuickUnion_UF::~QuickUnion_UF() {\n\tdelete[] this->id;\n}\n\nvoid QuickUnion_UF::SetUseWeight(bool use) {\n\tthis->useWeight = use;\n}\n\nvoid QuickUnion_UF::SetUseCompression(bool use) {\n\tthis->useCompression = use;\n}\n\nint QuickUnion_UF::Root(int i) {\n\n\twhile (this->id[i] != i) {\n\t\tif (this->useCompression) {\n\t\t\tthis->id[i] = this->id[this->id[i]];\n\t\t}\n\t\ti = this->id[i];\n\t}\n\treturn i;\n}\n\nvoid QuickUnion_UF::Union(int p, int q) {\n\tint pid = this->Root(p);\n\tint qid = this->Root(q);\n\tif (this->useWeight) {\n\t\tif (pid == qid)\n\t\t\treturn;\n\t\tif (this->sz[pid] < this->sz[qid]) {\n\t\t\tthis->id[pid] = qid;\n\t\t\tthis->sz[qid] += this->sz[pid];\n\t\t}\n\t\telse {\n\t\t\tthis->id[qid] = pid;\n\t\t\tthis->sz[pid] += this->sz[qid];\n\t\t}\n\t}\n\telse {\n\t\tthis->id[pid] = this->id[qid];\n\t}\n\t\n}\n\nbool QuickUnion_UF::Connected(int p, int q) {\n\treturn this->Root(p) == this->Root(q);\n}\n\n```\n> 测试：数组为0-9，输入union:  (4,3),(3,8),(6,5),(9,4),(2,1),(8,9),(5,0),(7,2), (6,1)\n\n> Quick Find 结果：\n![QuickFind](/img/1598274190104.png)\n\n> 多一个测试union: ,(7,3). Quick Union 结果：\n![QuickUnion](/img/1598274216079.png)\n\n> 多一个测试union: ,(7,3). Quick Union+ Weight结果：\n![QuickUnion+Weight](/img/1598274276096.png)\n\n\n## C++ 玫举与玫举类：\n\n* 普通玫举是以（int）值进行比较，而玫举类可以根据不同名字来避免相同：\n  \n ```c++\n  enum Color { red, green, blue };                    // plain enum \nenum Card { red_card, green_card, yellow_card };    // another plain enum \nenum class Animal { dog, deer, cat, bird, human };  // enum class\nenum class Mammal { kangaroo, deer, human };        // another enum class\n\nvoid fun() {\n\n    // examples of bad use of plain enums:\n    Color color = Color::red;\n    Card card = Card::green_card;\n\n    int num = color;    // no problem\n\n    if (color == Card::red_card) // no problem (bad)\n        cout << \"bad\" << endl;\n\n    if (card == Color::green)   // no problem (bad)\n        cout << \"bad\" << endl;\n\n    // examples of good use of enum classes (safe)\n    Animal a = Animal::deer;\n    Mammal m = Mammal::deer;\n\n    int num2 = a;   // error\n    if (m == a)         // error (good)\n        cout << \"bad\" << endl;\n\n    if (a == Mammal::deer) // error (good)\n        cout << \"bad\" << endl;\n\n}\n ```\n \n ## 希尔排序\n  \n  * 选用Knuth的一增量序列 3X+1\n \n   * 先排大段，再排小段，一直到1段：\n\n![分级排序](/img/1598514940240.png)\n\n![优势](/img/1598516074235.png)\n\n```c++\n/// <summary>\n/// 希尔排序 \n/// </summary>\n/// <param name=\"a\"></param>\n/// <param name=\"len\"></param>\nvoid ShellSort(int *a, int len){\n\n\tint isSorted = true;\n\t//优化一：提前做一个相邻位置排序\n\tfor (int i = len-1; i > 0; i--)\n\t{\n\t\tif (a[i] < a[i - 1]) {\n\t\t\tSortHelper::Exch(a, i, i - 1);\n\t\t\tisSorted = false;\n\t\t}\n\t}\n\tif (isSorted) return;\n\n\tint h = 1;\n\t//得到一个最高的分级值\n\twhile (h <= len / 3)\n\t\th = 3 * h + 1;\n\n\twhile (h >= 1) {\n\t\t//插入排序\n\t\tfor (int i = h; i < len; i++)\n\t\t{\n\t\t\tfor (int j = i; (j >= h) && (a[j] < a[j - h]); j -= h)\n\t\t\t{\n\t\t\t\tSortHelper::Exch(a, j, j - h);\n\t\t\t}\n\t\t}\n\t\th = h / 3;\n\t}\n}\n```\n\n## 堆排序\n\n![java示例](/img/1598929159605.png)\n","source":"_posts/算法课程笔记1.md","raw":"---\ntitle: Coursera算法课笔记1\ncategories:\n- 算法\n---\n\n## UnionFind\n\n### 描述\nDynamic Connectivity 动态连通性问题\n 1.给定任意N数据集\n 2.判断p到q是否连通\n\n> 假定的前提： p连q，则q也连p。 \n\n### 算法1： Quick Find -快速查找\n\n* 数据结构\n数组，将每个元素存储一个id[]下\n\n* 算法思路\n将相连通的所有元素存储为一个相同的ID\n![存储结果](/img/1598259821964.png)\n\n* 分析\n ![分析](/img/1598260733232.png)\n \n ### 算法2： Quick Union -快速交集\n \n * 数据结构\n   与Quick Find一样，采取 数组\n   \n * 算法思路\n   1.每位数仅记录其根结点\n   2.Union函数调用时，设第一个数为p，第二数为q。 将p的root赋值为q的root，即q的root为p的root的新root\n\n  * 分析：\n   ![分析](/img/1598273584691.png)\n   \n   ### 算法优化一： 使用权重\n   \n   * 永远只将小树往大树挂。这样不会产生过深的树层次！\n   \n   ![示例结果](/img/1598273763851.png)\n  \n  * 实现：额外定义一个数组，存储树的权重，在添加时判定，只将权重小的往权重大的加\n\n### 算法优化二： 压缩\n\n * Union函数调用时，对于多于一层的树，全部将真正的root改为当前的上级\n\n![示例结果](/img/1598273932723.png)\n\n\n\n### C++实例、例子：\n\n```c++\n\n////////////////// Quick Find /////////////\nQuickFind_UF::QuickFind_UF(int N) {\n\t\n\tthis->length = N;\n\tthis->id = new int[N];\n\tfor (int i = 0; i < N; i++)\n\t{\n\t\tthis->id[i] = i;\n\t}\n}\n\nQuickFind_UF::~QuickFind_UF() {\n\tthis->length = 0;\n\tdelete[] this->id;\n}\n\nvoid QuickFind_UF::Union(int p, int q) {\n\tint pid = this->id[p];\n\tint qid = this->id[q];//以此为准\n\n\tfor (int i = 0; i < this->length; i++)\n\t{\n\t\tif (this->id[i] == pid)\n\t\t\tthis->id[i] = qid;\n\t}\n\tPrint();\n}\n\nbool QuickFind_UF::Connected(int p, int q) {\n\treturn this->id[p] == this->id[q];\n}\n\n////////////////// Quick Union & Weight & Compression /////////////\n\nQuickUnion_UF::QuickUnion_UF(int N) {\n\n\tthis->length = N;\n\tthis->id = new int[N];\n\tthis->sz = new int[N];\n\tfor (int i = 0; i < N; i++)\n\t{\n\t\tthis->sz[i] = 1;\n\t\tthis->id[i] = i;\n\t}\t\n}\n\nQuickUnion_UF::~QuickUnion_UF() {\n\tdelete[] this->id;\n}\n\nvoid QuickUnion_UF::SetUseWeight(bool use) {\n\tthis->useWeight = use;\n}\n\nvoid QuickUnion_UF::SetUseCompression(bool use) {\n\tthis->useCompression = use;\n}\n\nint QuickUnion_UF::Root(int i) {\n\n\twhile (this->id[i] != i) {\n\t\tif (this->useCompression) {\n\t\t\tthis->id[i] = this->id[this->id[i]];\n\t\t}\n\t\ti = this->id[i];\n\t}\n\treturn i;\n}\n\nvoid QuickUnion_UF::Union(int p, int q) {\n\tint pid = this->Root(p);\n\tint qid = this->Root(q);\n\tif (this->useWeight) {\n\t\tif (pid == qid)\n\t\t\treturn;\n\t\tif (this->sz[pid] < this->sz[qid]) {\n\t\t\tthis->id[pid] = qid;\n\t\t\tthis->sz[qid] += this->sz[pid];\n\t\t}\n\t\telse {\n\t\t\tthis->id[qid] = pid;\n\t\t\tthis->sz[pid] += this->sz[qid];\n\t\t}\n\t}\n\telse {\n\t\tthis->id[pid] = this->id[qid];\n\t}\n\t\n}\n\nbool QuickUnion_UF::Connected(int p, int q) {\n\treturn this->Root(p) == this->Root(q);\n}\n\n```\n> 测试：数组为0-9，输入union:  (4,3),(3,8),(6,5),(9,4),(2,1),(8,9),(5,0),(7,2), (6,1)\n\n> Quick Find 结果：\n![QuickFind](/img/1598274190104.png)\n\n> 多一个测试union: ,(7,3). Quick Union 结果：\n![QuickUnion](/img/1598274216079.png)\n\n> 多一个测试union: ,(7,3). Quick Union+ Weight结果：\n![QuickUnion+Weight](/img/1598274276096.png)\n\n\n## C++ 玫举与玫举类：\n\n* 普通玫举是以（int）值进行比较，而玫举类可以根据不同名字来避免相同：\n  \n ```c++\n  enum Color { red, green, blue };                    // plain enum \nenum Card { red_card, green_card, yellow_card };    // another plain enum \nenum class Animal { dog, deer, cat, bird, human };  // enum class\nenum class Mammal { kangaroo, deer, human };        // another enum class\n\nvoid fun() {\n\n    // examples of bad use of plain enums:\n    Color color = Color::red;\n    Card card = Card::green_card;\n\n    int num = color;    // no problem\n\n    if (color == Card::red_card) // no problem (bad)\n        cout << \"bad\" << endl;\n\n    if (card == Color::green)   // no problem (bad)\n        cout << \"bad\" << endl;\n\n    // examples of good use of enum classes (safe)\n    Animal a = Animal::deer;\n    Mammal m = Mammal::deer;\n\n    int num2 = a;   // error\n    if (m == a)         // error (good)\n        cout << \"bad\" << endl;\n\n    if (a == Mammal::deer) // error (good)\n        cout << \"bad\" << endl;\n\n}\n ```\n \n ## 希尔排序\n  \n  * 选用Knuth的一增量序列 3X+1\n \n   * 先排大段，再排小段，一直到1段：\n\n![分级排序](/img/1598514940240.png)\n\n![优势](/img/1598516074235.png)\n\n```c++\n/// <summary>\n/// 希尔排序 \n/// </summary>\n/// <param name=\"a\"></param>\n/// <param name=\"len\"></param>\nvoid ShellSort(int *a, int len){\n\n\tint isSorted = true;\n\t//优化一：提前做一个相邻位置排序\n\tfor (int i = len-1; i > 0; i--)\n\t{\n\t\tif (a[i] < a[i - 1]) {\n\t\t\tSortHelper::Exch(a, i, i - 1);\n\t\t\tisSorted = false;\n\t\t}\n\t}\n\tif (isSorted) return;\n\n\tint h = 1;\n\t//得到一个最高的分级值\n\twhile (h <= len / 3)\n\t\th = 3 * h + 1;\n\n\twhile (h >= 1) {\n\t\t//插入排序\n\t\tfor (int i = h; i < len; i++)\n\t\t{\n\t\t\tfor (int j = i; (j >= h) && (a[j] < a[j - h]); j -= h)\n\t\t\t{\n\t\t\t\tSortHelper::Exch(a, j, j - h);\n\t\t\t}\n\t\t}\n\t\th = h / 3;\n\t}\n}\n```\n\n## 堆排序\n\n![java示例](/img/1598929159605.png)\n","slug":"算法课程笔记1","published":1,"date":"2020-08-24T08:34:41.836Z","updated":"2020-09-01T02:59:31.183Z","_id":"cke8jbsuk00009kr3y3glwai2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"UnionFind\"><a href=\"#UnionFind\" class=\"headerlink\" title=\"UnionFind\"></a>UnionFind</h2><h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>Dynamic Connectivity 动态连通性问题<br> 1.给定任意N数据集<br> 2.判断p到q是否连通</p>\n<blockquote>\n<p>假定的前提： p连q，则q也连p。 </p>\n</blockquote>\n<h3 id=\"算法1：-Quick-Find-快速查找\"><a href=\"#算法1：-Quick-Find-快速查找\" class=\"headerlink\" title=\"算法1： Quick Find -快速查找\"></a>算法1： Quick Find -快速查找</h3><ul>\n<li><p>数据结构<br>数组，将每个元素存储一个id[]下</p>\n</li>\n<li><p>算法思路<br>将相连通的所有元素存储为一个相同的ID<br><img src=\"/img/1598259821964.png\" alt=\"存储结果\"></p>\n</li>\n<li><p>分析<br><img src=\"/img/1598260733232.png\" alt=\"分析\"></p>\n<h3 id=\"算法2：-Quick-Union-快速交集\"><a href=\"#算法2：-Quick-Union-快速交集\" class=\"headerlink\" title=\"算法2： Quick Union -快速交集\"></a>算法2： Quick Union -快速交集</h3><ul>\n<li><p>数据结构<br>与Quick Find一样，采取 数组</p>\n</li>\n<li><p>算法思路<br>1.每位数仅记录其根结点<br>2.Union函数调用时，设第一个数为p，第二数为q。 将p的root赋值为q的root，即q的root为p的root的新root</p>\n</li>\n<li><p>分析：<br><img src=\"/img/1598273584691.png\" alt=\"分析\"></p>\n<h3 id=\"算法优化一：-使用权重\"><a href=\"#算法优化一：-使用权重\" class=\"headerlink\" title=\"算法优化一： 使用权重\"></a>算法优化一： 使用权重</h3><ul>\n<li>永远只将小树往大树挂。这样不会产生过深的树层次！</li>\n</ul>\n<p><img src=\"/img/1598273763851.png\" alt=\"示例结果\"></p>\n</li>\n<li><p>实现：额外定义一个数组，存储树的权重，在添加时判定，只将权重小的往权重大的加</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"算法优化二：-压缩\"><a href=\"#算法优化二：-压缩\" class=\"headerlink\" title=\"算法优化二： 压缩\"></a>算法优化二： 压缩</h3><ul>\n<li>Union函数调用时，对于多于一层的树，全部将真正的root改为当前的上级</li>\n</ul>\n<p><img src=\"/img/1598273932723.png\" alt=\"示例结果\"></p>\n<h3 id=\"C-实例、例子：\"><a href=\"#C-实例、例子：\" class=\"headerlink\" title=\"C++实例、例子：\"></a>C++实例、例子：</h3><pre><code class=\"c++\">\n////////////////// Quick Find /////////////\nQuickFind_UF::QuickFind_UF(int N) {\n\n    this-&gt;length = N;\n    this-&gt;id = new int[N];\n    for (int i = 0; i &lt; N; i++)\n    {\n        this-&gt;id[i] = i;\n    }\n}\n\nQuickFind_UF::~QuickFind_UF() {\n    this-&gt;length = 0;\n    delete[] this-&gt;id;\n}\n\nvoid QuickFind_UF::Union(int p, int q) {\n    int pid = this-&gt;id[p];\n    int qid = this-&gt;id[q];//以此为准\n\n    for (int i = 0; i &lt; this-&gt;length; i++)\n    {\n        if (this-&gt;id[i] == pid)\n            this-&gt;id[i] = qid;\n    }\n    Print();\n}\n\nbool QuickFind_UF::Connected(int p, int q) {\n    return this-&gt;id[p] == this-&gt;id[q];\n}\n\n////////////////// Quick Union &amp; Weight &amp; Compression /////////////\n\nQuickUnion_UF::QuickUnion_UF(int N) {\n\n    this-&gt;length = N;\n    this-&gt;id = new int[N];\n    this-&gt;sz = new int[N];\n    for (int i = 0; i &lt; N; i++)\n    {\n        this-&gt;sz[i] = 1;\n        this-&gt;id[i] = i;\n    }    \n}\n\nQuickUnion_UF::~QuickUnion_UF() {\n    delete[] this-&gt;id;\n}\n\nvoid QuickUnion_UF::SetUseWeight(bool use) {\n    this-&gt;useWeight = use;\n}\n\nvoid QuickUnion_UF::SetUseCompression(bool use) {\n    this-&gt;useCompression = use;\n}\n\nint QuickUnion_UF::Root(int i) {\n\n    while (this-&gt;id[i] != i) {\n        if (this-&gt;useCompression) {\n            this-&gt;id[i] = this-&gt;id[this-&gt;id[i]];\n        }\n        i = this-&gt;id[i];\n    }\n    return i;\n}\n\nvoid QuickUnion_UF::Union(int p, int q) {\n    int pid = this-&gt;Root(p);\n    int qid = this-&gt;Root(q);\n    if (this-&gt;useWeight) {\n        if (pid == qid)\n            return;\n        if (this-&gt;sz[pid] &lt; this-&gt;sz[qid]) {\n            this-&gt;id[pid] = qid;\n            this-&gt;sz[qid] += this-&gt;sz[pid];\n        }\n        else {\n            this-&gt;id[qid] = pid;\n            this-&gt;sz[pid] += this-&gt;sz[qid];\n        }\n    }\n    else {\n        this-&gt;id[pid] = this-&gt;id[qid];\n    }\n\n}\n\nbool QuickUnion_UF::Connected(int p, int q) {\n    return this-&gt;Root(p) == this-&gt;Root(q);\n}\n</code></pre>\n<blockquote>\n<p>测试：数组为0-9，输入union:  (4,3),(3,8),(6,5),(9,4),(2,1),(8,9),(5,0),(7,2), (6,1)</p>\n</blockquote>\n<blockquote>\n<p>Quick Find 结果：<br><img src=\"/img/1598274190104.png\" alt=\"QuickFind\"></p>\n</blockquote>\n<blockquote>\n<p>多一个测试union: ,(7,3). Quick Union 结果：<br><img src=\"/img/1598274216079.png\" alt=\"QuickUnion\"></p>\n</blockquote>\n<blockquote>\n<p>多一个测试union: ,(7,3). Quick Union+ Weight结果：<br><img src=\"/img/1598274276096.png\" alt=\"QuickUnion+Weight\"></p>\n</blockquote>\n<h2 id=\"C-玫举与玫举类：\"><a href=\"#C-玫举与玫举类：\" class=\"headerlink\" title=\"C++ 玫举与玫举类：\"></a>C++ 玫举与玫举类：</h2><ul>\n<li><p>普通玫举是以（int）值进行比较，而玫举类可以根据不同名字来避免相同：</p>\n<pre><code class=\"c++\">enum Color { red, green, blue };                    // plain enum \nenum Card { red_card, green_card, yellow_card };    // another plain enum \nenum class Animal { dog, deer, cat, bird, human };  // enum class\nenum class Mammal { kangaroo, deer, human };        // another enum class\n</code></pre>\n</li>\n</ul>\n<p>void fun() {</p>\n<pre><code>// examples of bad use of plain enums:\nColor color = Color::red;\nCard card = Card::green_card;\n\nint num = color;    // no problem\n\nif (color == Card::red_card) // no problem (bad)\n    cout &lt;&lt; &quot;bad&quot; &lt;&lt; endl;\n\nif (card == Color::green)   // no problem (bad)\n    cout &lt;&lt; &quot;bad&quot; &lt;&lt; endl;\n\n// examples of good use of enum classes (safe)\nAnimal a = Animal::deer;\nMammal m = Mammal::deer;\n\nint num2 = a;   // error\nif (m == a)         // error (good)\n    cout &lt;&lt; &quot;bad&quot; &lt;&lt; endl;\n\nif (a == Mammal::deer) // error (good)\n    cout &lt;&lt; &quot;bad&quot; &lt;&lt; endl;</code></pre><p>}</p>\n<pre><code>\n ## 希尔排序\n\n  * 选用Knuth的一增量序列 3X+1\n\n   * 先排大段，再排小段，一直到1段：\n\n![分级排序](/img/1598514940240.png)\n\n![优势](/img/1598516074235.png)\n\n```c++\n/// &lt;summary&gt;\n/// 希尔排序 \n/// &lt;/summary&gt;\n/// &lt;param name=&quot;a&quot;&gt;&lt;/param&gt;\n/// &lt;param name=&quot;len&quot;&gt;&lt;/param&gt;\nvoid ShellSort(int *a, int len){\n\n    int isSorted = true;\n    //优化一：提前做一个相邻位置排序\n    for (int i = len-1; i &gt; 0; i--)\n    {\n        if (a[i] &lt; a[i - 1]) {\n            SortHelper::Exch(a, i, i - 1);\n            isSorted = false;\n        }\n    }\n    if (isSorted) return;\n\n    int h = 1;\n    //得到一个最高的分级值\n    while (h &lt;= len / 3)\n        h = 3 * h + 1;\n\n    while (h &gt;= 1) {\n        //插入排序\n        for (int i = h; i &lt; len; i++)\n        {\n            for (int j = i; (j &gt;= h) &amp;&amp; (a[j] &lt; a[j - h]); j -= h)\n            {\n                SortHelper::Exch(a, j, j - h);\n            }\n        }\n        h = h / 3;\n    }\n}</code></pre><h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><p><img src=\"/img/1598929159605.png\" alt=\"java示例\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"UnionFind\"><a href=\"#UnionFind\" class=\"headerlink\" title=\"UnionFind\"></a>UnionFind</h2><h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>Dynamic Connectivity 动态连通性问题<br> 1.给定任意N数据集<br> 2.判断p到q是否连通</p>\n<blockquote>\n<p>假定的前提： p连q，则q也连p。 </p>\n</blockquote>\n<h3 id=\"算法1：-Quick-Find-快速查找\"><a href=\"#算法1：-Quick-Find-快速查找\" class=\"headerlink\" title=\"算法1： Quick Find -快速查找\"></a>算法1： Quick Find -快速查找</h3><ul>\n<li><p>数据结构<br>数组，将每个元素存储一个id[]下</p>\n</li>\n<li><p>算法思路<br>将相连通的所有元素存储为一个相同的ID<br><img src=\"/img/1598259821964.png\" alt=\"存储结果\"></p>\n</li>\n<li><p>分析<br><img src=\"/img/1598260733232.png\" alt=\"分析\"></p>\n<h3 id=\"算法2：-Quick-Union-快速交集\"><a href=\"#算法2：-Quick-Union-快速交集\" class=\"headerlink\" title=\"算法2： Quick Union -快速交集\"></a>算法2： Quick Union -快速交集</h3><ul>\n<li><p>数据结构<br>与Quick Find一样，采取 数组</p>\n</li>\n<li><p>算法思路<br>1.每位数仅记录其根结点<br>2.Union函数调用时，设第一个数为p，第二数为q。 将p的root赋值为q的root，即q的root为p的root的新root</p>\n</li>\n<li><p>分析：<br><img src=\"/img/1598273584691.png\" alt=\"分析\"></p>\n<h3 id=\"算法优化一：-使用权重\"><a href=\"#算法优化一：-使用权重\" class=\"headerlink\" title=\"算法优化一： 使用权重\"></a>算法优化一： 使用权重</h3><ul>\n<li>永远只将小树往大树挂。这样不会产生过深的树层次！</li>\n</ul>\n<p><img src=\"/img/1598273763851.png\" alt=\"示例结果\"></p>\n</li>\n<li><p>实现：额外定义一个数组，存储树的权重，在添加时判定，只将权重小的往权重大的加</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"算法优化二：-压缩\"><a href=\"#算法优化二：-压缩\" class=\"headerlink\" title=\"算法优化二： 压缩\"></a>算法优化二： 压缩</h3><ul>\n<li>Union函数调用时，对于多于一层的树，全部将真正的root改为当前的上级</li>\n</ul>\n<p><img src=\"/img/1598273932723.png\" alt=\"示例结果\"></p>\n<h3 id=\"C-实例、例子：\"><a href=\"#C-实例、例子：\" class=\"headerlink\" title=\"C++实例、例子：\"></a>C++实例、例子：</h3><pre><code class=\"c++\">\n////////////////// Quick Find /////////////\nQuickFind_UF::QuickFind_UF(int N) {\n\n    this-&gt;length = N;\n    this-&gt;id = new int[N];\n    for (int i = 0; i &lt; N; i++)\n    {\n        this-&gt;id[i] = i;\n    }\n}\n\nQuickFind_UF::~QuickFind_UF() {\n    this-&gt;length = 0;\n    delete[] this-&gt;id;\n}\n\nvoid QuickFind_UF::Union(int p, int q) {\n    int pid = this-&gt;id[p];\n    int qid = this-&gt;id[q];//以此为准\n\n    for (int i = 0; i &lt; this-&gt;length; i++)\n    {\n        if (this-&gt;id[i] == pid)\n            this-&gt;id[i] = qid;\n    }\n    Print();\n}\n\nbool QuickFind_UF::Connected(int p, int q) {\n    return this-&gt;id[p] == this-&gt;id[q];\n}\n\n////////////////// Quick Union &amp; Weight &amp; Compression /////////////\n\nQuickUnion_UF::QuickUnion_UF(int N) {\n\n    this-&gt;length = N;\n    this-&gt;id = new int[N];\n    this-&gt;sz = new int[N];\n    for (int i = 0; i &lt; N; i++)\n    {\n        this-&gt;sz[i] = 1;\n        this-&gt;id[i] = i;\n    }    \n}\n\nQuickUnion_UF::~QuickUnion_UF() {\n    delete[] this-&gt;id;\n}\n\nvoid QuickUnion_UF::SetUseWeight(bool use) {\n    this-&gt;useWeight = use;\n}\n\nvoid QuickUnion_UF::SetUseCompression(bool use) {\n    this-&gt;useCompression = use;\n}\n\nint QuickUnion_UF::Root(int i) {\n\n    while (this-&gt;id[i] != i) {\n        if (this-&gt;useCompression) {\n            this-&gt;id[i] = this-&gt;id[this-&gt;id[i]];\n        }\n        i = this-&gt;id[i];\n    }\n    return i;\n}\n\nvoid QuickUnion_UF::Union(int p, int q) {\n    int pid = this-&gt;Root(p);\n    int qid = this-&gt;Root(q);\n    if (this-&gt;useWeight) {\n        if (pid == qid)\n            return;\n        if (this-&gt;sz[pid] &lt; this-&gt;sz[qid]) {\n            this-&gt;id[pid] = qid;\n            this-&gt;sz[qid] += this-&gt;sz[pid];\n        }\n        else {\n            this-&gt;id[qid] = pid;\n            this-&gt;sz[pid] += this-&gt;sz[qid];\n        }\n    }\n    else {\n        this-&gt;id[pid] = this-&gt;id[qid];\n    }\n\n}\n\nbool QuickUnion_UF::Connected(int p, int q) {\n    return this-&gt;Root(p) == this-&gt;Root(q);\n}\n</code></pre>\n<blockquote>\n<p>测试：数组为0-9，输入union:  (4,3),(3,8),(6,5),(9,4),(2,1),(8,9),(5,0),(7,2), (6,1)</p>\n</blockquote>\n<blockquote>\n<p>Quick Find 结果：<br><img src=\"/img/1598274190104.png\" alt=\"QuickFind\"></p>\n</blockquote>\n<blockquote>\n<p>多一个测试union: ,(7,3). Quick Union 结果：<br><img src=\"/img/1598274216079.png\" alt=\"QuickUnion\"></p>\n</blockquote>\n<blockquote>\n<p>多一个测试union: ,(7,3). Quick Union+ Weight结果：<br><img src=\"/img/1598274276096.png\" alt=\"QuickUnion+Weight\"></p>\n</blockquote>\n<h2 id=\"C-玫举与玫举类：\"><a href=\"#C-玫举与玫举类：\" class=\"headerlink\" title=\"C++ 玫举与玫举类：\"></a>C++ 玫举与玫举类：</h2><ul>\n<li><p>普通玫举是以（int）值进行比较，而玫举类可以根据不同名字来避免相同：</p>\n<pre><code class=\"c++\">enum Color { red, green, blue };                    // plain enum \nenum Card { red_card, green_card, yellow_card };    // another plain enum \nenum class Animal { dog, deer, cat, bird, human };  // enum class\nenum class Mammal { kangaroo, deer, human };        // another enum class\n</code></pre>\n</li>\n</ul>\n<p>void fun() {</p>\n<pre><code>// examples of bad use of plain enums:\nColor color = Color::red;\nCard card = Card::green_card;\n\nint num = color;    // no problem\n\nif (color == Card::red_card) // no problem (bad)\n    cout &lt;&lt; &quot;bad&quot; &lt;&lt; endl;\n\nif (card == Color::green)   // no problem (bad)\n    cout &lt;&lt; &quot;bad&quot; &lt;&lt; endl;\n\n// examples of good use of enum classes (safe)\nAnimal a = Animal::deer;\nMammal m = Mammal::deer;\n\nint num2 = a;   // error\nif (m == a)         // error (good)\n    cout &lt;&lt; &quot;bad&quot; &lt;&lt; endl;\n\nif (a == Mammal::deer) // error (good)\n    cout &lt;&lt; &quot;bad&quot; &lt;&lt; endl;</code></pre><p>}</p>\n<pre><code>\n ## 希尔排序\n\n  * 选用Knuth的一增量序列 3X+1\n\n   * 先排大段，再排小段，一直到1段：\n\n![分级排序](/img/1598514940240.png)\n\n![优势](/img/1598516074235.png)\n\n```c++\n/// &lt;summary&gt;\n/// 希尔排序 \n/// &lt;/summary&gt;\n/// &lt;param name=&quot;a&quot;&gt;&lt;/param&gt;\n/// &lt;param name=&quot;len&quot;&gt;&lt;/param&gt;\nvoid ShellSort(int *a, int len){\n\n    int isSorted = true;\n    //优化一：提前做一个相邻位置排序\n    for (int i = len-1; i &gt; 0; i--)\n    {\n        if (a[i] &lt; a[i - 1]) {\n            SortHelper::Exch(a, i, i - 1);\n            isSorted = false;\n        }\n    }\n    if (isSorted) return;\n\n    int h = 1;\n    //得到一个最高的分级值\n    while (h &lt;= len / 3)\n        h = 3 * h + 1;\n\n    while (h &gt;= 1) {\n        //插入排序\n        for (int i = h; i &lt; len; i++)\n        {\n            for (int j = i; (j &gt;= h) &amp;&amp; (a[j] &lt; a[j - h]); j -= h)\n            {\n                SortHelper::Exch(a, j, j - h);\n            }\n        }\n        h = h / 3;\n    }\n}</code></pre><h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><p><img src=\"/img/1598929159605.png\" alt=\"java示例\"></p>\n"},{"title":"GEA-P1","_content":"\n## (1.2)What is Game?\n\n>In his excellent book, A Theory\nof Fun for Game Design **a game to be an interactive experience that provides the player with an increasingly challenging sequence of patterns which he or she learns and eventually masters**.\n\n>游戏： 一个交互性的经历提供一个玩家学习或将要学习的技能的挑战集合（持续提升的）\n\n* soft real-time game & hard real-time game\n  soft 意味着deadline不影响玩家，hard往往造成严重的后果。\n  \n\n## (1.4) Game genres\n\n### FPS\n\n>first-person shooters aim to provide their players with the illusion of being\nimmersed in a detailed, hyperrealistic world\n\n>First-person shooters typically focus on technologies such as:\n>* efficient rendering of large 3D virtual worlds;\n>* a responsive camera control/aiming mechanic;\n>* high-fidelity animations of the player’s virtual arms and weapons;\n>* a wide range of powerful handheld weaponry;\n>* a forgiving player character motion and collision model, which often\ngives these games a “floaty” feel;\n>* high-fidelity animations and artificial intelligence for the non-player\ncharacters (NPCs)—the player’s enemies and allies; and\n>* small-scale online multiplayer capabilities (typically supporting up to\n64 simultaneous players), and the ubiquitous “death match” gameplay\nmode.\n\n> 高效渲染3D虚拟世界\n> 有响应式的相机控制与射击目标指向机制\n> 高质量的玩家手臂和武器控制\n> 丰富的装备选择\n> 丰富的人物动画库和碰撞模型\n> 非玩家（NPC）的高质量动作和人工智能\n> 小型的多人同屏（<64）和频繁的角色死亡重生的游戏机制\n\n### Platformers and Other Third-Person Games\n\n> Technologies specifically:\n> * moving platforms, ladders, ropes, trellises and other interesting locomotion modes;\n> * puzzle-like environmental elements;\n> * a third-person “follow camera” which stays focused on the player character and whose rotation is typically controlled by the human player via\nthe right joypad stick (on a console) or the mouse (on a PC—note that\nwhile there are a number of popular third-person shooters on a PC, the\nplatformer genre exists almost exclusively on consoles); and\n> * a complex camera collision system for ensuring that the view point never\n“clips” through background geometry or dynamic foreground objects\n\n> 移动平台，楼梯等模块\n> 场景的混淆视听的组件\n> 第三人称使用的相机跟随\n> 复杂的相机机制以显示当前游戏所需的空间\n\n### Fighting Games\n\n> Efforts on:\n> * a rich set of fighting animations;\n>*  accurate hit detection;\n>* a user input system capable of detecting complex button and joystick\n>combinations; and\n>*  crowds, but otherwise relatively static backgrounds\n\n> State-of-the-art fighting games:\n>*  high-definition character graphics, including realistic skin shaders with\nsubsurface scattering and sweat effects;\n>* high-fidelity character animations; and\n>*  physics-based cloth and hair simulations for the characters.\n\n> 丰富的对战性的动画集\n> 精准的碰撞检测\n> 连招所用的组合键设计\n> 观众相关的人群背景设计\n\n> 高质量的人物画面及皮肤shader支持\n> 高质量的动画\n> 头发衣服的模拟\n\n\n### Racing Games\n>Some of the technological properties of a typical racing game include the\nfollowing techniques:\n>* Various “tricks” are used when rendering distant background elements,\nsuch as employing two-dimensional cards for trees, hills and mountains.\n>* The track is often broken down into relatively simple two-dimensional\nregions called “sectors.” These data structures are used to optimize\nrendering and visibility determination, to aid in artificial intelligence\nand path finding for non-human-controlled vehicles, and to solve many\nother technical problems.\n>*The camera typically follows behind the vehicle for a third-person perspective, or is sometimes situated inside the cockpit first-person style.\n>*When the track involves tunnels and other “tight” spaces, a good deal\nof effort is often put into ensuring that the camera does not collide with\nbackground geometry\n\n>  背景元素的各种2D的以假乱真的方法\n>  赛道的设计，使用2维的Sectors的数据结构，用于优化渲染和视觉效果，也可辅助设计AI的寻路等\n>  相机的视角以塞车后方的第三方人称或驾驶室的第一人称角色\n\n### Real-Time Strategy(RTS)\n\n> Include the following techniques:\n>* Each unit is relatively low-res, so that the game can support large numbers of them on-screen at once.\n>* Height-field terrain is usually the canvas upon which the game is designed and played.\n>* The player is often allowed to build new structures on the terrain in\naddition to deploying his or her forces.\n>* User interaction is typically via single-click and area-based selection of\nunits, plus menus or toolbars containing commands, equipment, unit\ntypes, building types, etc.\n\n> 每一个单元都占有相对少的资源，以便支持更多单元的同屏\n> 高地的地型常用于场景中\n> 玩家可自己支配自己的势力在地图，如创建一些建筑等\n> 交互模式传统上来说是用单击或区域选择\n\n\n### Massively Multiplayer Online Games (MMO)\n\n>* An MMO is defined as any game that supports huge numbers of\nsimultaneous players (from thousands to hundreds of thousands), usually all\nplaying in one very large, persistent virtual world (i.e., a world whose internal\nstate persists for very long periods of time, far beyond that of any one player’s\ngameplay session). \n>* Hence, perhaps the most important\nrole of the central server is to handle the billing and micro-transactions which\nserve as the game developer’s primary source of revenue.\n> MMO：支持超多在线在在一个虚拟世界中游玩的游戏\n> 分类有MMORPG,MMORTS, MMOFPS\n> 核心在于服务器的强大。\n\n### Player-Authored Content\n> 以玩家为主的游戏模式，代表性如我的世界，Little Big Planet2\n\n\n### Other Genres\n\n> sports\n> RPG\n> God games, e.g. Populous \n> Social simulation games , e.g. SimCity\n> puzzle game , e.g.Tetris\n> non-electronic games\n> web-based game\n\n## (1.5) Game Engine Survey\n\n### The Quake Family of Engines\n1992 Written by Id Software. \n\nQuake , Quake II source code is freely available!\n\n### The Unreal Family of Engines\n\nMajor competitor to Quake from 1998 written by Epic Games, Inc.\n2004 UE2. \n> Unreal is an incredibly powerful prototyping\ntool and commercial game development platform, and it can be used to build\nvirtually any 3D first-person or third-person game (not to mention games in\nother genres as well).\n\n> Epic now offers full access to Unreal Engine 4, source code and\nall, for a low monthly subscription fee plus a cut of your game’s profits if it\nships. This makes UE4 a viable choice for small independent game studios.\n\nhttps://github.com/EpicGames/UnrealEngine\n\n### The Half-Life Source Engine\n\n> Source is a high-quality engine, rivaling Unreal Engine 4 in terms of graphics capabilities and tool set.\n\nhttps://www.moddb.com/games/half-life-source\n\n### DICE's Frostbite\n寒霜\n\n >DICE's efforts to create a game engine for Battlefield Bad Company in 2006! Frostbite boasts a powerful unified asset creation tool called\nFrostEd, a powerful tools pipeline known as Backend Services, and a powerful\nruntime game engine. \n>https://www.ea.com/frostbite/engine\n\n### CryEngine\n\n>Crytek originally developed their powerful game engine known as CryENGINE as a tech demo for Nvidia.\n\n\n### Sony's PhyreEngine\n\n\n>In an effort to make developing games for Sony’s PlayStation 3 platform more\naccessible, Sony introduced PhyreEngine at the Game Developer’s Conference (GDC) in 2008.\n>It is available free of charge to any licensed Sony developer as part of the PlayStation SDK\n\n>为了针对sony ps3平台更好的开发游戏，2008年在GDC大会上推出\n\n### Microsoft’s XNA Game Studio\n\n> VS. C# and CLR.\n\n### Unity\n\n### 2D Game Engines for Non-programmers\n\n>These toolkits emphasize ease of use and allow users to employ a graphical user\ninterface to create a game rather than requiring the use of a programming\nlanguage. \n\n>使用图形化界面去创建游戏而不是编程的方式\n> 此类引擎：\n> Multimedia Fusion 2\n> Game Salad Creator\n> Scratch\n\n\n### C4 Engine\n\n>http://terathon.com/index.html\n\n\n### Proprietary In-House Engines\n>Many companies build and maintain proprietary in-house game engines. \n>专属著作权的内部引擎！\n\n\n### Open Source Engines\n\n> https://en.wikipedia.org/wiki/List_of_game_engines\n> OGRE\n> Panda3D\n> Yake <-OGRE\n> Crystal Space \n> Torque and Irrlicht","source":"_posts/GEA-P1.md","raw":"---\ntitle: GEA-P1 \ncategories:\n- IT阅读\ntags: \n- Game\n---\n\n## (1.2)What is Game?\n\n>In his excellent book, A Theory\nof Fun for Game Design **a game to be an interactive experience that provides the player with an increasingly challenging sequence of patterns which he or she learns and eventually masters**.\n\n>游戏： 一个交互性的经历提供一个玩家学习或将要学习的技能的挑战集合（持续提升的）\n\n* soft real-time game & hard real-time game\n  soft 意味着deadline不影响玩家，hard往往造成严重的后果。\n  \n\n## (1.4) Game genres\n\n### FPS\n\n>first-person shooters aim to provide their players with the illusion of being\nimmersed in a detailed, hyperrealistic world\n\n>First-person shooters typically focus on technologies such as:\n>* efficient rendering of large 3D virtual worlds;\n>* a responsive camera control/aiming mechanic;\n>* high-fidelity animations of the player’s virtual arms and weapons;\n>* a wide range of powerful handheld weaponry;\n>* a forgiving player character motion and collision model, which often\ngives these games a “floaty” feel;\n>* high-fidelity animations and artificial intelligence for the non-player\ncharacters (NPCs)—the player’s enemies and allies; and\n>* small-scale online multiplayer capabilities (typically supporting up to\n64 simultaneous players), and the ubiquitous “death match” gameplay\nmode.\n\n> 高效渲染3D虚拟世界\n> 有响应式的相机控制与射击目标指向机制\n> 高质量的玩家手臂和武器控制\n> 丰富的装备选择\n> 丰富的人物动画库和碰撞模型\n> 非玩家（NPC）的高质量动作和人工智能\n> 小型的多人同屏（<64）和频繁的角色死亡重生的游戏机制\n\n### Platformers and Other Third-Person Games\n\n> Technologies specifically:\n> * moving platforms, ladders, ropes, trellises and other interesting locomotion modes;\n> * puzzle-like environmental elements;\n> * a third-person “follow camera” which stays focused on the player character and whose rotation is typically controlled by the human player via\nthe right joypad stick (on a console) or the mouse (on a PC—note that\nwhile there are a number of popular third-person shooters on a PC, the\nplatformer genre exists almost exclusively on consoles); and\n> * a complex camera collision system for ensuring that the view point never\n“clips” through background geometry or dynamic foreground objects\n\n> 移动平台，楼梯等模块\n> 场景的混淆视听的组件\n> 第三人称使用的相机跟随\n> 复杂的相机机制以显示当前游戏所需的空间\n\n### Fighting Games\n\n> Efforts on:\n> * a rich set of fighting animations;\n>*  accurate hit detection;\n>* a user input system capable of detecting complex button and joystick\n>combinations; and\n>*  crowds, but otherwise relatively static backgrounds\n\n> State-of-the-art fighting games:\n>*  high-definition character graphics, including realistic skin shaders with\nsubsurface scattering and sweat effects;\n>* high-fidelity character animations; and\n>*  physics-based cloth and hair simulations for the characters.\n\n> 丰富的对战性的动画集\n> 精准的碰撞检测\n> 连招所用的组合键设计\n> 观众相关的人群背景设计\n\n> 高质量的人物画面及皮肤shader支持\n> 高质量的动画\n> 头发衣服的模拟\n\n\n### Racing Games\n>Some of the technological properties of a typical racing game include the\nfollowing techniques:\n>* Various “tricks” are used when rendering distant background elements,\nsuch as employing two-dimensional cards for trees, hills and mountains.\n>* The track is often broken down into relatively simple two-dimensional\nregions called “sectors.” These data structures are used to optimize\nrendering and visibility determination, to aid in artificial intelligence\nand path finding for non-human-controlled vehicles, and to solve many\nother technical problems.\n>*The camera typically follows behind the vehicle for a third-person perspective, or is sometimes situated inside the cockpit first-person style.\n>*When the track involves tunnels and other “tight” spaces, a good deal\nof effort is often put into ensuring that the camera does not collide with\nbackground geometry\n\n>  背景元素的各种2D的以假乱真的方法\n>  赛道的设计，使用2维的Sectors的数据结构，用于优化渲染和视觉效果，也可辅助设计AI的寻路等\n>  相机的视角以塞车后方的第三方人称或驾驶室的第一人称角色\n\n### Real-Time Strategy(RTS)\n\n> Include the following techniques:\n>* Each unit is relatively low-res, so that the game can support large numbers of them on-screen at once.\n>* Height-field terrain is usually the canvas upon which the game is designed and played.\n>* The player is often allowed to build new structures on the terrain in\naddition to deploying his or her forces.\n>* User interaction is typically via single-click and area-based selection of\nunits, plus menus or toolbars containing commands, equipment, unit\ntypes, building types, etc.\n\n> 每一个单元都占有相对少的资源，以便支持更多单元的同屏\n> 高地的地型常用于场景中\n> 玩家可自己支配自己的势力在地图，如创建一些建筑等\n> 交互模式传统上来说是用单击或区域选择\n\n\n### Massively Multiplayer Online Games (MMO)\n\n>* An MMO is defined as any game that supports huge numbers of\nsimultaneous players (from thousands to hundreds of thousands), usually all\nplaying in one very large, persistent virtual world (i.e., a world whose internal\nstate persists for very long periods of time, far beyond that of any one player’s\ngameplay session). \n>* Hence, perhaps the most important\nrole of the central server is to handle the billing and micro-transactions which\nserve as the game developer’s primary source of revenue.\n> MMO：支持超多在线在在一个虚拟世界中游玩的游戏\n> 分类有MMORPG,MMORTS, MMOFPS\n> 核心在于服务器的强大。\n\n### Player-Authored Content\n> 以玩家为主的游戏模式，代表性如我的世界，Little Big Planet2\n\n\n### Other Genres\n\n> sports\n> RPG\n> God games, e.g. Populous \n> Social simulation games , e.g. SimCity\n> puzzle game , e.g.Tetris\n> non-electronic games\n> web-based game\n\n## (1.5) Game Engine Survey\n\n### The Quake Family of Engines\n1992 Written by Id Software. \n\nQuake , Quake II source code is freely available!\n\n### The Unreal Family of Engines\n\nMajor competitor to Quake from 1998 written by Epic Games, Inc.\n2004 UE2. \n> Unreal is an incredibly powerful prototyping\ntool and commercial game development platform, and it can be used to build\nvirtually any 3D first-person or third-person game (not to mention games in\nother genres as well).\n\n> Epic now offers full access to Unreal Engine 4, source code and\nall, for a low monthly subscription fee plus a cut of your game’s profits if it\nships. This makes UE4 a viable choice for small independent game studios.\n\nhttps://github.com/EpicGames/UnrealEngine\n\n### The Half-Life Source Engine\n\n> Source is a high-quality engine, rivaling Unreal Engine 4 in terms of graphics capabilities and tool set.\n\nhttps://www.moddb.com/games/half-life-source\n\n### DICE's Frostbite\n寒霜\n\n >DICE's efforts to create a game engine for Battlefield Bad Company in 2006! Frostbite boasts a powerful unified asset creation tool called\nFrostEd, a powerful tools pipeline known as Backend Services, and a powerful\nruntime game engine. \n>https://www.ea.com/frostbite/engine\n\n### CryEngine\n\n>Crytek originally developed their powerful game engine known as CryENGINE as a tech demo for Nvidia.\n\n\n### Sony's PhyreEngine\n\n\n>In an effort to make developing games for Sony’s PlayStation 3 platform more\naccessible, Sony introduced PhyreEngine at the Game Developer’s Conference (GDC) in 2008.\n>It is available free of charge to any licensed Sony developer as part of the PlayStation SDK\n\n>为了针对sony ps3平台更好的开发游戏，2008年在GDC大会上推出\n\n### Microsoft’s XNA Game Studio\n\n> VS. C# and CLR.\n\n### Unity\n\n### 2D Game Engines for Non-programmers\n\n>These toolkits emphasize ease of use and allow users to employ a graphical user\ninterface to create a game rather than requiring the use of a programming\nlanguage. \n\n>使用图形化界面去创建游戏而不是编程的方式\n> 此类引擎：\n> Multimedia Fusion 2\n> Game Salad Creator\n> Scratch\n\n\n### C4 Engine\n\n>http://terathon.com/index.html\n\n\n### Proprietary In-House Engines\n>Many companies build and maintain proprietary in-house game engines. \n>专属著作权的内部引擎！\n\n\n### Open Source Engines\n\n> https://en.wikipedia.org/wiki/List_of_game_engines\n> OGRE\n> Panda3D\n> Yake <-OGRE\n> Crystal Space \n> Torque and Irrlicht","slug":"GEA-P1","published":1,"date":"2020-09-09T02:46:51.345Z","updated":"2020-09-09T02:46:51.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeus8hxn00003jf0eedjqkg5","content":"<h2 id=\"1-2-What-is-Game\"><a href=\"#1-2-What-is-Game\" class=\"headerlink\" title=\"(1.2)What is Game?\"></a>(1.2)What is Game?</h2><blockquote>\n<p>In his excellent book, A Theory<br>of Fun for Game Design <strong>a game to be an interactive experience that provides the player with an increasingly challenging sequence of patterns which he or she learns and eventually masters</strong>.</p>\n</blockquote>\n<blockquote>\n<p>游戏： 一个交互性的经历提供一个玩家学习或将要学习的技能的挑战集合（持续提升的）</p>\n</blockquote>\n<ul>\n<li>soft real-time game &amp; hard real-time game<br>soft 意味着deadline不影响玩家，hard往往造成严重的后果。</li>\n</ul>\n<h2 id=\"1-4-Game-genres\"><a href=\"#1-4-Game-genres\" class=\"headerlink\" title=\"(1.4) Game genres\"></a>(1.4) Game genres</h2><h3 id=\"FPS\"><a href=\"#FPS\" class=\"headerlink\" title=\"FPS\"></a>FPS</h3><blockquote>\n<p>first-person shooters aim to provide their players with the illusion of being<br>immersed in a detailed, hyperrealistic world</p>\n</blockquote>\n<blockquote>\n<p>First-person shooters typically focus on technologies such as:</p>\n<ul>\n<li>efficient rendering of large 3D virtual worlds;</li>\n<li>a responsive camera control/aiming mechanic;</li>\n<li>high-fidelity animations of the player’s virtual arms and weapons;</li>\n<li>a wide range of powerful handheld weaponry;</li>\n<li>a forgiving player character motion and collision model, which often<br>gives these games a “floaty” feel;</li>\n<li>high-fidelity animations and artificial intelligence for the non-player<br>characters (NPCs)—the player’s enemies and allies; and</li>\n<li>small-scale online multiplayer capabilities (typically supporting up to<br>64 simultaneous players), and the ubiquitous “death match” gameplay<br>mode.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>高效渲染3D虚拟世界<br>有响应式的相机控制与射击目标指向机制<br>高质量的玩家手臂和武器控制<br>丰富的装备选择<br>丰富的人物动画库和碰撞模型<br>非玩家（NPC）的高质量动作和人工智能<br>小型的多人同屏（&lt;64）和频繁的角色死亡重生的游戏机制</p>\n</blockquote>\n<h3 id=\"Platformers-and-Other-Third-Person-Games\"><a href=\"#Platformers-and-Other-Third-Person-Games\" class=\"headerlink\" title=\"Platformers and Other Third-Person Games\"></a>Platformers and Other Third-Person Games</h3><blockquote>\n<p>Technologies specifically:</p>\n<ul>\n<li>moving platforms, ladders, ropes, trellises and other interesting locomotion modes;</li>\n<li>puzzle-like environmental elements;</li>\n<li>a third-person “follow camera” which stays focused on the player character and whose rotation is typically controlled by the human player via<br>the right joypad stick (on a console) or the mouse (on a PC—note that<br>while there are a number of popular third-person shooters on a PC, the<br>platformer genre exists almost exclusively on consoles); and</li>\n<li>a complex camera collision system for ensuring that the view point never<br>“clips” through background geometry or dynamic foreground objects</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>移动平台，楼梯等模块<br>场景的混淆视听的组件<br>第三人称使用的相机跟随<br>复杂的相机机制以显示当前游戏所需的空间</p>\n</blockquote>\n<h3 id=\"Fighting-Games\"><a href=\"#Fighting-Games\" class=\"headerlink\" title=\"Fighting Games\"></a>Fighting Games</h3><blockquote>\n<p>Efforts on:</p>\n<ul>\n<li>a rich set of fighting animations;</li>\n<li>accurate hit detection;</li>\n<li>a user input system capable of detecting complex button and joystick<br>combinations; and</li>\n<li>crowds, but otherwise relatively static backgrounds</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>State-of-the-art fighting games:</p>\n<ul>\n<li>high-definition character graphics, including realistic skin shaders with<br>subsurface scattering and sweat effects;</li>\n<li>high-fidelity character animations; and</li>\n<li>physics-based cloth and hair simulations for the characters.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>丰富的对战性的动画集<br>精准的碰撞检测<br>连招所用的组合键设计<br>观众相关的人群背景设计</p>\n</blockquote>\n<blockquote>\n<p>高质量的人物画面及皮肤shader支持<br>高质量的动画<br>头发衣服的模拟</p>\n</blockquote>\n<h3 id=\"Racing-Games\"><a href=\"#Racing-Games\" class=\"headerlink\" title=\"Racing Games\"></a>Racing Games</h3><blockquote>\n<p>Some of the technological properties of a typical racing game include the<br>following techniques:</p>\n<ul>\n<li>Various “tricks” are used when rendering distant background elements,<br>such as employing two-dimensional cards for trees, hills and mountains.</li>\n<li>The track is often broken down into relatively simple two-dimensional<br>regions called “sectors.” These data structures are used to optimize<br>rendering and visibility determination, to aid in artificial intelligence<br>and path finding for non-human-controlled vehicles, and to solve many<br>other technical problems.</li>\n<li>The camera typically follows behind the vehicle for a third-person perspective, or is sometimes situated inside the cockpit first-person style.</li>\n<li>When the track involves tunnels and other “tight” spaces, a good deal<br>of effort is often put into ensuring that the camera does not collide with<br>background geometry</li>\n</ul>\n</blockquote>\n<blockquote>\n<p> 背景元素的各种2D的以假乱真的方法<br> 赛道的设计，使用2维的Sectors的数据结构，用于优化渲染和视觉效果，也可辅助设计AI的寻路等<br> 相机的视角以塞车后方的第三方人称或驾驶室的第一人称角色</p>\n</blockquote>\n<h3 id=\"Real-Time-Strategy-RTS\"><a href=\"#Real-Time-Strategy-RTS\" class=\"headerlink\" title=\"Real-Time Strategy(RTS)\"></a>Real-Time Strategy(RTS)</h3><blockquote>\n<p>Include the following techniques:</p>\n<ul>\n<li>Each unit is relatively low-res, so that the game can support large numbers of them on-screen at once.</li>\n<li>Height-field terrain is usually the canvas upon which the game is designed and played.</li>\n<li>The player is often allowed to build new structures on the terrain in<br>addition to deploying his or her forces.</li>\n<li>User interaction is typically via single-click and area-based selection of<br>units, plus menus or toolbars containing commands, equipment, unit<br>types, building types, etc.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>每一个单元都占有相对少的资源，以便支持更多单元的同屏<br>高地的地型常用于场景中<br>玩家可自己支配自己的势力在地图，如创建一些建筑等<br>交互模式传统上来说是用单击或区域选择</p>\n</blockquote>\n<h3 id=\"Massively-Multiplayer-Online-Games-MMO\"><a href=\"#Massively-Multiplayer-Online-Games-MMO\" class=\"headerlink\" title=\"Massively Multiplayer Online Games (MMO)\"></a>Massively Multiplayer Online Games (MMO)</h3><blockquote>\n<ul>\n<li>An MMO is defined as any game that supports huge numbers of<br>simultaneous players (from thousands to hundreds of thousands), usually all<br>playing in one very large, persistent virtual world (i.e., a world whose internal<br>state persists for very long periods of time, far beyond that of any one player’s<br>gameplay session). </li>\n<li>Hence, perhaps the most important<br>role of the central server is to handle the billing and micro-transactions which<br>serve as the game developer’s primary source of revenue.<br>MMO：支持超多在线在在一个虚拟世界中游玩的游戏<br>分类有MMORPG,MMORTS, MMOFPS<br>核心在于服务器的强大。</li>\n</ul>\n</blockquote>\n<h3 id=\"Player-Authored-Content\"><a href=\"#Player-Authored-Content\" class=\"headerlink\" title=\"Player-Authored Content\"></a>Player-Authored Content</h3><blockquote>\n<p>以玩家为主的游戏模式，代表性如我的世界，Little Big Planet2</p>\n</blockquote>\n<h3 id=\"Other-Genres\"><a href=\"#Other-Genres\" class=\"headerlink\" title=\"Other Genres\"></a>Other Genres</h3><blockquote>\n<p>sports<br>RPG<br>God games, e.g. Populous<br>Social simulation games , e.g. SimCity<br>puzzle game , e.g.Tetris<br>non-electronic games<br>web-based game</p>\n</blockquote>\n<h2 id=\"1-5-Game-Engine-Survey\"><a href=\"#1-5-Game-Engine-Survey\" class=\"headerlink\" title=\"(1.5) Game Engine Survey\"></a>(1.5) Game Engine Survey</h2><h3 id=\"The-Quake-Family-of-Engines\"><a href=\"#The-Quake-Family-of-Engines\" class=\"headerlink\" title=\"The Quake Family of Engines\"></a>The Quake Family of Engines</h3><p>1992 Written by Id Software. </p>\n<p>Quake , Quake II source code is freely available!</p>\n<h3 id=\"The-Unreal-Family-of-Engines\"><a href=\"#The-Unreal-Family-of-Engines\" class=\"headerlink\" title=\"The Unreal Family of Engines\"></a>The Unreal Family of Engines</h3><p>Major competitor to Quake from 1998 written by Epic Games, Inc.<br>2004 UE2. </p>\n<blockquote>\n<p>Unreal is an incredibly powerful prototyping<br>tool and commercial game development platform, and it can be used to build<br>virtually any 3D first-person or third-person game (not to mention games in<br>other genres as well).</p>\n</blockquote>\n<blockquote>\n<p>Epic now offers full access to Unreal Engine 4, source code and<br>all, for a low monthly subscription fee plus a cut of your game’s profits if it<br>ships. This makes UE4 a viable choice for small independent game studios.</p>\n</blockquote>\n<p><a href=\"https://github.com/EpicGames/UnrealEngine\">https://github.com/EpicGames/UnrealEngine</a></p>\n<h3 id=\"The-Half-Life-Source-Engine\"><a href=\"#The-Half-Life-Source-Engine\" class=\"headerlink\" title=\"The Half-Life Source Engine\"></a>The Half-Life Source Engine</h3><blockquote>\n<p>Source is a high-quality engine, rivaling Unreal Engine 4 in terms of graphics capabilities and tool set.</p>\n</blockquote>\n<p><a href=\"https://www.moddb.com/games/half-life-source\">https://www.moddb.com/games/half-life-source</a></p>\n<h3 id=\"DICE’s-Frostbite\"><a href=\"#DICE’s-Frostbite\" class=\"headerlink\" title=\"DICE’s Frostbite\"></a>DICE’s Frostbite</h3><p>寒霜</p>\n<blockquote>\n<p>DICE’s efforts to create a game engine for Battlefield Bad Company in 2006! Frostbite boasts a powerful unified asset creation tool called<br>FrostEd, a powerful tools pipeline known as Backend Services, and a powerful<br>runtime game engine.<br><a href=\"https://www.ea.com/frostbite/engine\">https://www.ea.com/frostbite/engine</a></p>\n</blockquote>\n<h3 id=\"CryEngine\"><a href=\"#CryEngine\" class=\"headerlink\" title=\"CryEngine\"></a>CryEngine</h3><blockquote>\n<p>Crytek originally developed their powerful game engine known as CryENGINE as a tech demo for Nvidia.</p>\n</blockquote>\n<h3 id=\"Sony’s-PhyreEngine\"><a href=\"#Sony’s-PhyreEngine\" class=\"headerlink\" title=\"Sony’s PhyreEngine\"></a>Sony’s PhyreEngine</h3><blockquote>\n<p>In an effort to make developing games for Sony’s PlayStation 3 platform more<br>accessible, Sony introduced PhyreEngine at the Game Developer’s Conference (GDC) in 2008.<br>It is available free of charge to any licensed Sony developer as part of the PlayStation SDK</p>\n</blockquote>\n<blockquote>\n<p>为了针对sony ps3平台更好的开发游戏，2008年在GDC大会上推出</p>\n</blockquote>\n<h3 id=\"Microsoft’s-XNA-Game-Studio\"><a href=\"#Microsoft’s-XNA-Game-Studio\" class=\"headerlink\" title=\"Microsoft’s XNA Game Studio\"></a>Microsoft’s XNA Game Studio</h3><blockquote>\n<p>VS. C# and CLR.</p>\n</blockquote>\n<h3 id=\"Unity\"><a href=\"#Unity\" class=\"headerlink\" title=\"Unity\"></a>Unity</h3><h3 id=\"2D-Game-Engines-for-Non-programmers\"><a href=\"#2D-Game-Engines-for-Non-programmers\" class=\"headerlink\" title=\"2D Game Engines for Non-programmers\"></a>2D Game Engines for Non-programmers</h3><blockquote>\n<p>These toolkits emphasize ease of use and allow users to employ a graphical user<br>interface to create a game rather than requiring the use of a programming<br>language. </p>\n</blockquote>\n<blockquote>\n<p>使用图形化界面去创建游戏而不是编程的方式<br>此类引擎：<br>Multimedia Fusion 2<br>Game Salad Creator<br>Scratch</p>\n</blockquote>\n<h3 id=\"C4-Engine\"><a href=\"#C4-Engine\" class=\"headerlink\" title=\"C4 Engine\"></a>C4 Engine</h3><blockquote>\n<p><a href=\"http://terathon.com/index.html\">http://terathon.com/index.html</a></p>\n</blockquote>\n<h3 id=\"Proprietary-In-House-Engines\"><a href=\"#Proprietary-In-House-Engines\" class=\"headerlink\" title=\"Proprietary In-House Engines\"></a>Proprietary In-House Engines</h3><blockquote>\n<p>Many companies build and maintain proprietary in-house game engines.<br>专属著作权的内部引擎！</p>\n</blockquote>\n<h3 id=\"Open-Source-Engines\"><a href=\"#Open-Source-Engines\" class=\"headerlink\" title=\"Open Source Engines\"></a>Open Source Engines</h3><blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_game_engines\">https://en.wikipedia.org/wiki/List_of_game_engines</a><br>OGRE<br>Panda3D<br>Yake &lt;-OGRE<br>Crystal Space<br>Torque and Irrlicht</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-2-What-is-Game\"><a href=\"#1-2-What-is-Game\" class=\"headerlink\" title=\"(1.2)What is Game?\"></a>(1.2)What is Game?</h2><blockquote>\n<p>In his excellent book, A Theory<br>of Fun for Game Design <strong>a game to be an interactive experience that provides the player with an increasingly challenging sequence of patterns which he or she learns and eventually masters</strong>.</p>\n</blockquote>\n<blockquote>\n<p>游戏： 一个交互性的经历提供一个玩家学习或将要学习的技能的挑战集合（持续提升的）</p>\n</blockquote>\n<ul>\n<li>soft real-time game &amp; hard real-time game<br>soft 意味着deadline不影响玩家，hard往往造成严重的后果。</li>\n</ul>\n<h2 id=\"1-4-Game-genres\"><a href=\"#1-4-Game-genres\" class=\"headerlink\" title=\"(1.4) Game genres\"></a>(1.4) Game genres</h2><h3 id=\"FPS\"><a href=\"#FPS\" class=\"headerlink\" title=\"FPS\"></a>FPS</h3><blockquote>\n<p>first-person shooters aim to provide their players with the illusion of being<br>immersed in a detailed, hyperrealistic world</p>\n</blockquote>\n<blockquote>\n<p>First-person shooters typically focus on technologies such as:</p>\n<ul>\n<li>efficient rendering of large 3D virtual worlds;</li>\n<li>a responsive camera control/aiming mechanic;</li>\n<li>high-fidelity animations of the player’s virtual arms and weapons;</li>\n<li>a wide range of powerful handheld weaponry;</li>\n<li>a forgiving player character motion and collision model, which often<br>gives these games a “floaty” feel;</li>\n<li>high-fidelity animations and artificial intelligence for the non-player<br>characters (NPCs)—the player’s enemies and allies; and</li>\n<li>small-scale online multiplayer capabilities (typically supporting up to<br>64 simultaneous players), and the ubiquitous “death match” gameplay<br>mode.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>高效渲染3D虚拟世界<br>有响应式的相机控制与射击目标指向机制<br>高质量的玩家手臂和武器控制<br>丰富的装备选择<br>丰富的人物动画库和碰撞模型<br>非玩家（NPC）的高质量动作和人工智能<br>小型的多人同屏（&lt;64）和频繁的角色死亡重生的游戏机制</p>\n</blockquote>\n<h3 id=\"Platformers-and-Other-Third-Person-Games\"><a href=\"#Platformers-and-Other-Third-Person-Games\" class=\"headerlink\" title=\"Platformers and Other Third-Person Games\"></a>Platformers and Other Third-Person Games</h3><blockquote>\n<p>Technologies specifically:</p>\n<ul>\n<li>moving platforms, ladders, ropes, trellises and other interesting locomotion modes;</li>\n<li>puzzle-like environmental elements;</li>\n<li>a third-person “follow camera” which stays focused on the player character and whose rotation is typically controlled by the human player via<br>the right joypad stick (on a console) or the mouse (on a PC—note that<br>while there are a number of popular third-person shooters on a PC, the<br>platformer genre exists almost exclusively on consoles); and</li>\n<li>a complex camera collision system for ensuring that the view point never<br>“clips” through background geometry or dynamic foreground objects</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>移动平台，楼梯等模块<br>场景的混淆视听的组件<br>第三人称使用的相机跟随<br>复杂的相机机制以显示当前游戏所需的空间</p>\n</blockquote>\n<h3 id=\"Fighting-Games\"><a href=\"#Fighting-Games\" class=\"headerlink\" title=\"Fighting Games\"></a>Fighting Games</h3><blockquote>\n<p>Efforts on:</p>\n<ul>\n<li>a rich set of fighting animations;</li>\n<li>accurate hit detection;</li>\n<li>a user input system capable of detecting complex button and joystick<br>combinations; and</li>\n<li>crowds, but otherwise relatively static backgrounds</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>State-of-the-art fighting games:</p>\n<ul>\n<li>high-definition character graphics, including realistic skin shaders with<br>subsurface scattering and sweat effects;</li>\n<li>high-fidelity character animations; and</li>\n<li>physics-based cloth and hair simulations for the characters.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>丰富的对战性的动画集<br>精准的碰撞检测<br>连招所用的组合键设计<br>观众相关的人群背景设计</p>\n</blockquote>\n<blockquote>\n<p>高质量的人物画面及皮肤shader支持<br>高质量的动画<br>头发衣服的模拟</p>\n</blockquote>\n<h3 id=\"Racing-Games\"><a href=\"#Racing-Games\" class=\"headerlink\" title=\"Racing Games\"></a>Racing Games</h3><blockquote>\n<p>Some of the technological properties of a typical racing game include the<br>following techniques:</p>\n<ul>\n<li>Various “tricks” are used when rendering distant background elements,<br>such as employing two-dimensional cards for trees, hills and mountains.</li>\n<li>The track is often broken down into relatively simple two-dimensional<br>regions called “sectors.” These data structures are used to optimize<br>rendering and visibility determination, to aid in artificial intelligence<br>and path finding for non-human-controlled vehicles, and to solve many<br>other technical problems.</li>\n<li>The camera typically follows behind the vehicle for a third-person perspective, or is sometimes situated inside the cockpit first-person style.</li>\n<li>When the track involves tunnels and other “tight” spaces, a good deal<br>of effort is often put into ensuring that the camera does not collide with<br>background geometry</li>\n</ul>\n</blockquote>\n<blockquote>\n<p> 背景元素的各种2D的以假乱真的方法<br> 赛道的设计，使用2维的Sectors的数据结构，用于优化渲染和视觉效果，也可辅助设计AI的寻路等<br> 相机的视角以塞车后方的第三方人称或驾驶室的第一人称角色</p>\n</blockquote>\n<h3 id=\"Real-Time-Strategy-RTS\"><a href=\"#Real-Time-Strategy-RTS\" class=\"headerlink\" title=\"Real-Time Strategy(RTS)\"></a>Real-Time Strategy(RTS)</h3><blockquote>\n<p>Include the following techniques:</p>\n<ul>\n<li>Each unit is relatively low-res, so that the game can support large numbers of them on-screen at once.</li>\n<li>Height-field terrain is usually the canvas upon which the game is designed and played.</li>\n<li>The player is often allowed to build new structures on the terrain in<br>addition to deploying his or her forces.</li>\n<li>User interaction is typically via single-click and area-based selection of<br>units, plus menus or toolbars containing commands, equipment, unit<br>types, building types, etc.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>每一个单元都占有相对少的资源，以便支持更多单元的同屏<br>高地的地型常用于场景中<br>玩家可自己支配自己的势力在地图，如创建一些建筑等<br>交互模式传统上来说是用单击或区域选择</p>\n</blockquote>\n<h3 id=\"Massively-Multiplayer-Online-Games-MMO\"><a href=\"#Massively-Multiplayer-Online-Games-MMO\" class=\"headerlink\" title=\"Massively Multiplayer Online Games (MMO)\"></a>Massively Multiplayer Online Games (MMO)</h3><blockquote>\n<ul>\n<li>An MMO is defined as any game that supports huge numbers of<br>simultaneous players (from thousands to hundreds of thousands), usually all<br>playing in one very large, persistent virtual world (i.e., a world whose internal<br>state persists for very long periods of time, far beyond that of any one player’s<br>gameplay session). </li>\n<li>Hence, perhaps the most important<br>role of the central server is to handle the billing and micro-transactions which<br>serve as the game developer’s primary source of revenue.<br>MMO：支持超多在线在在一个虚拟世界中游玩的游戏<br>分类有MMORPG,MMORTS, MMOFPS<br>核心在于服务器的强大。</li>\n</ul>\n</blockquote>\n<h3 id=\"Player-Authored-Content\"><a href=\"#Player-Authored-Content\" class=\"headerlink\" title=\"Player-Authored Content\"></a>Player-Authored Content</h3><blockquote>\n<p>以玩家为主的游戏模式，代表性如我的世界，Little Big Planet2</p>\n</blockquote>\n<h3 id=\"Other-Genres\"><a href=\"#Other-Genres\" class=\"headerlink\" title=\"Other Genres\"></a>Other Genres</h3><blockquote>\n<p>sports<br>RPG<br>God games, e.g. Populous<br>Social simulation games , e.g. SimCity<br>puzzle game , e.g.Tetris<br>non-electronic games<br>web-based game</p>\n</blockquote>\n<h2 id=\"1-5-Game-Engine-Survey\"><a href=\"#1-5-Game-Engine-Survey\" class=\"headerlink\" title=\"(1.5) Game Engine Survey\"></a>(1.5) Game Engine Survey</h2><h3 id=\"The-Quake-Family-of-Engines\"><a href=\"#The-Quake-Family-of-Engines\" class=\"headerlink\" title=\"The Quake Family of Engines\"></a>The Quake Family of Engines</h3><p>1992 Written by Id Software. </p>\n<p>Quake , Quake II source code is freely available!</p>\n<h3 id=\"The-Unreal-Family-of-Engines\"><a href=\"#The-Unreal-Family-of-Engines\" class=\"headerlink\" title=\"The Unreal Family of Engines\"></a>The Unreal Family of Engines</h3><p>Major competitor to Quake from 1998 written by Epic Games, Inc.<br>2004 UE2. </p>\n<blockquote>\n<p>Unreal is an incredibly powerful prototyping<br>tool and commercial game development platform, and it can be used to build<br>virtually any 3D first-person or third-person game (not to mention games in<br>other genres as well).</p>\n</blockquote>\n<blockquote>\n<p>Epic now offers full access to Unreal Engine 4, source code and<br>all, for a low monthly subscription fee plus a cut of your game’s profits if it<br>ships. This makes UE4 a viable choice for small independent game studios.</p>\n</blockquote>\n<p><a href=\"https://github.com/EpicGames/UnrealEngine\">https://github.com/EpicGames/UnrealEngine</a></p>\n<h3 id=\"The-Half-Life-Source-Engine\"><a href=\"#The-Half-Life-Source-Engine\" class=\"headerlink\" title=\"The Half-Life Source Engine\"></a>The Half-Life Source Engine</h3><blockquote>\n<p>Source is a high-quality engine, rivaling Unreal Engine 4 in terms of graphics capabilities and tool set.</p>\n</blockquote>\n<p><a href=\"https://www.moddb.com/games/half-life-source\">https://www.moddb.com/games/half-life-source</a></p>\n<h3 id=\"DICE’s-Frostbite\"><a href=\"#DICE’s-Frostbite\" class=\"headerlink\" title=\"DICE’s Frostbite\"></a>DICE’s Frostbite</h3><p>寒霜</p>\n<blockquote>\n<p>DICE’s efforts to create a game engine for Battlefield Bad Company in 2006! Frostbite boasts a powerful unified asset creation tool called<br>FrostEd, a powerful tools pipeline known as Backend Services, and a powerful<br>runtime game engine.<br><a href=\"https://www.ea.com/frostbite/engine\">https://www.ea.com/frostbite/engine</a></p>\n</blockquote>\n<h3 id=\"CryEngine\"><a href=\"#CryEngine\" class=\"headerlink\" title=\"CryEngine\"></a>CryEngine</h3><blockquote>\n<p>Crytek originally developed their powerful game engine known as CryENGINE as a tech demo for Nvidia.</p>\n</blockquote>\n<h3 id=\"Sony’s-PhyreEngine\"><a href=\"#Sony’s-PhyreEngine\" class=\"headerlink\" title=\"Sony’s PhyreEngine\"></a>Sony’s PhyreEngine</h3><blockquote>\n<p>In an effort to make developing games for Sony’s PlayStation 3 platform more<br>accessible, Sony introduced PhyreEngine at the Game Developer’s Conference (GDC) in 2008.<br>It is available free of charge to any licensed Sony developer as part of the PlayStation SDK</p>\n</blockquote>\n<blockquote>\n<p>为了针对sony ps3平台更好的开发游戏，2008年在GDC大会上推出</p>\n</blockquote>\n<h3 id=\"Microsoft’s-XNA-Game-Studio\"><a href=\"#Microsoft’s-XNA-Game-Studio\" class=\"headerlink\" title=\"Microsoft’s XNA Game Studio\"></a>Microsoft’s XNA Game Studio</h3><blockquote>\n<p>VS. C# and CLR.</p>\n</blockquote>\n<h3 id=\"Unity\"><a href=\"#Unity\" class=\"headerlink\" title=\"Unity\"></a>Unity</h3><h3 id=\"2D-Game-Engines-for-Non-programmers\"><a href=\"#2D-Game-Engines-for-Non-programmers\" class=\"headerlink\" title=\"2D Game Engines for Non-programmers\"></a>2D Game Engines for Non-programmers</h3><blockquote>\n<p>These toolkits emphasize ease of use and allow users to employ a graphical user<br>interface to create a game rather than requiring the use of a programming<br>language. </p>\n</blockquote>\n<blockquote>\n<p>使用图形化界面去创建游戏而不是编程的方式<br>此类引擎：<br>Multimedia Fusion 2<br>Game Salad Creator<br>Scratch</p>\n</blockquote>\n<h3 id=\"C4-Engine\"><a href=\"#C4-Engine\" class=\"headerlink\" title=\"C4 Engine\"></a>C4 Engine</h3><blockquote>\n<p><a href=\"http://terathon.com/index.html\">http://terathon.com/index.html</a></p>\n</blockquote>\n<h3 id=\"Proprietary-In-House-Engines\"><a href=\"#Proprietary-In-House-Engines\" class=\"headerlink\" title=\"Proprietary In-House Engines\"></a>Proprietary In-House Engines</h3><blockquote>\n<p>Many companies build and maintain proprietary in-house game engines.<br>专属著作权的内部引擎！</p>\n</blockquote>\n<h3 id=\"Open-Source-Engines\"><a href=\"#Open-Source-Engines\" class=\"headerlink\" title=\"Open Source Engines\"></a>Open Source Engines</h3><blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_game_engines\">https://en.wikipedia.org/wiki/List_of_game_engines</a><br>OGRE<br>Panda3D<br>Yake &lt;-OGRE<br>Crystal Space<br>Torque and Irrlicht</p>\n</blockquote>\n"},{"title":"GEA-P2","_content":"\n## (1.6) Runtime Engine Architecture\n\n![Runtime Engine Architecture](/img/1574738644796.png)\n\n>自底向上的顺序大概为：\n>硬件层 \n>驱动层\n> 系统层 \n>ＳＤＫ层\n＞平台独立层\n> 核心库\n>资源库 \n>　渲染，调试，物理检测，游戏平台基础\n＞游戏级渲染，各上层动画机制，相机机制，ＡＩ机制\n＞游戏逻辑层\n\n### 操作系统层\n\n分为PC与主机（游戏）系统，PC系统如windows 提供了一种线程的机制为分享硬件资源，而主机游戏一般来说则可占用所有的硬件资源，但这两者的差距在逐渐减少。\n\n>Operating systems like Microsoft\nWindows employ a time-sliced approach to sharing the hardware with multiple running programs, known as preemptive multitasking. \n>On a console, the game typically\n“owns” the entire machine.\n>So the gap between console and PC development is\ngradually closing (for better or for worse).\n\n###  3rd Party SDKS\n\n> DirectX Opengl\n> Havok, PhysX ODE etc.. 实现增强物理效果的SDK\n> Boost++ C++标准库之一\n> STL C++标准库之一\n> Kynapse 游戏AI开发的中间件\n> Granny, Havok Animation，处理动画骨骼等\n> Euphoria， 小型的游戏开发套件：https://sourceforge.net/projects/euphoriasdk/\n\n#### 数据结构与算法\n\nC++ 库\n1. STL : strings, data structures, stream-based I/O  \n2. STLport :portable and optimized of STL\n3. Boost :Powerful data structures and algorithms library\n4. Loki :Powerful generic programming template library\n\n\n#### 图形\n\n>硬件图形库\n> Glide  早期的3D图形SDK，针对Voodoo显卡。\n> OpenGL widely used!\n> DirectX Microsoft's 3D graphics SDK\n> libgcm   更底层的接口针对PS3的图形硬件，OpenGL更高效处理的选择。\n> Edge Naughty Dog 和Sony提供的PS3平台的库\n\n#### 物理与碰撞\n\n> Havok industrial-strength physics and collision engine.\n> PhysX  NVIDIA\n> Open Dynamics Engine.  open source\n\n#### 角色动画\n\n> Granny:\n> In my opinion, the Granny SDK\nhas the best-designed and most logical animation API of any I’ve seen,\ncommercial or proprietary, especially its excellent handling of time\n\n> Havok Animation\n>  The line between physics and animation is becoming\nincreasingly blurred as characters become more and more realistic.\n\n> Edge  PS3 from Sony\n\n#### 生物力学角色模型 Biomechanical Character Models\n\n>Endorphin and Euphoria. These are animation packages that produce\ncharacter motion using advanced biomechanical models of realistic human movement.\n> Endorphin, is a Maya plug-in that permits animators to\nrun full biomechanical simulations on characters and export the resulting animations as if they had been hand animated\n>Euphoria, is a real-time version of Endorphin intended\nto produce physically and biomechanically accurate character motion at runtime under the influence of unpredictable forces.\n\n> Endorphin， MAYA插件，执行动作的角色将运行一个完整的生物力学模拟同时导出动画。\n> Euphoria,  在一些不可预测的因素影响下，将动作更精细的模拟表现出来。\nhttps://space.bilibili.com/430600560/channel/detail?cid=75669\n\n\n### Platform Independence Layer\n\n>the platform independence layer ensures consistent\nbehavior across all hardware platforms.\n\n\n### Rendering Engine\n> The rendering engine is one of the largest and most complex components of\nany game engine.\n\n#### Low-Level Renderer\n![Low-Level Renderer](/img/1574756479212.png)\n\n> Graphics Device Interface\n> DirectX, OpenGL\n\n> The low-level renderer usually provides a viewport abstraction with an associated camera-to-world matrix and 3D projection parameters, such as field of view and the location of the near and far clip planes.\n\n>  底层的渲染提供一个显示区域，关联到相机-世界和投影的参数。\n\n#### Scene Graph / Culling Optimizations\n\n> For very small game worlds, a simple frustum cull (i.e., removing objects\nthat the camera cannot “see”) is probably all that is required. For larger game\nworlds, a more advanced spatial subdivision data structure might be used to\nimprove rendering efficiency by allowing the potentially visible set (PVS) of\nobjects to be determined very quickly. \n\n> potentially visible set (PVS)\n\n> 理想状态下，底层渲染应该完全不关心spatial subdivision或scene graph的使用类型。 \n>OGRE open source rendering engine (http://www.ogre3d.org) is a great example of this principle in action. OGRE provides a plug-and-play scene graph\narchitecture. Game developers can either select from a number of preimplemented scene graph designs, or they can provide a custom scene graph implementation.\n\n### Front End\n![Front End](/img/1574759871996.png)\n\n> HUD, Heads-up Display\n> 在顶层显示\n> FMV, Full-Motion Video 动作完整的视频回放\nThis system is responsible for playing full-screen movies that have been recorded earlier.\n> IGC, in-game cinematics system.  游戏内的视频，一般当玩家不可操作时显示\n\n\n### Profiling and Debugging Tools\n>常用\n• Intel’s VTune,\n• IBM’s Quantify and Purify (part of the PurifyPlus tool suite), and\n• Compuware’s Bounds Checker.\n\n>However, most game engines also incorporate a suite of custom profiling\nand debugging tools. For example, they might include one or more of the\nfollowing:\n>* a mechanism for manually instrumenting the code, so that specific sections of code can be timed;\n>* a facility for displaying the profiling statistics on-screen while the game\nis running;\n>* a facility for dumping performance stats to a text file or to an Excel\nspreadsheet;\n>* a facility for determining how much memory is being used by the engine, and by each subsystem, including various on-screen displays;\n>* the ability to dump memory usage, high water mark and leakage stats\nwhen the game terminates and/or during gameplay;\n>* tools that allow debug print statements to be peppered throughout the\ncode, along with an ability to turn on or off different categories of debug\noutput and control the level of verbosity of the output; and\n>* the ability to record game events and then play them back. This is tough\nto get right, but when done properly it can be a very valuable tool for\ntracking down bugs.\n\n### Collisions & Physics\n\nCollision and physics are usually quite tightly coupled. \n>* Havok is the gold standard in the industry today. It is feature-rich and\nperforms well across the boards.\n>* PhysX by NVIDIA is another excellent collision and dynamics engine.\nIt was integrated into Unreal Engine 4 and is also available for free as\na stand-alone product for PC game development. PhysX was originally\ndesigned as the interface to Ageia’s new physics accelerator chip. The\nSDK is now owned and distributed by NVIDIA, and the company has\nadapted PhysX to run on its latest GPUs.\n\n>Open source physics and collision engines are also available. Perhaps the best-known of these is the Open Dynamics Engine (ODE)\n>I-Collide, V-Collide and RAPID are other popular non-commercial collision detection engines. 开发于University of North Carolina\n>http://www.ode.org\n\n\n### Animations\n>类型：\n>* sprite/texture animation,\n>* rigid body hierarchy animation, \n>* skeletal animation, 骨骼动画，\n>* vertex animation， 顶点动画\n>* morph targets.， 拉伸变形目标\n\n![enter description here](/img/1574826629863.png)\n![enter description here](/img/1574826985515.png)\n\n### Human Interface Devices (HID)\n\ninput from the player , 玩家的输入设备\n> keyboard, mouse\n> joypad\n> other specialized game controllers, like steering wheels, fishing rods,\ndance pads, the Wiimote, etc.  方向盘，鱼竿，跳舞板，手柄控制器等\n\n>The HID engine component is sometimes architected to divorce the lowlevel details of the game controller(s) on a particular hardware platform from the high-level game controls.\n>It sometimes also includes a system for detecting\nchords (multiple buttons pressed together), sequences (buttons pressed in sequence within a certain time limit) and gestures (sequences of inputs from the\nbuttons, sticks, accelerometers, etc.).\n> HID engine 组件通常设计为划分出低等级的游戏控制器到高级游戏操作。\n> 通常也会考虑检测组合按钮等情况\n\n### Audio\n\nAudio engines vary greatly in sophistication.\n> For DirectX platforms (PC, Xbox 360, Xbox One), Microsoft provides an excellent audio tool\nsuite called XACT, supported at runtime by their feature-rich XAudio2 andX3DAudio APIs. \n\n>Electronic Arts has developed an advanced, high-powered\naudio engine internally called SoundR!OT\n\n>In conjunction with first-party studios like Naughty Dog, Sony Computer Entertainment America (SCEA) provides a powerful 3D audio engine called Scream\n\n### Online Multiplayer/Networking\n\n> That said, it is usually better to design multiplayer features from day one, if you\nhave that luxury.\n尽早设置多人在线的模式\n\n> 从多人在线转单机版，往往较为简单\n>The Quake engine is well known\nfor its client-on-top-of-server mode, in which a single executable, running on a\nsingle PC, acts both as the client and the server in single-player campaigns.\n\n### Gameplay Foundation Systems\n\n> 用于连接low-level engine systems 与 gameplay code。为了上层游戏逻辑可以更方便使用。\n\n![enter description here](/img/1574912330296.png)\n\n### Game Worlds and Object Models\n\n> 游戏内的对象：\n>* static background geometry, like buildings, roads, terrain (often a special case), etc.;\n>* dynamic rigid bodies, such as rocks, soda cans, chairs, etc.;\n>* player characters (PC);\n>* non-player characters (NPC);\n>* weapons;\n>* projectiles;\n>* vehicles;\n>* lights (which may be present in the dynamic scene at runtime, or only\nused for static lighting offline);\n>* cameras;\n\n\n### Scripting System & Event\n\n> Many game engines employ a scripting language in order to make development of game-specific gameplay rules and content easier and more rapid.\n\n### Artificial Intellience Foundations\n\n游戏的人工智能模块，一些游戏引擎已经在引入这一模块到引擎，虽然这并不是引擎模块考虑的。\nKynogon \n>A company called Kynogon developed a middleware SDK named Kynapse, which provided much of the low-level technology required to build commercially viable game AI.  This SDK provides low-level AI building blocks such as nav mesh generation, path finding, static and dynamic object avoidance, identification of vulnerabilities within a play space (e.g., an open window from which an ambush could come) and a well-defined interface between AI and animation. \n\n### Game-Specific Subsystems\n\n 顶端的游戏开发层\n> Practically speaking, this line is never perfectly distinct. At least\nsome game-specific knowledge invariably seeps down through the gameplay\nfoundations layer and sometimes even extends into the core of the engine\nitself.\n\n\n## (1.7) Tools and the asset pipeline\n\n游戏数据层的组成：\n如图：粗黑箭头， 表示源数据是怎样从工具中生成出\n\t\t细线箭头，表示不同数据资源之间的引用关系\n![enter description here](/img/1574995793894.png)\n\n### Digital Content Creation Tools\n\n游戏资源从3D mesh到图片bitmaps再到音频之类的，都需要设计师用工具制作，而这些工具被称为DCC（Digital Content Creation）\n\n> Maya,3d Max\n> SoundForge\n> Photoshop\n。。。\n\n>That said, tools must be relatively **easy to use**, and they absolutely must be reliable, if a game team is going to be able to develop a highly polished product in a timely manner.\n>工具的使用需要按项目所需来决定，关键在于好用，不一定要非常完美的工具。\n\n\n### The Asset Conditioning Pipeline\n\n往往DCC生成的文件并不能直接在游戏开发中使用，原因有下：\n1. DCC导出的数据，存在许多游戏开发不需要的，比如maya中会存储directed acyclic graph的场景结点，和复杂的联结的网络结构。\n\n2. DCC文件格式加载读取很慢，而且通常格式是各个DCC专属的\n\n>Once data has been exported from the DCC app, it often must be further\nprocessed before being sent to the game engine. And if a game studio is shipping its game on more than one platform, the intermediate files might be processed differently for each target platform. \nDCC应用一般需要生成给游戏引擎用的文件。\n\n>The pipeline from DCC app to game engine is sometimes called the asset\nconditioning pipeline (ACP). Every game engine has this in some form.\n这种途径：从DCC应用到游戏引擎通常被称为: ACP\n\n#### 3D Model/Mesh Data\n\n>A mesh is a complex shape composed of triangles and vertices. A mesh typically has one or more materials applied to it in order to define\nvisual surface properties\n> MESH：由三角面和点组成的复杂的形状\n\n> In this book, I will use the term “mesh” to refer to a single renderable shape,\nand “model” to refer to a composite object that may contain multiple meshes,\nplus animation data and other metadata for use by the game.\n\n>Brush Geometry\n>Brush geometry is defined as a collection of convex hulls, each of which is defined by multiple planes.Brushes are typically created and edited directly in the game world editor. This is essentially an “old school” approach to creating\nrenderable geometry, but it is still used in some engines.\n> 笔刷型的图形，每个都由多个平面组成，通常是凹凸面的一种实现工具。\n> Pros:\n• fast and easy to create;\n• accessible to game designers—often used to “block out” a game level for\nprototyping purposes;\n• can serve both as collision volumes and as renderable geometry.\n>Cons:\n• low-resolution;\n• difficult to create complex shapes;\n• cannot support articulated objects or animated characters.\n\n\n#### Skeletal Animation Data\n\nA skeletal mesh is a special kind of mesh that is bound to a skeletal hierarchy for\nthe purposes of articulated animation. \n>Each vertex of a skeletal mesh contains a list of indices indicating to which\njoint(s) in the skeleton it is bound. A vertex usually also includes a set of joint\nweights, specifying the amount of influence each joint has on the vertex.\n>骨骼mesh，包含骨骼连接点信息，通常还会有点的权重和数量影响的数据\n\n>In order to render a skeletal mesh, the game engine requires three distinct\nkinds of data:\n>1. the mesh itself,\n>2. the skeletal hierarchy (joint names, parent-child relationships and the\nbase pose the skeleton was in when it was originally bound to the mesh),\nand58 1. Introduction\n>3. one or more animation clips, which specify how the joints should move\nover time.\n\n> Mesh与skeleton通常由DCC导出在一个文件里，当然，当有多个mesh对应一个骨骼时，骨骼通常需要单独导出，另外动画文件一般也是单独导出。有些引擎会让这三者在一个大文件里。\n\n>An unoptimized skeletal animation is defined by a stream of 4 × 3 matrix\nsamples, taken at a frequency of at least 30 frames per second, for each of the\njoints in a skeleton (of which there can be 500 or more for a realistic humanoid\ncharacter).\n因此动画文件一般需要使用高强度的压缩方式来存储。\n\n#### Audio Data\n\nAudio clips are usually exported from Sound Forge or some other audio production tool in a variety of formats and at a number of different data sampling rates.\n\n#### Particle Systems Data\n\nModern games make use of complex particle effects. These are authored by\nartists who specialize in the creation of visual effects. Third-party tools, such\nas Houdini, permit film-quality effects to be authored\n\n\n### The World Editor\n\nThe game world is where everything in a game engine comes together. To my\nknowledge, there are no commercially available game world editors\n>* Some variant of the Radiant game editor is used by most game engines\nbased on Quake technology.\n>* The Half-Life 2 Source engine provides a world editor called Hammer.\n>* UnrealEd is the Unreal Engine’s world editor. This powerful tool also\nserves as the asset manager for all data types that the engine can consume.\n\n### The Resource Database\n\nEvery asset also carries with it a great deal of metadata. metadata with the following information:\n• A unique id that identifies the animation clip at runtime.\n• The name and directory path of the source Maya (.ma or .mb) file.\n• The frame range—on which frame the animation begins and ends.\n• Whether or not the animation is intended to loop.\n• The animator’s choice of compression technique and level. (Some assets\ncan be highly compressed without noticeably degrading their quality,\nwhile others require less or no compression in order to look right ingame.)\n\n### Some Approaches to Tool Architecture\n\nAs an interesting and unique example, Unreal’s world editor and asset\nmanager, UnrealEd, is built right into the runtime game engine.It permits the tools to\nhave total access to the full range of data structures used by the engine and\navoids a common problem of having to have two representations of every\ndata structure—one for the runtime engine and one for the tools.\n>  运行时编辑和访问游戏所有数据为开发带来便利和加速\n\n![一些游戏的工具架构](/img/1575083811284.png)\n![一些运行时可编辑的架构](/img/1575083796324.png)\n\n####  Web-Based User Interfaces\n网页基础的页面显示。这里主要指工具。\n>At Naughty Dog, we use a number of web-based\nUIs. Naughty Dog’s localization tool serves as the front-end portal into our\nlocalization database. Tasker is the web-based interface used by all Naughty\nDog employees to create, manage, schedule, communicate and collaborate on\ngame development tasks during production. A web-based interface known\nas Connector also serves as our window into the various streams of debugging\ninformation that are emitted by the game engine at runtime.\n\n\n\n","source":"_posts/GEA-P2.md","raw":"---\ntitle: GEA-P2\ncategories:\n- IT阅读\ntags: \n- Game\n---\n\n## (1.6) Runtime Engine Architecture\n\n![Runtime Engine Architecture](/img/1574738644796.png)\n\n>自底向上的顺序大概为：\n>硬件层 \n>驱动层\n> 系统层 \n>ＳＤＫ层\n＞平台独立层\n> 核心库\n>资源库 \n>　渲染，调试，物理检测，游戏平台基础\n＞游戏级渲染，各上层动画机制，相机机制，ＡＩ机制\n＞游戏逻辑层\n\n### 操作系统层\n\n分为PC与主机（游戏）系统，PC系统如windows 提供了一种线程的机制为分享硬件资源，而主机游戏一般来说则可占用所有的硬件资源，但这两者的差距在逐渐减少。\n\n>Operating systems like Microsoft\nWindows employ a time-sliced approach to sharing the hardware with multiple running programs, known as preemptive multitasking. \n>On a console, the game typically\n“owns” the entire machine.\n>So the gap between console and PC development is\ngradually closing (for better or for worse).\n\n###  3rd Party SDKS\n\n> DirectX Opengl\n> Havok, PhysX ODE etc.. 实现增强物理效果的SDK\n> Boost++ C++标准库之一\n> STL C++标准库之一\n> Kynapse 游戏AI开发的中间件\n> Granny, Havok Animation，处理动画骨骼等\n> Euphoria， 小型的游戏开发套件：https://sourceforge.net/projects/euphoriasdk/\n\n#### 数据结构与算法\n\nC++ 库\n1. STL : strings, data structures, stream-based I/O  \n2. STLport :portable and optimized of STL\n3. Boost :Powerful data structures and algorithms library\n4. Loki :Powerful generic programming template library\n\n\n#### 图形\n\n>硬件图形库\n> Glide  早期的3D图形SDK，针对Voodoo显卡。\n> OpenGL widely used!\n> DirectX Microsoft's 3D graphics SDK\n> libgcm   更底层的接口针对PS3的图形硬件，OpenGL更高效处理的选择。\n> Edge Naughty Dog 和Sony提供的PS3平台的库\n\n#### 物理与碰撞\n\n> Havok industrial-strength physics and collision engine.\n> PhysX  NVIDIA\n> Open Dynamics Engine.  open source\n\n#### 角色动画\n\n> Granny:\n> In my opinion, the Granny SDK\nhas the best-designed and most logical animation API of any I’ve seen,\ncommercial or proprietary, especially its excellent handling of time\n\n> Havok Animation\n>  The line between physics and animation is becoming\nincreasingly blurred as characters become more and more realistic.\n\n> Edge  PS3 from Sony\n\n#### 生物力学角色模型 Biomechanical Character Models\n\n>Endorphin and Euphoria. These are animation packages that produce\ncharacter motion using advanced biomechanical models of realistic human movement.\n> Endorphin, is a Maya plug-in that permits animators to\nrun full biomechanical simulations on characters and export the resulting animations as if they had been hand animated\n>Euphoria, is a real-time version of Endorphin intended\nto produce physically and biomechanically accurate character motion at runtime under the influence of unpredictable forces.\n\n> Endorphin， MAYA插件，执行动作的角色将运行一个完整的生物力学模拟同时导出动画。\n> Euphoria,  在一些不可预测的因素影响下，将动作更精细的模拟表现出来。\nhttps://space.bilibili.com/430600560/channel/detail?cid=75669\n\n\n### Platform Independence Layer\n\n>the platform independence layer ensures consistent\nbehavior across all hardware platforms.\n\n\n### Rendering Engine\n> The rendering engine is one of the largest and most complex components of\nany game engine.\n\n#### Low-Level Renderer\n![Low-Level Renderer](/img/1574756479212.png)\n\n> Graphics Device Interface\n> DirectX, OpenGL\n\n> The low-level renderer usually provides a viewport abstraction with an associated camera-to-world matrix and 3D projection parameters, such as field of view and the location of the near and far clip planes.\n\n>  底层的渲染提供一个显示区域，关联到相机-世界和投影的参数。\n\n#### Scene Graph / Culling Optimizations\n\n> For very small game worlds, a simple frustum cull (i.e., removing objects\nthat the camera cannot “see”) is probably all that is required. For larger game\nworlds, a more advanced spatial subdivision data structure might be used to\nimprove rendering efficiency by allowing the potentially visible set (PVS) of\nobjects to be determined very quickly. \n\n> potentially visible set (PVS)\n\n> 理想状态下，底层渲染应该完全不关心spatial subdivision或scene graph的使用类型。 \n>OGRE open source rendering engine (http://www.ogre3d.org) is a great example of this principle in action. OGRE provides a plug-and-play scene graph\narchitecture. Game developers can either select from a number of preimplemented scene graph designs, or they can provide a custom scene graph implementation.\n\n### Front End\n![Front End](/img/1574759871996.png)\n\n> HUD, Heads-up Display\n> 在顶层显示\n> FMV, Full-Motion Video 动作完整的视频回放\nThis system is responsible for playing full-screen movies that have been recorded earlier.\n> IGC, in-game cinematics system.  游戏内的视频，一般当玩家不可操作时显示\n\n\n### Profiling and Debugging Tools\n>常用\n• Intel’s VTune,\n• IBM’s Quantify and Purify (part of the PurifyPlus tool suite), and\n• Compuware’s Bounds Checker.\n\n>However, most game engines also incorporate a suite of custom profiling\nand debugging tools. For example, they might include one or more of the\nfollowing:\n>* a mechanism for manually instrumenting the code, so that specific sections of code can be timed;\n>* a facility for displaying the profiling statistics on-screen while the game\nis running;\n>* a facility for dumping performance stats to a text file or to an Excel\nspreadsheet;\n>* a facility for determining how much memory is being used by the engine, and by each subsystem, including various on-screen displays;\n>* the ability to dump memory usage, high water mark and leakage stats\nwhen the game terminates and/or during gameplay;\n>* tools that allow debug print statements to be peppered throughout the\ncode, along with an ability to turn on or off different categories of debug\noutput and control the level of verbosity of the output; and\n>* the ability to record game events and then play them back. This is tough\nto get right, but when done properly it can be a very valuable tool for\ntracking down bugs.\n\n### Collisions & Physics\n\nCollision and physics are usually quite tightly coupled. \n>* Havok is the gold standard in the industry today. It is feature-rich and\nperforms well across the boards.\n>* PhysX by NVIDIA is another excellent collision and dynamics engine.\nIt was integrated into Unreal Engine 4 and is also available for free as\na stand-alone product for PC game development. PhysX was originally\ndesigned as the interface to Ageia’s new physics accelerator chip. The\nSDK is now owned and distributed by NVIDIA, and the company has\nadapted PhysX to run on its latest GPUs.\n\n>Open source physics and collision engines are also available. Perhaps the best-known of these is the Open Dynamics Engine (ODE)\n>I-Collide, V-Collide and RAPID are other popular non-commercial collision detection engines. 开发于University of North Carolina\n>http://www.ode.org\n\n\n### Animations\n>类型：\n>* sprite/texture animation,\n>* rigid body hierarchy animation, \n>* skeletal animation, 骨骼动画，\n>* vertex animation， 顶点动画\n>* morph targets.， 拉伸变形目标\n\n![enter description here](/img/1574826629863.png)\n![enter description here](/img/1574826985515.png)\n\n### Human Interface Devices (HID)\n\ninput from the player , 玩家的输入设备\n> keyboard, mouse\n> joypad\n> other specialized game controllers, like steering wheels, fishing rods,\ndance pads, the Wiimote, etc.  方向盘，鱼竿，跳舞板，手柄控制器等\n\n>The HID engine component is sometimes architected to divorce the lowlevel details of the game controller(s) on a particular hardware platform from the high-level game controls.\n>It sometimes also includes a system for detecting\nchords (multiple buttons pressed together), sequences (buttons pressed in sequence within a certain time limit) and gestures (sequences of inputs from the\nbuttons, sticks, accelerometers, etc.).\n> HID engine 组件通常设计为划分出低等级的游戏控制器到高级游戏操作。\n> 通常也会考虑检测组合按钮等情况\n\n### Audio\n\nAudio engines vary greatly in sophistication.\n> For DirectX platforms (PC, Xbox 360, Xbox One), Microsoft provides an excellent audio tool\nsuite called XACT, supported at runtime by their feature-rich XAudio2 andX3DAudio APIs. \n\n>Electronic Arts has developed an advanced, high-powered\naudio engine internally called SoundR!OT\n\n>In conjunction with first-party studios like Naughty Dog, Sony Computer Entertainment America (SCEA) provides a powerful 3D audio engine called Scream\n\n### Online Multiplayer/Networking\n\n> That said, it is usually better to design multiplayer features from day one, if you\nhave that luxury.\n尽早设置多人在线的模式\n\n> 从多人在线转单机版，往往较为简单\n>The Quake engine is well known\nfor its client-on-top-of-server mode, in which a single executable, running on a\nsingle PC, acts both as the client and the server in single-player campaigns.\n\n### Gameplay Foundation Systems\n\n> 用于连接low-level engine systems 与 gameplay code。为了上层游戏逻辑可以更方便使用。\n\n![enter description here](/img/1574912330296.png)\n\n### Game Worlds and Object Models\n\n> 游戏内的对象：\n>* static background geometry, like buildings, roads, terrain (often a special case), etc.;\n>* dynamic rigid bodies, such as rocks, soda cans, chairs, etc.;\n>* player characters (PC);\n>* non-player characters (NPC);\n>* weapons;\n>* projectiles;\n>* vehicles;\n>* lights (which may be present in the dynamic scene at runtime, or only\nused for static lighting offline);\n>* cameras;\n\n\n### Scripting System & Event\n\n> Many game engines employ a scripting language in order to make development of game-specific gameplay rules and content easier and more rapid.\n\n### Artificial Intellience Foundations\n\n游戏的人工智能模块，一些游戏引擎已经在引入这一模块到引擎，虽然这并不是引擎模块考虑的。\nKynogon \n>A company called Kynogon developed a middleware SDK named Kynapse, which provided much of the low-level technology required to build commercially viable game AI.  This SDK provides low-level AI building blocks such as nav mesh generation, path finding, static and dynamic object avoidance, identification of vulnerabilities within a play space (e.g., an open window from which an ambush could come) and a well-defined interface between AI and animation. \n\n### Game-Specific Subsystems\n\n 顶端的游戏开发层\n> Practically speaking, this line is never perfectly distinct. At least\nsome game-specific knowledge invariably seeps down through the gameplay\nfoundations layer and sometimes even extends into the core of the engine\nitself.\n\n\n## (1.7) Tools and the asset pipeline\n\n游戏数据层的组成：\n如图：粗黑箭头， 表示源数据是怎样从工具中生成出\n\t\t细线箭头，表示不同数据资源之间的引用关系\n![enter description here](/img/1574995793894.png)\n\n### Digital Content Creation Tools\n\n游戏资源从3D mesh到图片bitmaps再到音频之类的，都需要设计师用工具制作，而这些工具被称为DCC（Digital Content Creation）\n\n> Maya,3d Max\n> SoundForge\n> Photoshop\n。。。\n\n>That said, tools must be relatively **easy to use**, and they absolutely must be reliable, if a game team is going to be able to develop a highly polished product in a timely manner.\n>工具的使用需要按项目所需来决定，关键在于好用，不一定要非常完美的工具。\n\n\n### The Asset Conditioning Pipeline\n\n往往DCC生成的文件并不能直接在游戏开发中使用，原因有下：\n1. DCC导出的数据，存在许多游戏开发不需要的，比如maya中会存储directed acyclic graph的场景结点，和复杂的联结的网络结构。\n\n2. DCC文件格式加载读取很慢，而且通常格式是各个DCC专属的\n\n>Once data has been exported from the DCC app, it often must be further\nprocessed before being sent to the game engine. And if a game studio is shipping its game on more than one platform, the intermediate files might be processed differently for each target platform. \nDCC应用一般需要生成给游戏引擎用的文件。\n\n>The pipeline from DCC app to game engine is sometimes called the asset\nconditioning pipeline (ACP). Every game engine has this in some form.\n这种途径：从DCC应用到游戏引擎通常被称为: ACP\n\n#### 3D Model/Mesh Data\n\n>A mesh is a complex shape composed of triangles and vertices. A mesh typically has one or more materials applied to it in order to define\nvisual surface properties\n> MESH：由三角面和点组成的复杂的形状\n\n> In this book, I will use the term “mesh” to refer to a single renderable shape,\nand “model” to refer to a composite object that may contain multiple meshes,\nplus animation data and other metadata for use by the game.\n\n>Brush Geometry\n>Brush geometry is defined as a collection of convex hulls, each of which is defined by multiple planes.Brushes are typically created and edited directly in the game world editor. This is essentially an “old school” approach to creating\nrenderable geometry, but it is still used in some engines.\n> 笔刷型的图形，每个都由多个平面组成，通常是凹凸面的一种实现工具。\n> Pros:\n• fast and easy to create;\n• accessible to game designers—often used to “block out” a game level for\nprototyping purposes;\n• can serve both as collision volumes and as renderable geometry.\n>Cons:\n• low-resolution;\n• difficult to create complex shapes;\n• cannot support articulated objects or animated characters.\n\n\n#### Skeletal Animation Data\n\nA skeletal mesh is a special kind of mesh that is bound to a skeletal hierarchy for\nthe purposes of articulated animation. \n>Each vertex of a skeletal mesh contains a list of indices indicating to which\njoint(s) in the skeleton it is bound. A vertex usually also includes a set of joint\nweights, specifying the amount of influence each joint has on the vertex.\n>骨骼mesh，包含骨骼连接点信息，通常还会有点的权重和数量影响的数据\n\n>In order to render a skeletal mesh, the game engine requires three distinct\nkinds of data:\n>1. the mesh itself,\n>2. the skeletal hierarchy (joint names, parent-child relationships and the\nbase pose the skeleton was in when it was originally bound to the mesh),\nand58 1. Introduction\n>3. one or more animation clips, which specify how the joints should move\nover time.\n\n> Mesh与skeleton通常由DCC导出在一个文件里，当然，当有多个mesh对应一个骨骼时，骨骼通常需要单独导出，另外动画文件一般也是单独导出。有些引擎会让这三者在一个大文件里。\n\n>An unoptimized skeletal animation is defined by a stream of 4 × 3 matrix\nsamples, taken at a frequency of at least 30 frames per second, for each of the\njoints in a skeleton (of which there can be 500 or more for a realistic humanoid\ncharacter).\n因此动画文件一般需要使用高强度的压缩方式来存储。\n\n#### Audio Data\n\nAudio clips are usually exported from Sound Forge or some other audio production tool in a variety of formats and at a number of different data sampling rates.\n\n#### Particle Systems Data\n\nModern games make use of complex particle effects. These are authored by\nartists who specialize in the creation of visual effects. Third-party tools, such\nas Houdini, permit film-quality effects to be authored\n\n\n### The World Editor\n\nThe game world is where everything in a game engine comes together. To my\nknowledge, there are no commercially available game world editors\n>* Some variant of the Radiant game editor is used by most game engines\nbased on Quake technology.\n>* The Half-Life 2 Source engine provides a world editor called Hammer.\n>* UnrealEd is the Unreal Engine’s world editor. This powerful tool also\nserves as the asset manager for all data types that the engine can consume.\n\n### The Resource Database\n\nEvery asset also carries with it a great deal of metadata. metadata with the following information:\n• A unique id that identifies the animation clip at runtime.\n• The name and directory path of the source Maya (.ma or .mb) file.\n• The frame range—on which frame the animation begins and ends.\n• Whether or not the animation is intended to loop.\n• The animator’s choice of compression technique and level. (Some assets\ncan be highly compressed without noticeably degrading their quality,\nwhile others require less or no compression in order to look right ingame.)\n\n### Some Approaches to Tool Architecture\n\nAs an interesting and unique example, Unreal’s world editor and asset\nmanager, UnrealEd, is built right into the runtime game engine.It permits the tools to\nhave total access to the full range of data structures used by the engine and\navoids a common problem of having to have two representations of every\ndata structure—one for the runtime engine and one for the tools.\n>  运行时编辑和访问游戏所有数据为开发带来便利和加速\n\n![一些游戏的工具架构](/img/1575083811284.png)\n![一些运行时可编辑的架构](/img/1575083796324.png)\n\n####  Web-Based User Interfaces\n网页基础的页面显示。这里主要指工具。\n>At Naughty Dog, we use a number of web-based\nUIs. Naughty Dog’s localization tool serves as the front-end portal into our\nlocalization database. Tasker is the web-based interface used by all Naughty\nDog employees to create, manage, schedule, communicate and collaborate on\ngame development tasks during production. A web-based interface known\nas Connector also serves as our window into the various streams of debugging\ninformation that are emitted by the game engine at runtime.\n\n\n\n","slug":"GEA-P2","published":1,"date":"2020-09-09T02:46:51.345Z","updated":"2020-09-09T02:46:51.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeus8hxx00013jf0m5l13uof","content":"<h2 id=\"1-6-Runtime-Engine-Architecture\"><a href=\"#1-6-Runtime-Engine-Architecture\" class=\"headerlink\" title=\"(1.6) Runtime Engine Architecture\"></a>(1.6) Runtime Engine Architecture</h2><p><img src=\"/img/1574738644796.png\" alt=\"Runtime Engine Architecture\"></p>\n<blockquote>\n<p>自底向上的顺序大概为：<br>硬件层<br>驱动层<br>系统层<br>ＳＤＫ层<br>＞平台独立层<br>核心库<br>资源库<br>　渲染，调试，物理检测，游戏平台基础<br>＞游戏级渲染，各上层动画机制，相机机制，ＡＩ机制<br>＞游戏逻辑层</p>\n</blockquote>\n<h3 id=\"操作系统层\"><a href=\"#操作系统层\" class=\"headerlink\" title=\"操作系统层\"></a>操作系统层</h3><p>分为PC与主机（游戏）系统，PC系统如windows 提供了一种线程的机制为分享硬件资源，而主机游戏一般来说则可占用所有的硬件资源，但这两者的差距在逐渐减少。</p>\n<blockquote>\n<p>Operating systems like Microsoft<br>Windows employ a time-sliced approach to sharing the hardware with multiple running programs, known as preemptive multitasking.<br>On a console, the game typically<br>“owns” the entire machine.<br>So the gap between console and PC development is<br>gradually closing (for better or for worse).</p>\n</blockquote>\n<h3 id=\"3rd-Party-SDKS\"><a href=\"#3rd-Party-SDKS\" class=\"headerlink\" title=\"3rd Party SDKS\"></a>3rd Party SDKS</h3><blockquote>\n<p>DirectX Opengl<br>Havok, PhysX ODE etc.. 实现增强物理效果的SDK<br>Boost++ C++标准库之一<br>STL C++标准库之一<br>Kynapse 游戏AI开发的中间件<br>Granny, Havok Animation，处理动画骨骼等<br>Euphoria， 小型的游戏开发套件：<a href=\"https://sourceforge.net/projects/euphoriasdk/\">https://sourceforge.net/projects/euphoriasdk/</a></p>\n</blockquote>\n<h4 id=\"数据结构与算法\"><a href=\"#数据结构与算法\" class=\"headerlink\" title=\"数据结构与算法\"></a>数据结构与算法</h4><p>C++ 库</p>\n<ol>\n<li>STL : strings, data structures, stream-based I/O  </li>\n<li>STLport :portable and optimized of STL</li>\n<li>Boost :Powerful data structures and algorithms library</li>\n<li>Loki :Powerful generic programming template library</li>\n</ol>\n<h4 id=\"图形\"><a href=\"#图形\" class=\"headerlink\" title=\"图形\"></a>图形</h4><blockquote>\n<p>硬件图形库<br>Glide  早期的3D图形SDK，针对Voodoo显卡。<br>OpenGL widely used!<br>DirectX Microsoft’s 3D graphics SDK<br>libgcm   更底层的接口针对PS3的图形硬件，OpenGL更高效处理的选择。<br>Edge Naughty Dog 和Sony提供的PS3平台的库</p>\n</blockquote>\n<h4 id=\"物理与碰撞\"><a href=\"#物理与碰撞\" class=\"headerlink\" title=\"物理与碰撞\"></a>物理与碰撞</h4><blockquote>\n<p>Havok industrial-strength physics and collision engine.<br>PhysX  NVIDIA<br>Open Dynamics Engine.  open source</p>\n</blockquote>\n<h4 id=\"角色动画\"><a href=\"#角色动画\" class=\"headerlink\" title=\"角色动画\"></a>角色动画</h4><blockquote>\n<p>Granny:<br>In my opinion, the Granny SDK<br>has the best-designed and most logical animation API of any I’ve seen,<br>commercial or proprietary, especially its excellent handling of time</p>\n</blockquote>\n<blockquote>\n<p>Havok Animation<br> The line between physics and animation is becoming<br>increasingly blurred as characters become more and more realistic.</p>\n</blockquote>\n<blockquote>\n<p>Edge  PS3 from Sony</p>\n</blockquote>\n<h4 id=\"生物力学角色模型-Biomechanical-Character-Models\"><a href=\"#生物力学角色模型-Biomechanical-Character-Models\" class=\"headerlink\" title=\"生物力学角色模型 Biomechanical Character Models\"></a>生物力学角色模型 Biomechanical Character Models</h4><blockquote>\n<p>Endorphin and Euphoria. These are animation packages that produce<br>character motion using advanced biomechanical models of realistic human movement.<br>Endorphin, is a Maya plug-in that permits animators to<br>run full biomechanical simulations on characters and export the resulting animations as if they had been hand animated<br>Euphoria, is a real-time version of Endorphin intended<br>to produce physically and biomechanically accurate character motion at runtime under the influence of unpredictable forces.</p>\n</blockquote>\n<blockquote>\n<p>Endorphin， MAYA插件，执行动作的角色将运行一个完整的生物力学模拟同时导出动画。<br>Euphoria,  在一些不可预测的因素影响下，将动作更精细的模拟表现出来。<br><a href=\"https://space.bilibili.com/430600560/channel/detail?cid=75669\">https://space.bilibili.com/430600560/channel/detail?cid=75669</a></p>\n</blockquote>\n<h3 id=\"Platform-Independence-Layer\"><a href=\"#Platform-Independence-Layer\" class=\"headerlink\" title=\"Platform Independence Layer\"></a>Platform Independence Layer</h3><blockquote>\n<p>the platform independence layer ensures consistent<br>behavior across all hardware platforms.</p>\n</blockquote>\n<h3 id=\"Rendering-Engine\"><a href=\"#Rendering-Engine\" class=\"headerlink\" title=\"Rendering Engine\"></a>Rendering Engine</h3><blockquote>\n<p>The rendering engine is one of the largest and most complex components of<br>any game engine.</p>\n</blockquote>\n<h4 id=\"Low-Level-Renderer\"><a href=\"#Low-Level-Renderer\" class=\"headerlink\" title=\"Low-Level Renderer\"></a>Low-Level Renderer</h4><p><img src=\"/img/1574756479212.png\" alt=\"Low-Level Renderer\"></p>\n<blockquote>\n<p>Graphics Device Interface<br>DirectX, OpenGL</p>\n</blockquote>\n<blockquote>\n<p>The low-level renderer usually provides a viewport abstraction with an associated camera-to-world matrix and 3D projection parameters, such as field of view and the location of the near and far clip planes.</p>\n</blockquote>\n<blockquote>\n<p> 底层的渲染提供一个显示区域，关联到相机-世界和投影的参数。</p>\n</blockquote>\n<h4 id=\"Scene-Graph-Culling-Optimizations\"><a href=\"#Scene-Graph-Culling-Optimizations\" class=\"headerlink\" title=\"Scene Graph / Culling Optimizations\"></a>Scene Graph / Culling Optimizations</h4><blockquote>\n<p>For very small game worlds, a simple frustum cull (i.e., removing objects<br>that the camera cannot “see”) is probably all that is required. For larger game<br>worlds, a more advanced spatial subdivision data structure might be used to<br>improve rendering efficiency by allowing the potentially visible set (PVS) of<br>objects to be determined very quickly. </p>\n</blockquote>\n<blockquote>\n<p>potentially visible set (PVS)</p>\n</blockquote>\n<blockquote>\n<p>理想状态下，底层渲染应该完全不关心spatial subdivision或scene graph的使用类型。<br>OGRE open source rendering engine (<a href=\"http://www.ogre3d.org\">http://www.ogre3d.org</a>) is a great example of this principle in action. OGRE provides a plug-and-play scene graph<br>architecture. Game developers can either select from a number of preimplemented scene graph designs, or they can provide a custom scene graph implementation.</p>\n</blockquote>\n<h3 id=\"Front-End\"><a href=\"#Front-End\" class=\"headerlink\" title=\"Front End\"></a>Front End</h3><p><img src=\"/img/1574759871996.png\" alt=\"Front End\"></p>\n<blockquote>\n<p>HUD, Heads-up Display<br>在顶层显示<br>FMV, Full-Motion Video 动作完整的视频回放<br>This system is responsible for playing full-screen movies that have been recorded earlier.<br>IGC, in-game cinematics system.  游戏内的视频，一般当玩家不可操作时显示</p>\n</blockquote>\n<h3 id=\"Profiling-and-Debugging-Tools\"><a href=\"#Profiling-and-Debugging-Tools\" class=\"headerlink\" title=\"Profiling and Debugging Tools\"></a>Profiling and Debugging Tools</h3><blockquote>\n<p>常用<br>• Intel’s VTune,<br>• IBM’s Quantify and Purify (part of the PurifyPlus tool suite), and<br>• Compuware’s Bounds Checker.</p>\n</blockquote>\n<blockquote>\n<p>However, most game engines also incorporate a suite of custom profiling<br>and debugging tools. For example, they might include one or more of the<br>following:</p>\n<ul>\n<li>a mechanism for manually instrumenting the code, so that specific sections of code can be timed;</li>\n<li>a facility for displaying the profiling statistics on-screen while the game<br>is running;</li>\n<li>a facility for dumping performance stats to a text file or to an Excel<br>spreadsheet;</li>\n<li>a facility for determining how much memory is being used by the engine, and by each subsystem, including various on-screen displays;</li>\n<li>the ability to dump memory usage, high water mark and leakage stats<br>when the game terminates and/or during gameplay;</li>\n<li>tools that allow debug print statements to be peppered throughout the<br>code, along with an ability to turn on or off different categories of debug<br>output and control the level of verbosity of the output; and</li>\n<li>the ability to record game events and then play them back. This is tough<br>to get right, but when done properly it can be a very valuable tool for<br>tracking down bugs.</li>\n</ul>\n</blockquote>\n<h3 id=\"Collisions-amp-Physics\"><a href=\"#Collisions-amp-Physics\" class=\"headerlink\" title=\"Collisions &amp; Physics\"></a>Collisions &amp; Physics</h3><p>Collision and physics are usually quite tightly coupled. </p>\n<blockquote>\n<ul>\n<li>Havok is the gold standard in the industry today. It is feature-rich and<br>performs well across the boards.</li>\n<li>PhysX by NVIDIA is another excellent collision and dynamics engine.<br>It was integrated into Unreal Engine 4 and is also available for free as<br>a stand-alone product for PC game development. PhysX was originally<br>designed as the interface to Ageia’s new physics accelerator chip. The<br>SDK is now owned and distributed by NVIDIA, and the company has<br>adapted PhysX to run on its latest GPUs.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Open source physics and collision engines are also available. Perhaps the best-known of these is the Open Dynamics Engine (ODE)<br>I-Collide, V-Collide and RAPID are other popular non-commercial collision detection engines. 开发于University of North Carolina<br><a href=\"http://www.ode.org\">http://www.ode.org</a></p>\n</blockquote>\n<h3 id=\"Animations\"><a href=\"#Animations\" class=\"headerlink\" title=\"Animations\"></a>Animations</h3><blockquote>\n<p>类型：</p>\n<ul>\n<li>sprite/texture animation,</li>\n<li>rigid body hierarchy animation, </li>\n<li>skeletal animation, 骨骼动画，</li>\n<li>vertex animation， 顶点动画</li>\n<li>morph targets.， 拉伸变形目标</li>\n</ul>\n</blockquote>\n<p><img src=\"/img/1574826629863.png\" alt=\"enter description here\"><br><img src=\"/img/1574826985515.png\" alt=\"enter description here\"></p>\n<h3 id=\"Human-Interface-Devices-HID\"><a href=\"#Human-Interface-Devices-HID\" class=\"headerlink\" title=\"Human Interface Devices (HID)\"></a>Human Interface Devices (HID)</h3><p>input from the player , 玩家的输入设备</p>\n<blockquote>\n<p>keyboard, mouse<br>joypad<br>other specialized game controllers, like steering wheels, fishing rods,<br>dance pads, the Wiimote, etc.  方向盘，鱼竿，跳舞板，手柄控制器等</p>\n</blockquote>\n<blockquote>\n<p>The HID engine component is sometimes architected to divorce the lowlevel details of the game controller(s) on a particular hardware platform from the high-level game controls.<br>It sometimes also includes a system for detecting<br>chords (multiple buttons pressed together), sequences (buttons pressed in sequence within a certain time limit) and gestures (sequences of inputs from the<br>buttons, sticks, accelerometers, etc.).<br>HID engine 组件通常设计为划分出低等级的游戏控制器到高级游戏操作。<br>通常也会考虑检测组合按钮等情况</p>\n</blockquote>\n<h3 id=\"Audio\"><a href=\"#Audio\" class=\"headerlink\" title=\"Audio\"></a>Audio</h3><p>Audio engines vary greatly in sophistication.</p>\n<blockquote>\n<p>For DirectX platforms (PC, Xbox 360, Xbox One), Microsoft provides an excellent audio tool<br>suite called XACT, supported at runtime by their feature-rich XAudio2 andX3DAudio APIs. </p>\n</blockquote>\n<blockquote>\n<p>Electronic Arts has developed an advanced, high-powered<br>audio engine internally called SoundR!OT</p>\n</blockquote>\n<blockquote>\n<p>In conjunction with first-party studios like Naughty Dog, Sony Computer Entertainment America (SCEA) provides a powerful 3D audio engine called Scream</p>\n</blockquote>\n<h3 id=\"Online-Multiplayer-Networking\"><a href=\"#Online-Multiplayer-Networking\" class=\"headerlink\" title=\"Online Multiplayer/Networking\"></a>Online Multiplayer/Networking</h3><blockquote>\n<p>That said, it is usually better to design multiplayer features from day one, if you<br>have that luxury.<br>尽早设置多人在线的模式</p>\n</blockquote>\n<blockquote>\n<p>从多人在线转单机版，往往较为简单<br>The Quake engine is well known<br>for its client-on-top-of-server mode, in which a single executable, running on a<br>single PC, acts both as the client and the server in single-player campaigns.</p>\n</blockquote>\n<h3 id=\"Gameplay-Foundation-Systems\"><a href=\"#Gameplay-Foundation-Systems\" class=\"headerlink\" title=\"Gameplay Foundation Systems\"></a>Gameplay Foundation Systems</h3><blockquote>\n<p>用于连接low-level engine systems 与 gameplay code。为了上层游戏逻辑可以更方便使用。</p>\n</blockquote>\n<p><img src=\"/img/1574912330296.png\" alt=\"enter description here\"></p>\n<h3 id=\"Game-Worlds-and-Object-Models\"><a href=\"#Game-Worlds-and-Object-Models\" class=\"headerlink\" title=\"Game Worlds and Object Models\"></a>Game Worlds and Object Models</h3><blockquote>\n<p>游戏内的对象：</p>\n<ul>\n<li>static background geometry, like buildings, roads, terrain (often a special case), etc.;</li>\n<li>dynamic rigid bodies, such as rocks, soda cans, chairs, etc.;</li>\n<li>player characters (PC);</li>\n<li>non-player characters (NPC);</li>\n<li>weapons;</li>\n<li>projectiles;</li>\n<li>vehicles;</li>\n<li>lights (which may be present in the dynamic scene at runtime, or only<br>used for static lighting offline);</li>\n<li>cameras;</li>\n</ul>\n</blockquote>\n<h3 id=\"Scripting-System-amp-Event\"><a href=\"#Scripting-System-amp-Event\" class=\"headerlink\" title=\"Scripting System &amp; Event\"></a>Scripting System &amp; Event</h3><blockquote>\n<p>Many game engines employ a scripting language in order to make development of game-specific gameplay rules and content easier and more rapid.</p>\n</blockquote>\n<h3 id=\"Artificial-Intellience-Foundations\"><a href=\"#Artificial-Intellience-Foundations\" class=\"headerlink\" title=\"Artificial Intellience Foundations\"></a>Artificial Intellience Foundations</h3><p>游戏的人工智能模块，一些游戏引擎已经在引入这一模块到引擎，虽然这并不是引擎模块考虑的。<br>Kynogon </p>\n<blockquote>\n<p>A company called Kynogon developed a middleware SDK named Kynapse, which provided much of the low-level technology required to build commercially viable game AI.  This SDK provides low-level AI building blocks such as nav mesh generation, path finding, static and dynamic object avoidance, identification of vulnerabilities within a play space (e.g., an open window from which an ambush could come) and a well-defined interface between AI and animation. </p>\n</blockquote>\n<h3 id=\"Game-Specific-Subsystems\"><a href=\"#Game-Specific-Subsystems\" class=\"headerlink\" title=\"Game-Specific Subsystems\"></a>Game-Specific Subsystems</h3><p> 顶端的游戏开发层</p>\n<blockquote>\n<p>Practically speaking, this line is never perfectly distinct. At least<br>some game-specific knowledge invariably seeps down through the gameplay<br>foundations layer and sometimes even extends into the core of the engine<br>itself.</p>\n</blockquote>\n<h2 id=\"1-7-Tools-and-the-asset-pipeline\"><a href=\"#1-7-Tools-and-the-asset-pipeline\" class=\"headerlink\" title=\"(1.7) Tools and the asset pipeline\"></a>(1.7) Tools and the asset pipeline</h2><p>游戏数据层的组成：<br>如图：粗黑箭头， 表示源数据是怎样从工具中生成出<br>        细线箭头，表示不同数据资源之间的引用关系<br><img src=\"/img/1574995793894.png\" alt=\"enter description here\"></p>\n<h3 id=\"Digital-Content-Creation-Tools\"><a href=\"#Digital-Content-Creation-Tools\" class=\"headerlink\" title=\"Digital Content Creation Tools\"></a>Digital Content Creation Tools</h3><p>游戏资源从3D mesh到图片bitmaps再到音频之类的，都需要设计师用工具制作，而这些工具被称为DCC（Digital Content Creation）</p>\n<blockquote>\n<p>Maya,3d Max<br>SoundForge<br>Photoshop<br>。。。</p>\n</blockquote>\n<blockquote>\n<p>That said, tools must be relatively <strong>easy to use</strong>, and they absolutely must be reliable, if a game team is going to be able to develop a highly polished product in a timely manner.<br>工具的使用需要按项目所需来决定，关键在于好用，不一定要非常完美的工具。</p>\n</blockquote>\n<h3 id=\"The-Asset-Conditioning-Pipeline\"><a href=\"#The-Asset-Conditioning-Pipeline\" class=\"headerlink\" title=\"The Asset Conditioning Pipeline\"></a>The Asset Conditioning Pipeline</h3><p>往往DCC生成的文件并不能直接在游戏开发中使用，原因有下：</p>\n<ol>\n<li><p>DCC导出的数据，存在许多游戏开发不需要的，比如maya中会存储directed acyclic graph的场景结点，和复杂的联结的网络结构。</p>\n</li>\n<li><p>DCC文件格式加载读取很慢，而且通常格式是各个DCC专属的</p>\n</li>\n</ol>\n<blockquote>\n<p>Once data has been exported from the DCC app, it often must be further<br>processed before being sent to the game engine. And if a game studio is shipping its game on more than one platform, the intermediate files might be processed differently for each target platform.<br>DCC应用一般需要生成给游戏引擎用的文件。</p>\n</blockquote>\n<blockquote>\n<p>The pipeline from DCC app to game engine is sometimes called the asset<br>conditioning pipeline (ACP). Every game engine has this in some form.<br>这种途径：从DCC应用到游戏引擎通常被称为: ACP</p>\n</blockquote>\n<h4 id=\"3D-Model-Mesh-Data\"><a href=\"#3D-Model-Mesh-Data\" class=\"headerlink\" title=\"3D Model/Mesh Data\"></a>3D Model/Mesh Data</h4><blockquote>\n<p>A mesh is a complex shape composed of triangles and vertices. A mesh typically has one or more materials applied to it in order to define<br>visual surface properties<br>MESH：由三角面和点组成的复杂的形状</p>\n</blockquote>\n<blockquote>\n<p>In this book, I will use the term “mesh” to refer to a single renderable shape,<br>and “model” to refer to a composite object that may contain multiple meshes,<br>plus animation data and other metadata for use by the game.</p>\n</blockquote>\n<blockquote>\n<p>Brush Geometry<br>Brush geometry is defined as a collection of convex hulls, each of which is defined by multiple planes.Brushes are typically created and edited directly in the game world editor. This is essentially an “old school” approach to creating<br>renderable geometry, but it is still used in some engines.<br>笔刷型的图形，每个都由多个平面组成，通常是凹凸面的一种实现工具。<br>Pros:<br>• fast and easy to create;<br>• accessible to game designers—often used to “block out” a game level for<br>prototyping purposes;<br>• can serve both as collision volumes and as renderable geometry.<br>Cons:<br>• low-resolution;<br>• difficult to create complex shapes;<br>• cannot support articulated objects or animated characters.</p>\n</blockquote>\n<h4 id=\"Skeletal-Animation-Data\"><a href=\"#Skeletal-Animation-Data\" class=\"headerlink\" title=\"Skeletal Animation Data\"></a>Skeletal Animation Data</h4><p>A skeletal mesh is a special kind of mesh that is bound to a skeletal hierarchy for<br>the purposes of articulated animation. </p>\n<blockquote>\n<p>Each vertex of a skeletal mesh contains a list of indices indicating to which<br>joint(s) in the skeleton it is bound. A vertex usually also includes a set of joint<br>weights, specifying the amount of influence each joint has on the vertex.<br>骨骼mesh，包含骨骼连接点信息，通常还会有点的权重和数量影响的数据</p>\n</blockquote>\n<blockquote>\n<p>In order to render a skeletal mesh, the game engine requires three distinct<br>kinds of data:</p>\n<ol>\n<li>the mesh itself,</li>\n<li>the skeletal hierarchy (joint names, parent-child relationships and the<br>base pose the skeleton was in when it was originally bound to the mesh),<br>and58 1. Introduction</li>\n<li>one or more animation clips, which specify how the joints should move<br>over time.</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>Mesh与skeleton通常由DCC导出在一个文件里，当然，当有多个mesh对应一个骨骼时，骨骼通常需要单独导出，另外动画文件一般也是单独导出。有些引擎会让这三者在一个大文件里。</p>\n</blockquote>\n<blockquote>\n<p>An unoptimized skeletal animation is defined by a stream of 4 × 3 matrix<br>samples, taken at a frequency of at least 30 frames per second, for each of the<br>joints in a skeleton (of which there can be 500 or more for a realistic humanoid<br>character).<br>因此动画文件一般需要使用高强度的压缩方式来存储。</p>\n</blockquote>\n<h4 id=\"Audio-Data\"><a href=\"#Audio-Data\" class=\"headerlink\" title=\"Audio Data\"></a>Audio Data</h4><p>Audio clips are usually exported from Sound Forge or some other audio production tool in a variety of formats and at a number of different data sampling rates.</p>\n<h4 id=\"Particle-Systems-Data\"><a href=\"#Particle-Systems-Data\" class=\"headerlink\" title=\"Particle Systems Data\"></a>Particle Systems Data</h4><p>Modern games make use of complex particle effects. These are authored by<br>artists who specialize in the creation of visual effects. Third-party tools, such<br>as Houdini, permit film-quality effects to be authored</p>\n<h3 id=\"The-World-Editor\"><a href=\"#The-World-Editor\" class=\"headerlink\" title=\"The World Editor\"></a>The World Editor</h3><p>The game world is where everything in a game engine comes together. To my<br>knowledge, there are no commercially available game world editors</p>\n<blockquote>\n<ul>\n<li>Some variant of the Radiant game editor is used by most game engines<br>based on Quake technology.</li>\n<li>The Half-Life 2 Source engine provides a world editor called Hammer.</li>\n<li>UnrealEd is the Unreal Engine’s world editor. This powerful tool also<br>serves as the asset manager for all data types that the engine can consume.</li>\n</ul>\n</blockquote>\n<h3 id=\"The-Resource-Database\"><a href=\"#The-Resource-Database\" class=\"headerlink\" title=\"The Resource Database\"></a>The Resource Database</h3><p>Every asset also carries with it a great deal of metadata. metadata with the following information:<br>• A unique id that identifies the animation clip at runtime.<br>• The name and directory path of the source Maya (.ma or .mb) file.<br>• The frame range—on which frame the animation begins and ends.<br>• Whether or not the animation is intended to loop.<br>• The animator’s choice of compression technique and level. (Some assets<br>can be highly compressed without noticeably degrading their quality,<br>while others require less or no compression in order to look right ingame.)</p>\n<h3 id=\"Some-Approaches-to-Tool-Architecture\"><a href=\"#Some-Approaches-to-Tool-Architecture\" class=\"headerlink\" title=\"Some Approaches to Tool Architecture\"></a>Some Approaches to Tool Architecture</h3><p>As an interesting and unique example, Unreal’s world editor and asset<br>manager, UnrealEd, is built right into the runtime game engine.It permits the tools to<br>have total access to the full range of data structures used by the engine and<br>avoids a common problem of having to have two representations of every<br>data structure—one for the runtime engine and one for the tools.</p>\n<blockquote>\n<p> 运行时编辑和访问游戏所有数据为开发带来便利和加速</p>\n</blockquote>\n<p><img src=\"/img/1575083811284.png\" alt=\"一些游戏的工具架构\"><br><img src=\"/img/1575083796324.png\" alt=\"一些运行时可编辑的架构\"></p>\n<h4 id=\"Web-Based-User-Interfaces\"><a href=\"#Web-Based-User-Interfaces\" class=\"headerlink\" title=\"Web-Based User Interfaces\"></a>Web-Based User Interfaces</h4><p>网页基础的页面显示。这里主要指工具。</p>\n<blockquote>\n<p>At Naughty Dog, we use a number of web-based<br>UIs. Naughty Dog’s localization tool serves as the front-end portal into our<br>localization database. Tasker is the web-based interface used by all Naughty<br>Dog employees to create, manage, schedule, communicate and collaborate on<br>game development tasks during production. A web-based interface known<br>as Connector also serves as our window into the various streams of debugging<br>information that are emitted by the game engine at runtime.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-6-Runtime-Engine-Architecture\"><a href=\"#1-6-Runtime-Engine-Architecture\" class=\"headerlink\" title=\"(1.6) Runtime Engine Architecture\"></a>(1.6) Runtime Engine Architecture</h2><p><img src=\"/img/1574738644796.png\" alt=\"Runtime Engine Architecture\"></p>\n<blockquote>\n<p>自底向上的顺序大概为：<br>硬件层<br>驱动层<br>系统层<br>ＳＤＫ层<br>＞平台独立层<br>核心库<br>资源库<br>　渲染，调试，物理检测，游戏平台基础<br>＞游戏级渲染，各上层动画机制，相机机制，ＡＩ机制<br>＞游戏逻辑层</p>\n</blockquote>\n<h3 id=\"操作系统层\"><a href=\"#操作系统层\" class=\"headerlink\" title=\"操作系统层\"></a>操作系统层</h3><p>分为PC与主机（游戏）系统，PC系统如windows 提供了一种线程的机制为分享硬件资源，而主机游戏一般来说则可占用所有的硬件资源，但这两者的差距在逐渐减少。</p>\n<blockquote>\n<p>Operating systems like Microsoft<br>Windows employ a time-sliced approach to sharing the hardware with multiple running programs, known as preemptive multitasking.<br>On a console, the game typically<br>“owns” the entire machine.<br>So the gap between console and PC development is<br>gradually closing (for better or for worse).</p>\n</blockquote>\n<h3 id=\"3rd-Party-SDKS\"><a href=\"#3rd-Party-SDKS\" class=\"headerlink\" title=\"3rd Party SDKS\"></a>3rd Party SDKS</h3><blockquote>\n<p>DirectX Opengl<br>Havok, PhysX ODE etc.. 实现增强物理效果的SDK<br>Boost++ C++标准库之一<br>STL C++标准库之一<br>Kynapse 游戏AI开发的中间件<br>Granny, Havok Animation，处理动画骨骼等<br>Euphoria， 小型的游戏开发套件：<a href=\"https://sourceforge.net/projects/euphoriasdk/\">https://sourceforge.net/projects/euphoriasdk/</a></p>\n</blockquote>\n<h4 id=\"数据结构与算法\"><a href=\"#数据结构与算法\" class=\"headerlink\" title=\"数据结构与算法\"></a>数据结构与算法</h4><p>C++ 库</p>\n<ol>\n<li>STL : strings, data structures, stream-based I/O  </li>\n<li>STLport :portable and optimized of STL</li>\n<li>Boost :Powerful data structures and algorithms library</li>\n<li>Loki :Powerful generic programming template library</li>\n</ol>\n<h4 id=\"图形\"><a href=\"#图形\" class=\"headerlink\" title=\"图形\"></a>图形</h4><blockquote>\n<p>硬件图形库<br>Glide  早期的3D图形SDK，针对Voodoo显卡。<br>OpenGL widely used!<br>DirectX Microsoft’s 3D graphics SDK<br>libgcm   更底层的接口针对PS3的图形硬件，OpenGL更高效处理的选择。<br>Edge Naughty Dog 和Sony提供的PS3平台的库</p>\n</blockquote>\n<h4 id=\"物理与碰撞\"><a href=\"#物理与碰撞\" class=\"headerlink\" title=\"物理与碰撞\"></a>物理与碰撞</h4><blockquote>\n<p>Havok industrial-strength physics and collision engine.<br>PhysX  NVIDIA<br>Open Dynamics Engine.  open source</p>\n</blockquote>\n<h4 id=\"角色动画\"><a href=\"#角色动画\" class=\"headerlink\" title=\"角色动画\"></a>角色动画</h4><blockquote>\n<p>Granny:<br>In my opinion, the Granny SDK<br>has the best-designed and most logical animation API of any I’ve seen,<br>commercial or proprietary, especially its excellent handling of time</p>\n</blockquote>\n<blockquote>\n<p>Havok Animation<br> The line between physics and animation is becoming<br>increasingly blurred as characters become more and more realistic.</p>\n</blockquote>\n<blockquote>\n<p>Edge  PS3 from Sony</p>\n</blockquote>\n<h4 id=\"生物力学角色模型-Biomechanical-Character-Models\"><a href=\"#生物力学角色模型-Biomechanical-Character-Models\" class=\"headerlink\" title=\"生物力学角色模型 Biomechanical Character Models\"></a>生物力学角色模型 Biomechanical Character Models</h4><blockquote>\n<p>Endorphin and Euphoria. These are animation packages that produce<br>character motion using advanced biomechanical models of realistic human movement.<br>Endorphin, is a Maya plug-in that permits animators to<br>run full biomechanical simulations on characters and export the resulting animations as if they had been hand animated<br>Euphoria, is a real-time version of Endorphin intended<br>to produce physically and biomechanically accurate character motion at runtime under the influence of unpredictable forces.</p>\n</blockquote>\n<blockquote>\n<p>Endorphin， MAYA插件，执行动作的角色将运行一个完整的生物力学模拟同时导出动画。<br>Euphoria,  在一些不可预测的因素影响下，将动作更精细的模拟表现出来。<br><a href=\"https://space.bilibili.com/430600560/channel/detail?cid=75669\">https://space.bilibili.com/430600560/channel/detail?cid=75669</a></p>\n</blockquote>\n<h3 id=\"Platform-Independence-Layer\"><a href=\"#Platform-Independence-Layer\" class=\"headerlink\" title=\"Platform Independence Layer\"></a>Platform Independence Layer</h3><blockquote>\n<p>the platform independence layer ensures consistent<br>behavior across all hardware platforms.</p>\n</blockquote>\n<h3 id=\"Rendering-Engine\"><a href=\"#Rendering-Engine\" class=\"headerlink\" title=\"Rendering Engine\"></a>Rendering Engine</h3><blockquote>\n<p>The rendering engine is one of the largest and most complex components of<br>any game engine.</p>\n</blockquote>\n<h4 id=\"Low-Level-Renderer\"><a href=\"#Low-Level-Renderer\" class=\"headerlink\" title=\"Low-Level Renderer\"></a>Low-Level Renderer</h4><p><img src=\"/img/1574756479212.png\" alt=\"Low-Level Renderer\"></p>\n<blockquote>\n<p>Graphics Device Interface<br>DirectX, OpenGL</p>\n</blockquote>\n<blockquote>\n<p>The low-level renderer usually provides a viewport abstraction with an associated camera-to-world matrix and 3D projection parameters, such as field of view and the location of the near and far clip planes.</p>\n</blockquote>\n<blockquote>\n<p> 底层的渲染提供一个显示区域，关联到相机-世界和投影的参数。</p>\n</blockquote>\n<h4 id=\"Scene-Graph-Culling-Optimizations\"><a href=\"#Scene-Graph-Culling-Optimizations\" class=\"headerlink\" title=\"Scene Graph / Culling Optimizations\"></a>Scene Graph / Culling Optimizations</h4><blockquote>\n<p>For very small game worlds, a simple frustum cull (i.e., removing objects<br>that the camera cannot “see”) is probably all that is required. For larger game<br>worlds, a more advanced spatial subdivision data structure might be used to<br>improve rendering efficiency by allowing the potentially visible set (PVS) of<br>objects to be determined very quickly. </p>\n</blockquote>\n<blockquote>\n<p>potentially visible set (PVS)</p>\n</blockquote>\n<blockquote>\n<p>理想状态下，底层渲染应该完全不关心spatial subdivision或scene graph的使用类型。<br>OGRE open source rendering engine (<a href=\"http://www.ogre3d.org\">http://www.ogre3d.org</a>) is a great example of this principle in action. OGRE provides a plug-and-play scene graph<br>architecture. Game developers can either select from a number of preimplemented scene graph designs, or they can provide a custom scene graph implementation.</p>\n</blockquote>\n<h3 id=\"Front-End\"><a href=\"#Front-End\" class=\"headerlink\" title=\"Front End\"></a>Front End</h3><p><img src=\"/img/1574759871996.png\" alt=\"Front End\"></p>\n<blockquote>\n<p>HUD, Heads-up Display<br>在顶层显示<br>FMV, Full-Motion Video 动作完整的视频回放<br>This system is responsible for playing full-screen movies that have been recorded earlier.<br>IGC, in-game cinematics system.  游戏内的视频，一般当玩家不可操作时显示</p>\n</blockquote>\n<h3 id=\"Profiling-and-Debugging-Tools\"><a href=\"#Profiling-and-Debugging-Tools\" class=\"headerlink\" title=\"Profiling and Debugging Tools\"></a>Profiling and Debugging Tools</h3><blockquote>\n<p>常用<br>• Intel’s VTune,<br>• IBM’s Quantify and Purify (part of the PurifyPlus tool suite), and<br>• Compuware’s Bounds Checker.</p>\n</blockquote>\n<blockquote>\n<p>However, most game engines also incorporate a suite of custom profiling<br>and debugging tools. For example, they might include one or more of the<br>following:</p>\n<ul>\n<li>a mechanism for manually instrumenting the code, so that specific sections of code can be timed;</li>\n<li>a facility for displaying the profiling statistics on-screen while the game<br>is running;</li>\n<li>a facility for dumping performance stats to a text file or to an Excel<br>spreadsheet;</li>\n<li>a facility for determining how much memory is being used by the engine, and by each subsystem, including various on-screen displays;</li>\n<li>the ability to dump memory usage, high water mark and leakage stats<br>when the game terminates and/or during gameplay;</li>\n<li>tools that allow debug print statements to be peppered throughout the<br>code, along with an ability to turn on or off different categories of debug<br>output and control the level of verbosity of the output; and</li>\n<li>the ability to record game events and then play them back. This is tough<br>to get right, but when done properly it can be a very valuable tool for<br>tracking down bugs.</li>\n</ul>\n</blockquote>\n<h3 id=\"Collisions-amp-Physics\"><a href=\"#Collisions-amp-Physics\" class=\"headerlink\" title=\"Collisions &amp; Physics\"></a>Collisions &amp; Physics</h3><p>Collision and physics are usually quite tightly coupled. </p>\n<blockquote>\n<ul>\n<li>Havok is the gold standard in the industry today. It is feature-rich and<br>performs well across the boards.</li>\n<li>PhysX by NVIDIA is another excellent collision and dynamics engine.<br>It was integrated into Unreal Engine 4 and is also available for free as<br>a stand-alone product for PC game development. PhysX was originally<br>designed as the interface to Ageia’s new physics accelerator chip. The<br>SDK is now owned and distributed by NVIDIA, and the company has<br>adapted PhysX to run on its latest GPUs.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Open source physics and collision engines are also available. Perhaps the best-known of these is the Open Dynamics Engine (ODE)<br>I-Collide, V-Collide and RAPID are other popular non-commercial collision detection engines. 开发于University of North Carolina<br><a href=\"http://www.ode.org\">http://www.ode.org</a></p>\n</blockquote>\n<h3 id=\"Animations\"><a href=\"#Animations\" class=\"headerlink\" title=\"Animations\"></a>Animations</h3><blockquote>\n<p>类型：</p>\n<ul>\n<li>sprite/texture animation,</li>\n<li>rigid body hierarchy animation, </li>\n<li>skeletal animation, 骨骼动画，</li>\n<li>vertex animation， 顶点动画</li>\n<li>morph targets.， 拉伸变形目标</li>\n</ul>\n</blockquote>\n<p><img src=\"/img/1574826629863.png\" alt=\"enter description here\"><br><img src=\"/img/1574826985515.png\" alt=\"enter description here\"></p>\n<h3 id=\"Human-Interface-Devices-HID\"><a href=\"#Human-Interface-Devices-HID\" class=\"headerlink\" title=\"Human Interface Devices (HID)\"></a>Human Interface Devices (HID)</h3><p>input from the player , 玩家的输入设备</p>\n<blockquote>\n<p>keyboard, mouse<br>joypad<br>other specialized game controllers, like steering wheels, fishing rods,<br>dance pads, the Wiimote, etc.  方向盘，鱼竿，跳舞板，手柄控制器等</p>\n</blockquote>\n<blockquote>\n<p>The HID engine component is sometimes architected to divorce the lowlevel details of the game controller(s) on a particular hardware platform from the high-level game controls.<br>It sometimes also includes a system for detecting<br>chords (multiple buttons pressed together), sequences (buttons pressed in sequence within a certain time limit) and gestures (sequences of inputs from the<br>buttons, sticks, accelerometers, etc.).<br>HID engine 组件通常设计为划分出低等级的游戏控制器到高级游戏操作。<br>通常也会考虑检测组合按钮等情况</p>\n</blockquote>\n<h3 id=\"Audio\"><a href=\"#Audio\" class=\"headerlink\" title=\"Audio\"></a>Audio</h3><p>Audio engines vary greatly in sophistication.</p>\n<blockquote>\n<p>For DirectX platforms (PC, Xbox 360, Xbox One), Microsoft provides an excellent audio tool<br>suite called XACT, supported at runtime by their feature-rich XAudio2 andX3DAudio APIs. </p>\n</blockquote>\n<blockquote>\n<p>Electronic Arts has developed an advanced, high-powered<br>audio engine internally called SoundR!OT</p>\n</blockquote>\n<blockquote>\n<p>In conjunction with first-party studios like Naughty Dog, Sony Computer Entertainment America (SCEA) provides a powerful 3D audio engine called Scream</p>\n</blockquote>\n<h3 id=\"Online-Multiplayer-Networking\"><a href=\"#Online-Multiplayer-Networking\" class=\"headerlink\" title=\"Online Multiplayer/Networking\"></a>Online Multiplayer/Networking</h3><blockquote>\n<p>That said, it is usually better to design multiplayer features from day one, if you<br>have that luxury.<br>尽早设置多人在线的模式</p>\n</blockquote>\n<blockquote>\n<p>从多人在线转单机版，往往较为简单<br>The Quake engine is well known<br>for its client-on-top-of-server mode, in which a single executable, running on a<br>single PC, acts both as the client and the server in single-player campaigns.</p>\n</blockquote>\n<h3 id=\"Gameplay-Foundation-Systems\"><a href=\"#Gameplay-Foundation-Systems\" class=\"headerlink\" title=\"Gameplay Foundation Systems\"></a>Gameplay Foundation Systems</h3><blockquote>\n<p>用于连接low-level engine systems 与 gameplay code。为了上层游戏逻辑可以更方便使用。</p>\n</blockquote>\n<p><img src=\"/img/1574912330296.png\" alt=\"enter description here\"></p>\n<h3 id=\"Game-Worlds-and-Object-Models\"><a href=\"#Game-Worlds-and-Object-Models\" class=\"headerlink\" title=\"Game Worlds and Object Models\"></a>Game Worlds and Object Models</h3><blockquote>\n<p>游戏内的对象：</p>\n<ul>\n<li>static background geometry, like buildings, roads, terrain (often a special case), etc.;</li>\n<li>dynamic rigid bodies, such as rocks, soda cans, chairs, etc.;</li>\n<li>player characters (PC);</li>\n<li>non-player characters (NPC);</li>\n<li>weapons;</li>\n<li>projectiles;</li>\n<li>vehicles;</li>\n<li>lights (which may be present in the dynamic scene at runtime, or only<br>used for static lighting offline);</li>\n<li>cameras;</li>\n</ul>\n</blockquote>\n<h3 id=\"Scripting-System-amp-Event\"><a href=\"#Scripting-System-amp-Event\" class=\"headerlink\" title=\"Scripting System &amp; Event\"></a>Scripting System &amp; Event</h3><blockquote>\n<p>Many game engines employ a scripting language in order to make development of game-specific gameplay rules and content easier and more rapid.</p>\n</blockquote>\n<h3 id=\"Artificial-Intellience-Foundations\"><a href=\"#Artificial-Intellience-Foundations\" class=\"headerlink\" title=\"Artificial Intellience Foundations\"></a>Artificial Intellience Foundations</h3><p>游戏的人工智能模块，一些游戏引擎已经在引入这一模块到引擎，虽然这并不是引擎模块考虑的。<br>Kynogon </p>\n<blockquote>\n<p>A company called Kynogon developed a middleware SDK named Kynapse, which provided much of the low-level technology required to build commercially viable game AI.  This SDK provides low-level AI building blocks such as nav mesh generation, path finding, static and dynamic object avoidance, identification of vulnerabilities within a play space (e.g., an open window from which an ambush could come) and a well-defined interface between AI and animation. </p>\n</blockquote>\n<h3 id=\"Game-Specific-Subsystems\"><a href=\"#Game-Specific-Subsystems\" class=\"headerlink\" title=\"Game-Specific Subsystems\"></a>Game-Specific Subsystems</h3><p> 顶端的游戏开发层</p>\n<blockquote>\n<p>Practically speaking, this line is never perfectly distinct. At least<br>some game-specific knowledge invariably seeps down through the gameplay<br>foundations layer and sometimes even extends into the core of the engine<br>itself.</p>\n</blockquote>\n<h2 id=\"1-7-Tools-and-the-asset-pipeline\"><a href=\"#1-7-Tools-and-the-asset-pipeline\" class=\"headerlink\" title=\"(1.7) Tools and the asset pipeline\"></a>(1.7) Tools and the asset pipeline</h2><p>游戏数据层的组成：<br>如图：粗黑箭头， 表示源数据是怎样从工具中生成出<br>        细线箭头，表示不同数据资源之间的引用关系<br><img src=\"/img/1574995793894.png\" alt=\"enter description here\"></p>\n<h3 id=\"Digital-Content-Creation-Tools\"><a href=\"#Digital-Content-Creation-Tools\" class=\"headerlink\" title=\"Digital Content Creation Tools\"></a>Digital Content Creation Tools</h3><p>游戏资源从3D mesh到图片bitmaps再到音频之类的，都需要设计师用工具制作，而这些工具被称为DCC（Digital Content Creation）</p>\n<blockquote>\n<p>Maya,3d Max<br>SoundForge<br>Photoshop<br>。。。</p>\n</blockquote>\n<blockquote>\n<p>That said, tools must be relatively <strong>easy to use</strong>, and they absolutely must be reliable, if a game team is going to be able to develop a highly polished product in a timely manner.<br>工具的使用需要按项目所需来决定，关键在于好用，不一定要非常完美的工具。</p>\n</blockquote>\n<h3 id=\"The-Asset-Conditioning-Pipeline\"><a href=\"#The-Asset-Conditioning-Pipeline\" class=\"headerlink\" title=\"The Asset Conditioning Pipeline\"></a>The Asset Conditioning Pipeline</h3><p>往往DCC生成的文件并不能直接在游戏开发中使用，原因有下：</p>\n<ol>\n<li><p>DCC导出的数据，存在许多游戏开发不需要的，比如maya中会存储directed acyclic graph的场景结点，和复杂的联结的网络结构。</p>\n</li>\n<li><p>DCC文件格式加载读取很慢，而且通常格式是各个DCC专属的</p>\n</li>\n</ol>\n<blockquote>\n<p>Once data has been exported from the DCC app, it often must be further<br>processed before being sent to the game engine. And if a game studio is shipping its game on more than one platform, the intermediate files might be processed differently for each target platform.<br>DCC应用一般需要生成给游戏引擎用的文件。</p>\n</blockquote>\n<blockquote>\n<p>The pipeline from DCC app to game engine is sometimes called the asset<br>conditioning pipeline (ACP). Every game engine has this in some form.<br>这种途径：从DCC应用到游戏引擎通常被称为: ACP</p>\n</blockquote>\n<h4 id=\"3D-Model-Mesh-Data\"><a href=\"#3D-Model-Mesh-Data\" class=\"headerlink\" title=\"3D Model/Mesh Data\"></a>3D Model/Mesh Data</h4><blockquote>\n<p>A mesh is a complex shape composed of triangles and vertices. A mesh typically has one or more materials applied to it in order to define<br>visual surface properties<br>MESH：由三角面和点组成的复杂的形状</p>\n</blockquote>\n<blockquote>\n<p>In this book, I will use the term “mesh” to refer to a single renderable shape,<br>and “model” to refer to a composite object that may contain multiple meshes,<br>plus animation data and other metadata for use by the game.</p>\n</blockquote>\n<blockquote>\n<p>Brush Geometry<br>Brush geometry is defined as a collection of convex hulls, each of which is defined by multiple planes.Brushes are typically created and edited directly in the game world editor. This is essentially an “old school” approach to creating<br>renderable geometry, but it is still used in some engines.<br>笔刷型的图形，每个都由多个平面组成，通常是凹凸面的一种实现工具。<br>Pros:<br>• fast and easy to create;<br>• accessible to game designers—often used to “block out” a game level for<br>prototyping purposes;<br>• can serve both as collision volumes and as renderable geometry.<br>Cons:<br>• low-resolution;<br>• difficult to create complex shapes;<br>• cannot support articulated objects or animated characters.</p>\n</blockquote>\n<h4 id=\"Skeletal-Animation-Data\"><a href=\"#Skeletal-Animation-Data\" class=\"headerlink\" title=\"Skeletal Animation Data\"></a>Skeletal Animation Data</h4><p>A skeletal mesh is a special kind of mesh that is bound to a skeletal hierarchy for<br>the purposes of articulated animation. </p>\n<blockquote>\n<p>Each vertex of a skeletal mesh contains a list of indices indicating to which<br>joint(s) in the skeleton it is bound. A vertex usually also includes a set of joint<br>weights, specifying the amount of influence each joint has on the vertex.<br>骨骼mesh，包含骨骼连接点信息，通常还会有点的权重和数量影响的数据</p>\n</blockquote>\n<blockquote>\n<p>In order to render a skeletal mesh, the game engine requires three distinct<br>kinds of data:</p>\n<ol>\n<li>the mesh itself,</li>\n<li>the skeletal hierarchy (joint names, parent-child relationships and the<br>base pose the skeleton was in when it was originally bound to the mesh),<br>and58 1. Introduction</li>\n<li>one or more animation clips, which specify how the joints should move<br>over time.</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>Mesh与skeleton通常由DCC导出在一个文件里，当然，当有多个mesh对应一个骨骼时，骨骼通常需要单独导出，另外动画文件一般也是单独导出。有些引擎会让这三者在一个大文件里。</p>\n</blockquote>\n<blockquote>\n<p>An unoptimized skeletal animation is defined by a stream of 4 × 3 matrix<br>samples, taken at a frequency of at least 30 frames per second, for each of the<br>joints in a skeleton (of which there can be 500 or more for a realistic humanoid<br>character).<br>因此动画文件一般需要使用高强度的压缩方式来存储。</p>\n</blockquote>\n<h4 id=\"Audio-Data\"><a href=\"#Audio-Data\" class=\"headerlink\" title=\"Audio Data\"></a>Audio Data</h4><p>Audio clips are usually exported from Sound Forge or some other audio production tool in a variety of formats and at a number of different data sampling rates.</p>\n<h4 id=\"Particle-Systems-Data\"><a href=\"#Particle-Systems-Data\" class=\"headerlink\" title=\"Particle Systems Data\"></a>Particle Systems Data</h4><p>Modern games make use of complex particle effects. These are authored by<br>artists who specialize in the creation of visual effects. Third-party tools, such<br>as Houdini, permit film-quality effects to be authored</p>\n<h3 id=\"The-World-Editor\"><a href=\"#The-World-Editor\" class=\"headerlink\" title=\"The World Editor\"></a>The World Editor</h3><p>The game world is where everything in a game engine comes together. To my<br>knowledge, there are no commercially available game world editors</p>\n<blockquote>\n<ul>\n<li>Some variant of the Radiant game editor is used by most game engines<br>based on Quake technology.</li>\n<li>The Half-Life 2 Source engine provides a world editor called Hammer.</li>\n<li>UnrealEd is the Unreal Engine’s world editor. This powerful tool also<br>serves as the asset manager for all data types that the engine can consume.</li>\n</ul>\n</blockquote>\n<h3 id=\"The-Resource-Database\"><a href=\"#The-Resource-Database\" class=\"headerlink\" title=\"The Resource Database\"></a>The Resource Database</h3><p>Every asset also carries with it a great deal of metadata. metadata with the following information:<br>• A unique id that identifies the animation clip at runtime.<br>• The name and directory path of the source Maya (.ma or .mb) file.<br>• The frame range—on which frame the animation begins and ends.<br>• Whether or not the animation is intended to loop.<br>• The animator’s choice of compression technique and level. (Some assets<br>can be highly compressed without noticeably degrading their quality,<br>while others require less or no compression in order to look right ingame.)</p>\n<h3 id=\"Some-Approaches-to-Tool-Architecture\"><a href=\"#Some-Approaches-to-Tool-Architecture\" class=\"headerlink\" title=\"Some Approaches to Tool Architecture\"></a>Some Approaches to Tool Architecture</h3><p>As an interesting and unique example, Unreal’s world editor and asset<br>manager, UnrealEd, is built right into the runtime game engine.It permits the tools to<br>have total access to the full range of data structures used by the engine and<br>avoids a common problem of having to have two representations of every<br>data structure—one for the runtime engine and one for the tools.</p>\n<blockquote>\n<p> 运行时编辑和访问游戏所有数据为开发带来便利和加速</p>\n</blockquote>\n<p><img src=\"/img/1575083811284.png\" alt=\"一些游戏的工具架构\"><br><img src=\"/img/1575083796324.png\" alt=\"一些运行时可编辑的架构\"></p>\n<h4 id=\"Web-Based-User-Interfaces\"><a href=\"#Web-Based-User-Interfaces\" class=\"headerlink\" title=\"Web-Based User Interfaces\"></a>Web-Based User Interfaces</h4><p>网页基础的页面显示。这里主要指工具。</p>\n<blockquote>\n<p>At Naughty Dog, we use a number of web-based<br>UIs. Naughty Dog’s localization tool serves as the front-end portal into our<br>localization database. Tasker is the web-based interface used by all Naughty<br>Dog employees to create, manage, schedule, communicate and collaborate on<br>game development tasks during production. A web-based interface known<br>as Connector also serves as our window into the various streams of debugging<br>information that are emitted by the game engine at runtime.</p>\n</blockquote>\n"},{"title":"GEA-P3","_content":"\n## (3.1) C++ Review and Best Practive\n\nimperative languages: C\nobject-oriented languages: C# , Java\nscripting languages: python lua,perl\nfunctional languages: Lisp, scheme, F# \n\n### Multiple Inheritance(MI)\nMost C++ software developers avoid multiple inheritance completely or\nonly permit it in a limited form. \n> 多继承容易让结构混乱，提升技术难度，引发deadly diamond问题（当父类们存在相同函数时，子类不知道实现哪个？）\n> 实际应用中，多继承应继承自无父的类对象\n> Most C++ software developers avoid multiple inheritance completely or\nonly permit it in a limited form. A common rule of thumb is to allow only\nsimple, parentless classes to be multiply inherited into an otherwise strictly\nsingle-inheritance hierarchy. Such classes are sometimes called mix-in classes\nbecause they can be used to introduce new functionality at arbitrary points in\na class tree. \n\n![Deadly diamond](./img/1575255814499.png)\n![Mix-in class](/img/1575255482902.png)\n\n### Composition and Aggregation\n\n组合和聚合\nhas-a, uses-a\n\n### Coding Standards\n\n代码规范\n> 1.Some standards make the code more readable, understandable and maintainable.\n>2. Other conventions help to prevent programmers from shooting themselves in the foot. For example, a coding standard might encourage the\nprogrammer to use only a smaller, more testable and less error-prone\nsubset of the whole language. The C++ language is rife with possibilities for abuse, so this kind of coding standard is particularly important\nwhen using C++.\n\n> Interfaces are king. 接口保持干净，整洁\n> Good names encourage understanding and avoid confusion.  命名要求规范\n> Don’t clutter the global namespace. C++中避免互包等混乱\n> Follow C++ best practices. Books like the Effective C++ series by Scott Meyers [31,32], Meyers’ Effective STL [33] and Large-Scale C++ Software Design3.1. C++ Review and Best Practices 105\nby John Lakos [27] provide excellent guidelines that will help keep you\nout of trouble.   关注最好的代码\n> Be consistent.  坚定规范要求\n> Make errors stick out. 让错误更易在代码中查觉。\n\n","source":"_posts/GEA-P3.md","raw":"---\ntitle: GEA-P3\ncategories:\n- IT阅读\ntags: \n- Game\n---\n\n## (3.1) C++ Review and Best Practive\n\nimperative languages: C\nobject-oriented languages: C# , Java\nscripting languages: python lua,perl\nfunctional languages: Lisp, scheme, F# \n\n### Multiple Inheritance(MI)\nMost C++ software developers avoid multiple inheritance completely or\nonly permit it in a limited form. \n> 多继承容易让结构混乱，提升技术难度，引发deadly diamond问题（当父类们存在相同函数时，子类不知道实现哪个？）\n> 实际应用中，多继承应继承自无父的类对象\n> Most C++ software developers avoid multiple inheritance completely or\nonly permit it in a limited form. A common rule of thumb is to allow only\nsimple, parentless classes to be multiply inherited into an otherwise strictly\nsingle-inheritance hierarchy. Such classes are sometimes called mix-in classes\nbecause they can be used to introduce new functionality at arbitrary points in\na class tree. \n\n![Deadly diamond](./img/1575255814499.png)\n![Mix-in class](/img/1575255482902.png)\n\n### Composition and Aggregation\n\n组合和聚合\nhas-a, uses-a\n\n### Coding Standards\n\n代码规范\n> 1.Some standards make the code more readable, understandable and maintainable.\n>2. Other conventions help to prevent programmers from shooting themselves in the foot. For example, a coding standard might encourage the\nprogrammer to use only a smaller, more testable and less error-prone\nsubset of the whole language. The C++ language is rife with possibilities for abuse, so this kind of coding standard is particularly important\nwhen using C++.\n\n> Interfaces are king. 接口保持干净，整洁\n> Good names encourage understanding and avoid confusion.  命名要求规范\n> Don’t clutter the global namespace. C++中避免互包等混乱\n> Follow C++ best practices. Books like the Effective C++ series by Scott Meyers [31,32], Meyers’ Effective STL [33] and Large-Scale C++ Software Design3.1. C++ Review and Best Practices 105\nby John Lakos [27] provide excellent guidelines that will help keep you\nout of trouble.   关注最好的代码\n> Be consistent.  坚定规范要求\n> Make errors stick out. 让错误更易在代码中查觉。\n\n","slug":"GEA-P3","published":1,"date":"2020-09-09T02:46:51.346Z","updated":"2020-09-09T02:46:51.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeus8hy200033jf0q1s0ndjg","content":"<h2 id=\"3-1-C-Review-and-Best-Practive\"><a href=\"#3-1-C-Review-and-Best-Practive\" class=\"headerlink\" title=\"(3.1) C++ Review and Best Practive\"></a>(3.1) C++ Review and Best Practive</h2><p>imperative languages: C<br>object-oriented languages: C# , Java<br>scripting languages: python lua,perl<br>functional languages: Lisp, scheme, F# </p>\n<h3 id=\"Multiple-Inheritance-MI\"><a href=\"#Multiple-Inheritance-MI\" class=\"headerlink\" title=\"Multiple Inheritance(MI)\"></a>Multiple Inheritance(MI)</h3><p>Most C++ software developers avoid multiple inheritance completely or<br>only permit it in a limited form. </p>\n<blockquote>\n<p>多继承容易让结构混乱，提升技术难度，引发deadly diamond问题（当父类们存在相同函数时，子类不知道实现哪个？）<br>实际应用中，多继承应继承自无父的类对象<br>Most C++ software developers avoid multiple inheritance completely or<br>only permit it in a limited form. A common rule of thumb is to allow only<br>simple, parentless classes to be multiply inherited into an otherwise strictly<br>single-inheritance hierarchy. Such classes are sometimes called mix-in classes<br>because they can be used to introduce new functionality at arbitrary points in<br>a class tree. </p>\n</blockquote>\n<p><img src=\"./img/1575255814499.png\" alt=\"Deadly diamond\"><br><img src=\"/img/1575255482902.png\" alt=\"Mix-in class\"></p>\n<h3 id=\"Composition-and-Aggregation\"><a href=\"#Composition-and-Aggregation\" class=\"headerlink\" title=\"Composition and Aggregation\"></a>Composition and Aggregation</h3><p>组合和聚合<br>has-a, uses-a</p>\n<h3 id=\"Coding-Standards\"><a href=\"#Coding-Standards\" class=\"headerlink\" title=\"Coding Standards\"></a>Coding Standards</h3><p>代码规范</p>\n<blockquote>\n<p>1.Some standards make the code more readable, understandable and maintainable.<br>2. Other conventions help to prevent programmers from shooting themselves in the foot. For example, a coding standard might encourage the<br>programmer to use only a smaller, more testable and less error-prone<br>subset of the whole language. The C++ language is rife with possibilities for abuse, so this kind of coding standard is particularly important<br>when using C++.</p>\n</blockquote>\n<blockquote>\n<p>Interfaces are king. 接口保持干净，整洁<br>Good names encourage understanding and avoid confusion.  命名要求规范<br>Don’t clutter the global namespace. C++中避免互包等混乱<br>Follow C++ best practices. Books like the Effective C++ series by Scott Meyers [31,32], Meyers’ Effective STL [33] and Large-Scale C++ Software Design3.1. C++ Review and Best Practices 105<br>by John Lakos [27] provide excellent guidelines that will help keep you<br>out of trouble.   关注最好的代码<br>Be consistent.  坚定规范要求<br>Make errors stick out. 让错误更易在代码中查觉。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"3-1-C-Review-and-Best-Practive\"><a href=\"#3-1-C-Review-and-Best-Practive\" class=\"headerlink\" title=\"(3.1) C++ Review and Best Practive\"></a>(3.1) C++ Review and Best Practive</h2><p>imperative languages: C<br>object-oriented languages: C# , Java<br>scripting languages: python lua,perl<br>functional languages: Lisp, scheme, F# </p>\n<h3 id=\"Multiple-Inheritance-MI\"><a href=\"#Multiple-Inheritance-MI\" class=\"headerlink\" title=\"Multiple Inheritance(MI)\"></a>Multiple Inheritance(MI)</h3><p>Most C++ software developers avoid multiple inheritance completely or<br>only permit it in a limited form. </p>\n<blockquote>\n<p>多继承容易让结构混乱，提升技术难度，引发deadly diamond问题（当父类们存在相同函数时，子类不知道实现哪个？）<br>实际应用中，多继承应继承自无父的类对象<br>Most C++ software developers avoid multiple inheritance completely or<br>only permit it in a limited form. A common rule of thumb is to allow only<br>simple, parentless classes to be multiply inherited into an otherwise strictly<br>single-inheritance hierarchy. Such classes are sometimes called mix-in classes<br>because they can be used to introduce new functionality at arbitrary points in<br>a class tree. </p>\n</blockquote>\n<p><img src=\"./img/1575255814499.png\" alt=\"Deadly diamond\"><br><img src=\"/img/1575255482902.png\" alt=\"Mix-in class\"></p>\n<h3 id=\"Composition-and-Aggregation\"><a href=\"#Composition-and-Aggregation\" class=\"headerlink\" title=\"Composition and Aggregation\"></a>Composition and Aggregation</h3><p>组合和聚合<br>has-a, uses-a</p>\n<h3 id=\"Coding-Standards\"><a href=\"#Coding-Standards\" class=\"headerlink\" title=\"Coding Standards\"></a>Coding Standards</h3><p>代码规范</p>\n<blockquote>\n<p>1.Some standards make the code more readable, understandable and maintainable.<br>2. Other conventions help to prevent programmers from shooting themselves in the foot. For example, a coding standard might encourage the<br>programmer to use only a smaller, more testable and less error-prone<br>subset of the whole language. The C++ language is rife with possibilities for abuse, so this kind of coding standard is particularly important<br>when using C++.</p>\n</blockquote>\n<blockquote>\n<p>Interfaces are king. 接口保持干净，整洁<br>Good names encourage understanding and avoid confusion.  命名要求规范<br>Don’t clutter the global namespace. C++中避免互包等混乱<br>Follow C++ best practices. Books like the Effective C++ series by Scott Meyers [31,32], Meyers’ Effective STL [33] and Large-Scale C++ Software Design3.1. C++ Review and Best Practices 105<br>by John Lakos [27] provide excellent guidelines that will help keep you<br>out of trouble.   关注最好的代码<br>Be consistent.  坚定规范要求<br>Make errors stick out. 让错误更易在代码中查觉。</p>\n</blockquote>\n"},{"title":"GEA-P4","_content":"\n## (5.1) 子系统的启动与关闭\n游戏引擎由若干子系统组成，在启动时如果系统间有相互依赖，同销毁时的顺序也需要按要求。如B系统依赖A，则A需要先启动再启动B，销毁时则是B先销毁再销毁A。\n\n#### 处理各子系统启动关闭的方式\n* 1. 单例模式： 第一次使用时，构造函数中初始化所依赖的其他子系统\n* 2. 【推荐】使用另一个管理器，统一管理所有的子系统启动与关闭。\n\n\n## (5.2) 内存管理\n内存影响性能的两个方面：\n1. 动态内存分配 ：malloc或new。将比较低效，可以避免一次性分配 \n2. CPU内存的高效性与普通大内存\n\n#### 优化动态内存分配 \n规则： Keep heap allocations to a minimum, and never allocate from the heap within a tight loop.\n\n效率低下的原因： 1. 堆分配器的管理消耗。 2. 大部分操作系统free()函数调用需要切换模式。（用户切到内存，再切回来）\n保证越少分配越好，从不要在update中申请堆内存。\n\n#####  自定义动态内存分配器\n\n1. Stack -Based Allocators 以栈为基础的分配器\n * 许多游戏以类似栈的方式分配内存。每当一个新的游戏关卡被加载时，内存就会被分配给它。一旦加载了该级别，就很少或不进行动态内存分配。在这一层的最后，它的数据被卸载，它的所有内存可以被释放。对于这些类型的内存分配，使用类似栈的数据结构是很有意义的。\n \n * 栈分配器是非常容易实现的。我们简单地使用malloc()或global new分配一个大的连续内存块，或者通过声明一个全局字节数组(在这种情况下，内存是从可执行文件的BSS段中有效分配的)。维护一个指向栈顶部的指针，这个指针下面的所有内存地址被认为是在使用中，而它上面的所有地址被认为是空闲的。顶端指针被初始化为栈中最低的内存地址。每个分配请求只是将指针按请求的字节数向上移动。只需将顶部指针按blockIt的大小向后移动，就可以释放最近分配的块。\n \n * 要意识到，对于栈分配器，内存不能以任意顺序释放。所有释放必须按照与分配它们相反的顺序执行。执行这些限制的一种简单方法是根本不允许释放单个块。替代的方案就是,我们可以提供一个函数栈顶部回滚之前标记位置,从而释放之间的所有块当前最高和回滚位置。\n \n * 非常重要的一点是，要总是将顶部指针回滚到两个分配好的内存块中间,否则新分配将覆盖最顶部的块的末端。为了确保正确地执行此操作，堆栈分配器通常提供一个函数，该函数返回表示堆栈当前顶部的标记。回滚函数然后将这些标记中的一个作为其参数。如图所示。栈分配器的接口通常看起来像这样。\n\n![栈分配器的回收](/img/1599634350864.png)\n\n> Double ended stack allocator 双端栈分配器\n\n* 单个内存块实际上可以包含两个栈分配器——一个从块的底部向上分配，另一个从块的顶部向下分配。双端栈分配器很有用，因为它允许在底层栈的内存使用和顶层栈的内存使用之间进行权衡，从而更有效地使用内存。在某些情况下，两个栈可能使用大致相同的内存，并在块的中间相遇。在其他情况下，两个栈中的一个可能会比另一个栈消耗更多的内存，但是只要请求的内存总量不大于两个栈共享的内存块，所有分配请求仍然可以得到满足。\n![双端栈分配器](/img/1599634811580.png)\n\n\n\n\n\n\n\n","source":"_posts/GEA-P4.md","raw":"---\ntitle: GEA-P4\ncategories:\n- IT阅读\ntags: \n- Game\n---\n\n## (5.1) 子系统的启动与关闭\n游戏引擎由若干子系统组成，在启动时如果系统间有相互依赖，同销毁时的顺序也需要按要求。如B系统依赖A，则A需要先启动再启动B，销毁时则是B先销毁再销毁A。\n\n#### 处理各子系统启动关闭的方式\n* 1. 单例模式： 第一次使用时，构造函数中初始化所依赖的其他子系统\n* 2. 【推荐】使用另一个管理器，统一管理所有的子系统启动与关闭。\n\n\n## (5.2) 内存管理\n内存影响性能的两个方面：\n1. 动态内存分配 ：malloc或new。将比较低效，可以避免一次性分配 \n2. CPU内存的高效性与普通大内存\n\n#### 优化动态内存分配 \n规则： Keep heap allocations to a minimum, and never allocate from the heap within a tight loop.\n\n效率低下的原因： 1. 堆分配器的管理消耗。 2. 大部分操作系统free()函数调用需要切换模式。（用户切到内存，再切回来）\n保证越少分配越好，从不要在update中申请堆内存。\n\n#####  自定义动态内存分配器\n\n1. Stack -Based Allocators 以栈为基础的分配器\n * 许多游戏以类似栈的方式分配内存。每当一个新的游戏关卡被加载时，内存就会被分配给它。一旦加载了该级别，就很少或不进行动态内存分配。在这一层的最后，它的数据被卸载，它的所有内存可以被释放。对于这些类型的内存分配，使用类似栈的数据结构是很有意义的。\n \n * 栈分配器是非常容易实现的。我们简单地使用malloc()或global new分配一个大的连续内存块，或者通过声明一个全局字节数组(在这种情况下，内存是从可执行文件的BSS段中有效分配的)。维护一个指向栈顶部的指针，这个指针下面的所有内存地址被认为是在使用中，而它上面的所有地址被认为是空闲的。顶端指针被初始化为栈中最低的内存地址。每个分配请求只是将指针按请求的字节数向上移动。只需将顶部指针按blockIt的大小向后移动，就可以释放最近分配的块。\n \n * 要意识到，对于栈分配器，内存不能以任意顺序释放。所有释放必须按照与分配它们相反的顺序执行。执行这些限制的一种简单方法是根本不允许释放单个块。替代的方案就是,我们可以提供一个函数栈顶部回滚之前标记位置,从而释放之间的所有块当前最高和回滚位置。\n \n * 非常重要的一点是，要总是将顶部指针回滚到两个分配好的内存块中间,否则新分配将覆盖最顶部的块的末端。为了确保正确地执行此操作，堆栈分配器通常提供一个函数，该函数返回表示堆栈当前顶部的标记。回滚函数然后将这些标记中的一个作为其参数。如图所示。栈分配器的接口通常看起来像这样。\n\n![栈分配器的回收](/img/1599634350864.png)\n\n> Double ended stack allocator 双端栈分配器\n\n* 单个内存块实际上可以包含两个栈分配器——一个从块的底部向上分配，另一个从块的顶部向下分配。双端栈分配器很有用，因为它允许在底层栈的内存使用和顶层栈的内存使用之间进行权衡，从而更有效地使用内存。在某些情况下，两个栈可能使用大致相同的内存，并在块的中间相遇。在其他情况下，两个栈中的一个可能会比另一个栈消耗更多的内存，但是只要请求的内存总量不大于两个栈共享的内存块，所有分配请求仍然可以得到满足。\n![双端栈分配器](/img/1599634811580.png)\n\n\n\n\n\n\n\n","slug":"GEA-P4","published":1,"date":"2020-09-16T06:51:07.045Z","updated":"2020-09-16T06:51:07.045Z","_id":"ckeus8hy500053jf08v53yj88","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"5-1-子系统的启动与关闭\"><a href=\"#5-1-子系统的启动与关闭\" class=\"headerlink\" title=\"(5.1) 子系统的启动与关闭\"></a>(5.1) 子系统的启动与关闭</h2><p>游戏引擎由若干子系统组成，在启动时如果系统间有相互依赖，同销毁时的顺序也需要按要求。如B系统依赖A，则A需要先启动再启动B，销毁时则是B先销毁再销毁A。</p>\n<h4 id=\"处理各子系统启动关闭的方式\"><a href=\"#处理各子系统启动关闭的方式\" class=\"headerlink\" title=\"处理各子系统启动关闭的方式\"></a>处理各子系统启动关闭的方式</h4><ul>\n<li><ol>\n<li>单例模式： 第一次使用时，构造函数中初始化所依赖的其他子系统</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>【推荐】使用另一个管理器，统一管理所有的子系统启动与关闭。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"5-2-内存管理\"><a href=\"#5-2-内存管理\" class=\"headerlink\" title=\"(5.2) 内存管理\"></a>(5.2) 内存管理</h2><p>内存影响性能的两个方面：</p>\n<ol>\n<li>动态内存分配 ：malloc或new。将比较低效，可以避免一次性分配 </li>\n<li>CPU内存的高效性与普通大内存</li>\n</ol>\n<h4 id=\"优化动态内存分配\"><a href=\"#优化动态内存分配\" class=\"headerlink\" title=\"优化动态内存分配\"></a>优化动态内存分配</h4><p>规则： Keep heap allocations to a minimum, and never allocate from the heap within a tight loop.</p>\n<p>效率低下的原因： 1. 堆分配器的管理消耗。 2. 大部分操作系统free()函数调用需要切换模式。（用户切到内存，再切回来）<br>保证越少分配越好，从不要在update中申请堆内存。</p>\n<h5 id=\"自定义动态内存分配器\"><a href=\"#自定义动态内存分配器\" class=\"headerlink\" title=\"自定义动态内存分配器\"></a>自定义动态内存分配器</h5><ol>\n<li><p>Stack -Based Allocators 以栈为基础的分配器</p>\n<ul>\n<li><p>许多游戏以类似栈的方式分配内存。每当一个新的游戏关卡被加载时，内存就会被分配给它。一旦加载了该级别，就很少或不进行动态内存分配。在这一层的最后，它的数据被卸载，它的所有内存可以被释放。对于这些类型的内存分配，使用类似栈的数据结构是很有意义的。</p>\n</li>\n<li><p>栈分配器是非常容易实现的。我们简单地使用malloc()或global new分配一个大的连续内存块，或者通过声明一个全局字节数组(在这种情况下，内存是从可执行文件的BSS段中有效分配的)。维护一个指向栈顶部的指针，这个指针下面的所有内存地址被认为是在使用中，而它上面的所有地址被认为是空闲的。顶端指针被初始化为栈中最低的内存地址。每个分配请求只是将指针按请求的字节数向上移动。只需将顶部指针按blockIt的大小向后移动，就可以释放最近分配的块。</p>\n</li>\n<li><p>要意识到，对于栈分配器，内存不能以任意顺序释放。所有释放必须按照与分配它们相反的顺序执行。执行这些限制的一种简单方法是根本不允许释放单个块。替代的方案就是,我们可以提供一个函数栈顶部回滚之前标记位置,从而释放之间的所有块当前最高和回滚位置。</p>\n</li>\n<li><p>非常重要的一点是，要总是将顶部指针回滚到两个分配好的内存块中间,否则新分配将覆盖最顶部的块的末端。为了确保正确地执行此操作，堆栈分配器通常提供一个函数，该函数返回表示堆栈当前顶部的标记。回滚函数然后将这些标记中的一个作为其参数。如图所示。栈分配器的接口通常看起来像这样。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/img/1599634350864.png\" alt=\"栈分配器的回收\"></p>\n<blockquote>\n<p>Double ended stack allocator 双端栈分配器</p>\n</blockquote>\n<ul>\n<li>单个内存块实际上可以包含两个栈分配器——一个从块的底部向上分配，另一个从块的顶部向下分配。双端栈分配器很有用，因为它允许在底层栈的内存使用和顶层栈的内存使用之间进行权衡，从而更有效地使用内存。在某些情况下，两个栈可能使用大致相同的内存，并在块的中间相遇。在其他情况下，两个栈中的一个可能会比另一个栈消耗更多的内存，但是只要请求的内存总量不大于两个栈共享的内存块，所有分配请求仍然可以得到满足。<br><img src=\"/img/1599634811580.png\" alt=\"双端栈分配器\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"5-1-子系统的启动与关闭\"><a href=\"#5-1-子系统的启动与关闭\" class=\"headerlink\" title=\"(5.1) 子系统的启动与关闭\"></a>(5.1) 子系统的启动与关闭</h2><p>游戏引擎由若干子系统组成，在启动时如果系统间有相互依赖，同销毁时的顺序也需要按要求。如B系统依赖A，则A需要先启动再启动B，销毁时则是B先销毁再销毁A。</p>\n<h4 id=\"处理各子系统启动关闭的方式\"><a href=\"#处理各子系统启动关闭的方式\" class=\"headerlink\" title=\"处理各子系统启动关闭的方式\"></a>处理各子系统启动关闭的方式</h4><ul>\n<li><ol>\n<li>单例模式： 第一次使用时，构造函数中初始化所依赖的其他子系统</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>【推荐】使用另一个管理器，统一管理所有的子系统启动与关闭。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"5-2-内存管理\"><a href=\"#5-2-内存管理\" class=\"headerlink\" title=\"(5.2) 内存管理\"></a>(5.2) 内存管理</h2><p>内存影响性能的两个方面：</p>\n<ol>\n<li>动态内存分配 ：malloc或new。将比较低效，可以避免一次性分配 </li>\n<li>CPU内存的高效性与普通大内存</li>\n</ol>\n<h4 id=\"优化动态内存分配\"><a href=\"#优化动态内存分配\" class=\"headerlink\" title=\"优化动态内存分配\"></a>优化动态内存分配</h4><p>规则： Keep heap allocations to a minimum, and never allocate from the heap within a tight loop.</p>\n<p>效率低下的原因： 1. 堆分配器的管理消耗。 2. 大部分操作系统free()函数调用需要切换模式。（用户切到内存，再切回来）<br>保证越少分配越好，从不要在update中申请堆内存。</p>\n<h5 id=\"自定义动态内存分配器\"><a href=\"#自定义动态内存分配器\" class=\"headerlink\" title=\"自定义动态内存分配器\"></a>自定义动态内存分配器</h5><ol>\n<li><p>Stack -Based Allocators 以栈为基础的分配器</p>\n<ul>\n<li><p>许多游戏以类似栈的方式分配内存。每当一个新的游戏关卡被加载时，内存就会被分配给它。一旦加载了该级别，就很少或不进行动态内存分配。在这一层的最后，它的数据被卸载，它的所有内存可以被释放。对于这些类型的内存分配，使用类似栈的数据结构是很有意义的。</p>\n</li>\n<li><p>栈分配器是非常容易实现的。我们简单地使用malloc()或global new分配一个大的连续内存块，或者通过声明一个全局字节数组(在这种情况下，内存是从可执行文件的BSS段中有效分配的)。维护一个指向栈顶部的指针，这个指针下面的所有内存地址被认为是在使用中，而它上面的所有地址被认为是空闲的。顶端指针被初始化为栈中最低的内存地址。每个分配请求只是将指针按请求的字节数向上移动。只需将顶部指针按blockIt的大小向后移动，就可以释放最近分配的块。</p>\n</li>\n<li><p>要意识到，对于栈分配器，内存不能以任意顺序释放。所有释放必须按照与分配它们相反的顺序执行。执行这些限制的一种简单方法是根本不允许释放单个块。替代的方案就是,我们可以提供一个函数栈顶部回滚之前标记位置,从而释放之间的所有块当前最高和回滚位置。</p>\n</li>\n<li><p>非常重要的一点是，要总是将顶部指针回滚到两个分配好的内存块中间,否则新分配将覆盖最顶部的块的末端。为了确保正确地执行此操作，堆栈分配器通常提供一个函数，该函数返回表示堆栈当前顶部的标记。回滚函数然后将这些标记中的一个作为其参数。如图所示。栈分配器的接口通常看起来像这样。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/img/1599634350864.png\" alt=\"栈分配器的回收\"></p>\n<blockquote>\n<p>Double ended stack allocator 双端栈分配器</p>\n</blockquote>\n<ul>\n<li>单个内存块实际上可以包含两个栈分配器——一个从块的底部向上分配，另一个从块的顶部向下分配。双端栈分配器很有用，因为它允许在底层栈的内存使用和顶层栈的内存使用之间进行权衡，从而更有效地使用内存。在某些情况下，两个栈可能使用大致相同的内存，并在块的中间相遇。在其他情况下，两个栈中的一个可能会比另一个栈消耗更多的内存，但是只要请求的内存总量不大于两个栈共享的内存块，所有分配请求仍然可以得到满足。<br><img src=\"/img/1599634811580.png\" alt=\"双端栈分配器\"></li>\n</ul>\n"},{"title":"Game Engine Architecture - English","_content":"\n## hence\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/hence--_gb_1.mp3\">\n      </audio>\n\t  \n adv. 因此；今后     \n\n\n## emit\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/emit--_gb_1.mp3\">\n      </audio>\nvt. 发出，放射；发行；发表\n\n## derivative\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/derivative--_gb_1.mp3\">\n      </audio>\nn. 派生物；金融衍生产品；派生词；（化学）衍生物；导数\nadj. （艺术家或艺术作品）模仿的；受……影响的；（金融产品）衍生的\n\n## comprise\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/comprise--_gb_1.mp3\">\n      </audio>\nvt. 包含；由…组成\n\n## manipulate\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/manipulate--_gb_1.mp3\">\n      </audio>\nvt. 操纵；操作；巧妙地处理；篡改\n\n## indistinguishable\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/indistinguishable--_gb_1.mp3\">\n      </audio>\nadj. 不能区别的，不能辨别的；不易察觉的\n\n## vehicle\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/vehicle--_gb_1.mp3\">\n      </audio>\n\t  \nn. [车辆] 车辆；工具；交通工具；运载工具；传播媒介；媒介物\n\n## loosely\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/loosely--_gb_1.mp3\">\n      </audio>\nadv. 宽松地；放荡地；轻率地\n\n## intuitive notion\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/intuitive--_gb_1.mp3\">\n      </audio>\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n     <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/notion--_gb_1.mp3\">\n      </audio>\n\t \n直觉概念\n\n## insanely\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/insanely--_gb_1.mp3\">\n      </audio>\n\t  \nadv. 疯狂地；狂暴地；精神错乱地\n\n## mod\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/mod--_gb_1.mp3\">\n      </audio>\n\t  \nabbr. 模组（modulus）\n\n## considerable\nadj. 相当大的；重要的，值得考虑的\n\t  \n\n## blurry\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/blurry--_gb_1.mp3\">\n      </audio>\nadj. 模糊的；污脏的；不清楚的\n\n## orc\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/orc--_gb_1.mp3\">\n      </audio>\nn. 虎鲸；乐队；妖魔（等于orca）\n\n## arguably\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/arguably--_gb_1.mp3\">\n      </audio>\nadv. 可论证地；可争辩地；正如可提出证据加以证明的那样地\n\n## reserve\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/reserve--_gb_1.mp3\">\n      </audio>\nv. 预订（座位等）；储备；拥有（某种权利）；留出（一部分稍后使用）；用于（特定场合）；暂不作（判断或决定）；把……专门留给；弥撒后保留部分圣餐\nn. 储备（量）；自然保护区；居住地；预备队；预备役部队；缄默；保留意见；储备金；（拍卖中的）底价；（印染中的）防染本色区\n\n## gamut\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/gamut--_gb_1.mp3\">\n      </audio>\nn. 全音阶；全音域；整个范围\n\n## akin\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/akin--_gb_1.mp3\">\n      </audio>\nadj. 类似的；同类的；同族的\n\n## craft\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/craft--_gb_1.mp3\">\n      </audio>\nn. 工艺；手艺；太空船\nvt. 精巧地制作\n\n## genre\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/genre--_gb_1.mp3\">\n      </audio>\nn. 类型；种类；体裁；样式；流派；风俗画\n(Genre)人名；(法)让尔\nadj. 风俗画的；以日常情景为主题的\n\n## optimal\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/optimal--_gb_1.mp3\">\n      </audio>\nadj. 最佳的；最理想的\n\n## trade-off\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/trade--_gb_1.mp3\">\n      </audio>\nn. 交换，交易；权衡；协定\n\n## corridor\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/corridor--_gb_1.mp3\">\n      </audio>\nn. 走廊\n\n## roaming\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/roaming--_gb_1.mp3\">\n      </audio>\nn. 漫游；移动\nv. 漫步；闲逛；徘徊（roam的ing形式）\n\n## confined\nv. 限制，使局限；禁止离开，关押；卧床分娩（confine 的过去式和过去分词）\nadj. 有限制的；封闭的，狭窄的；幽禁的；在分娩中的\n\n## traversal\nn. [计] 遍历；横越；横断物\n\n## forgiving\nadj. 宽恕的；宽容的；宽大的\nv. 原谅；豁免（forgive的ing形式）\n\n## fidelity\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/fidelity--_gb_1.mp3\">\n      </audio>\nn. 保真度；忠诚；精确；尽责\n\n## ubiquitous\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/ubiquitous--_gb_1.mp3\">\n      </audio>\nadj. 普遍存在的；无所不在的\n\n## dungeon crawl\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/dungeon--_gb_1.mp3\">\n      </audio>\n地牢爬行\n\n## devote\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/devote--_gb_1.mp3\">\n      </audio>\nv. 致力于，奉献于；把……用于，作……专用；降祸于，诅咒\n\n## kart\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/kart--_gb_1.mp3\">\n      </audio>\nn. （美）小型赛车\n\n## cockpit\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/cockpit--_gb_1.mp3\">\n      </audio>\nn. 驾驶员座舱；战场\n\n## collaborate\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/colaborate--_gb_1.mp3\">\n      </audio>\nvi. 合作；勾结，通敌\n\n## indie\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/indie--_gb_1.mp3\">\n      </audio>\nadj. （摇滚、流行音乐、影片等）独立制作的，非大公司的；（流行乐队）追求非主流的\nn. 独立制片公司；独立小公司的产品\n\n## leverage\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/leverage--_gb_1.mp3\">\n      </audio>\nn. 手段，影响力；杠杆作用；杠杆效率\nv. 利用；举债经营\n\n## conductive\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/conductive--_gb_1.mp3\">\n      </audio>\nadj. 传导的；传导性的；有传导力的\n\n## primitives\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/primitive--_gb_1.mp3\">\n      </audio>\nn. [计] 基元（primitive的复数）；原始事物；基本体\n\n## terminology\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/terminology--_gb_1.mp3\">\n      </audio>\nn. 术语，术语学；用辞\n\n## subdivision\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/subdivision--_gb_1.mp3\">\n      </audio>\nn. 细分；分部；供出卖而分成的小块土地\n\n## subsume\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/subsume--_gb_1.mp3\">\n      </audio>\nvt. 把……归入；把……包括在内\n\n## latter \n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/latter--_gb_1.mp3\">\n      </audio>\nadj. 后者的；近来的；后面的；较后的\n\n## former\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/former--_gb_1.mp3\">\n      </audio>\nadj. 从前的，前者的；前任的\nn. 模型，样板；起形成作用的人\n\n## palette of matrices\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/palette--_gb_1.mp3\">\n      </audio>\n矩阵的调色板\n\n## retrofit\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/retrofit--_gb_1.mp3\">\n      </audio>\nvt. 改进；[计] 更新；式样翻新\nn. 式样翻新；花样翻新\n\n## trivial\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/trivial--_gb_1.mp3\">\n      </audio>\nadj. 不重要的，琐碎的；琐细的\n\n## intimately\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/intimate--_gb_1.mp3\">\n      </audio>\nadv. 熟悉地；亲切地；私下地\n\n## pervade\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/pervade--_gb_1.mp3\">\n      </audio>\nThis model can end up pervading the entire engine.\nvt. 遍及；弥漫\n\n## depict\nvt. 描述；描画\n\n## prove\nvi. 证明是\nvt. 证明；检验；显示\n\n## invaluable\nadj. 无价的；非常贵重的\n\n## endeavor\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/endeavour--_gb_1.mp3\">\n      </audio>\n>We’ll briefly review the basic concepts of object-oriented pro- gramming (OOP) and then delve into some advanced topics that should\nprove invaluable in any software engineering endeavor (and especially when\ncreating games).\nn. 努力；尽力（等于 endeavour）\nvi. 努力；尽力（等于 endeavour）\nvt. 努力；尽力（等于 endeavour）\n\n## rusty\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/rusty--_gb_1.mp3\">\n      </audio>\nadj. 生锈的，腐蚀的；铁锈色的，锈色的；迟钝的\n\n## hollow triangular \n空心三角形","source":"_posts/IT-English.md","raw":"---\ntitle: Game Engine Architecture - English\ncategories:\n- IT阅读\ntags: \n- Game\n- English\n---\n\n## hence\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/hence--_gb_1.mp3\">\n      </audio>\n\t  \n adv. 因此；今后     \n\n\n## emit\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/emit--_gb_1.mp3\">\n      </audio>\nvt. 发出，放射；发行；发表\n\n## derivative\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/derivative--_gb_1.mp3\">\n      </audio>\nn. 派生物；金融衍生产品；派生词；（化学）衍生物；导数\nadj. （艺术家或艺术作品）模仿的；受……影响的；（金融产品）衍生的\n\n## comprise\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/comprise--_gb_1.mp3\">\n      </audio>\nvt. 包含；由…组成\n\n## manipulate\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/manipulate--_gb_1.mp3\">\n      </audio>\nvt. 操纵；操作；巧妙地处理；篡改\n\n## indistinguishable\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/indistinguishable--_gb_1.mp3\">\n      </audio>\nadj. 不能区别的，不能辨别的；不易察觉的\n\n## vehicle\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/vehicle--_gb_1.mp3\">\n      </audio>\n\t  \nn. [车辆] 车辆；工具；交通工具；运载工具；传播媒介；媒介物\n\n## loosely\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/loosely--_gb_1.mp3\">\n      </audio>\nadv. 宽松地；放荡地；轻率地\n\n## intuitive notion\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/intuitive--_gb_1.mp3\">\n      </audio>\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n     <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/notion--_gb_1.mp3\">\n      </audio>\n\t \n直觉概念\n\n## insanely\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/insanely--_gb_1.mp3\">\n      </audio>\n\t  \nadv. 疯狂地；狂暴地；精神错乱地\n\n## mod\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/mod--_gb_1.mp3\">\n      </audio>\n\t  \nabbr. 模组（modulus）\n\n## considerable\nadj. 相当大的；重要的，值得考虑的\n\t  \n\n## blurry\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/blurry--_gb_1.mp3\">\n      </audio>\nadj. 模糊的；污脏的；不清楚的\n\n## orc\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/orc--_gb_1.mp3\">\n      </audio>\nn. 虎鲸；乐队；妖魔（等于orca）\n\n## arguably\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/arguably--_gb_1.mp3\">\n      </audio>\nadv. 可论证地；可争辩地；正如可提出证据加以证明的那样地\n\n## reserve\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/reserve--_gb_1.mp3\">\n      </audio>\nv. 预订（座位等）；储备；拥有（某种权利）；留出（一部分稍后使用）；用于（特定场合）；暂不作（判断或决定）；把……专门留给；弥撒后保留部分圣餐\nn. 储备（量）；自然保护区；居住地；预备队；预备役部队；缄默；保留意见；储备金；（拍卖中的）底价；（印染中的）防染本色区\n\n## gamut\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/gamut--_gb_1.mp3\">\n      </audio>\nn. 全音阶；全音域；整个范围\n\n## akin\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/akin--_gb_1.mp3\">\n      </audio>\nadj. 类似的；同类的；同族的\n\n## craft\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/craft--_gb_1.mp3\">\n      </audio>\nn. 工艺；手艺；太空船\nvt. 精巧地制作\n\n## genre\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/genre--_gb_1.mp3\">\n      </audio>\nn. 类型；种类；体裁；样式；流派；风俗画\n(Genre)人名；(法)让尔\nadj. 风俗画的；以日常情景为主题的\n\n## optimal\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/optimal--_gb_1.mp3\">\n      </audio>\nadj. 最佳的；最理想的\n\n## trade-off\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/trade--_gb_1.mp3\">\n      </audio>\nn. 交换，交易；权衡；协定\n\n## corridor\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/corridor--_gb_1.mp3\">\n      </audio>\nn. 走廊\n\n## roaming\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/roaming--_gb_1.mp3\">\n      </audio>\nn. 漫游；移动\nv. 漫步；闲逛；徘徊（roam的ing形式）\n\n## confined\nv. 限制，使局限；禁止离开，关押；卧床分娩（confine 的过去式和过去分词）\nadj. 有限制的；封闭的，狭窄的；幽禁的；在分娩中的\n\n## traversal\nn. [计] 遍历；横越；横断物\n\n## forgiving\nadj. 宽恕的；宽容的；宽大的\nv. 原谅；豁免（forgive的ing形式）\n\n## fidelity\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/fidelity--_gb_1.mp3\">\n      </audio>\nn. 保真度；忠诚；精确；尽责\n\n## ubiquitous\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/ubiquitous--_gb_1.mp3\">\n      </audio>\nadj. 普遍存在的；无所不在的\n\n## dungeon crawl\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/dungeon--_gb_1.mp3\">\n      </audio>\n地牢爬行\n\n## devote\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/devote--_gb_1.mp3\">\n      </audio>\nv. 致力于，奉献于；把……用于，作……专用；降祸于，诅咒\n\n## kart\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/kart--_gb_1.mp3\">\n      </audio>\nn. （美）小型赛车\n\n## cockpit\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/cockpit--_gb_1.mp3\">\n      </audio>\nn. 驾驶员座舱；战场\n\n## collaborate\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/colaborate--_gb_1.mp3\">\n      </audio>\nvi. 合作；勾结，通敌\n\n## indie\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/indie--_gb_1.mp3\">\n      </audio>\nadj. （摇滚、流行音乐、影片等）独立制作的，非大公司的；（流行乐队）追求非主流的\nn. 独立制片公司；独立小公司的产品\n\n## leverage\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/leverage--_gb_1.mp3\">\n      </audio>\nn. 手段，影响力；杠杆作用；杠杆效率\nv. 利用；举债经营\n\n## conductive\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/conductive--_gb_1.mp3\">\n      </audio>\nadj. 传导的；传导性的；有传导力的\n\n## primitives\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/primitive--_gb_1.mp3\">\n      </audio>\nn. [计] 基元（primitive的复数）；原始事物；基本体\n\n## terminology\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/terminology--_gb_1.mp3\">\n      </audio>\nn. 术语，术语学；用辞\n\n## subdivision\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/subdivision--_gb_1.mp3\">\n      </audio>\nn. 细分；分部；供出卖而分成的小块土地\n\n## subsume\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/subsume--_gb_1.mp3\">\n      </audio>\nvt. 把……归入；把……包括在内\n\n## latter \n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/latter--_gb_1.mp3\">\n      </audio>\nadj. 后者的；近来的；后面的；较后的\n\n## former\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/former--_gb_1.mp3\">\n      </audio>\nadj. 从前的，前者的；前任的\nn. 模型，样板；起形成作用的人\n\n## palette of matrices\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/palette--_gb_1.mp3\">\n      </audio>\n矩阵的调色板\n\n## retrofit\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/retrofit--_gb_1.mp3\">\n      </audio>\nvt. 改进；[计] 更新；式样翻新\nn. 式样翻新；花样翻新\n\n## trivial\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/trivial--_gb_1.mp3\">\n      </audio>\nadj. 不重要的，琐碎的；琐细的\n\n## intimately\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/intimate--_gb_1.mp3\">\n      </audio>\nadv. 熟悉地；亲切地；私下地\n\n## pervade\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/pervade--_gb_1.mp3\">\n      </audio>\nThis model can end up pervading the entire engine.\nvt. 遍及；弥漫\n\n## depict\nvt. 描述；描画\n\n## prove\nvi. 证明是\nvt. 证明；检验；显示\n\n## invaluable\nadj. 无价的；非常贵重的\n\n## endeavor\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/endeavour--_gb_1.mp3\">\n      </audio>\n>We’ll briefly review the basic concepts of object-oriented pro- gramming (OOP) and then delve into some advanced topics that should\nprove invaluable in any software engineering endeavor (and especially when\ncreating games).\nn. 努力；尽力（等于 endeavour）\nvi. 努力；尽力（等于 endeavour）\nvt. 努力；尽力（等于 endeavour）\n\n## rusty\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/rusty--_gb_1.mp3\">\n      </audio>\nadj. 生锈的，腐蚀的；铁锈色的，锈色的；迟钝的\n\n## hollow triangular \n空心三角形","slug":"IT-English","published":1,"date":"2020-09-09T02:46:51.346Z","updated":"2020-09-09T02:46:51.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeus8hy600083jf0ecc5wwxj","content":"<h2 id=\"hence\"><a href=\"#hence\" class=\"headerlink\" title=\"hence\"></a>hence</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/hence--_gb_1.mp3\">\n      </audio>\n\n<p> adv. 因此；今后     </p>\n<h2 id=\"emit\"><a href=\"#emit\" class=\"headerlink\" title=\"emit\"></a>emit</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/emit--_gb_1.mp3\">\n      </audio>\nvt. 发出，放射；发行；发表\n\n<h2 id=\"derivative\"><a href=\"#derivative\" class=\"headerlink\" title=\"derivative\"></a>derivative</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/derivative--_gb_1.mp3\">\n      </audio>\nn. 派生物；金融衍生产品；派生词；（化学）衍生物；导数\nadj. （艺术家或艺术作品）模仿的；受……影响的；（金融产品）衍生的\n\n<h2 id=\"comprise\"><a href=\"#comprise\" class=\"headerlink\" title=\"comprise\"></a>comprise</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/comprise--_gb_1.mp3\">\n      </audio>\nvt. 包含；由…组成\n\n<h2 id=\"manipulate\"><a href=\"#manipulate\" class=\"headerlink\" title=\"manipulate\"></a>manipulate</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/manipulate--_gb_1.mp3\">\n      </audio>\nvt. 操纵；操作；巧妙地处理；篡改\n\n<h2 id=\"indistinguishable\"><a href=\"#indistinguishable\" class=\"headerlink\" title=\"indistinguishable\"></a>indistinguishable</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/indistinguishable--_gb_1.mp3\">\n      </audio>\nadj. 不能区别的，不能辨别的；不易察觉的\n\n<h2 id=\"vehicle\"><a href=\"#vehicle\" class=\"headerlink\" title=\"vehicle\"></a>vehicle</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/vehicle--_gb_1.mp3\">\n      </audio>\n\n<p>n. [车辆] 车辆；工具；交通工具；运载工具；传播媒介；媒介物</p>\n<h2 id=\"loosely\"><a href=\"#loosely\" class=\"headerlink\" title=\"loosely\"></a>loosely</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/loosely--_gb_1.mp3\">\n      </audio>\nadv. 宽松地；放荡地；轻率地\n\n<h2 id=\"intuitive-notion\"><a href=\"#intuitive-notion\" class=\"headerlink\" title=\"intuitive notion\"></a>intuitive notion</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/intuitive--_gb_1.mp3\">\n      </audio>\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n     <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/notion--_gb_1.mp3\">\n      </audio>\n\n<p>直觉概念</p>\n<h2 id=\"insanely\"><a href=\"#insanely\" class=\"headerlink\" title=\"insanely\"></a>insanely</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/insanely--_gb_1.mp3\">\n      </audio>\n\n<p>adv. 疯狂地；狂暴地；精神错乱地</p>\n<h2 id=\"mod\"><a href=\"#mod\" class=\"headerlink\" title=\"mod\"></a>mod</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/mod--_gb_1.mp3\">\n      </audio>\n\n<p>abbr. 模组（modulus）</p>\n<h2 id=\"considerable\"><a href=\"#considerable\" class=\"headerlink\" title=\"considerable\"></a>considerable</h2><p>adj. 相当大的；重要的，值得考虑的</p>\n<h2 id=\"blurry\"><a href=\"#blurry\" class=\"headerlink\" title=\"blurry\"></a>blurry</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/blurry--_gb_1.mp3\">\n      </audio>\nadj. 模糊的；污脏的；不清楚的\n\n<h2 id=\"orc\"><a href=\"#orc\" class=\"headerlink\" title=\"orc\"></a>orc</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/orc--_gb_1.mp3\">\n      </audio>\nn. 虎鲸；乐队；妖魔（等于orca）\n\n<h2 id=\"arguably\"><a href=\"#arguably\" class=\"headerlink\" title=\"arguably\"></a>arguably</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/arguably--_gb_1.mp3\">\n      </audio>\nadv. 可论证地；可争辩地；正如可提出证据加以证明的那样地\n\n<h2 id=\"reserve\"><a href=\"#reserve\" class=\"headerlink\" title=\"reserve\"></a>reserve</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/reserve--_gb_1.mp3\">\n      </audio>\nv. 预订（座位等）；储备；拥有（某种权利）；留出（一部分稍后使用）；用于（特定场合）；暂不作（判断或决定）；把……专门留给；弥撒后保留部分圣餐\nn. 储备（量）；自然保护区；居住地；预备队；预备役部队；缄默；保留意见；储备金；（拍卖中的）底价；（印染中的）防染本色区\n\n<h2 id=\"gamut\"><a href=\"#gamut\" class=\"headerlink\" title=\"gamut\"></a>gamut</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/gamut--_gb_1.mp3\">\n      </audio>\nn. 全音阶；全音域；整个范围\n\n<h2 id=\"akin\"><a href=\"#akin\" class=\"headerlink\" title=\"akin\"></a>akin</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/akin--_gb_1.mp3\">\n      </audio>\nadj. 类似的；同类的；同族的\n\n<h2 id=\"craft\"><a href=\"#craft\" class=\"headerlink\" title=\"craft\"></a>craft</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/craft--_gb_1.mp3\">\n      </audio>\nn. 工艺；手艺；太空船\nvt. 精巧地制作\n\n<h2 id=\"genre\"><a href=\"#genre\" class=\"headerlink\" title=\"genre\"></a>genre</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/genre--_gb_1.mp3\">\n      </audio>\nn. 类型；种类；体裁；样式；流派；风俗画\n(Genre)人名；(法)让尔\nadj. 风俗画的；以日常情景为主题的\n\n<h2 id=\"optimal\"><a href=\"#optimal\" class=\"headerlink\" title=\"optimal\"></a>optimal</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/optimal--_gb_1.mp3\">\n      </audio>\nadj. 最佳的；最理想的\n\n<h2 id=\"trade-off\"><a href=\"#trade-off\" class=\"headerlink\" title=\"trade-off\"></a>trade-off</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/trade--_gb_1.mp3\">\n      </audio>\nn. 交换，交易；权衡；协定\n\n<h2 id=\"corridor\"><a href=\"#corridor\" class=\"headerlink\" title=\"corridor\"></a>corridor</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/corridor--_gb_1.mp3\">\n      </audio>\nn. 走廊\n\n<h2 id=\"roaming\"><a href=\"#roaming\" class=\"headerlink\" title=\"roaming\"></a>roaming</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/roaming--_gb_1.mp3\">\n      </audio>\nn. 漫游；移动\nv. 漫步；闲逛；徘徊（roam的ing形式）\n\n<h2 id=\"confined\"><a href=\"#confined\" class=\"headerlink\" title=\"confined\"></a>confined</h2><p>v. 限制，使局限；禁止离开，关押；卧床分娩（confine 的过去式和过去分词）<br>adj. 有限制的；封闭的，狭窄的；幽禁的；在分娩中的</p>\n<h2 id=\"traversal\"><a href=\"#traversal\" class=\"headerlink\" title=\"traversal\"></a>traversal</h2><p>n. [计] 遍历；横越；横断物</p>\n<h2 id=\"forgiving\"><a href=\"#forgiving\" class=\"headerlink\" title=\"forgiving\"></a>forgiving</h2><p>adj. 宽恕的；宽容的；宽大的<br>v. 原谅；豁免（forgive的ing形式）</p>\n<h2 id=\"fidelity\"><a href=\"#fidelity\" class=\"headerlink\" title=\"fidelity\"></a>fidelity</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/fidelity--_gb_1.mp3\">\n      </audio>\nn. 保真度；忠诚；精确；尽责\n\n<h2 id=\"ubiquitous\"><a href=\"#ubiquitous\" class=\"headerlink\" title=\"ubiquitous\"></a>ubiquitous</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/ubiquitous--_gb_1.mp3\">\n      </audio>\nadj. 普遍存在的；无所不在的\n\n<h2 id=\"dungeon-crawl\"><a href=\"#dungeon-crawl\" class=\"headerlink\" title=\"dungeon crawl\"></a>dungeon crawl</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/dungeon--_gb_1.mp3\">\n      </audio>\n地牢爬行\n\n<h2 id=\"devote\"><a href=\"#devote\" class=\"headerlink\" title=\"devote\"></a>devote</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/devote--_gb_1.mp3\">\n      </audio>\nv. 致力于，奉献于；把……用于，作……专用；降祸于，诅咒\n\n<h2 id=\"kart\"><a href=\"#kart\" class=\"headerlink\" title=\"kart\"></a>kart</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/kart--_gb_1.mp3\">\n      </audio>\nn. （美）小型赛车\n\n<h2 id=\"cockpit\"><a href=\"#cockpit\" class=\"headerlink\" title=\"cockpit\"></a>cockpit</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/cockpit--_gb_1.mp3\">\n      </audio>\nn. 驾驶员座舱；战场\n\n<h2 id=\"collaborate\"><a href=\"#collaborate\" class=\"headerlink\" title=\"collaborate\"></a>collaborate</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/colaborate--_gb_1.mp3\">\n      </audio>\nvi. 合作；勾结，通敌\n\n<h2 id=\"indie\"><a href=\"#indie\" class=\"headerlink\" title=\"indie\"></a>indie</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/indie--_gb_1.mp3\">\n      </audio>\nadj. （摇滚、流行音乐、影片等）独立制作的，非大公司的；（流行乐队）追求非主流的\nn. 独立制片公司；独立小公司的产品\n\n<h2 id=\"leverage\"><a href=\"#leverage\" class=\"headerlink\" title=\"leverage\"></a>leverage</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/leverage--_gb_1.mp3\">\n      </audio>\nn. 手段，影响力；杠杆作用；杠杆效率\nv. 利用；举债经营\n\n<h2 id=\"conductive\"><a href=\"#conductive\" class=\"headerlink\" title=\"conductive\"></a>conductive</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/conductive--_gb_1.mp3\">\n      </audio>\nadj. 传导的；传导性的；有传导力的\n\n<h2 id=\"primitives\"><a href=\"#primitives\" class=\"headerlink\" title=\"primitives\"></a>primitives</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/primitive--_gb_1.mp3\">\n      </audio>\nn. [计] 基元（primitive的复数）；原始事物；基本体\n\n<h2 id=\"terminology\"><a href=\"#terminology\" class=\"headerlink\" title=\"terminology\"></a>terminology</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/terminology--_gb_1.mp3\">\n      </audio>\nn. 术语，术语学；用辞\n\n<h2 id=\"subdivision\"><a href=\"#subdivision\" class=\"headerlink\" title=\"subdivision\"></a>subdivision</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/subdivision--_gb_1.mp3\">\n      </audio>\nn. 细分；分部；供出卖而分成的小块土地\n\n<h2 id=\"subsume\"><a href=\"#subsume\" class=\"headerlink\" title=\"subsume\"></a>subsume</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/subsume--_gb_1.mp3\">\n      </audio>\nvt. 把……归入；把……包括在内\n\n<h2 id=\"latter\"><a href=\"#latter\" class=\"headerlink\" title=\"latter\"></a>latter</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/latter--_gb_1.mp3\">\n      </audio>\nadj. 后者的；近来的；后面的；较后的\n\n<h2 id=\"former\"><a href=\"#former\" class=\"headerlink\" title=\"former\"></a>former</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/former--_gb_1.mp3\">\n      </audio>\nadj. 从前的，前者的；前任的\nn. 模型，样板；起形成作用的人\n\n<h2 id=\"palette-of-matrices\"><a href=\"#palette-of-matrices\" class=\"headerlink\" title=\"palette of matrices\"></a>palette of matrices</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/palette--_gb_1.mp3\">\n      </audio>\n矩阵的调色板\n\n<h2 id=\"retrofit\"><a href=\"#retrofit\" class=\"headerlink\" title=\"retrofit\"></a>retrofit</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/retrofit--_gb_1.mp3\">\n      </audio>\nvt. 改进；[计] 更新；式样翻新\nn. 式样翻新；花样翻新\n\n<h2 id=\"trivial\"><a href=\"#trivial\" class=\"headerlink\" title=\"trivial\"></a>trivial</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/trivial--_gb_1.mp3\">\n      </audio>\nadj. 不重要的，琐碎的；琐细的\n\n<h2 id=\"intimately\"><a href=\"#intimately\" class=\"headerlink\" title=\"intimately\"></a>intimately</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/intimate--_gb_1.mp3\">\n      </audio>\nadv. 熟悉地；亲切地；私下地\n\n<h2 id=\"pervade\"><a href=\"#pervade\" class=\"headerlink\" title=\"pervade\"></a>pervade</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/pervade--_gb_1.mp3\">\n      </audio>\nThis model can end up pervading the entire engine.\nvt. 遍及；弥漫\n\n<h2 id=\"depict\"><a href=\"#depict\" class=\"headerlink\" title=\"depict\"></a>depict</h2><p>vt. 描述；描画</p>\n<h2 id=\"prove\"><a href=\"#prove\" class=\"headerlink\" title=\"prove\"></a>prove</h2><p>vi. 证明是<br>vt. 证明；检验；显示</p>\n<h2 id=\"invaluable\"><a href=\"#invaluable\" class=\"headerlink\" title=\"invaluable\"></a>invaluable</h2><p>adj. 无价的；非常贵重的</p>\n<h2 id=\"endeavor\"><a href=\"#endeavor\" class=\"headerlink\" title=\"endeavor\"></a>endeavor</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/endeavour--_gb_1.mp3\">\n      </audio>\n>We’ll briefly review the basic concepts of object-oriented pro- gramming (OOP) and then delve into some advanced topics that should\nprove invaluable in any software engineering endeavor (and especially when\ncreating games).\nn. 努力；尽力（等于 endeavour）\nvi. 努力；尽力（等于 endeavour）\nvt. 努力；尽力（等于 endeavour）\n\n<h2 id=\"rusty\"><a href=\"#rusty\" class=\"headerlink\" title=\"rusty\"></a>rusty</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/rusty--_gb_1.mp3\">\n      </audio>\nadj. 生锈的，腐蚀的；铁锈色的，锈色的；迟钝的\n\n<h2 id=\"hollow-triangular\"><a href=\"#hollow-triangular\" class=\"headerlink\" title=\"hollow triangular\"></a>hollow triangular</h2><p>空心三角形</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"hence\"><a href=\"#hence\" class=\"headerlink\" title=\"hence\"></a>hence</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/hence--_gb_1.mp3\">\n      </audio>\n\n<p> adv. 因此；今后     </p>\n<h2 id=\"emit\"><a href=\"#emit\" class=\"headerlink\" title=\"emit\"></a>emit</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/emit--_gb_1.mp3\">\n      </audio>\nvt. 发出，放射；发行；发表\n\n<h2 id=\"derivative\"><a href=\"#derivative\" class=\"headerlink\" title=\"derivative\"></a>derivative</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/derivative--_gb_1.mp3\">\n      </audio>\nn. 派生物；金融衍生产品；派生词；（化学）衍生物；导数\nadj. （艺术家或艺术作品）模仿的；受……影响的；（金融产品）衍生的\n\n<h2 id=\"comprise\"><a href=\"#comprise\" class=\"headerlink\" title=\"comprise\"></a>comprise</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/comprise--_gb_1.mp3\">\n      </audio>\nvt. 包含；由…组成\n\n<h2 id=\"manipulate\"><a href=\"#manipulate\" class=\"headerlink\" title=\"manipulate\"></a>manipulate</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/manipulate--_gb_1.mp3\">\n      </audio>\nvt. 操纵；操作；巧妙地处理；篡改\n\n<h2 id=\"indistinguishable\"><a href=\"#indistinguishable\" class=\"headerlink\" title=\"indistinguishable\"></a>indistinguishable</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/indistinguishable--_gb_1.mp3\">\n      </audio>\nadj. 不能区别的，不能辨别的；不易察觉的\n\n<h2 id=\"vehicle\"><a href=\"#vehicle\" class=\"headerlink\" title=\"vehicle\"></a>vehicle</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/vehicle--_gb_1.mp3\">\n      </audio>\n\n<p>n. [车辆] 车辆；工具；交通工具；运载工具；传播媒介；媒介物</p>\n<h2 id=\"loosely\"><a href=\"#loosely\" class=\"headerlink\" title=\"loosely\"></a>loosely</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/loosely--_gb_1.mp3\">\n      </audio>\nadv. 宽松地；放荡地；轻率地\n\n<h2 id=\"intuitive-notion\"><a href=\"#intuitive-notion\" class=\"headerlink\" title=\"intuitive notion\"></a>intuitive notion</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/intuitive--_gb_1.mp3\">\n      </audio>\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n     <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/notion--_gb_1.mp3\">\n      </audio>\n\n<p>直觉概念</p>\n<h2 id=\"insanely\"><a href=\"#insanely\" class=\"headerlink\" title=\"insanely\"></a>insanely</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/insanely--_gb_1.mp3\">\n      </audio>\n\n<p>adv. 疯狂地；狂暴地；精神错乱地</p>\n<h2 id=\"mod\"><a href=\"#mod\" class=\"headerlink\" title=\"mod\"></a>mod</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/mod--_gb_1.mp3\">\n      </audio>\n\n<p>abbr. 模组（modulus）</p>\n<h2 id=\"considerable\"><a href=\"#considerable\" class=\"headerlink\" title=\"considerable\"></a>considerable</h2><p>adj. 相当大的；重要的，值得考虑的</p>\n<h2 id=\"blurry\"><a href=\"#blurry\" class=\"headerlink\" title=\"blurry\"></a>blurry</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/blurry--_gb_1.mp3\">\n      </audio>\nadj. 模糊的；污脏的；不清楚的\n\n<h2 id=\"orc\"><a href=\"#orc\" class=\"headerlink\" title=\"orc\"></a>orc</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/orc--_gb_1.mp3\">\n      </audio>\nn. 虎鲸；乐队；妖魔（等于orca）\n\n<h2 id=\"arguably\"><a href=\"#arguably\" class=\"headerlink\" title=\"arguably\"></a>arguably</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/arguably--_gb_1.mp3\">\n      </audio>\nadv. 可论证地；可争辩地；正如可提出证据加以证明的那样地\n\n<h2 id=\"reserve\"><a href=\"#reserve\" class=\"headerlink\" title=\"reserve\"></a>reserve</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/reserve--_gb_1.mp3\">\n      </audio>\nv. 预订（座位等）；储备；拥有（某种权利）；留出（一部分稍后使用）；用于（特定场合）；暂不作（判断或决定）；把……专门留给；弥撒后保留部分圣餐\nn. 储备（量）；自然保护区；居住地；预备队；预备役部队；缄默；保留意见；储备金；（拍卖中的）底价；（印染中的）防染本色区\n\n<h2 id=\"gamut\"><a href=\"#gamut\" class=\"headerlink\" title=\"gamut\"></a>gamut</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/gamut--_gb_1.mp3\">\n      </audio>\nn. 全音阶；全音域；整个范围\n\n<h2 id=\"akin\"><a href=\"#akin\" class=\"headerlink\" title=\"akin\"></a>akin</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/akin--_gb_1.mp3\">\n      </audio>\nadj. 类似的；同类的；同族的\n\n<h2 id=\"craft\"><a href=\"#craft\" class=\"headerlink\" title=\"craft\"></a>craft</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/craft--_gb_1.mp3\">\n      </audio>\nn. 工艺；手艺；太空船\nvt. 精巧地制作\n\n<h2 id=\"genre\"><a href=\"#genre\" class=\"headerlink\" title=\"genre\"></a>genre</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/genre--_gb_1.mp3\">\n      </audio>\nn. 类型；种类；体裁；样式；流派；风俗画\n(Genre)人名；(法)让尔\nadj. 风俗画的；以日常情景为主题的\n\n<h2 id=\"optimal\"><a href=\"#optimal\" class=\"headerlink\" title=\"optimal\"></a>optimal</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/optimal--_gb_1.mp3\">\n      </audio>\nadj. 最佳的；最理想的\n\n<h2 id=\"trade-off\"><a href=\"#trade-off\" class=\"headerlink\" title=\"trade-off\"></a>trade-off</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/trade--_gb_1.mp3\">\n      </audio>\nn. 交换，交易；权衡；协定\n\n<h2 id=\"corridor\"><a href=\"#corridor\" class=\"headerlink\" title=\"corridor\"></a>corridor</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/corridor--_gb_1.mp3\">\n      </audio>\nn. 走廊\n\n<h2 id=\"roaming\"><a href=\"#roaming\" class=\"headerlink\" title=\"roaming\"></a>roaming</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/roaming--_gb_1.mp3\">\n      </audio>\nn. 漫游；移动\nv. 漫步；闲逛；徘徊（roam的ing形式）\n\n<h2 id=\"confined\"><a href=\"#confined\" class=\"headerlink\" title=\"confined\"></a>confined</h2><p>v. 限制，使局限；禁止离开，关押；卧床分娩（confine 的过去式和过去分词）<br>adj. 有限制的；封闭的，狭窄的；幽禁的；在分娩中的</p>\n<h2 id=\"traversal\"><a href=\"#traversal\" class=\"headerlink\" title=\"traversal\"></a>traversal</h2><p>n. [计] 遍历；横越；横断物</p>\n<h2 id=\"forgiving\"><a href=\"#forgiving\" class=\"headerlink\" title=\"forgiving\"></a>forgiving</h2><p>adj. 宽恕的；宽容的；宽大的<br>v. 原谅；豁免（forgive的ing形式）</p>\n<h2 id=\"fidelity\"><a href=\"#fidelity\" class=\"headerlink\" title=\"fidelity\"></a>fidelity</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/fidelity--_gb_1.mp3\">\n      </audio>\nn. 保真度；忠诚；精确；尽责\n\n<h2 id=\"ubiquitous\"><a href=\"#ubiquitous\" class=\"headerlink\" title=\"ubiquitous\"></a>ubiquitous</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/ubiquitous--_gb_1.mp3\">\n      </audio>\nadj. 普遍存在的；无所不在的\n\n<h2 id=\"dungeon-crawl\"><a href=\"#dungeon-crawl\" class=\"headerlink\" title=\"dungeon crawl\"></a>dungeon crawl</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/dungeon--_gb_1.mp3\">\n      </audio>\n地牢爬行\n\n<h2 id=\"devote\"><a href=\"#devote\" class=\"headerlink\" title=\"devote\"></a>devote</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/devote--_gb_1.mp3\">\n      </audio>\nv. 致力于，奉献于；把……用于，作……专用；降祸于，诅咒\n\n<h2 id=\"kart\"><a href=\"#kart\" class=\"headerlink\" title=\"kart\"></a>kart</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/kart--_gb_1.mp3\">\n      </audio>\nn. （美）小型赛车\n\n<h2 id=\"cockpit\"><a href=\"#cockpit\" class=\"headerlink\" title=\"cockpit\"></a>cockpit</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/cockpit--_gb_1.mp3\">\n      </audio>\nn. 驾驶员座舱；战场\n\n<h2 id=\"collaborate\"><a href=\"#collaborate\" class=\"headerlink\" title=\"collaborate\"></a>collaborate</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/colaborate--_gb_1.mp3\">\n      </audio>\nvi. 合作；勾结，通敌\n\n<h2 id=\"indie\"><a href=\"#indie\" class=\"headerlink\" title=\"indie\"></a>indie</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/indie--_gb_1.mp3\">\n      </audio>\nadj. （摇滚、流行音乐、影片等）独立制作的，非大公司的；（流行乐队）追求非主流的\nn. 独立制片公司；独立小公司的产品\n\n<h2 id=\"leverage\"><a href=\"#leverage\" class=\"headerlink\" title=\"leverage\"></a>leverage</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/leverage--_gb_1.mp3\">\n      </audio>\nn. 手段，影响力；杠杆作用；杠杆效率\nv. 利用；举债经营\n\n<h2 id=\"conductive\"><a href=\"#conductive\" class=\"headerlink\" title=\"conductive\"></a>conductive</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/conductive--_gb_1.mp3\">\n      </audio>\nadj. 传导的；传导性的；有传导力的\n\n<h2 id=\"primitives\"><a href=\"#primitives\" class=\"headerlink\" title=\"primitives\"></a>primitives</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/primitive--_gb_1.mp3\">\n      </audio>\nn. [计] 基元（primitive的复数）；原始事物；基本体\n\n<h2 id=\"terminology\"><a href=\"#terminology\" class=\"headerlink\" title=\"terminology\"></a>terminology</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/terminology--_gb_1.mp3\">\n      </audio>\nn. 术语，术语学；用辞\n\n<h2 id=\"subdivision\"><a href=\"#subdivision\" class=\"headerlink\" title=\"subdivision\"></a>subdivision</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/subdivision--_gb_1.mp3\">\n      </audio>\nn. 细分；分部；供出卖而分成的小块土地\n\n<h2 id=\"subsume\"><a href=\"#subsume\" class=\"headerlink\" title=\"subsume\"></a>subsume</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/subsume--_gb_1.mp3\">\n      </audio>\nvt. 把……归入；把……包括在内\n\n<h2 id=\"latter\"><a href=\"#latter\" class=\"headerlink\" title=\"latter\"></a>latter</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/latter--_gb_1.mp3\">\n      </audio>\nadj. 后者的；近来的；后面的；较后的\n\n<h2 id=\"former\"><a href=\"#former\" class=\"headerlink\" title=\"former\"></a>former</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/former--_gb_1.mp3\">\n      </audio>\nadj. 从前的，前者的；前任的\nn. 模型，样板；起形成作用的人\n\n<h2 id=\"palette-of-matrices\"><a href=\"#palette-of-matrices\" class=\"headerlink\" title=\"palette of matrices\"></a>palette of matrices</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/palette--_gb_1.mp3\">\n      </audio>\n矩阵的调色板\n\n<h2 id=\"retrofit\"><a href=\"#retrofit\" class=\"headerlink\" title=\"retrofit\"></a>retrofit</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/retrofit--_gb_1.mp3\">\n      </audio>\nvt. 改进；[计] 更新；式样翻新\nn. 式样翻新；花样翻新\n\n<h2 id=\"trivial\"><a href=\"#trivial\" class=\"headerlink\" title=\"trivial\"></a>trivial</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/trivial--_gb_1.mp3\">\n      </audio>\nadj. 不重要的，琐碎的；琐细的\n\n<h2 id=\"intimately\"><a href=\"#intimately\" class=\"headerlink\" title=\"intimately\"></a>intimately</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/intimate--_gb_1.mp3\">\n      </audio>\nadv. 熟悉地；亲切地；私下地\n\n<h2 id=\"pervade\"><a href=\"#pervade\" class=\"headerlink\" title=\"pervade\"></a>pervade</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/pervade--_gb_1.mp3\">\n      </audio>\nThis model can end up pervading the entire engine.\nvt. 遍及；弥漫\n\n<h2 id=\"depict\"><a href=\"#depict\" class=\"headerlink\" title=\"depict\"></a>depict</h2><p>vt. 描述；描画</p>\n<h2 id=\"prove\"><a href=\"#prove\" class=\"headerlink\" title=\"prove\"></a>prove</h2><p>vi. 证明是<br>vt. 证明；检验；显示</p>\n<h2 id=\"invaluable\"><a href=\"#invaluable\" class=\"headerlink\" title=\"invaluable\"></a>invaluable</h2><p>adj. 无价的；非常贵重的</p>\n<h2 id=\"endeavor\"><a href=\"#endeavor\" class=\"headerlink\" title=\"endeavor\"></a>endeavor</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/endeavour--_gb_1.mp3\">\n      </audio>\n>We’ll briefly review the basic concepts of object-oriented pro- gramming (OOP) and then delve into some advanced topics that should\nprove invaluable in any software engineering endeavor (and especially when\ncreating games).\nn. 努力；尽力（等于 endeavour）\nvi. 努力；尽力（等于 endeavour）\nvt. 努力；尽力（等于 endeavour）\n\n<h2 id=\"rusty\"><a href=\"#rusty\" class=\"headerlink\" title=\"rusty\"></a>rusty</h2><audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"https://ssl.gstatic.com/dictionary/static/sounds/oxford/rusty--_gb_1.mp3\">\n      </audio>\nadj. 生锈的，腐蚀的；铁锈色的，锈色的；迟钝的\n\n<h2 id=\"hollow-triangular\"><a href=\"#hollow-triangular\" class=\"headerlink\" title=\"hollow triangular\"></a>hollow triangular</h2><p>空心三角形</p>\n"},{"title":"Addressable打包流程","_content":"# 安卓打包流程\n\n## 1. [Python]  添加配置\n* 1.添加项目配置 vms/config/config.txt\n* 2.新建一个config文件到 vms/config/platform_{project}_{branch/version}.txt\n  \n >2的文件 将作为打包后项目带出去的platform.txt的模板\n > platform.txt在打包流程中 判断 branch是否以t开头，是则用1，否则用第一个字符设置为platformId\n \n\n ```python\n -------------------------------------------------\n   File Name：     ModifyJsonFileHandler\n   Author :       hujunhao\n   date：          2018/3/16 16:03\n   Description : 修改platform.txt文件\n-------------------------------------------------\n\"\"\"\nclass ModifyJsonFileHandler(BaseHandler):\n    def __init__(self):\n        super(ModifyJsonFileHandler, self).__init__(constants.H_MODIFY_JSON_FILE)\n        pass\n\n    def excute(self, args):\n        version = args[0]\n        publish_path = args[1]\n        plat_path = args[2]\n        to_path = args[3]\n\n        cur_date_time = datetime.datetime.now()\n        cur_date_time.strftime('%m%d%H%M')\n        publish_data = script.configMgr.load_file(publish_path)\n        ver_str = '%s_%s_%s_%s' % (\n            version, publish_data['appVersion'], publish_data['resVersion'], cur_date_time.strftime('%m%d%H%M'))\n\n        plat_data = script.configMgr.load_file(plat_path)\n        plat_data['verInfo'] = ver_str\n\n        # M by Yuk 2018-08-03\n        # 修复不同platformId被覆盖回默认platformId的bug\n        # platformId 取分支号\n        platformId = str(version[0])\n        if platformId == 't' or platformId == '0':\n            platformId = 1\n            pass\n        plat_data['platformId'] = platformId\n        \n        script.configMgr.save_file(plat_data, to_path)\n\n        return True\n\n    pass\n\n ```\n\n\n ## 2. [Python]  执行流程： B_PACK_RES  [Unity] :PackAllRes \n * 打包所有资源\n * 设置目录： res_ab: output\\testsg\\output\\res\\res_ab\n\n## 3.[Python] 执行流程：B_CREATE_PUBLISH [Unity]: UpdateVersionAndPublishFile\n* 创建项目内的publish.txt和xxx_version.txt\n  \n## 4.[Python] 执行流程：B_BUILD_PROJECT [Unity]: BuildProject\n* 生成安卓工程\n* 将调用Unity中对Manifest文件已经修改\n\n## 5.[Python] 执行流程：B_COMMIT_MOBILE \n* 将资源提交到SVN\n\n## 6.[Python] 执行流程：B_CREATE_ANDROID_APP \n* 生成安卓 apk。\n \n## 7.上传资源： [Python]: H_UPLOAD_CDN_COMPRESS\n * 上传本地生成的diff.txt中的文件到cdn\n * 内容示例如下：\n  ![diff文件内容](/img/1600238267260.png)\n \n## 8.打补丁包： [Python]：H_GENERATE_PATCH_CDN_COMPRESS\n * 输入参数: 起始版本，目标版本\n * 1. 获取两个版本的version文件\n * 2. 获取version中的catalogs, resources文件列表，以目标版本为准，起始版本中不同的记录到diff列表中\n * 3. 将diff列表中的文件遍历出，并压缩为 [start_version]_[target_version]patch.7z\n * 4.在目标版本的version文件中，添加压缩文件名到patchs字段\n * 5. 上传修改后的新的version文件\n * 结果如图：\n ![生成的364-384的补丁包](/img/1600238404872.png)\n\n\n# 加载流程\n## 1. 获取所有项目内版本号及version文件\n* GetLocalVersion 的System执行， 如图获取 resVersionInPack, resVersionInSD, appVersionInPack\n ![加载本地的版本号信息](/img/1600233059102.png)\n \n ## 2. 加载Addressable的Catelog\n * GetLocalVersion System结束时调用\n \n## 3. 加载服务端的md5文件，notice文件，server文件，version文件\n* GetServerList System执行\n* * Server的根地址： 包体内的plaform.txt指明的serverKey, mCenterUrl\n \n* md5文件: {mCenterUrl}static/md5/{mChannel}.json。 从其中获取如图内容\n![md5文件内容](/img/1600236947016.png)\n* notice文件： {mCenterUrl}static/notice/login/{mChannelKey}.json\n* server文件： {mCenterUrl}static/server/{mChannelKey}.json\n \n \n## 4. 判断是否需要强更？[非Editor]\n * DownloadApp System执行\n * 服务端给的APP版本号，如果比appVersionInPack要大，则强更，跳转到下载地址\n  \n  \n## 5. 更新资源文件 [非Editor] \n* DownloadUpdateFiles System执行\n* 服务端的res版本号，如果比(resVersionInPack与resVersionInSD中的最大者)大，则下载服务端的version文件\n\n* 服务端version文件： cdnUrl / Resources/[Android/iOS/Windows/Mac]/xxx_version.7z\n* 下载服务端版本文件并解压\n* 1.查找patches列表，如果存在 [resVersionInPack]_[服务端res_version]patch.7z 文件名，则进入补丁包快速下载流程\n* 2.未找到对应的patches记录，进入资源列表下载流程。\n  \n >A: 补丁包快速下载流程：\n > 1. 补丁包地址： cdnUrl / Resources/[Android/iOS/Windows/Mac]/[resVersionInPack]\\_[服务端res_version]patch.7z\n > 2. 解压补丁包到persistantData下，记录最新catalog名称，完成下载流程\n >B: 资源下载流程:\n> 对比得到 mCoreUpdateDic 必更资源列表，mAfterUpdateDic 随后（运行时）更新的资源列表\n> 结果： \n  1.mCoreUpdateDic与mAfterUpdateDic为空？ ： 将服务端的version文件复制到本地sd下\n  2.进行下载，并记录catelog文件名称，完成后，再次检测mCoreUpdateDic与mAfterUpdateDic，循环直到1成立\n  \n\n## 6. [再次]加载Addressable的Catelog\n * DownloadUpdateFiles System执行\n * 设置当前资源版本号为服务端\n \n## 7. 进入登录，执行LoginPreload, InitLua, EnterLogin进入游戏\n","source":"_posts/Addressable打包流程.md","raw":"---\ntitle: Addressable打包流程\ncategories:\n- 工作相关\ntags: \n- CI\n---\n# 安卓打包流程\n\n## 1. [Python]  添加配置\n* 1.添加项目配置 vms/config/config.txt\n* 2.新建一个config文件到 vms/config/platform_{project}_{branch/version}.txt\n  \n >2的文件 将作为打包后项目带出去的platform.txt的模板\n > platform.txt在打包流程中 判断 branch是否以t开头，是则用1，否则用第一个字符设置为platformId\n \n\n ```python\n -------------------------------------------------\n   File Name：     ModifyJsonFileHandler\n   Author :       hujunhao\n   date：          2018/3/16 16:03\n   Description : 修改platform.txt文件\n-------------------------------------------------\n\"\"\"\nclass ModifyJsonFileHandler(BaseHandler):\n    def __init__(self):\n        super(ModifyJsonFileHandler, self).__init__(constants.H_MODIFY_JSON_FILE)\n        pass\n\n    def excute(self, args):\n        version = args[0]\n        publish_path = args[1]\n        plat_path = args[2]\n        to_path = args[3]\n\n        cur_date_time = datetime.datetime.now()\n        cur_date_time.strftime('%m%d%H%M')\n        publish_data = script.configMgr.load_file(publish_path)\n        ver_str = '%s_%s_%s_%s' % (\n            version, publish_data['appVersion'], publish_data['resVersion'], cur_date_time.strftime('%m%d%H%M'))\n\n        plat_data = script.configMgr.load_file(plat_path)\n        plat_data['verInfo'] = ver_str\n\n        # M by Yuk 2018-08-03\n        # 修复不同platformId被覆盖回默认platformId的bug\n        # platformId 取分支号\n        platformId = str(version[0])\n        if platformId == 't' or platformId == '0':\n            platformId = 1\n            pass\n        plat_data['platformId'] = platformId\n        \n        script.configMgr.save_file(plat_data, to_path)\n\n        return True\n\n    pass\n\n ```\n\n\n ## 2. [Python]  执行流程： B_PACK_RES  [Unity] :PackAllRes \n * 打包所有资源\n * 设置目录： res_ab: output\\testsg\\output\\res\\res_ab\n\n## 3.[Python] 执行流程：B_CREATE_PUBLISH [Unity]: UpdateVersionAndPublishFile\n* 创建项目内的publish.txt和xxx_version.txt\n  \n## 4.[Python] 执行流程：B_BUILD_PROJECT [Unity]: BuildProject\n* 生成安卓工程\n* 将调用Unity中对Manifest文件已经修改\n\n## 5.[Python] 执行流程：B_COMMIT_MOBILE \n* 将资源提交到SVN\n\n## 6.[Python] 执行流程：B_CREATE_ANDROID_APP \n* 生成安卓 apk。\n \n## 7.上传资源： [Python]: H_UPLOAD_CDN_COMPRESS\n * 上传本地生成的diff.txt中的文件到cdn\n * 内容示例如下：\n  ![diff文件内容](/img/1600238267260.png)\n \n## 8.打补丁包： [Python]：H_GENERATE_PATCH_CDN_COMPRESS\n * 输入参数: 起始版本，目标版本\n * 1. 获取两个版本的version文件\n * 2. 获取version中的catalogs, resources文件列表，以目标版本为准，起始版本中不同的记录到diff列表中\n * 3. 将diff列表中的文件遍历出，并压缩为 [start_version]_[target_version]patch.7z\n * 4.在目标版本的version文件中，添加压缩文件名到patchs字段\n * 5. 上传修改后的新的version文件\n * 结果如图：\n ![生成的364-384的补丁包](/img/1600238404872.png)\n\n\n# 加载流程\n## 1. 获取所有项目内版本号及version文件\n* GetLocalVersion 的System执行， 如图获取 resVersionInPack, resVersionInSD, appVersionInPack\n ![加载本地的版本号信息](/img/1600233059102.png)\n \n ## 2. 加载Addressable的Catelog\n * GetLocalVersion System结束时调用\n \n## 3. 加载服务端的md5文件，notice文件，server文件，version文件\n* GetServerList System执行\n* * Server的根地址： 包体内的plaform.txt指明的serverKey, mCenterUrl\n \n* md5文件: {mCenterUrl}static/md5/{mChannel}.json。 从其中获取如图内容\n![md5文件内容](/img/1600236947016.png)\n* notice文件： {mCenterUrl}static/notice/login/{mChannelKey}.json\n* server文件： {mCenterUrl}static/server/{mChannelKey}.json\n \n \n## 4. 判断是否需要强更？[非Editor]\n * DownloadApp System执行\n * 服务端给的APP版本号，如果比appVersionInPack要大，则强更，跳转到下载地址\n  \n  \n## 5. 更新资源文件 [非Editor] \n* DownloadUpdateFiles System执行\n* 服务端的res版本号，如果比(resVersionInPack与resVersionInSD中的最大者)大，则下载服务端的version文件\n\n* 服务端version文件： cdnUrl / Resources/[Android/iOS/Windows/Mac]/xxx_version.7z\n* 下载服务端版本文件并解压\n* 1.查找patches列表，如果存在 [resVersionInPack]_[服务端res_version]patch.7z 文件名，则进入补丁包快速下载流程\n* 2.未找到对应的patches记录，进入资源列表下载流程。\n  \n >A: 补丁包快速下载流程：\n > 1. 补丁包地址： cdnUrl / Resources/[Android/iOS/Windows/Mac]/[resVersionInPack]\\_[服务端res_version]patch.7z\n > 2. 解压补丁包到persistantData下，记录最新catalog名称，完成下载流程\n >B: 资源下载流程:\n> 对比得到 mCoreUpdateDic 必更资源列表，mAfterUpdateDic 随后（运行时）更新的资源列表\n> 结果： \n  1.mCoreUpdateDic与mAfterUpdateDic为空？ ： 将服务端的version文件复制到本地sd下\n  2.进行下载，并记录catelog文件名称，完成后，再次检测mCoreUpdateDic与mAfterUpdateDic，循环直到1成立\n  \n\n## 6. [再次]加载Addressable的Catelog\n * DownloadUpdateFiles System执行\n * 设置当前资源版本号为服务端\n \n## 7. 进入登录，执行LoginPreload, InitLua, EnterLogin进入游戏\n","slug":"Addressable打包流程","published":1,"date":"2020-09-16T06:54:28.023Z","updated":"2020-09-16T06:54:28.023Z","_id":"ckf5114xv0000grf0culrjtnm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"安卓打包流程\"><a href=\"#安卓打包流程\" class=\"headerlink\" title=\"安卓打包流程\"></a>安卓打包流程</h1><h2 id=\"1-Python-添加配置\"><a href=\"#1-Python-添加配置\" class=\"headerlink\" title=\"1. [Python]  添加配置\"></a>1. [Python]  添加配置</h2><ul>\n<li><p>1.添加项目配置 vms/config/config.txt</p>\n</li>\n<li><p>2.新建一个config文件到 vms/config/platform_{project}_{branch/version}.txt</p>\n<blockquote>\n<p>2的文件 将作为打包后项目带出去的platform.txt的模板<br>platform.txt在打包流程中 判断 branch是否以t开头，是则用1，否则用第一个字符设置为platformId</p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"python\"> -------------------------------------------------\n   File Name：     ModifyJsonFileHandler\n   Author :       hujunhao\n   date：          2018/3/16 16:03\n   Description : 修改platform.txt文件\n-------------------------------------------------\n&quot;&quot;&quot;\nclass ModifyJsonFileHandler(BaseHandler):\n    def __init__(self):\n        super(ModifyJsonFileHandler, self).__init__(constants.H_MODIFY_JSON_FILE)\n        pass\n\n    def excute(self, args):\n        version = args[0]\n        publish_path = args[1]\n        plat_path = args[2]\n        to_path = args[3]\n\n        cur_date_time = datetime.datetime.now()\n        cur_date_time.strftime(&#39;%m%d%H%M&#39;)\n        publish_data = script.configMgr.load_file(publish_path)\n        ver_str = &#39;%s_%s_%s_%s&#39; % (\n            version, publish_data[&#39;appVersion&#39;], publish_data[&#39;resVersion&#39;], cur_date_time.strftime(&#39;%m%d%H%M&#39;))\n\n        plat_data = script.configMgr.load_file(plat_path)\n        plat_data[&#39;verInfo&#39;] = ver_str\n\n        # M by Yuk 2018-08-03\n        # 修复不同platformId被覆盖回默认platformId的bug\n        # platformId 取分支号\n        platformId = str(version[0])\n        if platformId == &#39;t&#39; or platformId == &#39;0&#39;:\n            platformId = 1\n            pass\n        plat_data[&#39;platformId&#39;] = platformId\n\n        script.configMgr.save_file(plat_data, to_path)\n\n        return True\n\n    pass\n</code></pre>\n<h2 id=\"2-Python-执行流程：-B-PACK-RES-Unity-PackAllRes\"><a href=\"#2-Python-执行流程：-B-PACK-RES-Unity-PackAllRes\" class=\"headerlink\" title=\"2. [Python]  执行流程： B_PACK_RES  [Unity] :PackAllRes\"></a>2. [Python]  执行流程： B_PACK_RES  [Unity] :PackAllRes</h2><ul>\n<li>打包所有资源</li>\n<li>设置目录： res_ab: output\\testsg\\output\\res\\res_ab</li>\n</ul>\n<h2 id=\"3-Python-执行流程：B-CREATE-PUBLISH-Unity-UpdateVersionAndPublishFile\"><a href=\"#3-Python-执行流程：B-CREATE-PUBLISH-Unity-UpdateVersionAndPublishFile\" class=\"headerlink\" title=\"3.[Python] 执行流程：B_CREATE_PUBLISH [Unity]: UpdateVersionAndPublishFile\"></a>3.[Python] 执行流程：B_CREATE_PUBLISH [Unity]: UpdateVersionAndPublishFile</h2><ul>\n<li>创建项目内的publish.txt和xxx_version.txt</li>\n</ul>\n<h2 id=\"4-Python-执行流程：B-BUILD-PROJECT-Unity-BuildProject\"><a href=\"#4-Python-执行流程：B-BUILD-PROJECT-Unity-BuildProject\" class=\"headerlink\" title=\"4.[Python] 执行流程：B_BUILD_PROJECT [Unity]: BuildProject\"></a>4.[Python] 执行流程：B_BUILD_PROJECT [Unity]: BuildProject</h2><ul>\n<li>生成安卓工程</li>\n<li>将调用Unity中对Manifest文件已经修改</li>\n</ul>\n<h2 id=\"5-Python-执行流程：B-COMMIT-MOBILE\"><a href=\"#5-Python-执行流程：B-COMMIT-MOBILE\" class=\"headerlink\" title=\"5.[Python] 执行流程：B_COMMIT_MOBILE\"></a>5.[Python] 执行流程：B_COMMIT_MOBILE</h2><ul>\n<li>将资源提交到SVN</li>\n</ul>\n<h2 id=\"6-Python-执行流程：B-CREATE-ANDROID-APP\"><a href=\"#6-Python-执行流程：B-CREATE-ANDROID-APP\" class=\"headerlink\" title=\"6.[Python] 执行流程：B_CREATE_ANDROID_APP\"></a>6.[Python] 执行流程：B_CREATE_ANDROID_APP</h2><ul>\n<li>生成安卓 apk。</li>\n</ul>\n<h2 id=\"7-上传资源：-Python-H-UPLOAD-CDN-COMPRESS\"><a href=\"#7-上传资源：-Python-H-UPLOAD-CDN-COMPRESS\" class=\"headerlink\" title=\"7.上传资源： [Python]: H_UPLOAD_CDN_COMPRESS\"></a>7.上传资源： [Python]: H_UPLOAD_CDN_COMPRESS</h2><ul>\n<li>上传本地生成的diff.txt中的文件到cdn</li>\n<li>内容示例如下：<br><img src=\"/img/1600238267260.png\" alt=\"diff文件内容\"></li>\n</ul>\n<h2 id=\"8-打补丁包：-Python-：H-GENERATE-PATCH-CDN-COMPRESS\"><a href=\"#8-打补丁包：-Python-：H-GENERATE-PATCH-CDN-COMPRESS\" class=\"headerlink\" title=\"8.打补丁包： [Python]：H_GENERATE_PATCH_CDN_COMPRESS\"></a>8.打补丁包： [Python]：H_GENERATE_PATCH_CDN_COMPRESS</h2><ul>\n<li>输入参数: 起始版本，目标版本</li>\n<li><ol>\n<li>获取两个版本的version文件</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>获取version中的catalogs, resources文件列表，以目标版本为准，起始版本中不同的记录到diff列表中</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>将diff列表中的文件遍历出，并压缩为 [start_version]_[target_version]patch.7z</li>\n</ol>\n</li>\n<li>4.在目标版本的version文件中，添加压缩文件名到patchs字段</li>\n<li><ol start=\"5\">\n<li>上传修改后的新的version文件</li>\n</ol>\n</li>\n<li>结果如图：<br><img src=\"/img/1600238404872.png\" alt=\"生成的364-384的补丁包\"></li>\n</ul>\n<h1 id=\"加载流程\"><a href=\"#加载流程\" class=\"headerlink\" title=\"加载流程\"></a>加载流程</h1><h2 id=\"1-获取所有项目内版本号及version文件\"><a href=\"#1-获取所有项目内版本号及version文件\" class=\"headerlink\" title=\"1. 获取所有项目内版本号及version文件\"></a>1. 获取所有项目内版本号及version文件</h2><ul>\n<li><p>GetLocalVersion 的System执行， 如图获取 resVersionInPack, resVersionInSD, appVersionInPack<br><img src=\"/img/1600233059102.png\" alt=\"加载本地的版本号信息\"></p>\n<h2 id=\"2-加载Addressable的Catelog\"><a href=\"#2-加载Addressable的Catelog\" class=\"headerlink\" title=\"2. 加载Addressable的Catelog\"></a>2. 加载Addressable的Catelog</h2><ul>\n<li>GetLocalVersion System结束时调用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-加载服务端的md5文件，notice文件，server文件，version文件\"><a href=\"#3-加载服务端的md5文件，notice文件，server文件，version文件\" class=\"headerlink\" title=\"3. 加载服务端的md5文件，notice文件，server文件，version文件\"></a>3. 加载服务端的md5文件，notice文件，server文件，version文件</h2><ul>\n<li><p>GetServerList System执行</p>\n</li>\n<li><ul>\n<li>Server的根地址： 包体内的plaform.txt指明的serverKey, mCenterUrl</li>\n</ul>\n</li>\n<li><p>md5文件: {mCenterUrl}static/md5/{mChannel}.json。 从其中获取如图内容<br><img src=\"/img/1600236947016.png\" alt=\"md5文件内容\"></p>\n</li>\n<li><p>notice文件： {mCenterUrl}static/notice/login/{mChannelKey}.json</p>\n</li>\n<li><p>server文件： {mCenterUrl}static/server/{mChannelKey}.json</p>\n</li>\n</ul>\n<h2 id=\"4-判断是否需要强更？-非Editor\"><a href=\"#4-判断是否需要强更？-非Editor\" class=\"headerlink\" title=\"4. 判断是否需要强更？[非Editor]\"></a>4. 判断是否需要强更？[非Editor]</h2><ul>\n<li>DownloadApp System执行</li>\n<li>服务端给的APP版本号，如果比appVersionInPack要大，则强更，跳转到下载地址</li>\n</ul>\n<h2 id=\"5-更新资源文件-非Editor\"><a href=\"#5-更新资源文件-非Editor\" class=\"headerlink\" title=\"5. 更新资源文件 [非Editor]\"></a>5. 更新资源文件 [非Editor]</h2><ul>\n<li><p>DownloadUpdateFiles System执行</p>\n</li>\n<li><p>服务端的res版本号，如果比(resVersionInPack与resVersionInSD中的最大者)大，则下载服务端的version文件</p>\n</li>\n<li><p>服务端version文件： cdnUrl / Resources/[Android/iOS/Windows/Mac]/xxx_version.7z</p>\n</li>\n<li><p>下载服务端版本文件并解压</p>\n</li>\n<li><p>1.查找patches列表，如果存在 [resVersionInPack]_[服务端res_version]patch.7z 文件名，则进入补丁包快速下载流程</p>\n</li>\n<li><p>2.未找到对应的patches记录，进入资源列表下载流程。</p>\n<blockquote>\n<p>A: 补丁包快速下载流程：</p>\n<ol>\n<li>补丁包地址： cdnUrl / Resources/[Android/iOS/Windows/Mac]/[resVersionInPack]_[服务端res_version]patch.7z</li>\n<li>解压补丁包到persistantData下，记录最新catalog名称，完成下载流程<br>B: 资源下载流程:<br>对比得到 mCoreUpdateDic 必更资源列表，mAfterUpdateDic 随后（运行时）更新的资源列表<br>结果： </li>\n<li>mCoreUpdateDic与mAfterUpdateDic为空？ ： 将服务端的version文件复制到本地sd下</li>\n<li>进行下载，并记录catelog文件名称，完成后，再次检测mCoreUpdateDic与mAfterUpdateDic，循环直到1成立</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"6-再次-加载Addressable的Catelog\"><a href=\"#6-再次-加载Addressable的Catelog\" class=\"headerlink\" title=\"6. [再次]加载Addressable的Catelog\"></a>6. [再次]加载Addressable的Catelog</h2><ul>\n<li>DownloadUpdateFiles System执行</li>\n<li>设置当前资源版本号为服务端</li>\n</ul>\n<h2 id=\"7-进入登录，执行LoginPreload-InitLua-EnterLogin进入游戏\"><a href=\"#7-进入登录，执行LoginPreload-InitLua-EnterLogin进入游戏\" class=\"headerlink\" title=\"7. 进入登录，执行LoginPreload, InitLua, EnterLogin进入游戏\"></a>7. 进入登录，执行LoginPreload, InitLua, EnterLogin进入游戏</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安卓打包流程\"><a href=\"#安卓打包流程\" class=\"headerlink\" title=\"安卓打包流程\"></a>安卓打包流程</h1><h2 id=\"1-Python-添加配置\"><a href=\"#1-Python-添加配置\" class=\"headerlink\" title=\"1. [Python]  添加配置\"></a>1. [Python]  添加配置</h2><ul>\n<li><p>1.添加项目配置 vms/config/config.txt</p>\n</li>\n<li><p>2.新建一个config文件到 vms/config/platform_{project}_{branch/version}.txt</p>\n<blockquote>\n<p>2的文件 将作为打包后项目带出去的platform.txt的模板<br>platform.txt在打包流程中 判断 branch是否以t开头，是则用1，否则用第一个字符设置为platformId</p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"python\"> -------------------------------------------------\n   File Name：     ModifyJsonFileHandler\n   Author :       hujunhao\n   date：          2018/3/16 16:03\n   Description : 修改platform.txt文件\n-------------------------------------------------\n&quot;&quot;&quot;\nclass ModifyJsonFileHandler(BaseHandler):\n    def __init__(self):\n        super(ModifyJsonFileHandler, self).__init__(constants.H_MODIFY_JSON_FILE)\n        pass\n\n    def excute(self, args):\n        version = args[0]\n        publish_path = args[1]\n        plat_path = args[2]\n        to_path = args[3]\n\n        cur_date_time = datetime.datetime.now()\n        cur_date_time.strftime(&#39;%m%d%H%M&#39;)\n        publish_data = script.configMgr.load_file(publish_path)\n        ver_str = &#39;%s_%s_%s_%s&#39; % (\n            version, publish_data[&#39;appVersion&#39;], publish_data[&#39;resVersion&#39;], cur_date_time.strftime(&#39;%m%d%H%M&#39;))\n\n        plat_data = script.configMgr.load_file(plat_path)\n        plat_data[&#39;verInfo&#39;] = ver_str\n\n        # M by Yuk 2018-08-03\n        # 修复不同platformId被覆盖回默认platformId的bug\n        # platformId 取分支号\n        platformId = str(version[0])\n        if platformId == &#39;t&#39; or platformId == &#39;0&#39;:\n            platformId = 1\n            pass\n        plat_data[&#39;platformId&#39;] = platformId\n\n        script.configMgr.save_file(plat_data, to_path)\n\n        return True\n\n    pass\n</code></pre>\n<h2 id=\"2-Python-执行流程：-B-PACK-RES-Unity-PackAllRes\"><a href=\"#2-Python-执行流程：-B-PACK-RES-Unity-PackAllRes\" class=\"headerlink\" title=\"2. [Python]  执行流程： B_PACK_RES  [Unity] :PackAllRes\"></a>2. [Python]  执行流程： B_PACK_RES  [Unity] :PackAllRes</h2><ul>\n<li>打包所有资源</li>\n<li>设置目录： res_ab: output\\testsg\\output\\res\\res_ab</li>\n</ul>\n<h2 id=\"3-Python-执行流程：B-CREATE-PUBLISH-Unity-UpdateVersionAndPublishFile\"><a href=\"#3-Python-执行流程：B-CREATE-PUBLISH-Unity-UpdateVersionAndPublishFile\" class=\"headerlink\" title=\"3.[Python] 执行流程：B_CREATE_PUBLISH [Unity]: UpdateVersionAndPublishFile\"></a>3.[Python] 执行流程：B_CREATE_PUBLISH [Unity]: UpdateVersionAndPublishFile</h2><ul>\n<li>创建项目内的publish.txt和xxx_version.txt</li>\n</ul>\n<h2 id=\"4-Python-执行流程：B-BUILD-PROJECT-Unity-BuildProject\"><a href=\"#4-Python-执行流程：B-BUILD-PROJECT-Unity-BuildProject\" class=\"headerlink\" title=\"4.[Python] 执行流程：B_BUILD_PROJECT [Unity]: BuildProject\"></a>4.[Python] 执行流程：B_BUILD_PROJECT [Unity]: BuildProject</h2><ul>\n<li>生成安卓工程</li>\n<li>将调用Unity中对Manifest文件已经修改</li>\n</ul>\n<h2 id=\"5-Python-执行流程：B-COMMIT-MOBILE\"><a href=\"#5-Python-执行流程：B-COMMIT-MOBILE\" class=\"headerlink\" title=\"5.[Python] 执行流程：B_COMMIT_MOBILE\"></a>5.[Python] 执行流程：B_COMMIT_MOBILE</h2><ul>\n<li>将资源提交到SVN</li>\n</ul>\n<h2 id=\"6-Python-执行流程：B-CREATE-ANDROID-APP\"><a href=\"#6-Python-执行流程：B-CREATE-ANDROID-APP\" class=\"headerlink\" title=\"6.[Python] 执行流程：B_CREATE_ANDROID_APP\"></a>6.[Python] 执行流程：B_CREATE_ANDROID_APP</h2><ul>\n<li>生成安卓 apk。</li>\n</ul>\n<h2 id=\"7-上传资源：-Python-H-UPLOAD-CDN-COMPRESS\"><a href=\"#7-上传资源：-Python-H-UPLOAD-CDN-COMPRESS\" class=\"headerlink\" title=\"7.上传资源： [Python]: H_UPLOAD_CDN_COMPRESS\"></a>7.上传资源： [Python]: H_UPLOAD_CDN_COMPRESS</h2><ul>\n<li>上传本地生成的diff.txt中的文件到cdn</li>\n<li>内容示例如下：<br><img src=\"/img/1600238267260.png\" alt=\"diff文件内容\"></li>\n</ul>\n<h2 id=\"8-打补丁包：-Python-：H-GENERATE-PATCH-CDN-COMPRESS\"><a href=\"#8-打补丁包：-Python-：H-GENERATE-PATCH-CDN-COMPRESS\" class=\"headerlink\" title=\"8.打补丁包： [Python]：H_GENERATE_PATCH_CDN_COMPRESS\"></a>8.打补丁包： [Python]：H_GENERATE_PATCH_CDN_COMPRESS</h2><ul>\n<li>输入参数: 起始版本，目标版本</li>\n<li><ol>\n<li>获取两个版本的version文件</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>获取version中的catalogs, resources文件列表，以目标版本为准，起始版本中不同的记录到diff列表中</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>将diff列表中的文件遍历出，并压缩为 [start_version]_[target_version]patch.7z</li>\n</ol>\n</li>\n<li>4.在目标版本的version文件中，添加压缩文件名到patchs字段</li>\n<li><ol start=\"5\">\n<li>上传修改后的新的version文件</li>\n</ol>\n</li>\n<li>结果如图：<br><img src=\"/img/1600238404872.png\" alt=\"生成的364-384的补丁包\"></li>\n</ul>\n<h1 id=\"加载流程\"><a href=\"#加载流程\" class=\"headerlink\" title=\"加载流程\"></a>加载流程</h1><h2 id=\"1-获取所有项目内版本号及version文件\"><a href=\"#1-获取所有项目内版本号及version文件\" class=\"headerlink\" title=\"1. 获取所有项目内版本号及version文件\"></a>1. 获取所有项目内版本号及version文件</h2><ul>\n<li><p>GetLocalVersion 的System执行， 如图获取 resVersionInPack, resVersionInSD, appVersionInPack<br><img src=\"/img/1600233059102.png\" alt=\"加载本地的版本号信息\"></p>\n<h2 id=\"2-加载Addressable的Catelog\"><a href=\"#2-加载Addressable的Catelog\" class=\"headerlink\" title=\"2. 加载Addressable的Catelog\"></a>2. 加载Addressable的Catelog</h2><ul>\n<li>GetLocalVersion System结束时调用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-加载服务端的md5文件，notice文件，server文件，version文件\"><a href=\"#3-加载服务端的md5文件，notice文件，server文件，version文件\" class=\"headerlink\" title=\"3. 加载服务端的md5文件，notice文件，server文件，version文件\"></a>3. 加载服务端的md5文件，notice文件，server文件，version文件</h2><ul>\n<li><p>GetServerList System执行</p>\n</li>\n<li><ul>\n<li>Server的根地址： 包体内的plaform.txt指明的serverKey, mCenterUrl</li>\n</ul>\n</li>\n<li><p>md5文件: {mCenterUrl}static/md5/{mChannel}.json。 从其中获取如图内容<br><img src=\"/img/1600236947016.png\" alt=\"md5文件内容\"></p>\n</li>\n<li><p>notice文件： {mCenterUrl}static/notice/login/{mChannelKey}.json</p>\n</li>\n<li><p>server文件： {mCenterUrl}static/server/{mChannelKey}.json</p>\n</li>\n</ul>\n<h2 id=\"4-判断是否需要强更？-非Editor\"><a href=\"#4-判断是否需要强更？-非Editor\" class=\"headerlink\" title=\"4. 判断是否需要强更？[非Editor]\"></a>4. 判断是否需要强更？[非Editor]</h2><ul>\n<li>DownloadApp System执行</li>\n<li>服务端给的APP版本号，如果比appVersionInPack要大，则强更，跳转到下载地址</li>\n</ul>\n<h2 id=\"5-更新资源文件-非Editor\"><a href=\"#5-更新资源文件-非Editor\" class=\"headerlink\" title=\"5. 更新资源文件 [非Editor]\"></a>5. 更新资源文件 [非Editor]</h2><ul>\n<li><p>DownloadUpdateFiles System执行</p>\n</li>\n<li><p>服务端的res版本号，如果比(resVersionInPack与resVersionInSD中的最大者)大，则下载服务端的version文件</p>\n</li>\n<li><p>服务端version文件： cdnUrl / Resources/[Android/iOS/Windows/Mac]/xxx_version.7z</p>\n</li>\n<li><p>下载服务端版本文件并解压</p>\n</li>\n<li><p>1.查找patches列表，如果存在 [resVersionInPack]_[服务端res_version]patch.7z 文件名，则进入补丁包快速下载流程</p>\n</li>\n<li><p>2.未找到对应的patches记录，进入资源列表下载流程。</p>\n<blockquote>\n<p>A: 补丁包快速下载流程：</p>\n<ol>\n<li>补丁包地址： cdnUrl / Resources/[Android/iOS/Windows/Mac]/[resVersionInPack]_[服务端res_version]patch.7z</li>\n<li>解压补丁包到persistantData下，记录最新catalog名称，完成下载流程<br>B: 资源下载流程:<br>对比得到 mCoreUpdateDic 必更资源列表，mAfterUpdateDic 随后（运行时）更新的资源列表<br>结果： </li>\n<li>mCoreUpdateDic与mAfterUpdateDic为空？ ： 将服务端的version文件复制到本地sd下</li>\n<li>进行下载，并记录catelog文件名称，完成后，再次检测mCoreUpdateDic与mAfterUpdateDic，循环直到1成立</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"6-再次-加载Addressable的Catelog\"><a href=\"#6-再次-加载Addressable的Catelog\" class=\"headerlink\" title=\"6. [再次]加载Addressable的Catelog\"></a>6. [再次]加载Addressable的Catelog</h2><ul>\n<li>DownloadUpdateFiles System执行</li>\n<li>设置当前资源版本号为服务端</li>\n</ul>\n<h2 id=\"7-进入登录，执行LoginPreload-InitLua-EnterLogin进入游戏\"><a href=\"#7-进入登录，执行LoginPreload-InitLua-EnterLogin进入游戏\" class=\"headerlink\" title=\"7. 进入登录，执行LoginPreload, InitLua, EnterLogin进入游戏\"></a>7. 进入登录，执行LoginPreload, InitLua, EnterLogin进入游戏</h2>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckdpclux200008sr3whsio5q3","category_id":"ckdpclux900028sr3z2ecctll","_id":"ckdpcluxi000c8sr3ljeeb7p2"},{"post_id":"ckdpclux800018sr3cbkxdfpz","category_id":"ckdpcluxe00078sr3cobu085b","_id":"ckdpcluxm000h8sr3vywgev2m"},{"post_id":"ckdpcluxh000b8sr3wfe0yzk0","category_id":"ckdpcluxe00078sr3cobu085b","_id":"ckdpcluxo000l8sr3ce8a3bwn"},{"post_id":"ckdpcluxj000f8sr3qbxgd2o5","category_id":"ckdpcluxe00078sr3cobu085b","_id":"ckdpcluxq000n8sr377mwvtki"},{"post_id":"ckdpcluxb00048sr3bqwb8woz","category_id":"ckdpcluxi000d8sr3a70cxh45","_id":"ckdpcluxs000r8sr3qcewkb9n"},{"post_id":"ckdpcluxn000k8sr3o2isw1dc","category_id":"ckdpcluxe00078sr3cobu085b","_id":"ckdpcluxu000u8sr3b1tr56c5"},{"post_id":"ckdpcluxc00058sr3k3pi52v6","category_id":"ckdpcluxm000i8sr3e2u7tm2j","_id":"ckdpcluxw000z8sr31f5jh6mq"},{"post_id":"ckdpcluxo000m8sr3ho9w1w23","category_id":"ckdpcluxm000i8sr3e2u7tm2j","_id":"ckdpcluxy00128sr3zmhw11w8"},{"post_id":"ckdpcluxr000q8sr31uk8g7la","category_id":"ckdpcluxi000d8sr3a70cxh45","_id":"ckdpcluy300178sr37yipk0ob"},{"post_id":"ckdpcluxe00068sr30velonlp","category_id":"ckdpcluxe00078sr3cobu085b","_id":"ckdpcluy400198sr3aqtgo5vt"},{"post_id":"ckdpcluxt000t8sr36p5dc0ps","category_id":"ckdpcluxm000i8sr3e2u7tm2j","_id":"ckdpcluy6001d8sr3tp1ebgi6"},{"post_id":"ckdpcluxg000a8sr3338ku06b","category_id":"ckdpcluxi000d8sr3a70cxh45","_id":"ckdpcluy7001f8sr3z0tjnkd5"},{"post_id":"ckdpcluxl000g8sr3dw838t6x","category_id":"ckdpcluxm000i8sr3e2u7tm2j","_id":"ckdpcluy9001j8sr370vgu4rp"},{"post_id":"ckdpcluy6001e8sr30ucf7vf9","category_id":"ckdpclux900028sr3z2ecctll","_id":"ckdpcluyb001n8sr3rh8v5j0u"},{"post_id":"ckdpcluya001l8sr3h4lgw88m","category_id":"ckdpcluxe00078sr3cobu085b","_id":"ckdpcluyf001u8sr3i1755si6"},{"post_id":"ckdpcluyb001m8sr3gtr4ksnb","category_id":"ckdpcluxe00078sr3cobu085b","_id":"ckdpcluyj00228sr3g8qke0tl"},{"post_id":"ckdpcluyd001q8sr3zblyr974","category_id":"ckdpcluxe00078sr3cobu085b","_id":"ckdpcluyl00278sr3vwcyk1eh"},{"post_id":"ckdpcluy000158sr3gkmlsi1v","category_id":"ckdpcluyc001o8sr3pfq9xd1m","_id":"ckdpcluyn002a8sr3kn9u8swm"},{"post_id":"ckdpcluyf001t8sr3vf3c7y2b","category_id":"ckdpcluxe00078sr3cobu085b","_id":"ckdpcluyp002f8sr3pvpr749s"},{"post_id":"ckdpcluyh001y8sr3hu7vwo0o","category_id":"ckdpcluxm000i8sr3e2u7tm2j","_id":"ckdpcluyr002i8sr3kcmh9d7u"},{"post_id":"ckdpcluyi00218sr3ihztx7h1","category_id":"ckdpcluxe00078sr3cobu085b","_id":"ckdpcluyv002q8sr34yopjo8c"},{"post_id":"ckdpcluyp002e8sr3lt63pzat","category_id":"ckdpcluxe00078sr3cobu085b","_id":"ckdpcluyy002x8sr33it8bmrf"},{"post_id":"ckdpcluyq002h8sr3qboz6pp0","category_id":"ckdpcluxe00078sr3cobu085b","_id":"ckdpcluz000318sr3za9do7pv"},{"post_id":"ckdpcluyl00268sr3a2314s1c","category_id":"ckdpcluyo002d8sr3dmu9u834","_id":"ckdpcluz100348sr3enjz6yda"},{"post_id":"ckdpcluyu002p8sr3y4kg81eo","category_id":"ckdpcluyo002d8sr3dmu9u834","_id":"ckdpcluz300388sr31kebmf9e"},{"post_id":"ckdpcluym00298sr3xoq7okm4","category_id":"ckdpcluyt002m8sr3nvr2eia8","_id":"ckdpcluz4003c8sr3pg9hcc76"},{"post_id":"ckdpcluyw002t8sr3n5xa5x4c","category_id":"ckdpcluxe00078sr3cobu085b","_id":"ckdpcluz6003g8sr3k8bsrjzi"},{"post_id":"ckdpcluyx002w8sr38akz1rid","category_id":"ckdpclux900028sr3z2ecctll","_id":"ckdpcluz8003k8sr34c2g31f3"},{"post_id":"ckdpcluyz00308sr36x7ugw7k","category_id":"ckdpcluxe00078sr3cobu085b","_id":"ckdpcluza003n8sr337j5k84j"},{"post_id":"ckdpcluz4003b8sr3tzvh8f3c","category_id":"ckdpcluxe00078sr3cobu085b","_id":"ckdpcluzc003r8sr33y7lrtrt"},{"post_id":"ckdpcluz5003f8sr3xy3ye3hn","category_id":"ckdpclux900028sr3z2ecctll","_id":"ckdpcluzd003u8sr3lqo2cara"},{"post_id":"ckdpcluz000338sr3rmctxk4s","category_id":"ckdpcluz3003a8sr3g7y3fmnv","_id":"ckdpcluzf003z8sr3utf1jl9e"},{"post_id":"ckdpcluz7003i8sr3eao2w2t8","category_id":"ckdpcluxe00078sr3cobu085b","_id":"ckdpcluzh00428sr33iu6r0j8"},{"post_id":"ckdpcluz9003m8sr3ghtvqvn1","category_id":"ckdpcluyo002d8sr3dmu9u834","_id":"ckdpcluzm00478sr3m5ipw0nj"},{"post_id":"ckdpcluz200378sr34h9kmru2","category_id":"ckdpcluz3003a8sr3g7y3fmnv","_id":"ckdpcluzo004a8sr30hdujtde"},{"post_id":"ckdpcluzg00418sr3l0hcjwqn","category_id":"ckdpcluze003x8sr3bpezgn90","_id":"ckdpcluzq004f8sr3xshu49q3"},{"post_id":"ckdpcluzb003q8sr30q75gm2k","category_id":"ckdpcluze003x8sr3bpezgn90","_id":"ckdpcluzs004i8sr3z7ot9thx"},{"post_id":"ckdpcluzk00458sr3o9dezwh5","category_id":"ckdpcluze003x8sr3bpezgn90","_id":"ckdpcluzu004m8sr37wtrevab"},{"post_id":"ckdpcluzn00498sr36o2sy1kt","category_id":"ckdpcluze003x8sr3bpezgn90","_id":"ckdpcluzv004p8sr30xmc5y5n"},{"post_id":"ckdpcluzd003t8sr3qtpggvot","category_id":"ckdpcluze003x8sr3bpezgn90","_id":"ckdpcluzw004t8sr327fu3tpq"},{"post_id":"ckdpcluzp004d8sr34d0yjsqh","category_id":"ckdpcluze003x8sr3bpezgn90","_id":"ckdpcluzy004w8sr3ou9re0ju"},{"post_id":"ckdpcluzr004h8sr3ukh74qna","category_id":"ckdpcluze003x8sr3bpezgn90","_id":"ckdpcluzz00508sr31wsug273"},{"post_id":"ckdpcluzf003y8sr3bv6ml0tw","category_id":"ckdpcluze003x8sr3bpezgn90","_id":"ckdpclv0300548sr3icnbasue"},{"post_id":"ckdpcluzt004l8sr3e7qy23fv","category_id":"ckdpcluxm000i8sr3e2u7tm2j","_id":"ckdpclv0400588sr3vw29e3ty"},{"post_id":"ckdpcluzu004o8sr3kakv76u9","category_id":"ckdpcluze003x8sr3bpezgn90","_id":"ckdpclv06005c8sr30ytk4plr"},{"post_id":"ckdpcluzz004z8sr3ejgpey57","category_id":"ckdpcluxm000i8sr3e2u7tm2j","_id":"ckdpclv08005f8sr3pyzrlaoc"},{"post_id":"ckdpclv0200538sr3bnsi78cq","category_id":"ckdpcluzy004y8sr35lo0n3su","_id":"ckdpclv0a005k8sr36vpd75kr"},{"post_id":"ckdpcluzw004s8sr359nqn6q7","category_id":"ckdpcluzy004y8sr35lo0n3su","_id":"ckdpclv0b005n8sr3z79biqw4"},{"post_id":"ckdpclv0300568sr3fyjvcr6b","category_id":"ckdpcluz3003a8sr3g7y3fmnv","_id":"ckdpclv0d005r8sr30y7yno2w"},{"post_id":"ckdpcluzx004v8sr3e9hho2pb","category_id":"ckdpcluzy004y8sr35lo0n3su","_id":"ckdpclv0d005t8sr35mfx4qzq"},{"post_id":"ckdpclv07005e8sr3lbr3r1ja","category_id":"ckdpcluyo002d8sr3dmu9u834","_id":"ckdpclv0e005w8sr3f5mbp7kh"},{"post_id":"ckdpclv0b005m8sr3a76x2mie","category_id":"ckdpcluzy004y8sr35lo0n3su","_id":"ckdpclv0f005y8sr3lb7xn48q"},{"post_id":"ckdpclv06005b8sr3ueayjqyh","category_id":"ckdpclv09005i8sr31mateiv4","_id":"ckdpclv0g00618sr3kfvhvnfp"},{"post_id":"ckdpclv09005j8sr3gt8d62oi","category_id":"ckdpclv0c005q8sr358l1qmt8","_id":"ckdpclv0g00638sr3mzb1i29k"},{"post_id":"cke8jbsuk00009kr3y3glwai2","category_id":"ckdpcluz3003a8sr3g7y3fmnv","_id":"cke8jbsuu00019kr3bw1dvlw3"},{"post_id":"ckeus8hxn00003jf0eedjqkg5","category_id":"ckdpcluy4001a8sr3swthg4ac","_id":"ckeus8hy500063jf0ym40qmjk"},{"post_id":"ckeus8hxx00013jf0m5l13uof","category_id":"ckdpcluy4001a8sr3swthg4ac","_id":"ckeus8hy700093jf09mmi17hs"},{"post_id":"ckeus8hy200033jf0q1s0ndjg","category_id":"ckdpcluy4001a8sr3swthg4ac","_id":"ckeus8hy8000b3jf0683n8das"},{"post_id":"ckeus8hy500053jf08v53yj88","category_id":"ckdpcluy4001a8sr3swthg4ac","_id":"ckeus8hy9000d3jf0vvbidspf"},{"post_id":"ckeus8hy600083jf0ecc5wwxj","category_id":"ckdpcluy4001a8sr3swthg4ac","_id":"ckeus8hy9000f3jf0594964f8"},{"post_id":"ckf5114xv0000grf0culrjtnm","category_id":"ckdpcluyc001o8sr3pfq9xd1m","_id":"ckf5114yk0002grf0hmp6sudj"}],"PostTag":[{"post_id":"ckdpclux200008sr3whsio5q3","tag_id":"ckdpcluxb00038sr3uti7gqqz","_id":"ckdpcluxf00098sr3zsr6hfey"},{"post_id":"ckdpclux800018sr3cbkxdfpz","tag_id":"ckdpcluxf00088sr3kp8n9tjy","_id":"ckdpcluxs000s8sr3k600tf8w"},{"post_id":"ckdpclux800018sr3cbkxdfpz","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpcluxu000v8sr3jofksz7w"},{"post_id":"ckdpclux800018sr3cbkxdfpz","tag_id":"ckdpcluxm000j8sr3na3wwzxs","_id":"ckdpcluxx00108sr3xya4kbl0"},{"post_id":"ckdpcluxb00048sr3bqwb8woz","tag_id":"ckdpcluxq000p8sr3sskk8ops","_id":"ckdpcluxz00138sr3o2xnwcth"},{"post_id":"ckdpcluy6001e8sr30ucf7vf9","tag_id":"ckdpcluxb00038sr3uti7gqqz","_id":"ckdpcluy9001k8sr3wfzbabe4"},{"post_id":"ckdpcluxe00068sr30velonlp","tag_id":"ckdpcluxf00088sr3kp8n9tjy","_id":"ckdpcluye001s8sr3kzk7hxo6"},{"post_id":"ckdpcluxe00068sr30velonlp","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpcluyf001v8sr3witj4cd9"},{"post_id":"ckdpcluxe00068sr30velonlp","tag_id":"ckdpcluxm000j8sr3na3wwzxs","_id":"ckdpcluyi00208sr3o6hupcuz"},{"post_id":"ckdpcluxe00068sr30velonlp","tag_id":"ckdpcluy9001i8sr3ua6jbpmy","_id":"ckdpcluyj00238sr3d9hhief6"},{"post_id":"ckdpcluxg000a8sr3338ku06b","tag_id":"ckdpcluxq000p8sr3sskk8ops","_id":"ckdpcluym00288sr37v9pnjx6"},{"post_id":"ckdpcluyf001t8sr3vf3c7y2b","tag_id":"ckdpcluxf00088sr3kp8n9tjy","_id":"ckdpcluyn002b8sr3857cbrt4"},{"post_id":"ckdpcluyf001t8sr3vf3c7y2b","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpcluyq002g8sr3ov1lhnrk"},{"post_id":"ckdpcluyi00218sr3ihztx7h1","tag_id":"ckdpcluxf00088sr3kp8n9tjy","_id":"ckdpcluyr002j8sr3dlfzl4d6"},{"post_id":"ckdpcluyi00218sr3ihztx7h1","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpcluyt002o8sr3ebhl95zw"},{"post_id":"ckdpcluxh000b8sr3wfe0yzk0","tag_id":"ckdpcluxf00088sr3kp8n9tjy","_id":"ckdpcluyv002r8sr3x80p9c3d"},{"post_id":"ckdpcluxh000b8sr3wfe0yzk0","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpcluyx002v8sr3lezzngp4"},{"post_id":"ckdpcluxh000b8sr3wfe0yzk0","tag_id":"ckdpcluxm000j8sr3na3wwzxs","_id":"ckdpcluyy002y8sr3mk3xph73"},{"post_id":"ckdpcluym00298sr3xoq7okm4","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpcluz000328sr3x1banmh1"},{"post_id":"ckdpcluyp002e8sr3lt63pzat","tag_id":"ckdpcluxf00088sr3kp8n9tjy","_id":"ckdpcluz100358sr3inx58y5b"},{"post_id":"ckdpcluyp002e8sr3lt63pzat","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpcluz300398sr3wn08g53e"},{"post_id":"ckdpcluxj000f8sr3qbxgd2o5","tag_id":"ckdpcluxf00088sr3kp8n9tjy","_id":"ckdpcluz5003d8sr3bj0bg501"},{"post_id":"ckdpcluxj000f8sr3qbxgd2o5","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpcluz6003h8sr3pb6grvkp"},{"post_id":"ckdpcluxj000f8sr3qbxgd2o5","tag_id":"ckdpcluxm000j8sr3na3wwzxs","_id":"ckdpcluz8003l8sr3tf6f21g1"},{"post_id":"ckdpcluxn000k8sr3o2isw1dc","tag_id":"ckdpcluxf00088sr3kp8n9tjy","_id":"ckdpcluza003p8sr3fmzu3rgh"},{"post_id":"ckdpcluxn000k8sr3o2isw1dc","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpcluzc003s8sr34tt7gyb6"},{"post_id":"ckdpcluxn000k8sr3o2isw1dc","tag_id":"ckdpcluxm000j8sr3na3wwzxs","_id":"ckdpcluze003v8sr3dyltwzci"},{"post_id":"ckdpcluxn000k8sr3o2isw1dc","tag_id":"ckdpcluyr002k8sr3u0pqtzdn","_id":"ckdpcluzg00408sr3ttt5kpfq"},{"post_id":"ckdpcluyw002t8sr3n5xa5x4c","tag_id":"ckdpcluxf00088sr3kp8n9tjy","_id":"ckdpcluzh00438sr3vzd92le4"},{"post_id":"ckdpcluyw002t8sr3n5xa5x4c","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpcluzm00488sr3mk3j2y0g"},{"post_id":"ckdpcluxr000q8sr31uk8g7la","tag_id":"ckdpcluxq000p8sr3sskk8ops","_id":"ckdpcluzo004b8sr30k0899ou"},{"post_id":"ckdpcluyx002w8sr38akz1rid","tag_id":"ckdpcluxb00038sr3uti7gqqz","_id":"ckdpcluzq004g8sr33ga7i9fj"},{"post_id":"ckdpcluyz00308sr36x7ugw7k","tag_id":"ckdpcluxf00088sr3kp8n9tjy","_id":"ckdpcluzs004j8sr3x063kgsw"},{"post_id":"ckdpcluyz00308sr36x7ugw7k","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpcluzu004n8sr3koc1ph4t"},{"post_id":"ckdpcluz4003b8sr3tzvh8f3c","tag_id":"ckdpcluxf00088sr3kp8n9tjy","_id":"ckdpcluzx004u8sr3jojz8c0v"},{"post_id":"ckdpcluz4003b8sr3tzvh8f3c","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpcluzy004x8sr32x13ong8"},{"post_id":"ckdpcluz4003b8sr3tzvh8f3c","tag_id":"ckdpcluxm000j8sr3na3wwzxs","_id":"ckdpclv0100528sr3a550f04r"},{"post_id":"ckdpcluz4003b8sr3tzvh8f3c","tag_id":"ckdpcluyr002k8sr3u0pqtzdn","_id":"ckdpclv0300558sr3pdvsb6i1"},{"post_id":"ckdpcluz5003f8sr3xy3ye3hn","tag_id":"ckdpcluxb00038sr3uti7gqqz","_id":"ckdpclv0400598sr3qe2t415r"},{"post_id":"ckdpcluz7003i8sr3eao2w2t8","tag_id":"ckdpcluxf00088sr3kp8n9tjy","_id":"ckdpclv06005d8sr36o3dmgn5"},{"post_id":"ckdpcluz7003i8sr3eao2w2t8","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpclv08005g8sr3rlevnry8"},{"post_id":"ckdpcluz7003i8sr3eao2w2t8","tag_id":"ckdpcluxm000j8sr3na3wwzxs","_id":"ckdpclv0a005l8sr3jw0oajth"},{"post_id":"ckdpcluz7003i8sr3eao2w2t8","tag_id":"ckdpcluyr002k8sr3u0pqtzdn","_id":"ckdpclv0c005o8sr36nssgik6"},{"post_id":"ckdpcluzb003q8sr30q75gm2k","tag_id":"ckdpcluz5003e8sr34x0049qn","_id":"ckdpclv0e005x8sr3w5hkpoh5"},{"post_id":"ckdpcluzb003q8sr30q75gm2k","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpclv0f005z8sr36q117uho"},{"post_id":"ckdpcluzd003t8sr3qtpggvot","tag_id":"ckdpcluz5003e8sr34x0049qn","_id":"ckdpclv0g00628sr3qbkr8221"},{"post_id":"ckdpcluzd003t8sr3qtpggvot","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpclv0g00648sr3tc3v2vii"},{"post_id":"ckdpcluzf003y8sr3bv6ml0tw","tag_id":"ckdpcluz5003e8sr34x0049qn","_id":"ckdpclv0h00668sr3gloage8s"},{"post_id":"ckdpcluzf003y8sr3bv6ml0tw","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpclv0h00678sr3rcmruc0f"},{"post_id":"ckdpcluy000158sr3gkmlsi1v","tag_id":"ckdpcluza003o8sr3ag8k35gf","_id":"ckdpclv0i00688sr30006v8yi"},{"post_id":"ckdpcluy000158sr3gkmlsi1v","tag_id":"ckdpcluze003w8sr3snppldgw","_id":"ckdpclv0i00698sr3l0bx5ds0"},{"post_id":"ckdpcluzg00418sr3l0hcjwqn","tag_id":"ckdpcluz5003e8sr34x0049qn","_id":"ckdpclv0i006a8sr3kxt6g01n"},{"post_id":"ckdpcluzg00418sr3l0hcjwqn","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpclv0i006b8sr38ga0hiv9"},{"post_id":"ckdpcluzk00458sr3o9dezwh5","tag_id":"ckdpcluz5003e8sr34x0049qn","_id":"ckdpclv0i006c8sr3a7umk36b"},{"post_id":"ckdpcluzk00458sr3o9dezwh5","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpclv0j006d8sr31387u664"},{"post_id":"ckdpcluzn00498sr36o2sy1kt","tag_id":"ckdpcluz5003e8sr34x0049qn","_id":"ckdpclv0j006f8sr35ml3ukyo"},{"post_id":"ckdpcluzn00498sr36o2sy1kt","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpclv0j006g8sr3yogkokle"},{"post_id":"ckdpcluzp004d8sr34d0yjsqh","tag_id":"ckdpcluz5003e8sr34x0049qn","_id":"ckdpclv0j006h8sr3w9npzb69"},{"post_id":"ckdpcluzp004d8sr34d0yjsqh","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpclv0k006i8sr3uzbm54j3"},{"post_id":"ckdpcluzr004h8sr3ukh74qna","tag_id":"ckdpcluz5003e8sr34x0049qn","_id":"ckdpclv0k006k8sr3u0hr9bqw"},{"post_id":"ckdpcluzr004h8sr3ukh74qna","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpclv0k006l8sr3rkrqlqoa"},{"post_id":"ckdpcluzu004o8sr3kakv76u9","tag_id":"ckdpcluz5003e8sr34x0049qn","_id":"ckdpclv0k006m8sr3shqtm9mi"},{"post_id":"ckdpcluzu004o8sr3kakv76u9","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpclv0l006n8sr33cukz0jh"},{"post_id":"ckdpcluy7001g8sr3qpl8niik","tag_id":"ckdpcluzs004k8sr33lrhgog1","_id":"ckdpclv0l006o8sr35hrfu3v0"},{"post_id":"ckdpcluy7001g8sr3qpl8niik","tag_id":"ckdpcluzv004r8sr38fxxuypk","_id":"ckdpclv0l006p8sr3ie4vznjn"},{"post_id":"ckdpcluya001l8sr3h4lgw88m","tag_id":"ckdpcluxf00088sr3kp8n9tjy","_id":"ckdpclv0l006q8sr3ilts5mft"},{"post_id":"ckdpcluya001l8sr3h4lgw88m","tag_id":"ckdpclv0000518sr3cgoqrjnj","_id":"ckdpclv0l006r8sr3rjpjfnxc"},{"post_id":"ckdpcluya001l8sr3h4lgw88m","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpclv0m006s8sr3o4kf3ncc"},{"post_id":"ckdpcluyb001m8sr3gtr4ksnb","tag_id":"ckdpcluxf00088sr3kp8n9tjy","_id":"ckdpclv0m006t8sr33jn19nic"},{"post_id":"ckdpcluyb001m8sr3gtr4ksnb","tag_id":"ckdpclv0000518sr3cgoqrjnj","_id":"ckdpclv0m006u8sr3hgjmxok3"},{"post_id":"ckdpcluyb001m8sr3gtr4ksnb","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpclv0m006v8sr35x29ahi6"},{"post_id":"ckdpcluyd001q8sr3zblyr974","tag_id":"ckdpcluxf00088sr3kp8n9tjy","_id":"ckdpclv0m006w8sr3l968g72x"},{"post_id":"ckdpcluyd001q8sr3zblyr974","tag_id":"ckdpclv0000518sr3cgoqrjnj","_id":"ckdpclv0n006x8sr3ybk6aiwb"},{"post_id":"ckdpcluyd001q8sr3zblyr974","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpclv0n006y8sr3p0o6i7qb"},{"post_id":"ckdpcluyl00268sr3a2314s1c","tag_id":"ckdpclv0c005p8sr38ch0za20","_id":"ckdpclv0n006z8sr3qfx7t5jn"},{"post_id":"ckdpcluyq002h8sr3qboz6pp0","tag_id":"ckdpcluxf00088sr3kp8n9tjy","_id":"ckdpclv0n00708sr3grfsp78n"},{"post_id":"ckdpcluyq002h8sr3qboz6pp0","tag_id":"ckdpclv0000518sr3cgoqrjnj","_id":"ckdpclv0o00718sr3ah152ea5"},{"post_id":"ckdpcluyq002h8sr3qboz6pp0","tag_id":"ckdpcluxi000e8sr39vvsq3sf","_id":"ckdpclv0o00728sr33af8zhmc"},{"post_id":"ckdpcluz9003m8sr3ghtvqvn1","tag_id":"ckdpclv0c005p8sr38ch0za20","_id":"ckdpclv0o00738sr31nlc6fpq"},{"post_id":"ckdpclv09005j8sr3gt8d62oi","tag_id":"ckdpclv0h00658sr3iw7r0n14","_id":"ckdpclv0o00748sr38hb0fd8f"},{"post_id":"ckeus8hxn00003jf0eedjqkg5","tag_id":"ckdpcluyz002z8sr3um1rof2d","_id":"ckeus8hy100023jf0j56mk31f"},{"post_id":"ckeus8hxx00013jf0m5l13uof","tag_id":"ckdpcluyz002z8sr3um1rof2d","_id":"ckeus8hy400043jf0wktx0m9w"},{"post_id":"ckeus8hy200033jf0q1s0ndjg","tag_id":"ckdpcluyz002z8sr3um1rof2d","_id":"ckeus8hy600073jf0s830wqmq"},{"post_id":"ckeus8hy500053jf08v53yj88","tag_id":"ckdpcluyz002z8sr3um1rof2d","_id":"ckeus8hy8000a3jf06szxv2to"},{"post_id":"ckeus8hy600083jf0ecc5wwxj","tag_id":"ckdpcluyz002z8sr3um1rof2d","_id":"ckeus8hy9000c3jf0y5cyyjkn"},{"post_id":"ckeus8hy600083jf0ecc5wwxj","tag_id":"ckdpcluz5003e8sr34x0049qn","_id":"ckeus8hy9000e3jf0h7xoq2t4"},{"post_id":"ckf5114xv0000grf0culrjtnm","tag_id":"ckdpcluze003w8sr3snppldgw","_id":"ckf5114yi0001grf0eedq7xgs"}],"Tag":[{"name":"Unity学习","_id":"ckdpcluxb00038sr3uti7gqqz"},{"name":"Python","_id":"ckdpcluxf00088sr3kp8n9tjy"},{"name":"Note","_id":"ckdpcluxi000e8sr39vvsq3sf"},{"name":"Django","_id":"ckdpcluxm000j8sr3na3wwzxs"},{"name":"C++","_id":"ckdpcluxq000p8sr3sskk8ops"},{"name":"Conda","_id":"ckdpcluy9001i8sr3ua6jbpmy"},{"name":"实例","_id":"ckdpcluyr002k8sr3u0pqtzdn"},{"name":"Game","_id":"ckdpcluyz002z8sr3um1rof2d"},{"name":"English","_id":"ckdpcluz5003e8sr34x0049qn"},{"name":"Jenkins","_id":"ckdpcluza003o8sr3ag8k35gf"},{"name":"CI","_id":"ckdpcluze003w8sr3snppldgw"},{"name":"linux","_id":"ckdpcluzs004k8sr33lrhgog1"},{"name":"指令","_id":"ckdpcluzv004r8sr38fxxuypk"},{"name":"Core Programming","_id":"ckdpclv0000518sr3cgoqrjnj"},{"name":"Git","_id":"ckdpclv0c005p8sr38ch0za20"},{"name":"图形学","_id":"ckdpclv0h00658sr3iw7r0n14"}]}}